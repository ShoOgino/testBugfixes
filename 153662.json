{"path":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","commits":[{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = segmentInfos.files(dir, true);\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      files = segmentInfos.files(dir, true);\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = segmentInfos.files(dir, true);\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = segmentInfos.files(dir, true);\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d15dac98087f81e412a672d2d088dc456d7900","date":1301074389,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = segmentInfos.files(dir, true);\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      files = segmentInfos.files(dir, true);\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = segmentInfos.files(dir, true);\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = segmentInfos.files(dir, true);\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca791416b7d9cc876025db4aea7ec799e8167c0e","date":1308701127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_FLEX < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_FLEX < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_FLEX < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_FLEX < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aa91b365d4819eed673110a366d7ce611fdab1b","date":1308730304,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_FLEX < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_FLEX < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_FLEX < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_FLEX < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", TextField.TYPE_STORED, \"d1 first field\"));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", TextField.TYPE_STORED));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", TextField.TYPE_STORED, \"d1 first field\"));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", TextField.TYPE_STORED));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"_1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", TextField.TYPE_STORED));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"319624eb66a10b717d3e66af448543e7dc5c479d","date":1322741556,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testFilesOnOldIndex().mjava","sourceNew":null,"sourceOld":"  public void testFilesOnOldIndex() throws IOException {\n    int i = random.nextInt(oldNames.length);\n    File oldIndxeDir = _TestUtil.getTempDir(oldNames[i]);\n    Directory dir = null;\n    \n    MergePolicy policy = random.nextBoolean() ? NoMergePolicy.COMPOUND_FILES : NoMergePolicy.NO_COMPOUND_FILES;\n    try {\n      _TestUtil\n          .unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndxeDir);\n      dir = newFSDirectory(oldIndxeDir);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(policy));\n      SegmentInfos segmentInfos = writer.segmentInfos;\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      for (String string : writer.getIndexFileNames()) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.commit();\n      \n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getGlobalFieldMapVersion());\n      Collection<String> files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", TextField.TYPE_STORED));\n      writer.addDocument(d);\n      writer.prepareCommit();\n      // the fnx file should still be under control of the SIS\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(0, segmentInfos.getLastGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      \n      writer.commit();\n      \n      // now we should see the fnx file even if this is a 3.x segment\n      assertTrue(DefaultSegmentInfosWriter.FORMAT_4_0 < segmentInfos.getFormat());\n      assertEquals(1, segmentInfos.getGlobalFieldMapVersion());\n      assertEquals(1, segmentInfos.getLastGlobalFieldMapVersion());\n      files = writer.getIndexFileNames();\n      assertTrue(files.remove(\"_1.fnx\"));\n      for (String string : files) {\n        assertFalse(string.endsWith(\".fnx\"));\n      }\n      writer.close();\n    } finally {\n      if (dir != null)\n        dir.close();\n      _TestUtil.rmDir(oldIndxeDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"12d15dac98087f81e412a672d2d088dc456d7900":["1224a4027481acce15495b03bce9b48b93b42722"],"7b91922b55d15444d554721b352861d028eb8278":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12d15dac98087f81e412a672d2d088dc456d7900"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["12d15dac98087f81e412a672d2d088dc456d7900"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12d15dac98087f81e412a672d2d088dc456d7900"],"a3776dccca01c11e7046323cfad46a3b4a471233":["12d15dac98087f81e412a672d2d088dc456d7900","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"319624eb66a10b717d3e66af448543e7dc5c479d":["7b91922b55d15444d554721b352861d028eb8278"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4aa91b365d4819eed673110a366d7ce611fdab1b"],"4aa91b365d4819eed673110a366d7ce611fdab1b":["ca791416b7d9cc876025db4aea7ec799e8167c0e"],"ca791416b7d9cc876025db4aea7ec799e8167c0e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["319624eb66a10b717d3e66af448543e7dc5c479d"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1224a4027481acce15495b03bce9b48b93b42722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"12d15dac98087f81e412a672d2d088dc456d7900":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"7b91922b55d15444d554721b352861d028eb8278":["319624eb66a10b717d3e66af448543e7dc5c479d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","ca791416b7d9cc876025db4aea7ec799e8167c0e"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","1224a4027481acce15495b03bce9b48b93b42722"],"319624eb66a10b717d3e66af448543e7dc5c479d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"4aa91b365d4819eed673110a366d7ce611fdab1b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ca791416b7d9cc876025db4aea7ec799e8167c0e":["4aa91b365d4819eed673110a366d7ce611fdab1b"],"1224a4027481acce15495b03bce9b48b93b42722":["12d15dac98087f81e412a672d2d088dc456d7900"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}