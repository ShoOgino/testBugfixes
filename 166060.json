{"path":"src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","commits":[{"id":"4275990669802f4c50b4de5d3252a0987854ad68","date":1260360486,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","pathOld":"contrib/collation/src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(termAtt.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(termAtt.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb6255bc49ccd64debd0b43ca8d2f835df0faa07","date":1262510560,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","pathOld":"src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      int encodedLength = IndexableBinaryStringTools.getEncodedLength(\n          collationKey, 0, collationKey.length);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      IndexableBinaryStringTools.encode(collationKey, 0, collationKey.length,\n          termAtt.termBuffer(), 0, encodedLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(termAtt.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","pathOld":"src/java/org/apache/lucene/collation/CollationKeyFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      int encodedLength = IndexableBinaryStringTools.getEncodedLength(\n          collationKey, 0, collationKey.length);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      IndexableBinaryStringTools.encode(collationKey, 0, collationKey.length,\n          termAtt.termBuffer(), 0, encodedLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      int encodedLength = IndexableBinaryStringTools.getEncodedLength(\n          collationKey, 0, collationKey.length);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      IndexableBinaryStringTools.encode(collationKey, 0, collationKey.length,\n          termAtt.termBuffer(), 0, encodedLength);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["4275990669802f4c50b4de5d3252a0987854ad68"],"4275990669802f4c50b4de5d3252a0987854ad68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"]},"commit2Childs":{"fb6255bc49ccd64debd0b43ca8d2f835df0faa07":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4275990669802f4c50b4de5d3252a0987854ad68":["fb6255bc49ccd64debd0b43ca8d2f835df0faa07"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4275990669802f4c50b4de5d3252a0987854ad68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}