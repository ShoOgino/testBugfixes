{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#fixRequiredProps(Map[String,Object]).mjava","commits":[{"id":"3ea07d22cef2406e950de111f8aa7bc2edb91d56","date":1581094599,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#fixRequiredProps(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public static void fixRequiredProps(Map<String, Object> testData) {\n    Map<String, Object> clusterState = (Map<String, Object>) testData.get(\"clusterstate\");\n    clusterState.forEach((collection, val) -> {\n      Map<String, Object> docColl = (Map<String, Object>) val;\n      Map<String, Object> shards = (Map<String, Object>) docColl.get(\"shards\");\n      shards.forEach((shardName, val2) -> {\n        Map<String, Object> shard = (Map<String, Object>) val2;\n        Map<String, Object> replicas = (Map<String, Object>) shard.get(\"replicas\");\n        replicas.forEach((coreNode, val3) -> {\n          Map<String, Object> replica = (Map<String, Object>) val3;\n          if (!replica.containsKey(\"node_name\")) {\n            replica.put(\"node_name\", \"node1\");\n          }\n          if (!replica.containsKey(\"core\")) {\n            replica.put(\"core\", \"core_\" + coreNode);\n          }\n        });\n      });\n    });\n    Map<String, Object> replicaInfo = (Map<String, Object>) testData.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          l3.forEach(o -> {\n            Map replica = (Map) o;\n            String coreNode = replica.keySet().iterator().next().toString();\n            replica = (Map) replica.get(coreNode);\n            if (!replica.containsKey(\"node_name\")) {\n              replica.put(\"node_name\", \"node1\");\n            }\n            if (!replica.containsKey(\"core\")) {\n              replica.put(\"core\", \"core_\" + coreNode);\n            }\n          });\n        });\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#fixRequiredProps(Map[String,Object]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#fixRequiredProps(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static void fixRequiredProps(Map<String, Object> testData) {\n    Map<String, Object> clusterState = (Map<String, Object>) testData.get(\"clusterstate\");\n    clusterState.forEach((collection, val) -> {\n      Map<String, Object> docColl = (Map<String, Object>) val;\n      Map<String, Object> shards = (Map<String, Object>) docColl.get(\"shards\");\n      shards.forEach((shardName, val2) -> {\n        Map<String, Object> shard = (Map<String, Object>) val2;\n        Map<String, Object> replicas = (Map<String, Object>) shard.get(\"replicas\");\n        replicas.forEach((coreNode, val3) -> {\n          Map<String, Object> replica = (Map<String, Object>) val3;\n          if (!replica.containsKey(\"node_name\")) {\n            replica.put(\"node_name\", \"node1\");\n          }\n          if (!replica.containsKey(\"core\")) {\n            replica.put(\"core\", \"core_\" + coreNode);\n          }\n        });\n      });\n    });\n    Map<String, Object> replicaInfo = (Map<String, Object>) testData.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          l3.forEach(o -> {\n            Map replica = (Map) o;\n            String coreNode = replica.keySet().iterator().next().toString();\n            replica = (Map) replica.get(coreNode);\n            if (!replica.containsKey(\"node_name\")) {\n              replica.put(\"node_name\", \"node1\");\n            }\n            if (!replica.containsKey(\"core\")) {\n              replica.put(\"core\", \"core_\" + coreNode);\n            }\n          });\n        });\n      });\n    });\n  }\n\n","sourceOld":"  public static void fixRequiredProps(Map<String, Object> testData) {\n    Map<String, Object> clusterState = (Map<String, Object>) testData.get(\"clusterstate\");\n    clusterState.forEach((collection, val) -> {\n      Map<String, Object> docColl = (Map<String, Object>) val;\n      Map<String, Object> shards = (Map<String, Object>) docColl.get(\"shards\");\n      shards.forEach((shardName, val2) -> {\n        Map<String, Object> shard = (Map<String, Object>) val2;\n        Map<String, Object> replicas = (Map<String, Object>) shard.get(\"replicas\");\n        replicas.forEach((coreNode, val3) -> {\n          Map<String, Object> replica = (Map<String, Object>) val3;\n          if (!replica.containsKey(\"node_name\")) {\n            replica.put(\"node_name\", \"node1\");\n          }\n          if (!replica.containsKey(\"core\")) {\n            replica.put(\"core\", \"core_\" + coreNode);\n          }\n        });\n      });\n    });\n    Map<String, Object> replicaInfo = (Map<String, Object>) testData.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          l3.forEach(o -> {\n            Map replica = (Map) o;\n            String coreNode = replica.keySet().iterator().next().toString();\n            replica = (Map) replica.get(coreNode);\n            if (!replica.containsKey(\"node_name\")) {\n              replica.put(\"node_name\", \"node1\");\n            }\n            if (!replica.containsKey(\"core\")) {\n              replica.put(\"core\", \"core_\" + coreNode);\n            }\n          });\n        });\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#fixRequiredProps(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static void fixRequiredProps(Map<String, Object> testData) {\n    Map<String, Object> clusterState = (Map<String, Object>) testData.get(\"clusterstate\");\n    clusterState.forEach((collection, val) -> {\n      Map<String, Object> docColl = (Map<String, Object>) val;\n      Map<String, Object> shards = (Map<String, Object>) docColl.get(\"shards\");\n      shards.forEach((shardName, val2) -> {\n        Map<String, Object> shard = (Map<String, Object>) val2;\n        Map<String, Object> replicas = (Map<String, Object>) shard.get(\"replicas\");\n        replicas.forEach((coreNode, val3) -> {\n          Map<String, Object> replica = (Map<String, Object>) val3;\n          if (!replica.containsKey(\"node_name\")) {\n            replica.put(\"node_name\", \"node1\");\n          }\n          if (!replica.containsKey(\"core\")) {\n            replica.put(\"core\", \"core_\" + coreNode);\n          }\n        });\n      });\n    });\n    Map<String, Object> replicaInfo = (Map<String, Object>) testData.get(\"replicaInfo\");\n    replicaInfo.forEach((node, val) -> {\n      Map m1 = (Map) val;\n      m1.forEach((coll, val2) -> {\n        Map m2 = (Map) val2;\n        m2.forEach((shard, val3) -> {\n          List l3 = (List) val3;\n          l3.forEach(o -> {\n            Map replica = (Map) o;\n            String coreNode = replica.keySet().iterator().next().toString();\n            replica = (Map) replica.get(coreNode);\n            if (!replica.containsKey(\"node_name\")) {\n              replica.put(\"node_name\", \"node1\");\n            }\n            if (!replica.containsKey(\"core\")) {\n              replica.put(\"core\", \"core_\" + coreNode);\n            }\n          });\n        });\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}