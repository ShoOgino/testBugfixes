{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#analyzeMultitermTerm(String,String,Analyzer).mjava","commits":[{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#analyzeMultitermTerm(String,String,Analyzer).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#analyzeRangePart(String,String).mjava","sourceNew":"  protected BytesRef analyzeMultitermTerm(String field, String part, Analyzer analyzerIn) {\n    TokenStream source;\n\n    if (analyzerIn == null) analyzerIn = analyzer;\n\n    try {\n      source = analyzerIn.tokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n    \n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","sourceOld":"  private BytesRef analyzeRangePart(String field, String part) {\n    TokenStream source;\n      \n    try {\n      source = analyzer.tokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze range part: \" + part, e);\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for range part: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for range part: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing range part: \" + part, e);\n    }\n    \n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#analyzeMultitermTerm(String,String,Analyzer).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#analyzeMultitermTerm(String,String,Analyzer).mjava","sourceNew":"  protected BytesRef analyzeMultitermTerm(String field, String part, Analyzer analyzerIn) {\n    TokenStream source;\n\n    if (analyzerIn == null) analyzerIn = analyzer;\n\n    try {\n      source = analyzerIn.tokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n    \n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","sourceOld":"  protected BytesRef analyzeMultitermTerm(String field, String part, Analyzer analyzerIn) {\n    TokenStream source;\n\n    if (analyzerIn == null) analyzerIn = analyzer;\n\n    try {\n      source = analyzerIn.tokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n      \n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw new IllegalArgumentException(\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new RuntimeException(\"error analyzing range part: \" + part, e);\n    }\n      \n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n    \n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8d5405ac4f2510f9f83e07236792d1056c19640":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}