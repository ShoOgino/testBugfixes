{"path":"src/test/org/apache/lucene/index/TestIndexReader#testDeleteReaderWriterConflict().mjava","commits":[{"id":"415d1a49e59f29b9dd6b2b1c1291c8a134ada95a","date":1063629469,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDeleteReaderWriterConflict().mjava","pathOld":"/dev/null","sourceNew":"    public void testDeleteReaderWriterConflict()\n    {\n        Directory dir = new RAMDirectory();\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Searcher searcher = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        Hits hits = null;\n\n        try\n        {\n            //  add 100 documents with term : aaa\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n            for (int i = 0; i < 100; i++)\n            {\n                addDoc(writer, \"aaa\");\n            }\n            writer.close();\n            reader = IndexReader.open(dir);\n\n            //  add 100 documents with term : bbb\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            for (int i = 0; i < 100; i++)\n            {\n                addDoc(writer, \"bbb\");\n            }\n            writer.optimize();\n            writer.close();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n\n        try\n        {\n            // delete documents containing term: aaa\n            reader.delete(searchTerm);\n            reader.close();\n        }\n        catch (IOException e)\n        {\n            try\n            {\n                // if reader throws IOException try once more to delete documents with a new reader\n                reader.close();\n                reader = IndexReader.open(dir);\n                reader.delete(searchTerm);\n                reader.close();\n            }\n            catch (IOException e1)\n            {\n                e1.printStackTrace();\n            }\n        }\n\n        try\n        {\n            searcher = new IndexSearcher(dir);\n            hits = searcher.search(new TermQuery(searchTerm));\n            assertEquals(0, hits.length());\n            searcher.close();\n        }\n        catch (IOException e1)\n        {\n            e1.printStackTrace();\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab868ed766616ebbbba2e7645d01945520e0b6c","date":1064526173,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDeleteReaderWriterConflict().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDeleteReaderWriterConflict().mjava","sourceNew":"    public void testDeleteReaderWriterConflict() throws IOException\n    {\n        //Directory dir = new RAMDirectory();\n        Directory dir = FSDirectory.getDirectory(\"testIndex\", true);\n            \n        Term searchTerm = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n\n        //  add 100 documents with term : aaa\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n        \n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        IndexReader reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n        // add 100 documents with term : bbb\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm2.text());\n        }\n        \n        // REQUEST OPTIMIZATION\n        // This causes a new segment to become current for all subsequent\n        // searchers. Because of this, deletions made via a previously open\n        // reader, which would be applied to that reader's segment, are lost\n        // for subsequent searchers/readers\n        writer.optimize();\n        writer.close();\n\n        // The reader should not see the new data\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n        \n        \n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        // NOTE: the reader was created when only \"aaa\" documents were in\n        int deleted = 0;\n        try {\n            deleted = reader.delete(searchTerm);\n            fail(\"Delete allowed on an index reader with stale segment information\");\n        } catch (IOException e) {\n            /* success */\n        }\n        \n        // Re-open index reader and try again. This time it should see \n        // the new data.\n        reader.close();\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 100);\n        \n        deleted = reader.delete(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n    }\n\n","sourceOld":"    public void testDeleteReaderWriterConflict()\n    {\n        Directory dir = new RAMDirectory();\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Searcher searcher = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        Hits hits = null;\n\n        try\n        {\n            //  add 100 documents with term : aaa\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n            for (int i = 0; i < 100; i++)\n            {\n                addDoc(writer, \"aaa\");\n            }\n            writer.close();\n            reader = IndexReader.open(dir);\n\n            //  add 100 documents with term : bbb\n            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n            for (int i = 0; i < 100; i++)\n            {\n                addDoc(writer, \"bbb\");\n            }\n            writer.optimize();\n            writer.close();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n\n        try\n        {\n            // delete documents containing term: aaa\n            reader.delete(searchTerm);\n            reader.close();\n        }\n        catch (IOException e)\n        {\n            try\n            {\n                // if reader throws IOException try once more to delete documents with a new reader\n                reader.close();\n                reader = IndexReader.open(dir);\n                reader.delete(searchTerm);\n                reader.close();\n            }\n            catch (IOException e1)\n            {\n                e1.printStackTrace();\n            }\n        }\n\n        try\n        {\n            searcher = new IndexSearcher(dir);\n            hits = searcher.search(new TermQuery(searchTerm));\n            assertEquals(0, hits.length());\n            searcher.close();\n        }\n        catch (IOException e1)\n        {\n            e1.printStackTrace();\n        }\n    }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96","date":1066874526,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDeleteReaderWriterConflict().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDeleteReaderWriterConflict().mjava","sourceNew":"    public void testDeleteReaderWriterConflict() throws IOException\n    {\n        //Directory dir = new RAMDirectory();\n        Directory dir = getDirectory(true);\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n\n        //  add 100 documents with term : aaa\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        IndexReader reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n        // add 100 documents with term : bbb\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm2.text());\n        }\n\n        // REQUEST OPTIMIZATION\n        // This causes a new segment to become current for all subsequent\n        // searchers. Because of this, deletions made via a previously open\n        // reader, which would be applied to that reader's segment, are lost\n        // for subsequent searchers/readers\n        writer.optimize();\n        writer.close();\n\n        // The reader should not see the new data\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        // NOTE: the reader was created when only \"aaa\" documents were in\n        int deleted = 0;\n        try {\n            deleted = reader.delete(searchTerm);\n            fail(\"Delete allowed on an index reader with stale segment information\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // Re-open index reader and try again. This time it should see\n        // the new data.\n        reader.close();\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 100);\n\n        deleted = reader.delete(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n    }\n\n","sourceOld":"    public void testDeleteReaderWriterConflict() throws IOException\n    {\n        //Directory dir = new RAMDirectory();\n        Directory dir = FSDirectory.getDirectory(\"testIndex\", true);\n            \n        Term searchTerm = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n\n        //  add 100 documents with term : aaa\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n        \n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        IndexReader reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n        // add 100 documents with term : bbb\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm2.text());\n        }\n        \n        // REQUEST OPTIMIZATION\n        // This causes a new segment to become current for all subsequent\n        // searchers. Because of this, deletions made via a previously open\n        // reader, which would be applied to that reader's segment, are lost\n        // for subsequent searchers/readers\n        writer.optimize();\n        writer.close();\n\n        // The reader should not see the new data\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n        \n        \n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        // NOTE: the reader was created when only \"aaa\" documents were in\n        int deleted = 0;\n        try {\n            deleted = reader.delete(searchTerm);\n            fail(\"Delete allowed on an index reader with stale segment information\");\n        } catch (IOException e) {\n            /* success */\n        }\n        \n        // Re-open index reader and try again. This time it should see \n        // the new data.\n        reader.close();\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 100);\n        \n        deleted = reader.delete(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":5,"author":"Christoph Goller","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#deleteReaderWriterConflict(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDeleteReaderWriterConflict().mjava","sourceNew":"    private void deleteReaderWriterConflict(boolean optimize) throws IOException\n    {\n        //Directory dir = new RAMDirectory();\n        Directory dir = getDirectory(true);\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n\n        //  add 100 documents with term : aaa\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        IndexReader reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n        // add 100 documents with term : bbb\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm2.text());\n        }\n\n        // REQUEST OPTIMIZATION\n        // This causes a new segment to become current for all subsequent\n        // searchers. Because of this, deletions made via a previously open\n        // reader, which would be applied to that reader's segment, are lost\n        // for subsequent searchers/readers\n        if(optimize)\n          writer.optimize();\n        writer.close();\n\n        // The reader should not see the new data\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        // NOTE: the reader was created when only \"aaa\" documents were in\n        int deleted = 0;\n        try {\n            deleted = reader.delete(searchTerm);\n            fail(\"Delete allowed on an index reader with stale segment information\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // Re-open index reader and try again. This time it should see\n        // the new data.\n        reader.close();\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 100);\n\n        deleted = reader.delete(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n    }\n\n","sourceOld":"    public void testDeleteReaderWriterConflict() throws IOException\n    {\n        //Directory dir = new RAMDirectory();\n        Directory dir = getDirectory(true);\n\n        Term searchTerm = new Term(\"content\", \"aaa\");\n        Term searchTerm2 = new Term(\"content\", \"bbb\");\n\n        //  add 100 documents with term : aaa\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        // OPEN READER AT THIS POINT - this should fix the view of the\n        // index at the point of having 100 \"aaa\" documents and 0 \"bbb\"\n        IndexReader reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n        // add 100 documents with term : bbb\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n        for (int i = 0; i < 100; i++)\n        {\n            addDoc(writer, searchTerm2.text());\n        }\n\n        // REQUEST OPTIMIZATION\n        // This causes a new segment to become current for all subsequent\n        // searchers. Because of this, deletions made via a previously open\n        // reader, which would be applied to that reader's segment, are lost\n        // for subsequent searchers/readers\n        writer.optimize();\n        writer.close();\n\n        // The reader should not see the new data\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 0, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 0);\n\n\n        // DELETE DOCUMENTS CONTAINING TERM: aaa\n        // NOTE: the reader was created when only \"aaa\" documents were in\n        int deleted = 0;\n        try {\n            deleted = reader.delete(searchTerm);\n            fail(\"Delete allowed on an index reader with stale segment information\");\n        } catch (IOException e) {\n            /* success */\n        }\n\n        // Re-open index reader and try again. This time it should see\n        // the new data.\n        reader.close();\n        reader = IndexReader.open(dir);\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"first docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"first reader\", reader, searchTerm, 100);\n        assertTermDocsCount(\"first reader\", reader, searchTerm2, 100);\n\n        deleted = reader.delete(searchTerm);\n        assertEquals(\"deleted count\", 100, deleted);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n\n        // CREATE A NEW READER and re-test\n        reader = IndexReader.open(dir);\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm));\n        assertEquals(\"deleted docFreq\", 100, reader.docFreq(searchTerm2));\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm, 0);\n        assertTermDocsCount(\"deleted termDocs\", reader, searchTerm2, 100);\n        reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"415d1a49e59f29b9dd6b2b1c1291c8a134ada95a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ab868ed766616ebbbba2e7645d01945520e0b6c":["415d1a49e59f29b9dd6b2b1c1291c8a134ada95a"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["1ab868ed766616ebbbba2e7645d01945520e0b6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"]},"commit2Childs":{"415d1a49e59f29b9dd6b2b1c1291c8a134ada95a":["1ab868ed766616ebbbba2e7645d01945520e0b6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415d1a49e59f29b9dd6b2b1c1291c8a134ada95a"],"1ab868ed766616ebbbba2e7645d01945520e0b6c":["2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2d89e61c011dc9425aed9f3fd43a1c0c50ca7f96":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}