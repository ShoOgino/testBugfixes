{"path":"src/common/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","commits":[{"id":"8281d815c10235e2dab9ded85615ebe920dd3c22","date":1243323879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","pathOld":"/dev/null","sourceNew":"  public static byte[] base64ToByteArray(String s) {\n    byte[] alphaToInt = base64ToInt;\n    int sLen = s.length();\n    int numGroups = sLen / 4;\n    if (4 * numGroups != sLen)\n      throw new IllegalArgumentException(\n              \"String length must be a multiple of four.\");\n    int missingBytesInLastGroup = 0;\n    int numFullGroups = numGroups;\n    if (sLen != 0) {\n      if (s.charAt(sLen - 1) == '=') {\n        missingBytesInLastGroup++;\n        numFullGroups--;\n      }\n      if (s.charAt(sLen - 2) == '=')\n        missingBytesInLastGroup++;\n    }\n    byte[] result = new byte[3 * numGroups - missingBytesInLastGroup];\n\n    // Translate all full groups from base64 to byte array elements\n    int inCursor = 0, outCursor = 0;\n    for (int i = 0; i < numFullGroups; i++) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch3 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n      result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      result[outCursor++] = (byte) ((ch2 << 6) | ch3);\n    }\n\n    // Translate partial group, if present\n    if (missingBytesInLastGroup != 0) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n\n      if (missingBytesInLastGroup == 1) {\n        int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n        result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      }\n    }\n    // assert inCursor == s.length()-missingBytesInLastGroup;\n    // assert outCursor == result.length;\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","pathOld":"src/common/org/apache/solr/common/util/Base64#base64ToByteArray(String).mjava","sourceNew":"  public static byte[] base64ToByteArray(String s) {\n    byte[] alphaToInt = base64ToInt;\n    int sLen = s.length();\n    int numGroups = sLen / 4;\n    if (4 * numGroups != sLen)\n      throw new IllegalArgumentException(\n              \"String length must be a multiple of four.\");\n    int missingBytesInLastGroup = 0;\n    int numFullGroups = numGroups;\n    if (sLen != 0) {\n      if (s.charAt(sLen - 1) == '=') {\n        missingBytesInLastGroup++;\n        numFullGroups--;\n      }\n      if (s.charAt(sLen - 2) == '=')\n        missingBytesInLastGroup++;\n    }\n    byte[] result = new byte[3 * numGroups - missingBytesInLastGroup];\n\n    // Translate all full groups from base64 to byte array elements\n    int inCursor = 0, outCursor = 0;\n    for (int i = 0; i < numFullGroups; i++) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch3 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n      result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      result[outCursor++] = (byte) ((ch2 << 6) | ch3);\n    }\n\n    // Translate partial group, if present\n    if (missingBytesInLastGroup != 0) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n\n      if (missingBytesInLastGroup == 1) {\n        int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n        result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      }\n    }\n    // assert inCursor == s.length()-missingBytesInLastGroup;\n    // assert outCursor == result.length;\n    return result;\n  }\n\n","sourceOld":"  public static byte[] base64ToByteArray(String s) {\n    byte[] alphaToInt = base64ToInt;\n    int sLen = s.length();\n    int numGroups = sLen / 4;\n    if (4 * numGroups != sLen)\n      throw new IllegalArgumentException(\n              \"String length must be a multiple of four.\");\n    int missingBytesInLastGroup = 0;\n    int numFullGroups = numGroups;\n    if (sLen != 0) {\n      if (s.charAt(sLen - 1) == '=') {\n        missingBytesInLastGroup++;\n        numFullGroups--;\n      }\n      if (s.charAt(sLen - 2) == '=')\n        missingBytesInLastGroup++;\n    }\n    byte[] result = new byte[3 * numGroups - missingBytesInLastGroup];\n\n    // Translate all full groups from base64 to byte array elements\n    int inCursor = 0, outCursor = 0;\n    for (int i = 0; i < numFullGroups; i++) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch3 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n      result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      result[outCursor++] = (byte) ((ch2 << 6) | ch3);\n    }\n\n    // Translate partial group, if present\n    if (missingBytesInLastGroup != 0) {\n      int ch0 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      int ch1 = base64toInt(s.charAt(inCursor++), alphaToInt);\n      result[outCursor++] = (byte) ((ch0 << 2) | (ch1 >> 4));\n\n      if (missingBytesInLastGroup == 1) {\n        int ch2 = base64toInt(s.charAt(inCursor++), alphaToInt);\n        result[outCursor++] = (byte) ((ch1 << 4) | (ch2 >> 2));\n      }\n    }\n    // assert inCursor == s.length()-missingBytesInLastGroup;\n    // assert outCursor == result.length;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8281d815c10235e2dab9ded85615ebe920dd3c22":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"8281d815c10235e2dab9ded85615ebe920dd3c22":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}