{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","commits":[{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // Try to fetch the first in-memory child.\n      if (!knownChildren.isEmpty()) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (lastWatcher != null && !isDirty) {\n        // No children, no known updates, and a watcher is already set; nothing we can do.\n        return null;\n      }\n\n      // Try to fetch an updated list of children from ZK.\n      ChildWatcher newWatcher = new ChildWatcher();\n      knownChildren = fetchZkChildren(newWatcher);\n      lastWatcher = newWatcher; // only set after fetchZkChildren returns successfully\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      notEmpty.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6321195fe07e4a4627b4f36c48221de10cb6c26e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7fd147f6ec145b926803480f62aa12e2aad258e","date":1465448343,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // If we're not in a dirty state, and we have in-memory children, return from in-memory.\n      if (lastWatcher != null && !knownChildren.isEmpty()) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      // Try to fetch an updated list of children from ZK.\n      ChildWatcher newWatcher = new ChildWatcher();\n      knownChildren = fetchZkChildren(newWatcher);\n      lastWatcher = newWatcher; // only set after fetchZkChildren returns successfully\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // Try to fetch the first in-memory child.\n      if (!knownChildren.isEmpty()) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (lastWatcher != null && !isDirty) {\n        // No children, no known updates, and a watcher is already set; nothing we can do.\n        return null;\n      }\n\n      // Try to fetch an updated list of children from ZK.\n      ChildWatcher newWatcher = new ChildWatcher();\n      knownChildren = fetchZkChildren(newWatcher);\n      lastWatcher = newWatcher; // only set after fetchZkChildren returns successfully\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      notEmpty.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":["6321195fe07e4a4627b4f36c48221de10cb6c26e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77c9633f72998c3815ffe21baa5f16d6e50f1e4a","date":1465453043,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // If we're not in a dirty state, and we have in-memory children, return from in-memory.\n      if (lastWatcher != null && !knownChildren.isEmpty()) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      // Try to fetch an updated list of children from ZK.\n      ChildWatcher newWatcher = new ChildWatcher();\n      knownChildren = fetchZkChildren(newWatcher);\n      lastWatcher = newWatcher; // only set after fetchZkChildren returns successfully\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // Try to fetch the first in-memory child.\n      if (!knownChildren.isEmpty()) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (lastWatcher != null && !isDirty) {\n        // No children, no known updates, and a watcher is already set; nothing we can do.\n        return null;\n      }\n\n      // Try to fetch an updated list of children from ZK.\n      ChildWatcher newWatcher = new ChildWatcher();\n      knownChildren = fetchZkChildren(newWatcher);\n      lastWatcher = newWatcher; // only set after fetchZkChildren returns successfully\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      notEmpty.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // If we're not in a dirty state, and we have in-memory children, return from in-memory.\n      if (lastWatcher != null && !knownChildren.isEmpty()) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      // Try to fetch an updated list of children from ZK.\n      ChildWatcher newWatcher = new ChildWatcher();\n      knownChildren = fetchZkChildren(newWatcher);\n      lastWatcher = newWatcher; // only set after fetchZkChildren returns successfully\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // Try to fetch the first in-memory child.\n      if (!knownChildren.isEmpty()) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (lastWatcher != null && !isDirty) {\n        // No children, no known updates, and a watcher is already set; nothing we can do.\n        return null;\n      }\n\n      // Try to fetch an updated list of children from ZK.\n      ChildWatcher newWatcher = new ChildWatcher();\n      knownChildren = fetchZkChildren(newWatcher);\n      lastWatcher = newWatcher; // only set after fetchZkChildren returns successfully\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      notEmpty.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6321195fe07e4a4627b4f36c48221de10cb6c26e","date":1492541055,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      if (!isDirty) {\n        // If we're not in a dirty state...\n        if (!knownChildren.isEmpty()) {\n          // and we have in-memory children, return from in-memory.\n          return remove ? knownChildren.pollFirst() : knownChildren.first();\n        } else {\n          // otherwise there's nothing to return\n          return null;\n        }\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // If we're not in a dirty state, and we have in-memory children, return from in-memory.\n      if (lastWatcher != null && !knownChildren.isEmpty()) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      // Try to fetch an updated list of children from ZK.\n      ChildWatcher newWatcher = new ChildWatcher();\n      knownChildren = fetchZkChildren(newWatcher);\n      lastWatcher = newWatcher; // only set after fetchZkChildren returns successfully\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":["2a282020d6c9a4ea32a359539e283e4771a2fda8","f7fd147f6ec145b926803480f62aa12e2aad258e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      if (!isDirty) {\n        // If we're not in a dirty state...\n        if (!knownChildren.isEmpty()) {\n          // and we have in-memory children, return from in-memory.\n          return remove ? knownChildren.pollFirst() : knownChildren.first();\n        } else {\n          // otherwise there's nothing to return\n          return null;\n        }\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // If we're not in a dirty state, and we have in-memory children, return from in-memory.\n      if (lastWatcher != null && !knownChildren.isEmpty()) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      // Try to fetch an updated list of children from ZK.\n      ChildWatcher newWatcher = new ChildWatcher();\n      knownChildren = fetchZkChildren(newWatcher);\n      lastWatcher = newWatcher; // only set after fetchZkChildren returns successfully\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"282a69d7d427c265f321423b5a3f989aa16dab10","date":1494313009,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      if (!isDirty) {\n        // If we're not in a dirty state...\n        if (!knownChildren.isEmpty()) {\n          // and we have in-memory children, return from in-memory.\n          return remove ? knownChildren.pollFirst() : knownChildren.first();\n        } else {\n          // otherwise there's nothing to return\n          return null;\n        }\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      if (!isDirty) {\n        // If we're not in a dirty state...\n        if (!knownChildren.isEmpty()) {\n          // and we have in-memory children, return from in-memory.\n          return remove ? knownChildren.pollFirst() : knownChildren.first();\n        } else {\n          // otherwise there's nothing to return\n          return null;\n        }\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","282a69d7d427c265f321423b5a3f989aa16dab10"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"282a69d7d427c265f321423b5a3f989aa16dab10":["6321195fe07e4a4627b4f36c48221de10cb6c26e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["2a282020d6c9a4ea32a359539e283e4771a2fda8","f7fd147f6ec145b926803480f62aa12e2aad258e"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a282020d6c9a4ea32a359539e283e4771a2fda8","77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["282a69d7d427c265f321423b5a3f989aa16dab10"],"6321195fe07e4a4627b4f36c48221de10cb6c26e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"f7fd147f6ec145b926803480f62aa12e2aad258e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"282a69d7d427c265f321423b5a3f989aa16dab10":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6321195fe07e4a4627b4f36c48221de10cb6c26e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["f7fd147f6ec145b926803480f62aa12e2aad258e","77c9633f72998c3815ffe21baa5f16d6e50f1e4a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6321195fe07e4a4627b4f36c48221de10cb6c26e":["282a69d7d427c265f321423b5a3f989aa16dab10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}