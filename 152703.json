{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","commits":[{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      log.info(\"A collections change: {}, has occurred - updating...\", (event));\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.info(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      log.info(\"A collections change: {}, has occurred - updating...\", (event));\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f616abd7d3345b373ca3f5a49a3351a7a18eb741","date":1455910613,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.info(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events,\n      // and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.info(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.info(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptyMap());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.info(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f54f0eff6955cf57610f6b93dbbba3a2bf540619","date":1467968491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.info(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.info(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptyMap());\n      }\n    }\n\n","bugFix":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.debug(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.info(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.debug(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.info(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.debug(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.info(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      log.debug(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      LOG.debug(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      if (ZkStateReader.this.closed) {\n        return;\n      }\n      \n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      log.debug(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      log.debug(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","bugFix":null,"bugIntro":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e92ecc804db94989e3c224b898b8dc978ebb584f","date":1556036948,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.CollectionsChildWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent event) {\n      if (ZkStateReader.this.closed) {\n        return;\n      }\n\n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      log.debug(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent event) {\n      if (ZkStateReader.this.closed) {\n        return;\n      }\n      \n      // session events are not change events, and do not remove the watcher\n      if (EventType.None.equals(event.getType())) {\n        return;\n      }\n      log.debug(\"A collections change: [{}], has occurred - updating...\", event);\n      refreshAndWatch();\n      synchronized (getUpdateLock()) {\n        constructState(Collections.emptySet());\n      }\n    }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f616abd7d3345b373ca3f5a49a3351a7a18eb741","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e92ecc804db94989e3c224b898b8dc978ebb584f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f54f0eff6955cf57610f6b93dbbba3a2bf540619","962cd4f5e313777f35da8f521265323e84184929"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f616abd7d3345b373ca3f5a49a3351a7a18eb741":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e92ecc804db94989e3c224b898b8dc978ebb584f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["f616abd7d3345b373ca3f5a49a3351a7a18eb741"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}