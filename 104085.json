{"path":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState();\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState();\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a7098b1923741f1d9887fad7cc27074c26d1f","date":1502268482,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrClient,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  public static void verifyPropertyVal(CloudSolrClient client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      clusterState = client.getZkStateReader().getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(collectionName);\n      replica = (docCollection == null) ? null : docCollection.getReplica(replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getProperty(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getProperty(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["636a7098b1923741f1d9887fad7cc27074c26d1f","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","344b0840364d990b29b97467bfcc766ff8325d11"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["344b0840364d990b29b97467bfcc766ff8325d11","636a7098b1923741f1d9887fad7cc27074c26d1f"],"636a7098b1923741f1d9887fad7cc27074c26d1f":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["636a7098b1923741f1d9887fad7cc27074c26d1f"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","636a7098b1923741f1d9887fad7cc27074c26d1f"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"636a7098b1923741f1d9887fad7cc27074c26d1f":["b94236357aaa22b76c10629851fe4e376e0cea82","58884af1f68e9d61c217c753fbd6266d86a63b14","6146c07c0dee1ae1e42926167acd127fed5ef59d","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","58884af1f68e9d61c217c753fbd6266d86a63b14","636a7098b1923741f1d9887fad7cc27074c26d1f"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"bafca15d8e408346a67f4282ad1143b88023893b":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}