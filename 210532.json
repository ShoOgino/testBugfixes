{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns an <code>Evaluator</code> instance meant to be used for escaping\n   * values in SQL queries.\n   * </p>\n   * <p>\n   * It escapes the value of the given expression by replacing all occurrences\n   * of single-quotes by two single-quotes and similarily for double-quotes\n   * </p>\n   *\n   * @return\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        Object o = resolver.resolve(expression);\n\n        if (o == null)\n          return null;\n\n        return o.toString().replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\");\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1","date":1217855899,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","sourceNew":"  /**\n   * <p>\n   * Returns an <code>Evaluator</code> instance meant to be used for escaping\n   * values in SQL queries.\n   * </p>\n   * <p>\n   * It escapes the value of the given expression by replacing all occurrences\n   * of single-quotes by two single-quotes and similarily for double-quotes\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping\n   *         expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        Object o = resolver.resolve(expression);\n\n        if (o == null)\n          return null;\n\n        return o.toString().replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\");\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns an <code>Evaluator</code> instance meant to be used for escaping\n   * values in SQL queries.\n   * </p>\n   * <p>\n   * It escapes the value of the given expression by replacing all occurrences\n   * of single-quotes by two single-quotes and similarily for double-quotes\n   * </p>\n   *\n   * @return\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        Object o = resolver.resolve(expression);\n\n        if (o == null)\n          return null;\n\n        return o.toString().replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d532a814197216f5e180897b172e87e0158690b","date":1226309783,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","sourceNew":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance meant to be used for escaping\n   * values in SQL queries.\n   * </p>\n   * <p/>\n   * It escapes the value of the given expression by replacing all occurrences\n   * of single-quotes by two single-quotes and similarily for double-quotes\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping\n   *         expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        Object o = resolver.resolve(expression);\n\n        if (o == null)\n          return null;\n\n        return o.toString().replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\");\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns an <code>Evaluator</code> instance meant to be used for escaping\n   * values in SQL queries.\n   * </p>\n   * <p>\n   * It escapes the value of the given expression by replacing all occurrences\n   * of single-quotes by two single-quotes and similarily for double-quotes\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping\n   *         expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        Object o = resolver.resolve(expression);\n\n        if (o == null)\n          return null;\n\n        return o.toString().replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfc8d8c033e2239995c45b976c90c18559da31e","date":1235021328,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","sourceNew":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance meant to be used for escaping\n   * values in SQL queries.\n   * </p>\n   * <p/>\n   * It escapes the value of the given expression by replacing all occurrences\n   * of single-quotes by two single-quotes and similarily for double-quotes\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping\n   *         expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        Object o = context.getVariableResolver().resolve(expression);\n\n        if (o == null)\n          return null;\n\n        return o.toString().replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\");\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance meant to be used for escaping\n   * values in SQL queries.\n   * </p>\n   * <p/>\n   * It escapes the value of the given expression by replacing all occurrences\n   * of single-quotes by two single-quotes and similarily for double-quotes\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping\n   *         expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        Object o = resolver.resolve(expression);\n\n        if (o == null)\n          return null;\n\n        return o.toString().replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"850e6bf528dcc8def8f27ada3cfa6ba4d2336375","date":1235458726,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","sourceNew":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance meant to be used for escaping values in SQL queries. </p> <p/> It\n   * escapes the value of the given expression by replacing all occurrences of single-quotes by two single-quotes and\n   * similarily for double-quotes </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeSql' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        return s.replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\");\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/>\n   * Returns an <code>Evaluator</code> instance meant to be used for escaping\n   * values in SQL queries.\n   * </p>\n   * <p/>\n   * It escapes the value of the given expression by replacing all occurrences\n   * of single-quotes by two single-quotes and similarily for double-quotes\n   * </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping\n   *         expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        Object o = context.getVariableResolver().resolve(expression);\n\n        if (o == null)\n          return null;\n\n        return o.toString().replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["078b482293d6e21d3d32f481f86e54c89e98a098"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"078b482293d6e21d3d32f481f86e54c89e98a098","date":1265780336,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","sourceNew":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance meant to be used for escaping values in SQL queries. </p> <p/> It\n   * escapes the value of the given expression by replacing all occurrences of single-quotes by two single-quotes and\n   * similarily for double-quotes </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeSql' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        // escape single quote with two single quotes, double quote\n        // with two doule quotes, and backslash with double backslash.\n        // See:  http://dev.mysql.com/doc/refman/4.1/en/mysql-real-escape-string.html\n        return s.replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\").replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance meant to be used for escaping values in SQL queries. </p> <p/> It\n   * escapes the value of the given expression by replacing all occurrences of single-quotes by two single-quotes and\n   * similarily for double-quotes </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeSql' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        return s.replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\");\n      }\n    };\n  }\n\n","bugFix":["850e6bf528dcc8def8f27ada3cfa6ba4d2336375"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getSqlEscapingEvaluator().mjava","sourceNew":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance meant to be used for escaping values in SQL queries. </p> <p/> It\n   * escapes the value of the given expression by replacing all occurrences of single-quotes by two single-quotes and\n   * similarily for double-quotes </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeSql' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        // escape single quote with two single quotes, double quote\n        // with two doule quotes, and backslash with double backslash.\n        // See:  http://dev.mysql.com/doc/refman/4.1/en/mysql-real-escape-string.html\n        return s.replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\").replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance meant to be used for escaping values in SQL queries. </p> <p/> It\n   * escapes the value of the given expression by replacing all occurrences of single-quotes by two single-quotes and\n   * similarily for double-quotes </p>\n   *\n   * @return an <code>Evaluator</code> instance capable of SQL-escaping expressions.\n   */\n  public static Evaluator getSqlEscapingEvaluator() {\n    return new Evaluator() {\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 1) {\n          throw new DataImportHandlerException(SEVERE, \"'escapeSql' must have at least one parameter \");\n        }\n        String s = l.get(0).toString();\n        // escape single quote with two single quotes, double quote\n        // with two doule quotes, and backslash with double backslash.\n        // See:  http://dev.mysql.com/doc/refman/4.1/en/mysql-real-escape-string.html\n        return s.replaceAll(\"'\", \"''\").replaceAll(\"\\\"\", \"\\\"\\\"\").replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"850e6bf528dcc8def8f27ada3cfa6ba4d2336375":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"9d532a814197216f5e180897b172e87e0158690b":["1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1"],"078b482293d6e21d3d32f481f86e54c89e98a098":["850e6bf528dcc8def8f27ada3cfa6ba4d2336375"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7dfc8d8c033e2239995c45b976c90c18559da31e":["9d532a814197216f5e180897b172e87e0158690b"],"ad94625fb8d088209f46650c8097196fec67f00c":["078b482293d6e21d3d32f481f86e54c89e98a098"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"850e6bf528dcc8def8f27ada3cfa6ba4d2336375":["078b482293d6e21d3d32f481f86e54c89e98a098"],"9d532a814197216f5e180897b172e87e0158690b":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"078b482293d6e21d3d32f481f86e54c89e98a098":["ad94625fb8d088209f46650c8097196fec67f00c"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1"],"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1":["9d532a814197216f5e180897b172e87e0158690b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dfc8d8c033e2239995c45b976c90c18559da31e":["850e6bf528dcc8def8f27ada3cfa6ba4d2336375"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}