{"path":"backwards/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be\n   * permitted in search results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    final TermEnum enumerator = query.getEnum(reader);\n    try {\n      // if current term in enum is null, the enum is empty -> shortcut\n      if (enumerator.term() == null)\n        return DocIdSet.EMPTY_DOCIDSET;\n      // else fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());\n      final int[] docs = new int[32];\n      final int[] freqs = new int[32];\n      TermDocs termDocs = reader.termDocs();\n      try {\n        int termCount = 0;\n        do {\n          Term term = enumerator.term();\n          if (term == null)\n            break;\n          termCount++;\n          termDocs.seek(term);\n          while (true) {\n            final int count = termDocs.read(docs, freqs);\n            if (count != 0) {\n              for(int i=0;i<count;i++) {\n                bitSet.set(docs[i]);\n              }\n            } else {\n              break;\n            }\n          }\n        } while (enumerator.next());\n\n        query.incTotalNumberOfTerms(termCount);\n\n      } finally {\n        termDocs.close();\n      }\n      return bitSet;\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(IndexReader).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns a DocIdSet with documents that should be\n   * permitted in search results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    final TermEnum enumerator = query.getEnum(reader);\n    try {\n      // if current term in enum is null, the enum is empty -> shortcut\n      if (enumerator.term() == null)\n        return DocIdSet.EMPTY_DOCIDSET;\n      // else fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());\n      final int[] docs = new int[32];\n      final int[] freqs = new int[32];\n      TermDocs termDocs = reader.termDocs();\n      try {\n        int termCount = 0;\n        do {\n          Term term = enumerator.term();\n          if (term == null)\n            break;\n          termCount++;\n          termDocs.seek(term);\n          while (true) {\n            final int count = termDocs.read(docs, freqs);\n            if (count != 0) {\n              for(int i=0;i<count;i++) {\n                bitSet.set(docs[i]);\n              }\n            } else {\n              break;\n            }\n          }\n        } while (enumerator.next());\n\n        query.incTotalNumberOfTerms(termCount);\n\n      } finally {\n        termDocs.close();\n      }\n      return bitSet;\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a DocIdSet with documents that should be\n   * permitted in search results.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    final TermEnum enumerator = query.getEnum(reader);\n    try {\n      // if current term in enum is null, the enum is empty -> shortcut\n      if (enumerator.term() == null)\n        return DocIdSet.EMPTY_DOCIDSET;\n      // else fill into a OpenBitSet\n      final OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());\n      final int[] docs = new int[32];\n      final int[] freqs = new int[32];\n      TermDocs termDocs = reader.termDocs();\n      try {\n        int termCount = 0;\n        do {\n          Term term = enumerator.term();\n          if (term == null)\n            break;\n          termCount++;\n          termDocs.seek(term);\n          while (true) {\n            final int count = termDocs.read(docs, freqs);\n            if (count != 0) {\n              for(int i=0;i<count;i++) {\n                bitSet.set(docs[i]);\n              }\n            } else {\n              break;\n            }\n          }\n        } while (enumerator.next());\n\n        query.incTotalNumberOfTerms(termCount);\n\n      } finally {\n        termDocs.close();\n      }\n      return bitSet;\n    } finally {\n      enumerator.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}