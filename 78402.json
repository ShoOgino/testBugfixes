{"path":"src/java/org/apache/solr/core/MultiCore#persist().mjava","commits":[{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#persist().mjava","pathOld":"/dev/null","sourceNew":"  /** Persists the multicore config file. */\n  public void persist() {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      tmpFile = File.createTempFile(\"multicore\", \".xml\", configFile.getParentFile());\n      java.io.FileOutputStream out = new java.io.FileOutputStream(tmpFile);\n      synchronized(cores) {\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it it this fails\n        if (tmpFile.renameTo(configFile))\n          tmpFile = null;\n        else\n          fileCopy(tmpFile, configFile);\n      }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d262ab35a1389f4ad912bfa8b61a202c61cc475a","date":1218563685,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#persist().mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#persist().mjava","sourceNew":"  /** Persists the multicore config file. */\n  public void persist() {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      java.io.FileOutputStream out = new java.io.FileOutputStream(tmpFile);\n      synchronized(cores) {\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it it this fails\n        if (tmpFile.renameTo(configFile))\n          tmpFile = null;\n        else\n          fileCopy(tmpFile, configFile);\n      }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":"  /** Persists the multicore config file. */\n  public void persist() {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      tmpFile = File.createTempFile(\"multicore\", \".xml\", configFile.getParentFile());\n      java.io.FileOutputStream out = new java.io.FileOutputStream(tmpFile);\n      synchronized(cores) {\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it it this fails\n        if (tmpFile.renameTo(configFile))\n          tmpFile = null;\n        else\n          fileCopy(tmpFile, configFile);\n      }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist().mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#persist().mjava","sourceNew":"  /** Persists the multicore config file. */\n  public void persist() {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      java.io.FileOutputStream out = new java.io.FileOutputStream(tmpFile);\n      synchronized(cores) {\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it it this fails\n        if (tmpFile.renameTo(configFile))\n          tmpFile = null;\n        else\n          fileCopy(tmpFile, configFile);\n      }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":"  /** Persists the multicore config file. */\n  public void persist() {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      java.io.FileOutputStream out = new java.io.FileOutputStream(tmpFile);\n      synchronized(cores) {\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it it this fails\n        if (tmpFile.renameTo(configFile))\n          tmpFile = null;\n        else\n          fileCopy(tmpFile, configFile);\n      }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d262ab35a1389f4ad912bfa8b61a202c61cc475a":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["d262ab35a1389f4ad912bfa8b61a202c61cc475a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d262ab35a1389f4ad912bfa8b61a202c61cc475a":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["d262ab35a1389f4ad912bfa8b61a202c61cc475a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}