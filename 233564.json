{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","commits":[{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/BaseNonFuzzySpatialOpStrategyTest#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","sourceNew":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","sourceOld":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"Shouldn't match\", id, indexedShapes, queryShape);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"Should have matched\", id, indexedShapes, queryShape);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11e8ea32003f6ccf3282ad6c05ca47eec277e928","date":1428695518,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","sourceNew":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","sourceOld":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","sourceNew":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"qIdx:\" + queryIdx + \" Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"qIdx:\" + queryIdx + \" Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","sourceOld":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","sourceNew":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"qIdx:\" + queryIdx + \" Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"qIdx:\" + queryIdx + \" Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","sourceOld":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","sourceNew":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"qIdx:\" + queryIdx + \" Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"qIdx:\" + queryIdx + \" Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","sourceOld":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"qIdx:\" + queryIdx + \" Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"qIdx:\" + queryIdx + \" Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperation(SpatialOperation,List[Shape],List[Shape],boolean).mjava","sourceNew":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"qIdx:\" + queryIdx + \" Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"qIdx:\" + queryIdx + \" Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","sourceOld":"  protected void testOperation(final SpatialOperation operation,\n                               List<Shape> indexedShapes, List<Shape> queryShapes, boolean havoc) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\"+i, shape);\n\n      if (havoc && random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    if (havoc) {\n      //delete some documents randomly\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        if (random().nextInt(10) == 0) {\n          deleteDoc(\"\"+id);\n          indexedShapes.set(id, null);\n        }\n      }\n    }\n\n    commit();\n\n    //Main query loop:\n    for (int queryIdx = 0; queryIdx < queryShapes.size(); queryIdx++) {\n      final Shape queryShape = queryShapes.get(queryIdx);\n\n      if (havoc)\n        preQueryHavoc();\n\n      //Generate truth via brute force:\n      // We ensure true-positive matches (if the predicate on the raw shapes match\n      //  then the search should find those same matches).\n      Set<String> expectedIds = new LinkedHashSet<>();//true-positives\n      for (int id = 0; id < indexedShapes.size(); id++) {\n        Shape indexedShape = indexedShapes.get(id);\n        if (indexedShape == null)\n          continue;\n        if (operation.evaluate(indexedShape, queryShape)) {\n          expectedIds.add(\"\"+id);\n        }\n      }\n\n      //Search and verify results\n      SpatialArgs args = new SpatialArgs(operation, queryShape);\n      Query query = strategy.makeQuery(args);\n      SearchResults got = executeQuery(query, 100);\n      Set<String> remainingExpectedIds = new LinkedHashSet<>(expectedIds);\n      for (SearchResult result : got.results) {\n        String id = result.getId();\n        if (!remainingExpectedIds.remove(id)) {\n          fail(\"qIdx:\" + queryIdx + \" Shouldn't match\", id, indexedShapes, queryShape, operation);\n        }\n      }\n      if (!remainingExpectedIds.isEmpty()) {\n        String id = remainingExpectedIds.iterator().next();\n        fail(\"qIdx:\" + queryIdx + \" Should have matched\", id, indexedShapes, queryShape, operation);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","112d77ac8d3e10a362516ad834c9a11d35c94234"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["0521546db127e358ced1772a9d696dbdd255b203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["11e8ea32003f6ccf3282ad6c05ca47eec277e928","851e4197476b684154a7b65f996f535522e67400"],"851e4197476b684154a7b65f996f535522e67400":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"0521546db127e358ced1772a9d696dbdd255b203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0521546db127e358ced1772a9d696dbdd255b203"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"851e4197476b684154a7b65f996f535522e67400":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"0521546db127e358ced1772a9d696dbdd255b203":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}