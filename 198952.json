{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","commits":[{"id":"bbd200b2732aefbc96902b61cb6bb51ec45c8a79","date":1197030109,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkTokenizer sink = new DateRecognizerSinkTokenizer(new SimpleDateFormat(\"MM/dd/yyyy\"));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeTokenFilter tee = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(test)), sink);\n    Token tok = null;\n    int count = 0;\n    while ((tok = tee.next()) != null){\n      assertTrue(\"tok is null and it shouldn't be\", tok != null);\n      if (tok.termBuffer()[0] == '7'){\n        assertTrue(tok.type() + \" is not equal to \" + DateRecognizerSinkTokenizer.DATE_TYPE,\n                tok.type().equals(DateRecognizerSinkTokenizer.DATE_TYPE) == true);\n      }\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    assertTrue(\"sink Size: \" + sink.getTokens().size() + \" is not: \" + 2, sink.getTokens().size() == 2);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkTokenizer sink = new DateRecognizerSinkTokenizer(new SimpleDateFormat(\"MM/dd/yyyy\"));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeTokenFilter tee = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(test)), sink);\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = tee.next(reusableToken); nextToken != null; nextToken = tee.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      if (nextToken.termBuffer()[0] == '7'){\n        assertTrue(nextToken.type() + \" is not equal to \" + DateRecognizerSinkTokenizer.DATE_TYPE,\n                nextToken.type().equals(DateRecognizerSinkTokenizer.DATE_TYPE) == true);\n      }\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    assertTrue(\"sink Size: \" + sink.getTokens().size() + \" is not: \" + 2, sink.getTokens().size() == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkTokenizer sink = new DateRecognizerSinkTokenizer(new SimpleDateFormat(\"MM/dd/yyyy\"));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeTokenFilter tee = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(test)), sink);\n    Token tok = null;\n    int count = 0;\n    while ((tok = tee.next()) != null){\n      assertTrue(\"tok is null and it shouldn't be\", tok != null);\n      if (tok.termBuffer()[0] == '7'){\n        assertTrue(tok.type() + \" is not equal to \" + DateRecognizerSinkTokenizer.DATE_TYPE,\n                tok.type().equals(DateRecognizerSinkTokenizer.DATE_TYPE) == true);\n      }\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    assertTrue(\"sink Size: \" + sink.getTokens().size() + \" is not: \" + 2, sink.getTokens().size() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkTokenizer sink = new DateRecognizerSinkTokenizer(new SimpleDateFormat(\"MM/dd/yyyy\"));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeTokenFilter tee = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(test)), sink);\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = tee.next(reusableToken); nextToken != null; nextToken = tee.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      if (nextToken.termBuffer()[0] == '7'){\n        assertTrue(nextToken.type() + \" is not equal to \" + DateRecognizerSinkTokenizer.DATE_TYPE,\n                nextToken.type().equals(DateRecognizerSinkTokenizer.DATE_TYPE) == true);\n      }\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    assertTrue(\"sink Size: \" + sink.getTokens().size() + \" is not: \" + 2, sink.getTokens().size() == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkTokenizer sink = new DateRecognizerSinkTokenizer(new SimpleDateFormat(\"MM/dd/yyyy\"));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeTokenFilter tee = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(test)), sink);\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = tee.next(reusableToken); nextToken != null; nextToken = tee.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      if (nextToken.termBuffer()[0] == '7'){\n        assertTrue(nextToken.type() + \" is not equal to \" + DateRecognizerSinkTokenizer.DATE_TYPE,\n                nextToken.type().equals(DateRecognizerSinkTokenizer.DATE_TYPE) == true);\n      }\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    assertTrue(\"sink Size: \" + sink.getTokens().size() + \" is not: \" + 2, sink.getTokens().size() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["bbd200b2732aefbc96902b61cb6bb51ec45c8a79"],"bbd200b2732aefbc96902b61cb6bb51ec45c8a79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"bbd200b2732aefbc96902b61cb6bb51ec45c8a79":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbd200b2732aefbc96902b61cb6bb51ec45c8a79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}