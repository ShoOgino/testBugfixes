{"path":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#publishCoresAsDown(ZkController).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#publishCoresAsDown(ZkController).mjava","pathOld":"/dev/null","sourceNew":"  protected void publishCoresAsDown(ZkController zkController) {\n    synchronized (locker) {\n      for (SolrCore core : cores.values()) {\n        try {\n          zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        } catch (KeeperException e) {\n          CoreContainer.log.error(\"\", e);\n        } catch (InterruptedException e) {\n          CoreContainer.log.error(\"\", e);\n        }\n      }\n      for (SolrCore core : transientCores.values()) {\n        try {\n          zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        } catch (KeeperException e) {\n          CoreContainer.log.error(\"\", e);\n        } catch (InterruptedException e) {\n          CoreContainer.log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps#publishCoresAsDown(ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#publishCoresAsDown(ZkController).mjava","sourceNew":"  protected void publishCoresAsDown(ZkController zkController) {\n    synchronized (locker) {\n      for (SolrCore core : cores.values()) {\n        try {\n          zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        } catch (KeeperException e) {\n          CoreContainer.log.error(\"\", e);\n        } catch (InterruptedException e) {\n          CoreContainer.log.error(\"\", e);\n        }\n      }\n      for (SolrCore core : transientCores.values()) {\n        try {\n          zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        } catch (KeeperException e) {\n          CoreContainer.log.error(\"\", e);\n        } catch (InterruptedException e) {\n          CoreContainer.log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void publishCoresAsDown(ZkController zkController) {\n    synchronized (locker) {\n      for (SolrCore core : cores.values()) {\n        try {\n          zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        } catch (KeeperException e) {\n          CoreContainer.log.error(\"\", e);\n        } catch (InterruptedException e) {\n          CoreContainer.log.error(\"\", e);\n        }\n      }\n      for (SolrCore core : transientCores.values()) {\n        try {\n          zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n        } catch (KeeperException e) {\n          CoreContainer.log.error(\"\", e);\n        } catch (InterruptedException e) {\n          CoreContainer.log.error(\"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a837c064b67fa63a9394136e31218b908cdcf783":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}