{"path":"lucene/core/src/java/org/apache/lucene/util/IOUtils#fsync(File,boolean).mjava","commits":[{"id":"e51a73abd3e0a6985e6c31e220c3ac5a5be01d45","date":1397155593,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#fsync(File,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensure that any writes to the given file is written to the storage device that contains it.\n   * @param fileToSync the file to fsync\n   * @param isDir if true, the given file is a directory (we open for read and ignore IOExceptions,\n   *  because not all file systems and operating systems allow to fsync on a directory)\n   */\n  public static void fsync(File fileToSync, boolean isDir) throws IOException {\n    IOException exc = null;\n    \n    // If the file is a directory we have to open read-only, for regular files we must open r/w for the fsync to have an effect.\n    // See http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/\n    try (final FileChannel file = FileChannel.open(fileToSync.toPath(), isDir ? StandardOpenOption.READ : StandardOpenOption.WRITE)) {\n      for (int retry = 0; retry < 5; retry++) {\n        try {\n          file.force(true);\n          return;\n        } catch (IOException ioe) {\n          if (exc == null) {\n            exc = ioe;\n          }\n          try {\n            // Pause 5 msec\n            Thread.sleep(5L);\n          } catch (InterruptedException ie) {\n            ThreadInterruptedException ex = new ThreadInterruptedException(ie);\n            ex.addSuppressed(exc);\n            throw ex;\n          }\n        }\n      }\n    } catch (IOException ioe) {\n      if (exc == null) {\n        exc = ioe;\n      }\n    }\n    \n    if (isDir) {\n      assert (Constants.LINUX || Constants.MAC_OS_X) == false :\n        \"On Linux and MacOSX fsyncing a directory should not throw IOException, \"+\n        \"we just don't want to rely on that in production (undocumented). Got: \" + exc;\n      // Ignore exception if it is a directory\n      return;\n    }\n    \n    // Throw original exception\n    throw exc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#fsync(Path,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#fsync(File,boolean).mjava","sourceNew":"  /**\n   * Ensure that any writes to the given file is written to the storage device that contains it.\n   * @param fileToSync the file to fsync\n   * @param isDir if true, the given file is a directory (we open for read and ignore IOExceptions,\n   *  because not all file systems and operating systems allow to fsync on a directory)\n   */\n  public static void fsync(Path fileToSync, boolean isDir) throws IOException {\n    IOException exc = null;\n    \n    // If the file is a directory we have to open read-only, for regular files we must open r/w for the fsync to have an effect.\n    // See http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/\n    try (final FileChannel file = FileChannel.open(fileToSync, isDir ? StandardOpenOption.READ : StandardOpenOption.WRITE)) {\n      for (int retry = 0; retry < 5; retry++) {\n        try {\n          file.force(true);\n          return;\n        } catch (IOException ioe) {\n          if (exc == null) {\n            exc = ioe;\n          }\n          try {\n            // Pause 5 msec\n            Thread.sleep(5L);\n          } catch (InterruptedException ie) {\n            ThreadInterruptedException ex = new ThreadInterruptedException(ie);\n            ex.addSuppressed(exc);\n            throw ex;\n          }\n        }\n      }\n    } catch (IOException ioe) {\n      if (exc == null) {\n        exc = ioe;\n      }\n    }\n    \n    if (isDir) {\n      assert (Constants.LINUX || Constants.MAC_OS_X) == false :\n        \"On Linux and MacOSX fsyncing a directory should not throw IOException, \"+\n        \"we just don't want to rely on that in production (undocumented). Got: \" + exc;\n      // Ignore exception if it is a directory\n      return;\n    }\n    \n    // Throw original exception\n    throw exc;\n  }\n\n","sourceOld":"  /**\n   * Ensure that any writes to the given file is written to the storage device that contains it.\n   * @param fileToSync the file to fsync\n   * @param isDir if true, the given file is a directory (we open for read and ignore IOExceptions,\n   *  because not all file systems and operating systems allow to fsync on a directory)\n   */\n  public static void fsync(File fileToSync, boolean isDir) throws IOException {\n    IOException exc = null;\n    \n    // If the file is a directory we have to open read-only, for regular files we must open r/w for the fsync to have an effect.\n    // See http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/\n    try (final FileChannel file = FileChannel.open(fileToSync.toPath(), isDir ? StandardOpenOption.READ : StandardOpenOption.WRITE)) {\n      for (int retry = 0; retry < 5; retry++) {\n        try {\n          file.force(true);\n          return;\n        } catch (IOException ioe) {\n          if (exc == null) {\n            exc = ioe;\n          }\n          try {\n            // Pause 5 msec\n            Thread.sleep(5L);\n          } catch (InterruptedException ie) {\n            ThreadInterruptedException ex = new ThreadInterruptedException(ie);\n            ex.addSuppressed(exc);\n            throw ex;\n          }\n        }\n      }\n    } catch (IOException ioe) {\n      if (exc == null) {\n        exc = ioe;\n      }\n    }\n    \n    if (isDir) {\n      assert (Constants.LINUX || Constants.MAC_OS_X) == false :\n        \"On Linux and MacOSX fsyncing a directory should not throw IOException, \"+\n        \"we just don't want to rely on that in production (undocumented). Got: \" + exc;\n      // Ignore exception if it is a directory\n      return;\n    }\n    \n    // Throw original exception\n    throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e51a73abd3e0a6985e6c31e220c3ac5a5be01d45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["e51a73abd3e0a6985e6c31e220c3ac5a5be01d45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e51a73abd3e0a6985e6c31e220c3ac5a5be01d45"],"e51a73abd3e0a6985e6c31e220c3ac5a5be01d45":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}