{"path":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","commits":[{"id":"6b772434f9f358356f8eedc2e017b9ddfb2615ec","date":1170327312,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Flush all in-memory buffered updates to the Directory.\n   * @throws IOException\n   */\n  public final synchronized void flush() throws IOException {\n    flushRamSegments();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @throws IOException\n   */\n  public final synchronized void flush() throws IOException {\n    flushRamSegments();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates to the Directory.\n   * @throws IOException\n   */\n  public final synchronized void flush() throws IOException {\n    flushRamSegments();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void flush() throws CorruptIndexException, IOException {\n    flushRamSegments();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @throws IOException\n   */\n  public final synchronized void flush() throws IOException {\n    flushRamSegments();\n  }\n\n","bugFix":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void flush() throws CorruptIndexException, IOException {\n    ensureOpen();\n    flushRamSegments();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void flush() throws CorruptIndexException, IOException {\n    flushRamSegments();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b685e89f45e34ea31f9ca89912e4f29038818ff6","date":1173986546,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: if <code>autoCommit=false</code>, flushed data would still \n   * not be visible to readers, until {@link #close} is called.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void flush() throws CorruptIndexException, IOException {\n    ensureOpen();\n    flushRamSegments();\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void flush() throws CorruptIndexException, IOException {\n    ensureOpen();\n    flushRamSegments();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  public final synchronized void flush() throws CorruptIndexException, IOException {  \n    flush(true, false);\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: if <code>autoCommit=false</code>, flushed data would still \n   * not be visible to readers, until {@link #close} is called.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void flush() throws CorruptIndexException, IOException {\n    ensureOpen();\n    flushRamSegments();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a30c6ea5c2c1da6d2956e42721e02ccb29910be5","date":1184278520,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: if <code>autoCommit=false</code>, flushed data would still \n   * not be visible to readers, until {@link #close} is called.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void flush() throws CorruptIndexException, IOException {  \n    flush(true, false);\n  }\n\n","sourceOld":"  public final synchronized void flush() throws CorruptIndexException, IOException {  \n    flush(true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: if <code>autoCommit=false</code>, flushed data would still \n   * not be visible to readers, until {@link #close} is called.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    flush(true, false);\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: if <code>autoCommit=false</code>, flushed data would still \n   * not be visible to readers, until {@link #close} is called.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void flush() throws CorruptIndexException, IOException {  \n    flush(true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit} instead\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated please call {@link #commit}) instead\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    flush(true, false);\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: if <code>autoCommit=false</code>, flushed data would still \n   * not be visible to readers, until {@link #close} is called.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    flush(true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit} instead\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated please call {@link #commit}) instead\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    flush(true, false, true);\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit} instead\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated please call {@link #commit}) instead\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    flush(true, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05ec4e7e3569b6c85ac07e8813a5d5ed5d1ef6dc","date":1221503613,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit()} instead\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated please call {@link #commit()}) instead\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    flush(true, false, true);\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit} instead\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated please call {@link #commit}) instead\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    flush(true, false, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25a69ca6651c6c39154826d22ee7a0b606cb5d8c","date":1225195699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit()} instead\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated please call {@link #commit()}) instead\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    if (hitOOM)\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n\n    flush(true, false, true);\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit()} instead\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated please call {@link #commit()}) instead\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    flush(true, false, true);\n  }\n\n","bugFix":null,"bugIntro":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9665d17707cc21b1db995118ff36129723139ab","date":1225384420,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit()} instead\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @deprecated please call {@link #commit()}) instead\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    if (hitOOM)\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n\n    flush(true, false, true);\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit()} instead\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated please call {@link #commit()}) instead\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    if (hitOOM)\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n\n    flush(true, false, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd488f50316362b01a7f67b11a96796b9652e3e5","date":1241121034,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit()} instead\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @deprecated please call {@link #commit()}) instead\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    flush(true, false, true);\n  }\n\n","sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit()} instead\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @deprecated please call {@link #commit()}) instead\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    if (hitOOM)\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n\n    flush(true, false, true);\n  }\n\n","bugFix":["25a69ca6651c6c39154826d22ee7a0b606cb5d8c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#flush().mjava","sourceNew":null,"sourceOld":"  /**\n   * Flush all in-memory buffered updates (adds and deletes)\n   * to the Directory. \n   * <p>Note: while this will force buffered docs to be\n   * pushed into the index, it will not make these docs\n   * visible to a reader.  Use {@link #commit()} instead\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @deprecated please call {@link #commit()}) instead\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void flush() throws CorruptIndexException, IOException {  \n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    flush(true, false, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a30c6ea5c2c1da6d2956e42721e02ccb29910be5"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"1b54a9bc667895a2095a886184bf69a3179e63df":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["e82780afe6097066eb5befb86e9432f077667e3d"],"25a69ca6651c6c39154826d22ee7a0b606cb5d8c":["05ec4e7e3569b6c85ac07e8813a5d5ed5d1ef6dc"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9665d17707cc21b1db995118ff36129723139ab":["25a69ca6651c6c39154826d22ee7a0b606cb5d8c"],"a30c6ea5c2c1da6d2956e42721e02ccb29910be5":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["e9665d17707cc21b1db995118ff36129723139ab"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"05ec4e7e3569b6c85ac07e8813a5d5ed5d1ef6dc":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["e82780afe6097066eb5befb86e9432f077667e3d"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["05ec4e7e3569b6c85ac07e8813a5d5ed5d1ef6dc"],"25a69ca6651c6c39154826d22ee7a0b606cb5d8c":["e9665d17707cc21b1db995118ff36129723139ab"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a30c6ea5c2c1da6d2956e42721e02ccb29910be5"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"a30c6ea5c2c1da6d2956e42721e02ccb29910be5":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"e9665d17707cc21b1db995118ff36129723139ab":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"e82780afe6097066eb5befb86e9432f077667e3d":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"05ec4e7e3569b6c85ac07e8813a5d5ed5d1ef6dc":["25a69ca6651c6c39154826d22ee7a0b606cb5d8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}