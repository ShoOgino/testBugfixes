{"path":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#searchSeveralWays(String,SolrParams,Consumer[QueryResponse]).mjava","commits":[{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#searchSeveralWays(String,SolrParams,Consumer[QueryResponse]).mjava","pathOld":"/dev/null","sourceNew":"  private void searchSeveralWays(String collectionList, SolrParams solrQuery, Consumer<QueryResponse> responseConsumer) throws IOException, SolrServerException {\n    if (random().nextBoolean()) {\n      // cluster's CloudSolrClient\n      responseConsumer.accept(cluster.getSolrClient().query(collectionList, solrQuery));\n    } else {\n      // new CloudSolrClient (random shardLeadersOnly)\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        if (random().nextBoolean()) {\n          solrClient.setDefaultCollection(collectionList);\n          responseConsumer.accept(solrClient.query(null, solrQuery));\n        } else {\n          responseConsumer.accept(solrClient.query(collectionList, solrQuery));\n        }\n      }\n    }\n\n    // HttpSolrClient\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    if (random().nextBoolean()) {\n      try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/\" + collectionList)) {\n        responseConsumer.accept(client.query(null, solrQuery));\n      }\n    } else {\n      try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n        responseConsumer.accept(client.query(collectionList, solrQuery));\n      }\n    }\n\n    // Recursively do again; this time with the &collection= param\n    if (solrQuery.get(\"collection\") == null) {\n      // put in \"collection\" param\n      ModifiableSolrParams newParams = new ModifiableSolrParams(solrQuery);\n      newParams.set(\"collection\", collectionList);\n      String maskedColl = new String[]{null, \"bogus\", \"collection2\", \"collection1\"}[random().nextInt(4)];\n      searchSeveralWays(maskedColl, newParams, responseConsumer);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fddfd43b45e2784a1c0ba9c67b7d3ca648468889","date":1508468850,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#searchSeveralWays(String,SolrParams,Consumer[QueryResponse]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest#searchSeveralWays(String,SolrParams,Consumer[QueryResponse]).mjava","sourceNew":"  private void searchSeveralWays(String collectionList, SolrParams solrQuery, Consumer<QueryResponse> responseConsumer) throws IOException, SolrServerException {\n    if (random().nextBoolean()) {\n      // cluster's CloudSolrClient\n      responseConsumer.accept(cluster.getSolrClient().query(collectionList, solrQuery));\n    } else {\n      // new CloudSolrClient (random shardLeadersOnly)\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        if (random().nextBoolean()) {\n          solrClient.setDefaultCollection(collectionList);\n          responseConsumer.accept(solrClient.query(null, solrQuery));\n        } else {\n          responseConsumer.accept(solrClient.query(collectionList, solrQuery));\n        }\n      }\n    }\n\n    // note: collectionList could be null when we randomly recurse and put the actual collection list into the\n    //  \"collection\" param and some bugs value into collectionList (including null).  Only CloudSolrClient supports null.\n    if (collectionList != null) {\n      // HttpSolrClient\n      JettySolrRunner jetty = cluster.getRandomJetty(random());\n      if (random().nextBoolean()) {\n        try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/\" + collectionList)) {\n          responseConsumer.accept(client.query(null, solrQuery));\n        }\n      } else {\n        try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n          responseConsumer.accept(client.query(collectionList, solrQuery));\n        }\n      }\n\n      // Recursively do again; this time with the &collection= param\n      if (solrQuery.get(\"collection\") == null) {\n        // put in \"collection\" param\n        ModifiableSolrParams newParams = new ModifiableSolrParams(solrQuery);\n        newParams.set(\"collection\", collectionList);\n        String maskedColl = new String[]{null, \"bogus\", \"collection2\", \"collection1\"}[random().nextInt(4)];\n        searchSeveralWays(maskedColl, newParams, responseConsumer);\n      }\n    }\n  }\n\n","sourceOld":"  private void searchSeveralWays(String collectionList, SolrParams solrQuery, Consumer<QueryResponse> responseConsumer) throws IOException, SolrServerException {\n    if (random().nextBoolean()) {\n      // cluster's CloudSolrClient\n      responseConsumer.accept(cluster.getSolrClient().query(collectionList, solrQuery));\n    } else {\n      // new CloudSolrClient (random shardLeadersOnly)\n      try (CloudSolrClient solrClient = getCloudSolrClient(cluster)) {\n        if (random().nextBoolean()) {\n          solrClient.setDefaultCollection(collectionList);\n          responseConsumer.accept(solrClient.query(null, solrQuery));\n        } else {\n          responseConsumer.accept(solrClient.query(collectionList, solrQuery));\n        }\n      }\n    }\n\n    // HttpSolrClient\n    JettySolrRunner jetty = cluster.getRandomJetty(random());\n    if (random().nextBoolean()) {\n      try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/\" + collectionList)) {\n        responseConsumer.accept(client.query(null, solrQuery));\n      }\n    } else {\n      try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString())) {\n        responseConsumer.accept(client.query(collectionList, solrQuery));\n      }\n    }\n\n    // Recursively do again; this time with the &collection= param\n    if (solrQuery.get(\"collection\") == null) {\n      // put in \"collection\" param\n      ModifiableSolrParams newParams = new ModifiableSolrParams(solrQuery);\n      newParams.set(\"collection\", collectionList);\n      String maskedColl = new String[]{null, \"bogus\", \"collection2\", \"collection1\"}[random().nextInt(4)];\n      searchSeveralWays(maskedColl, newParams, responseConsumer);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fddfd43b45e2784a1c0ba9c67b7d3ca648468889":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fddfd43b45e2784a1c0ba9c67b7d3ca648468889"]},"commit2Childs":{"fddfd43b45e2784a1c0ba9c67b7d3ca648468889":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["fddfd43b45e2784a1c0ba9c67b7d3ca648468889"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}