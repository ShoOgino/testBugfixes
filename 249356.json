{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(ShardFacetCount,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(ShardFacetCount,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(ShardFacetCount,int).mjava","sourceNew":"    // returns the max possible value this ShardFacetCount could have for this shard\n    // (assumes the shard did not report a count for this value)\n    long maxPossible(ShardFacetCount sfc, int shardNum) {\n      return missingMax[shardNum];\n      // TODO: could store the last term in the shard to tell if this term\n      // comes before or after it.  If it comes before, we could subtract 1\n    }\n\n","sourceOld":"    // returns the max possible value this ShardFacetCount could have for this shard\n    // (assumes the shard did not report a count for this value)\n    long maxPossible(ShardFacetCount sfc, int shardNum) {\n      return missingMax[shardNum];\n      // TODO: could store the last term in the shard to tell if this term\n      // comes before or after it.  If it comes before, we could subtract 1\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(ShardFacetCount,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(ShardFacetCount,int).mjava","sourceNew":"    // returns the max possible value this ShardFacetCount could have for this shard\n    // (assumes the shard did not report a count for this value)\n    long maxPossible(ShardFacetCount sfc, int shardNum) {\n      return missingMax[shardNum];\n      // TODO: could store the last term in the shard to tell if this term\n      // comes before or after it.  If it comes before, we could subtract 1\n    }\n\n","sourceOld":"    // returns the max possible value this ShardFacetCount could have for this shard\n    // (assumes the shard did not report a count for this value)\n    long maxPossible(ShardFacetCount sfc, int shardNum) {\n      return missingMax[shardNum];\n      // TODO: could store the last term in the shard to tell if this term\n      // comes before or after it.  If it comes before, we could subtract 1\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(ShardFacetCount,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(ShardFacetCount,int).mjava","sourceNew":"    // returns the max possible value this ShardFacetCount could have for this shard\n    // (assumes the shard did not report a count for this value)\n    long maxPossible(ShardFacetCount sfc, int shardNum) {\n      return missingMax[shardNum];\n      // TODO: could store the last term in the shard to tell if this term\n      // comes before or after it.  If it comes before, we could subtract 1\n    }\n\n","sourceOld":"    // returns the max possible value this ShardFacetCount could have for this shard\n    // (assumes the shard did not report a count for this value)\n    long maxPossible(ShardFacetCount sfc, int shardNum) {\n      return missingMax[shardNum];\n      // TODO: could store the last term in the shard to tell if this term\n      // comes before or after it.  If it comes before, we could subtract 1\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(ShardFacetCount,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(ShardFacetCount,int).mjava","sourceNew":"    // returns the max possible value this ShardFacetCount could have for this shard\n    // (assumes the shard did not report a count for this value)\n    long maxPossible(ShardFacetCount sfc, int shardNum) {\n      return missingMax[shardNum];\n      // TODO: could store the last term in the shard to tell if this term\n      // comes before or after it. If it comes before, we could subtract 1\n    }\n\n","sourceOld":"    // returns the max possible value this ShardFacetCount could have for this shard\n    // (assumes the shard did not report a count for this value)\n    long maxPossible(ShardFacetCount sfc, int shardNum) {\n      return missingMax[shardNum];\n      // TODO: could store the last term in the shard to tell if this term\n      // comes before or after it.  If it comes before, we could subtract 1\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57","date":1423733077,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.DistribFieldFacet#maxPossible(ShardFacetCount,int).mjava","sourceNew":"    // returns the max possible value this ShardFacetCount could have for this shard\n    // (assumes the shard did not report a count for this value)\n    long maxPossible(int shardNum) {\n      return missingMax[shardNum];\n      // TODO: could store the last term in the shard to tell if this term\n      // comes before or after it. If it comes before, we could subtract 1\n    }\n\n","sourceOld":"    // returns the max possible value this ShardFacetCount could have for this shard\n    // (assumes the shard did not report a count for this value)\n    long maxPossible(ShardFacetCount sfc, int shardNum) {\n      return missingMax[shardNum];\n      // TODO: could store the last term in the shard to tell if this term\n      // comes before or after it. If it comes before, we could subtract 1\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}