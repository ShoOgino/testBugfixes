{"path":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#checkIvyXmlFile(File).mjava","commits":[{"id":"f36164b70e3e1719b71a2bd8e1ab09d551d6ada1","date":1380909825,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#checkIvyXmlFile(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check a single ivy.xml file for dependencies' versions in rev=\"${/org/name}\"\n   * format.  Returns false if problems are found, true otherwise.\n   */\n  private boolean checkIvyXmlFile(File ivyXmlFile)\n      throws ParserConfigurationException, SAXException, IOException {\n    log(\"Scanning: \" + ivyXmlFile.getPath(), verboseLevel);\n    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n    DependencyRevChecker revChecker = new DependencyRevChecker(ivyXmlFile); \n    xmlReader.setContentHandler(revChecker);\n    xmlReader.setErrorHandler(revChecker);\n    // To work around a bug in XERCES (XERCESJ-1257), we assume the XML is always UTF8, so we simply provide reader.\n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStream stream = new FileInputStream(ivyXmlFile);\n    xmlReader.parse(new InputSource(new BufferedReader(new InputStreamReader(stream, decoder))));\n    return ! revChecker.fail;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71b83dcf02fe2854488bc83d70dee29c5baa7e5c","date":1383232808,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#checkIvyXmlFile(File).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#checkIvyXmlFile(File).mjava","sourceNew":"  /**\n   * Check a single ivy.xml file for dependencies' versions in rev=\"${/org/name}\"\n   * format.  Returns false if problems are found, true otherwise.\n   */\n  private boolean checkIvyXmlFile(File ivyXmlFile)\n      throws ParserConfigurationException, SAXException, IOException {\n    log(\"Scanning: \" + ivyXmlFile.getPath(), verboseLevel);\n    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n    DependencyRevChecker revChecker = new DependencyRevChecker(ivyXmlFile); \n    xmlReader.setContentHandler(revChecker);\n    xmlReader.setErrorHandler(revChecker);\n    xmlReader.parse(new InputSource(ivyXmlFile.getAbsolutePath()));\n    return ! revChecker.fail;\n  }\n\n","sourceOld":"  /**\n   * Check a single ivy.xml file for dependencies' versions in rev=\"${/org/name}\"\n   * format.  Returns false if problems are found, true otherwise.\n   */\n  private boolean checkIvyXmlFile(File ivyXmlFile)\n      throws ParserConfigurationException, SAXException, IOException {\n    log(\"Scanning: \" + ivyXmlFile.getPath(), verboseLevel);\n    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n    DependencyRevChecker revChecker = new DependencyRevChecker(ivyXmlFile); \n    xmlReader.setContentHandler(revChecker);\n    xmlReader.setErrorHandler(revChecker);\n    // To work around a bug in XERCES (XERCESJ-1257), we assume the XML is always UTF8, so we simply provide reader.\n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    InputStream stream = new FileInputStream(ivyXmlFile);\n    xmlReader.parse(new InputSource(new BufferedReader(new InputStreamReader(stream, decoder))));\n    return ! revChecker.fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#checkIvyXmlFile(File).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#checkIvyXmlFile(File).mjava","sourceNew":"  /**\n   * Check a single ivy.xml file for dependencies' versions in rev=\"${/org/name}\"\n   * format.  Returns false if problems are found, true otherwise.\n   */\n  private boolean checkIvyXmlFile(File ivyXmlFile)\n      throws ParserConfigurationException, SAXException, IOException {\n    log(\"Scanning: \" + ivyXmlFile.getPath(), verboseLevel);\n    SAXParser xmlReader = SAX_PARSER_FACTORY.newSAXParser();\n    DependencyRevChecker revChecker = new DependencyRevChecker(ivyXmlFile); \n    xmlReader.parse(new InputSource(ivyXmlFile.getAbsolutePath()), revChecker);\n    return ! revChecker.fail;\n  }\n\n","sourceOld":"  /**\n   * Check a single ivy.xml file for dependencies' versions in rev=\"${/org/name}\"\n   * format.  Returns false if problems are found, true otherwise.\n   */\n  private boolean checkIvyXmlFile(File ivyXmlFile)\n      throws ParserConfigurationException, SAXException, IOException {\n    log(\"Scanning: \" + ivyXmlFile.getPath(), verboseLevel);\n    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n    DependencyRevChecker revChecker = new DependencyRevChecker(ivyXmlFile); \n    xmlReader.setContentHandler(revChecker);\n    xmlReader.setErrorHandler(revChecker);\n    xmlReader.parse(new InputSource(ivyXmlFile.getAbsolutePath()));\n    return ! revChecker.fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LibVersionsCheckTask#checkIvyXmlFile(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Check a single ivy.xml file for dependencies' versions in rev=\"${/org/name}\"\n   * format.  Returns false if problems are found, true otherwise.\n   */\n  private boolean checkIvyXmlFile(File ivyXmlFile)\n      throws ParserConfigurationException, SAXException, IOException {\n    log(\"Scanning: \" + ivyXmlFile.getPath(), verboseLevel);\n    SAXParser xmlReader = SAX_PARSER_FACTORY.newSAXParser();\n    DependencyRevChecker revChecker = new DependencyRevChecker(ivyXmlFile); \n    xmlReader.parse(new InputSource(ivyXmlFile.getAbsolutePath()), revChecker);\n    return ! revChecker.fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"f36164b70e3e1719b71a2bd8e1ab09d551d6ada1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["f36164b70e3e1719b71a2bd8e1ab09d551d6ada1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"f36164b70e3e1719b71a2bd8e1ab09d551d6ada1":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f36164b70e3e1719b71a2bd8e1ab09d551d6ada1"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}