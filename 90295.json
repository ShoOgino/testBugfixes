{"path":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","commits":[{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#persist(Writer).mjava","sourceNew":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2284f4281eb212e60f8318c30e1d67c7d25422a7","date":1218739496,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the multicore configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c28792ff7d1774c306e16afbd44ded91a417049b","date":1219072108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    Map<SolrCore, LinkedList<String>> aliases = new HashMap<SolrCore,LinkedList<String>>();\n\n    synchronized(cores) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        String name = entry.getKey();\n        LinkedList<String> a = aliases.get(entry.getValue());\n        if (a==null) a = new LinkedList<String>();\n        if (name.equals(entry.getValue().getName())) {\n          a.addFirst(name);\n        } else {\n          a.addLast(name);\n        }\n        aliases.put(entry.getValue(), a);\n      }\n    }\n\n    for (Map.Entry<SolrCore, LinkedList<String>> entry : aliases.entrySet()) {\n      persist(writer, entry.getValue(), entry.getKey().getCoreDescriptor());\n    }\n\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    synchronized(cores) {\n      for (Map.Entry<String, CoreDescriptor> entry : cores.entrySet()) {\n        persist(writer, entry.getValue());\n      }\n    }\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","bugFix":["0323fcfcacbfb8242fbf70eb58498551b2018c67"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ddc2fd411184c85d1baed1e8d24840a151d6ba1","date":1219508719,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(writer, containerProperties);\n    }\n\n    Map<SolrCore, LinkedList<String>> aliases = new HashMap<SolrCore,LinkedList<String>>();\n\n    synchronized(cores) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        String name = entry.getKey();\n        LinkedList<String> a = aliases.get(entry.getValue());\n        if (a==null) a = new LinkedList<String>();\n        if (name.equals(entry.getValue().getName())) {\n          a.addFirst(name);\n        } else {\n          a.addLast(name);\n        }\n        aliases.put(entry.getValue(), a);\n      }\n    }\n\n    for (Map.Entry<SolrCore, LinkedList<String>> entry : aliases.entrySet()) {\n      persist(writer, entry.getValue(), entry.getKey().getCoreDescriptor());\n    }\n\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    Map<SolrCore, LinkedList<String>> aliases = new HashMap<SolrCore,LinkedList<String>>();\n\n    synchronized(cores) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        String name = entry.getKey();\n        LinkedList<String> a = aliases.get(entry.getValue());\n        if (a==null) a = new LinkedList<String>();\n        if (name.equals(entry.getValue().getName())) {\n          a.addFirst(name);\n        } else {\n          a.addLast(name);\n        }\n        aliases.put(entry.getValue(), a);\n      }\n    }\n\n    for (Map.Entry<SolrCore, LinkedList<String>> entry : aliases.entrySet()) {\n      persist(writer, entry.getValue(), entry.getKey().getCoreDescriptor());\n    }\n\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fa04ebb8371b3585c0b085fe1f768dcb5becf03","date":1219524738,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(writer, containerProperties);\n    }\n\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    Map<SolrCore, LinkedList<String>> aliases = new HashMap<SolrCore,LinkedList<String>>();\n\n    synchronized(cores) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        String name = entry.getKey();\n        LinkedList<String> a = aliases.get(entry.getValue());\n        if (a==null) a = new LinkedList<String>();\n        if (name.equals(entry.getValue().getName())) {\n          a.addFirst(name);\n        } else {\n          a.addLast(name);\n        }\n        aliases.put(entry.getValue(), a);\n      }\n    }\n\n    for (Map.Entry<SolrCore, LinkedList<String>> entry : aliases.entrySet()) {\n      persist(writer, entry.getValue(), entry.getKey().getCoreDescriptor());\n    }\n\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(writer, containerProperties);\n    }\n\n    Map<SolrCore, LinkedList<String>> aliases = new HashMap<SolrCore,LinkedList<String>>();\n\n    synchronized(cores) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        String name = entry.getKey();\n        LinkedList<String> a = aliases.get(entry.getValue());\n        if (a==null) a = new LinkedList<String>();\n        if (name.equals(entry.getValue().getName())) {\n          a.addFirst(name);\n        } else {\n          a.addLast(name);\n        }\n        aliases.put(entry.getValue(), a);\n      }\n    }\n\n    for (Map.Entry<SolrCore, LinkedList<String>> entry : aliases.entrySet()) {\n      persist(writer, entry.getValue(), entry.getKey().getCoreDescriptor());\n    }\n\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","bugFix":["d262ab35a1389f4ad912bfa8b61a202c61cc475a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008","date":1243488136,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    w.write(\">\\n\");\n\n    Map<SolrCore, LinkedList<String>> aliases = new HashMap<SolrCore,LinkedList<String>>();\n\n    synchronized(cores) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        String name = entry.getKey();\n        LinkedList<String> a = aliases.get(entry.getValue());\n        if (a==null) a = new LinkedList<String>();\n        if (name.equals(entry.getValue().getName())) {\n          a.addFirst(name);\n        } else {\n          a.addLast(name);\n        }\n        aliases.put(entry.getValue(), a);\n      }\n    }\n\n    for (Map.Entry<SolrCore, LinkedList<String>> entry : aliases.entrySet()) {\n      persist(w, entry.getValue(), entry.getKey().getCoreDescriptor());\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer writer) throws IOException {\n    writer.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    writer.write(\"<solr\");\n    if (this.libDir != null) {\n      writer.write(\" sharedLib='\");\n      XML.escapeAttributeValue(libDir, writer);\n      writer.write('\\'');\n    }\n    writer.write(\" persistent='\");\n    if (isPersistent()) {\n      writer.write(\"true'\");\n    }\n    else {\n      writer.write(\"false'\");\n    }\n    writer.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(writer, containerProperties);\n    }\n\n    writer.write(\"<cores adminPath='\");\n    XML.escapeAttributeValue(adminPath, writer);\n    writer.write('\\'');\n    writer.write(\">\\n\");\n\n    Map<SolrCore, LinkedList<String>> aliases = new HashMap<SolrCore,LinkedList<String>>();\n\n    synchronized(cores) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        String name = entry.getKey();\n        LinkedList<String> a = aliases.get(entry.getValue());\n        if (a==null) a = new LinkedList<String>();\n        if (name.equals(entry.getValue().getName())) {\n          a.addFirst(name);\n        } else {\n          a.addLast(name);\n        }\n        aliases.put(entry.getValue(), a);\n      }\n    }\n\n    for (Map.Entry<SolrCore, LinkedList<String>> entry : aliases.entrySet()) {\n      persist(writer, entry.getValue(), entry.getKey().getCoreDescriptor());\n    }\n\n    writer.write(\"</cores>\\n\");\n    writer.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":["d1c2f76fc022aa441f0c9fed67189098870656a7","be8442e5675c8b74c443e2abb4fc210eeb36c20b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09a6cbf552ecdd63b030168a3ab8e13d88aa3db5","date":1243488519,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    Map<SolrCore, LinkedList<String>> aliases = new HashMap<SolrCore,LinkedList<String>>();\n\n    synchronized(cores) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        String name = entry.getKey();\n        LinkedList<String> a = aliases.get(entry.getValue());\n        if (a==null) a = new LinkedList<String>();\n        if (name.equals(entry.getValue().getName())) {\n          a.addFirst(name);\n        } else {\n          a.addLast(name);\n        }\n        aliases.put(entry.getValue(), a);\n      }\n    }\n\n    for (Map.Entry<SolrCore, LinkedList<String>> entry : aliases.entrySet()) {\n      persist(w, entry.getValue(), entry.getKey().getCoreDescriptor());\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    w.write(\">\\n\");\n\n    Map<SolrCore, LinkedList<String>> aliases = new HashMap<SolrCore,LinkedList<String>>();\n\n    synchronized(cores) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        String name = entry.getKey();\n        LinkedList<String> a = aliases.get(entry.getValue());\n        if (a==null) a = new LinkedList<String>();\n        if (name.equals(entry.getValue().getName())) {\n          a.addFirst(name);\n        } else {\n          a.addLast(name);\n        }\n        aliases.put(entry.getValue(), a);\n      }\n    }\n\n    for (Map.Entry<SolrCore, LinkedList<String>> entry : aliases.entrySet()) {\n      persist(w, entry.getValue(), entry.getKey().getCoreDescriptor());\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":["d1c2f76fc022aa441f0c9fed67189098870656a7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72","date":1260860758,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    Map<SolrCore, LinkedList<String>> aliases = new HashMap<SolrCore,LinkedList<String>>();\n\n    synchronized(cores) {\n      for (Map.Entry<String, SolrCore> entry : cores.entrySet()) {\n        String name = entry.getKey();\n        LinkedList<String> a = aliases.get(entry.getValue());\n        if (a==null) a = new LinkedList<String>();\n        if (name.equals(entry.getValue().getName())) {\n          a.addFirst(name);\n        } else {\n          a.addLast(name);\n        }\n        aliases.put(entry.getValue(), a);\n      }\n    }\n\n    for (Map.Entry<SolrCore, LinkedList<String>> entry : aliases.entrySet()) {\n      persist(w, entry.getValue(), entry.getKey().getCoreDescriptor());\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72":["09a6cbf552ecdd63b030168a3ab8e13d88aa3db5"],"09a6cbf552ecdd63b030168a3ab8e13d88aa3db5":["3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008"],"8fa04ebb8371b3585c0b085fe1f768dcb5becf03":["1ddc2fd411184c85d1baed1e8d24840a151d6ba1"],"2284f4281eb212e60f8318c30e1d67c7d25422a7":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c28792ff7d1774c306e16afbd44ded91a417049b":["2284f4281eb212e60f8318c30e1d67c7d25422a7"],"ad94625fb8d088209f46650c8097196fec67f00c":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72"],"3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008":["8fa04ebb8371b3585c0b085fe1f768dcb5becf03"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1ddc2fd411184c85d1baed1e8d24840a151d6ba1":["c28792ff7d1774c306e16afbd44ded91a417049b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72":["ad94625fb8d088209f46650c8097196fec67f00c"],"09a6cbf552ecdd63b030168a3ab8e13d88aa3db5":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72"],"8fa04ebb8371b3585c0b085fe1f768dcb5becf03":["3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008"],"2284f4281eb212e60f8318c30e1d67c7d25422a7":["c28792ff7d1774c306e16afbd44ded91a417049b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"c28792ff7d1774c306e16afbd44ded91a417049b":["1ddc2fd411184c85d1baed1e8d24840a151d6ba1"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008":["09a6cbf552ecdd63b030168a3ab8e13d88aa3db5"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["2284f4281eb212e60f8318c30e1d67c7d25422a7"],"1ddc2fd411184c85d1baed1e8d24840a151d6ba1":["8fa04ebb8371b3585c0b085fe1f768dcb5becf03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}