{"path":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#assertFormat(String,long).mjava","commits":[{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#assertFormat(String,long).mjava","pathOld":"/dev/null","sourceNew":"  private void assertFormat(final String expected, final long millis) {\n    assertEquals(expected, Instant.ofEpochMilli(millis).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","date":1463148204,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#assertFormat(String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#assertFormat(String,long).mjava","sourceNew":"  private void assertFormat(final String expected, final long millis) {\n    assertEquals(expected, Instant.ofEpochMilli(millis).toString()); // assert same as ISO_INSTANT\n    assertEquals(millis, DateMathParser.parseMath(null, expected).getTime()); // assert DMP has same result\n  }\n\n","sourceOld":"  private void assertFormat(final String expected, final long millis) {\n    assertEquals(expected, Instant.ofEpochMilli(millis).toString());\n  }\n\n","bugFix":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#assertFormat(String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#assertFormat(String,long).mjava","sourceNew":"  private void assertFormat(final String expected, final long millis) {\n    assertEquals(expected, Instant.ofEpochMilli(millis).toString()); // assert same as ISO_INSTANT\n    assertEquals(millis, DateMathParser.parseMath(null, expected).getTime()); // assert DMP has same result\n  }\n\n","sourceOld":"  private void assertFormat(final String expected, final long millis) {\n    assertEquals(expected, Instant.ofEpochMilli(millis).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#assertFormat(String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#assertFormat(String,long).mjava","sourceNew":"  private void assertFormat(final String expected, final long millis) {\n    assertEquals(expected, Instant.ofEpochMilli(millis).toString()); // assert same as ISO_INSTANT\n    assertEquals(millis, DateMathParser.parseMath(null, expected).getTime()); // assert DMP has same result\n  }\n\n","sourceOld":"  private void assertFormat(final String expected, final long millis) {\n    assertEquals(expected, Instant.ofEpochMilli(millis).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#assertFormat(String,long).mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#assertFormat(String,long).mjava","sourceNew":"  private void assertFormat(final String expected, final long millis) {\n    assertEquals(expected, Instant.ofEpochMilli(millis).toString()); // assert same as ISO_INSTANT\n    assertEquals(millis, DateMathParser.parseMath(null, expected).getTime()); // assert DMP has same result\n  }\n\n","sourceOld":"  private void assertFormat(final String expected, final long millis) {\n    assertEquals(expected, Instant.ofEpochMilli(millis).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["d3f6c7717a0f1decd1668144537943efcc70cd95","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d3f6c7717a0f1decd1668144537943efcc70cd95","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d3f6c7717a0f1decd1668144537943efcc70cd95","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["0ad30c6a479e764150a3316e57263319775f1df2"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}