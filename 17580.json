{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","commits":[{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);    \n    child.setExpression(props.entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);    \n    child.setExpression(props.entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n\n    child.setExpression(tmpParams.getMap().entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);    \n    child.setExpression(props.entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n\n    child.setExpression(tmpParams.getMap().entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);    \n    child.setExpression(props.entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n\n    child.setExpression(tmpParams.getMap().entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);    \n    child.setExpression(props.entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n\n    child.setExpression(tmpParams.getMap().entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);    \n    child.setExpression(props.entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#toExplanation(StreamFactory).mjava","sourceNew":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);\n\n    child.setExpression(params.stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), Arrays.toString(e.getValue()))).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","sourceOld":"  @Override\n  public Explanation toExplanation(StreamFactory factory) throws IOException {\n\n    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());\n    \n    explanation.setFunctionName(factory.getFunctionName(this.getClass()));\n    explanation.setImplementingClass(this.getClass().getName());\n    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);\n    explanation.setExpression(toExpression(factory).toString());\n    \n    // child is a datastore so add it at this point\n    StreamExplanation child = new StreamExplanation(getStreamNodeId() + \"-datastore\");\n    child.setFunctionName(String.format(Locale.ROOT, \"solr (%s)\", collection)); \n    // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a\n    // parallel stream.\n    \n    child.setImplementingClass(\"Solr/Lucene\");\n    child.setExpressionType(ExpressionType.DATASTORE);\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n\n    child.setExpression(tmpParams.getMap().entrySet().stream().map(e -> String.format(Locale.ROOT, \"%s=%s\", e.getKey(), e.getValue())).collect(Collectors.joining(\",\")));\n    \n    explanation.addChild(child);\n    \n    return explanation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["129e5b874f99ae4e04f39c337c940dda690f2d38","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}