{"path":"lucene/src/test/org/apache/lucene/search/ChainingCollectorTest#testNullCollectors().mjava","commits":[{"id":"e97a81042fe27c6ec16494bdef5bc8571f7ce835","date":1284029392,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/ChainingCollectorTest#testNullCollectors().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNullCollectors() throws Exception {\n    // Tests that the collector rejects all null collectors.\n    try {\n      new ChainingCollector(null, null);\n      fail(\"all collectors null should not be supported\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    Collector c = new ChainingCollector(new DummyCollector(), null, new DummyCollector());\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null, 0);\n    c.setScorer(null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13ad74d2400faab706507f11a36b36e28a6c0058","date":1284177017,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiCollectorTest#testNullCollectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/ChainingCollectorTest#testNullCollectors().mjava","sourceNew":"  @Test\n  public void testNullCollectors() throws Exception {\n    // Tests that the collector rejects all null collectors.\n    try {\n      MultiCollector.wrap(null, null);\n      fail(\"only null collectors should not be supported\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    Collector c = MultiCollector.wrap(new DummyCollector(), null, new DummyCollector());\n    assertTrue(c instanceof MultiCollector);\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null, 0);\n    c.setScorer(null);\n  }\n\n","sourceOld":"  @Test\n  public void testNullCollectors() throws Exception {\n    // Tests that the collector rejects all null collectors.\n    try {\n      new ChainingCollector(null, null);\n      fail(\"all collectors null should not be supported\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n\n    // Tests that the collector handles some null collectors well. If it\n    // doesn't, an NPE would be thrown.\n    Collector c = new ChainingCollector(new DummyCollector(), null, new DummyCollector());\n    assertTrue(c.acceptsDocsOutOfOrder());\n    c.collect(1);\n    c.setNextReader(null, 0);\n    c.setScorer(null);\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"13ad74d2400faab706507f11a36b36e28a6c0058":["e97a81042fe27c6ec16494bdef5bc8571f7ce835"],"e97a81042fe27c6ec16494bdef5bc8571f7ce835":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["13ad74d2400faab706507f11a36b36e28a6c0058"]},"commit2Childs":{"13ad74d2400faab706507f11a36b36e28a6c0058":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e97a81042fe27c6ec16494bdef5bc8571f7ce835":["13ad74d2400faab706507f11a36b36e28a6c0058"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e97a81042fe27c6ec16494bdef5bc8571f7ce835"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}