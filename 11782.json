{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the first Connector found for the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the first Connector found for the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the first Connector found for the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the first Connector found for the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the first Connector found for the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the first Connector found for the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    if (lastPort == -1) {\n      throw new IllegalStateException(\"You cannot get the port until this instance has started\");\n    }\n    return lastPort;\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the first Connector found for the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    if (lastPort == -1) {\n      throw new IllegalStateException(\"You cannot get the port until this instance has started\");\n    }\n    return lastPort;\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the first Connector found for the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    if (lastPort == -1) {\n      throw new IllegalStateException(\"You cannot get the port until this instance has started\");\n    }\n    return lastPort;\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the first Connector found for the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    Connector[] conns = server.getConnectors();\n    if (0 == conns.length) {\n      throw new RuntimeException(\"Jetty Server has no Connectors\");\n    }\n    return conns[0].getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    if (lastPort == -1) {\n      throw new IllegalStateException(\"You cannot get the port until this instance has started\");\n    }\n    return (proxyPort != -1) ? proxyPort : lastPort;\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    if (lastPort == -1) {\n      throw new IllegalStateException(\"You cannot get the port until this instance has started\");\n    }\n    return lastPort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    if (jettyPort == -1) {\n      throw new IllegalStateException(\"You cannot get the port until this instance has started\");\n    }\n    return (proxyPort != -1) ? proxyPort : jettyPort;\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    if (lastPort == -1) {\n      throw new IllegalStateException(\"You cannot get the port until this instance has started\");\n    }\n    return (proxyPort != -1) ? proxyPort : lastPort;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    return getLocalPort(false);\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    if (jettyPort == -1) {\n      throw new IllegalStateException(\"You cannot get the port until this instance has started\");\n    }\n    return (proxyPort != -1) ? proxyPort : jettyPort;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","84f20f331d8001864545c7021812d8c6509c7593","88c208297981f95c495558c24ae47a36a6300a63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#getLocalPort().mjava","sourceNew":"  /**\n   * Returns the Local Port of the jetty Server.\n   *\n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    return getLocalPort(false);\n  }\n\n","sourceOld":"  /**\n   * Returns the Local Port of the jetty Server.\n   * \n   * @exception RuntimeException if there is no Connector\n   */\n  public int getLocalPort() {\n    return getLocalPort(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["84f20f331d8001864545c7021812d8c6509c7593"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"84f20f331d8001864545c7021812d8c6509c7593":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","14d5815ecbef89580f5c48990bcd433f04f8563a"],"84f20f331d8001864545c7021812d8c6509c7593":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["84f20f331d8001864545c7021812d8c6509c7593"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}