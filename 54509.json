{"path":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer],Map[String,Map[String,Object]]).mjava","commits":[{"id":"96fdd7189254bc9698a673fdf4e2b0e97e993ede","date":1387480427,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer],Map[String,Map[String,Object]]).mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer]).mjava","sourceNew":"  protected void testDocumentTypesInternal(\n      String[] files, \n      Map<String,Integer> expectedRecords, \n      Map<String, Map<String, Object>> expectedRecordContents) throws Exception {\n    \n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        collector.reset();\n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n        Map<String, Object> expectedContents = expectedRecordContents.get(file);\n        if (expectedContents != null) {\n          Record actual = collector.getFirstRecord();\n          for (Map.Entry<String, Object> entry : expectedContents.entrySet()) {\n            if (entry.getValue() == NON_EMPTY_FIELD) {\n              assertNotNull(entry.getKey());\n              assertTrue(actual.getFirstValue(entry.getKey()).toString().length() > 0);\n            } else if (entry.getValue() == null) {\n              assertEquals(\"key:\" + entry.getKey(), 0, actual.get(entry.getKey()).size());\n            } else {\n              assertEquals(\"key:\" + entry.getKey(), Arrays.asList(entry.getValue()), actual.get(entry.getKey()));\n            }\n          }\n        }\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","sourceOld":"  protected void testDocumentTypesInternal(String[] files, Map<String,Integer> expectedRecords) throws Exception {\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e099d31eab356de3593b1c0caa7d167b2c45316f","date":1393441781,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer],Map[String,Map[String,Object]]).mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer],Map[String,Map[String,Object]]).mjava","sourceNew":"  protected void testDocumentTypesInternal(\n      String[] files, \n      Map<String,Integer> expectedRecords, \n      Map<String, Map<String, Object>> expectedRecordContents) throws Exception {\n\n    assumeTrue(\"This test has issues with this locale: https://issues.apache.org/jira/browse/SOLR-5778\", \n        \"GregorianCalendar\".equals(Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault()).getClass().getSimpleName()));\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        collector.reset();\n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n        Map<String, Object> expectedContents = expectedRecordContents.get(file);\n        if (expectedContents != null) {\n          Record actual = collector.getFirstRecord();\n          for (Map.Entry<String, Object> entry : expectedContents.entrySet()) {\n            if (entry.getValue() == NON_EMPTY_FIELD) {\n              assertNotNull(entry.getKey());\n              assertTrue(actual.getFirstValue(entry.getKey()).toString().length() > 0);\n            } else if (entry.getValue() == null) {\n              assertEquals(\"key:\" + entry.getKey(), 0, actual.get(entry.getKey()).size());\n            } else {\n              assertEquals(\"key:\" + entry.getKey(), Arrays.asList(entry.getValue()), actual.get(entry.getKey()));\n            }\n          }\n        }\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","sourceOld":"  protected void testDocumentTypesInternal(\n      String[] files, \n      Map<String,Integer> expectedRecords, \n      Map<String, Map<String, Object>> expectedRecordContents) throws Exception {\n    \n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        collector.reset();\n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n        Map<String, Object> expectedContents = expectedRecordContents.get(file);\n        if (expectedContents != null) {\n          Record actual = collector.getFirstRecord();\n          for (Map.Entry<String, Object> entry : expectedContents.entrySet()) {\n            if (entry.getValue() == NON_EMPTY_FIELD) {\n              assertNotNull(entry.getKey());\n              assertTrue(actual.getFirstValue(entry.getKey()).toString().length() > 0);\n            } else if (entry.getValue() == null) {\n              assertEquals(\"key:\" + entry.getKey(), 0, actual.get(entry.getKey()).size());\n            } else {\n              assertEquals(\"key:\" + entry.getKey(), Arrays.asList(entry.getValue()), actual.get(entry.getKey()));\n            }\n          }\n        }\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer],Map[String,Map[String,Object]]).mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer],Map[String,Map[String,Object]]).mjava","sourceNew":"  protected void testDocumentTypesInternal(\n      String[] files, \n      Map<String,Integer> expectedRecords, \n      Map<String, Map<String, Object>> expectedRecordContents) throws Exception {\n\n    assumeTrue(\"This test has issues with this locale: https://issues.apache.org/jira/browse/SOLR-5778\", \n        \"GregorianCalendar\".equals(Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault()).getClass().getSimpleName()));\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        collector.reset();\n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n        Map<String, Object> expectedContents = expectedRecordContents.get(file);\n        if (expectedContents != null) {\n          Record actual = collector.getFirstRecord();\n          for (Map.Entry<String, Object> entry : expectedContents.entrySet()) {\n            if (entry.getValue() == NON_EMPTY_FIELD) {\n              assertNotNull(entry.getKey());\n              assertTrue(actual.getFirstValue(entry.getKey()).toString().length() > 0);\n            } else if (entry.getValue() == null) {\n              assertEquals(\"key:\" + entry.getKey(), 0, actual.get(entry.getKey()).size());\n            } else {\n              assertEquals(\"key:\" + entry.getKey(), Arrays.asList(entry.getValue()), actual.get(entry.getKey()));\n            }\n          }\n        }\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","sourceOld":"  protected void testDocumentTypesInternal(\n      String[] files, \n      Map<String,Integer> expectedRecords, \n      Map<String, Map<String, Object>> expectedRecordContents) throws Exception {\n    \n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        collector.reset();\n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n        Map<String, Object> expectedContents = expectedRecordContents.get(file);\n        if (expectedContents != null) {\n          Record actual = collector.getFirstRecord();\n          for (Map.Entry<String, Object> entry : expectedContents.entrySet()) {\n            if (entry.getValue() == NON_EMPTY_FIELD) {\n              assertNotNull(entry.getKey());\n              assertTrue(actual.getFirstValue(entry.getKey()).toString().length() > 0);\n            } else if (entry.getValue() == null) {\n              assertEquals(\"key:\" + entry.getKey(), 0, actual.get(entry.getKey()).size());\n            } else {\n              assertEquals(\"key:\" + entry.getKey(), Arrays.asList(entry.getValue()), actual.get(entry.getKey()));\n            }\n          }\n        }\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer],Map[String,Map[String,Object]]).mjava","sourceNew":null,"sourceOld":"  protected void testDocumentTypesInternal(\n      String[] files, \n      Map<String,Integer> expectedRecords, \n      Map<String, Map<String, Object>> expectedRecordContents) throws Exception {\n\n    assumeTrue(\"This test has issues with this locale: https://issues.apache.org/jira/browse/SOLR-5778\", \n        \"GregorianCalendar\".equals(Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault()).getClass().getSimpleName()));\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        collector.reset();\n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n        Map<String, Object> expectedContents = expectedRecordContents.get(file);\n        if (expectedContents != null) {\n          Record actual = collector.getFirstRecord();\n          for (Map.Entry<String, Object> entry : expectedContents.entrySet()) {\n            if (entry.getValue() == NON_EMPTY_FIELD) {\n              assertNotNull(entry.getKey());\n              assertTrue(actual.getFirstValue(entry.getKey()).toString().length() > 0);\n            } else if (entry.getValue() == null) {\n              assertEquals(\"key:\" + entry.getKey(), 0, actual.get(entry.getKey()).size());\n            } else {\n              assertEquals(\"key:\" + entry.getKey(), Arrays.asList(entry.getValue()), actual.get(entry.getKey()));\n            }\n          }\n        }\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentTypesInternal(String[],Map[String,Integer],Map[String,Map[String,Object]]).mjava","sourceNew":null,"sourceOld":"  protected void testDocumentTypesInternal(\n      String[] files, \n      Map<String,Integer> expectedRecords, \n      Map<String, Map<String, Object>> expectedRecordContents) throws Exception {\n\n    assumeTrue(\"This test has issues with this locale: https://issues.apache.org/jira/browse/SOLR-5778\", \n        \"GregorianCalendar\".equals(Calendar.getInstance(TimeZone.getDefault(), Locale.getDefault()).getClass().getSimpleName()));\n    deleteAllDocuments();\n    int numDocs = 0;    \n    for (int i = 0; i < 1; i++) {\n      \n      for (String file : files) {\n        File f = new File(file);\n        byte[] body = Files.toByteArray(f);\n        Record event = new Record();\n        //event.put(Fields.ID, docId++);\n        event.getFields().put(Fields.ATTACHMENT_BODY, new ByteArrayInputStream(body));\n        event.getFields().put(Fields.ATTACHMENT_NAME, f.getName());\n        event.getFields().put(Fields.BASE_ID, f.getName());        \n        collector.reset();\n        load(event);\n        Integer count = expectedRecords.get(file);\n        if (count != null) {\n          numDocs += count;\n        } else {\n          numDocs++;\n        }\n        assertEquals(\"unexpected results in \" + file, numDocs, queryResultSetSize(\"*:*\"));\n        Map<String, Object> expectedContents = expectedRecordContents.get(file);\n        if (expectedContents != null) {\n          Record actual = collector.getFirstRecord();\n          for (Map.Entry<String, Object> entry : expectedContents.entrySet()) {\n            if (entry.getValue() == NON_EMPTY_FIELD) {\n              assertNotNull(entry.getKey());\n              assertTrue(actual.getFirstValue(entry.getKey()).toString().length() > 0);\n            } else if (entry.getValue() == null) {\n              assertEquals(\"key:\" + entry.getKey(), 0, actual.get(entry.getKey()).size());\n            } else {\n              assertEquals(\"key:\" + entry.getKey(), Arrays.asList(entry.getValue()), actual.get(entry.getKey()));\n            }\n          }\n        }\n      }\n    }\n    assertEquals(numDocs, queryResultSetSize(\"*:*\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["e099d31eab356de3593b1c0caa7d167b2c45316f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e099d31eab356de3593b1c0caa7d167b2c45316f":["96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["e099d31eab356de3593b1c0caa7d167b2c45316f"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["96fdd7189254bc9698a673fdf4e2b0e97e993ede","e099d31eab356de3593b1c0caa7d167b2c45316f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96fdd7189254bc9698a673fdf4e2b0e97e993ede"],"e099d31eab356de3593b1c0caa7d167b2c45316f":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"96fdd7189254bc9698a673fdf4e2b0e97e993ede":["e099d31eab356de3593b1c0caa7d167b2c45316f","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe1c4aa9af769a38e878f608070f672efbeac27f","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}