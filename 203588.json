{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438e995b4e32916f631722aab36254146830fefb","date":1328903827,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getCurrentSegmentFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    \n    // should remove the corrumpted segments_N\n    new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null)).close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.shutdown();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    \n    // should remove the corrumpted segments_N\n    new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null)).shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    \n    // should remove the corrumpted segments_N\n    new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null)).close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.shutdown();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    \n    // should remove the corrumpted segments_N\n    new IndexWriter(dir, newIndexWriterConfig(null)).shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.shutdown();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    \n    // should remove the corrumpted segments_N\n    new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null)).shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    \n    // should remove the corrumpted segments_N\n    new IndexWriter(dir, newIndexWriterConfig(null)).close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.shutdown();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    \n    // should remove the corrumpted segments_N\n    new IndexWriter(dir, newIndexWriterConfig(null)).shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we corrupt the index\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    try {\n      DirectoryReader.open(dir);\n      fail(\"didn't get expected checksum error\");\n    } catch (CorruptIndexException expected) {\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n    } catch (IOException e) {\n      e.printStackTrace(System.out);\n      fail(\"segmentInfos failed to retry fallback to correct segments_N file\");\n    }\n    reader.close();\n    \n    // should remove the corrumpted segments_N\n    new IndexWriter(dir, newIndexWriterConfig(null)).close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSegmentsChecksumError().mjava","sourceNew":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we corrupt the index\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    expectThrows(CorruptIndexException.class, () -> {\n      DirectoryReader.open(dir);\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: Simulate checksum error in segments_N\n  public void testSegmentsChecksumError() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we corrupt the index\n\n    IndexWriter writer = null;\n\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    final String segmentsFileName = SegmentInfos.getLastCommitSegmentsFileName(dir);\n    IndexInput in = dir.openInput(segmentsFileName, newIOContext(random()));\n    IndexOutput out = dir.createOutput(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", 1+gen), newIOContext(random()));\n    out.copyBytes(in, in.length()-1);\n    byte b = in.readByte();\n    out.writeByte((byte) (1+b));\n    out.close();\n    in.close();\n\n    try {\n      DirectoryReader.open(dir);\n      fail(\"didn't get expected checksum error\");\n    } catch (CorruptIndexException expected) {\n    }\n\n    dir.close();\n  }\n\n","bugFix":["46e4a8bdfbafda795ef9c39a2bc2d47095770299","e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9eae2a56dc810a17cf807d831f720dec931a03de":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["9eae2a56dc810a17cf807d831f720dec931a03de"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["438e995b4e32916f631722aab36254146830fefb"],"438e995b4e32916f631722aab36254146830fefb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["05fe562aa248790944d43cdd478f512572835ba0"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9eae2a56dc810a17cf807d831f720dec931a03de":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["9eae2a56dc810a17cf807d831f720dec931a03de"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["438e995b4e32916f631722aab36254146830fefb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"438e995b4e32916f631722aab36254146830fefb":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}