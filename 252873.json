{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"\tpublic void testGetRangeFragments() throws Exception\n\t{\n\t\tdoSearching(FIELD_NAME + \":[kannedy TO kznnedy]\"); //bug?needs lower case\n\t\tdoStandardHighlights();\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 5);\n\t}\n\n","sourceOld":"\tpublic void testGetRangeFragments() throws Exception\n\t{\n\t\tdoSearching(FIELD_NAME + \":[kannedy TO kznnedy]\"); //bug?needs lower case\n\t\tdoStandardHighlights();\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 5);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe8fd1f1ce3435575164abc8d6edfedefc7649e8","date":1176761047,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"\tpublic void testGetRangeFragments() throws Exception\n\t{\n\t\tString queryString=FIELD_NAME + \":[kannedy TO kznnedy]\"; \n\t\t\n\t\t//Need to explicitly set the QueryParser property to use RangeQuery rather than RangeFilters\n\t\tQueryParser parser=new QueryParser(FIELD_NAME, new StandardAnalyzer());\n\t\tparser.setUseOldRangeQuery(true);\n\t\tquery = parser.parse(queryString);\n\t\tdoSearching(query);\n\t\t\n\t\tdoStandardHighlights();\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 5);\n\t}\n\n","sourceOld":"\tpublic void testGetRangeFragments() throws Exception\n\t{\n\t\tdoSearching(FIELD_NAME + \":[kannedy TO kznnedy]\"); //bug?needs lower case\n\t\tdoStandardHighlights();\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 5);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use RangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n        parser.setUseOldRangeQuery(true);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"\tpublic void testGetRangeFragments() throws Exception\n\t{\n\t\tString queryString=FIELD_NAME + \":[kannedy TO kznnedy]\"; \n\t\t\n\t\t//Need to explicitly set the QueryParser property to use RangeQuery rather than RangeFilters\n\t\tQueryParser parser=new QueryParser(FIELD_NAME, new StandardAnalyzer());\n\t\tparser.setUseOldRangeQuery(true);\n\t\tquery = parser.parse(queryString);\n\t\tdoSearching(query);\n\t\t\n\t\tdoStandardHighlights();\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 5);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n        parser.setUseOldRangeQuery(true);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use RangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n        parser.setUseOldRangeQuery(true);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n        parser.setUseOldRangeQuery(true);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n        parser.setUseOldRangeQuery(true);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc138e05008664b5e01dc83f6ad95bd73b91c5","date":1256054789,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n        parser.setUseOldRangeQuery(true);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464a71190fd7694704427cd763d7c957c10e935b","date":1256329736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetRangeFragments().mjava","sourceNew":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetRangeFragments() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        String queryString = FIELD_NAME + \":[kannedy TO kznnedy]\";\n\n        // Need to explicitly set the QueryParser property to use TermRangeQuery\n        // rather\n        // than RangeFilters\n        QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, analyzer);\n        parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n        query = parser.parse(queryString);\n        doSearching(query);\n\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 5);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["464a71190fd7694704427cd763d7c957c10e935b"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"464a71190fd7694704427cd763d7c957c10e935b":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["296b8b38a87feb478921f77834a2302dfe77641c"],"fe8fd1f1ce3435575164abc8d6edfedefc7649e8":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"296b8b38a87feb478921f77834a2302dfe77641c":["fe8fd1f1ce3435575164abc8d6edfedefc7649e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["fe8fd1f1ce3435575164abc8d6edfedefc7649e8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"464a71190fd7694704427cd763d7c957c10e935b":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba1116b3450a9c1642c89445d131b37344055245":["464a71190fd7694704427cd763d7c957c10e935b"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"fe8fd1f1ce3435575164abc8d6edfedefc7649e8":["296b8b38a87feb478921f77834a2302dfe77641c"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"296b8b38a87feb478921f77834a2302dfe77641c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}