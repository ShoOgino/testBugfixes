{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testClusterStateMigration().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testClusterStateMigration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","sourceNew":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testClusterStateMigration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","sourceNew":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testClusterStateMigration().mjava","sourceNew":null,"sourceOld":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}