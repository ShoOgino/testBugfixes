{"path":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#verifyFlexVsPreFlex(Random,IndexReader).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#verifyFlexVsPreFlex(Random,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public static void verifyFlexVsPreFlex(Random rand, IndexReader r) throws Exception {\n    // First test on DirReader\n\n    verifyFlexVsPreFlexSingle(rand, r);\n\n    // Then on each individual sub reader\n    IndexReader[] subReaders = r.getSequentialSubReaders();\n    IndexReader[] forcedSubReaders = new IndexReader[subReaders.length];\n    for(int i=0;i<subReaders.length;i++) {\n      forcedSubReaders[i] = new ForcedExternalReader(subReaders[i]);\n      verifyFlexVsPreFlexSingle(rand, forcedSubReaders[i]);\n      verifyFlexVsPreFlexSingle(rand, subReaders[i]);\n    }\n\n    // Then on a new MultiReader\n    IndexReader m = new MultiReader(subReaders, false);\n    verifyFlexVsPreFlexSingle(rand, m);\n    m.close();\n\n    // Then on a forced-external reader (forced flex to\n    // emulate API on pre-flex API, which in turn is\n    // emulating pre-flex on flex -- twisted, but, better\n    // work):\n    verifyFlexVsPreFlexSingle(rand, new ForcedExternalReader(r));\n    m = new MultiReader(forcedSubReaders, false);\n    verifyFlexVsPreFlexSingle(rand, m);\n    m.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20cf910d1892b0a0ff8543ec4551b6df2dc3de40","date":1275769896,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#verifyFlexVsPreFlex(Random,IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#verifyFlexVsPreFlex(Random,IndexReader).mjava","sourceNew":"  public static void verifyFlexVsPreFlex(Random rand, IndexReader r) throws Exception {\n    // First test on DirReader\n\n    verifyFlexVsPreFlexSingle(rand, r);\n\n    // Then on each individual sub reader\n    IndexReader[] subReaders = r.getSequentialSubReaders();\n    for(int i=0;i<subReaders.length;i++) {\n      verifyFlexVsPreFlexSingle(rand, subReaders[i]);\n    }\n\n    // Then on a new MultiReader\n    IndexReader m = new MultiReader(subReaders, false);\n    verifyFlexVsPreFlexSingle(rand, m);\n    m.close();\n  }\n\n","sourceOld":"  public static void verifyFlexVsPreFlex(Random rand, IndexReader r) throws Exception {\n    // First test on DirReader\n\n    verifyFlexVsPreFlexSingle(rand, r);\n\n    // Then on each individual sub reader\n    IndexReader[] subReaders = r.getSequentialSubReaders();\n    IndexReader[] forcedSubReaders = new IndexReader[subReaders.length];\n    for(int i=0;i<subReaders.length;i++) {\n      forcedSubReaders[i] = new ForcedExternalReader(subReaders[i]);\n      verifyFlexVsPreFlexSingle(rand, forcedSubReaders[i]);\n      verifyFlexVsPreFlexSingle(rand, subReaders[i]);\n    }\n\n    // Then on a new MultiReader\n    IndexReader m = new MultiReader(subReaders, false);\n    verifyFlexVsPreFlexSingle(rand, m);\n    m.close();\n\n    // Then on a forced-external reader (forced flex to\n    // emulate API on pre-flex API, which in turn is\n    // emulating pre-flex on flex -- twisted, but, better\n    // work):\n    verifyFlexVsPreFlexSingle(rand, new ForcedExternalReader(r));\n    m = new MultiReader(forcedSubReaders, false);\n    verifyFlexVsPreFlexSingle(rand, m);\n    m.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#verifyFlexVsPreFlex(Random,IndexReader).mjava","sourceNew":null,"sourceOld":"  public static void verifyFlexVsPreFlex(Random rand, IndexReader r) throws Exception {\n    // First test on DirReader\n\n    verifyFlexVsPreFlexSingle(rand, r);\n\n    // Then on each individual sub reader\n    IndexReader[] subReaders = r.getSequentialSubReaders();\n    for(int i=0;i<subReaders.length;i++) {\n      verifyFlexVsPreFlexSingle(rand, subReaders[i]);\n    }\n\n    // Then on a new MultiReader\n    IndexReader m = new MultiReader(subReaders, false);\n    verifyFlexVsPreFlexSingle(rand, m);\n    m.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/FlexTestUtil#verifyFlexVsPreFlex(Random,IndexReader).mjava","sourceNew":null,"sourceOld":"  public static void verifyFlexVsPreFlex(Random rand, IndexReader r) throws Exception {\n    // First test on DirReader\n\n    verifyFlexVsPreFlexSingle(rand, r);\n\n    // Then on each individual sub reader\n    IndexReader[] subReaders = r.getSequentialSubReaders();\n    for(int i=0;i<subReaders.length;i++) {\n      verifyFlexVsPreFlexSingle(rand, subReaders[i]);\n    }\n\n    // Then on a new MultiReader\n    IndexReader m = new MultiReader(subReaders, false);\n    verifyFlexVsPreFlexSingle(rand, m);\n    m.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20cf910d1892b0a0ff8543ec4551b6df2dc3de40":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5f4e87790277826a2aea119328600dfb07761f32":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40"],"20cf910d1892b0a0ff8543ec4551b6df2dc3de40":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}