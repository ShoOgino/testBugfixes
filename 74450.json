{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","commits":[{"id":"024c78dd4c15dee30a69bfc8093aef62ee9d49ce","date":1498193234,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return false;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          if (obj instanceof NamedList) {\n            NamedList namedList = (NamedList) obj;\n            int location = namedList.indexOf(s, 0);\n            if (location == -1) namedList.add(s, value);\n            else namedList.setVal(location, value);\n          } else if (obj instanceof Map) {\n            ((Map) obj).put(s, value);\n          }\n          return true;\n        } else {\n          Object v = getVal(obj, s);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return false;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          if (obj instanceof NamedList) {\n            NamedList namedList = (NamedList) obj;\n            int location = namedList.indexOf(s, 0);\n            if (location == -1) namedList.add(s, value);\n            else namedList.setVal(location, value);\n          } else if (obj instanceof Map) {\n            ((Map) obj).put(s, value);\n          }\n          return true;\n        } else {\n          Object v = getVal(obj, s);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return false;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          if (obj instanceof NamedList) {\n            NamedList namedList = (NamedList) obj;\n            int location = namedList.indexOf(s, 0);\n            if (location == -1) namedList.add(s, value);\n            else namedList.setVal(location, value);\n          } else if (obj instanceof Map) {\n            ((Map) obj).put(s, value);\n          }\n          return true;\n        } else {\n          Object v = getVal(obj, s);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","sourceNew":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return false;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          if (obj instanceof NamedList) {\n            NamedList namedList = (NamedList) obj;\n            int location = namedList.indexOf(s, 0);\n            if (location == -1) namedList.add(s, value);\n            else namedList.setVal(location, value);\n          } else if (obj instanceof Map) {\n            ((Map) obj).put(s, value);\n          }\n          return true;\n        } else {\n          Object v = getVal(obj, s, -1);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","sourceOld":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s);\n        if (o == null) return false;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          if (obj instanceof NamedList) {\n            NamedList namedList = (NamedList) obj;\n            int location = namedList.indexOf(s, 0);\n            if (location == -1) namedList.add(s, value);\n            else namedList.setVal(location, value);\n          } else if (obj instanceof Map) {\n            ((Map) obj).put(s, value);\n          }\n          return true;\n        } else {\n          Object v = getVal(obj, s);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","sourceNew":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value, boolean insertMissing) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) {\n          if (insertMissing) insertItem(o = new LinkedHashMap<>(), obj, s);\n          else return false;\n        }\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          insertItem(value, obj, s);\n          return true;\n        } else {\n          Object v = getVal(obj, s, -1);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","sourceOld":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return false;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          if (obj instanceof NamedList) {\n            NamedList namedList = (NamedList) obj;\n            int location = namedList.indexOf(s, 0);\n            if (location == -1) namedList.add(s, value);\n            else namedList.setVal(location, value);\n          } else if (obj instanceof Map) {\n            ((Map) obj).put(s, value);\n          }\n          return true;\n        } else {\n          Object v = getVal(obj, s, -1);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object,boolean).mjava","sourceNew":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return false;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          if (obj instanceof NamedList) {\n            NamedList namedList = (NamedList) obj;\n            int location = namedList.indexOf(s, 0);\n            if (location == -1) namedList.add(s, value);\n            else namedList.setVal(location, value);\n          } else if (obj instanceof Map) {\n            ((Map) obj).put(s, value);\n          }\n          return true;\n        } else {\n          Object v = getVal(obj, s, -1);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","sourceOld":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value, boolean insertMissing) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) {\n          if (insertMissing) insertItem(o = new LinkedHashMap<>(), obj, s);\n          else return false;\n        }\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          insertItem(value, obj, s);\n          return true;\n        } else {\n          Object v = getVal(obj, s, -1);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","pathOld":"/dev/null","sourceNew":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return false;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          if (obj instanceof NamedList) {\n            NamedList namedList = (NamedList) obj;\n            int location = namedList.indexOf(s, 0);\n            if (location == -1) namedList.add(s, value);\n            else namedList.setVal(location, value);\n          } else if (obj instanceof Map) {\n            ((Map) obj).put(s, value);\n          }\n          return true;\n        } else {\n          Object v = getVal(obj, s, -1);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#setObjectByPath(Object,List[String],Object).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return false;\n        if (idx > -1) {\n          @SuppressWarnings({\"rawtypes\"})\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          if (obj instanceof NamedList) {\n            @SuppressWarnings({\"rawtypes\"})\n            NamedList namedList = (NamedList) obj;\n            int location = namedList.indexOf(s, 0);\n            if (location == -1) namedList.add(s, value);\n            else namedList.setVal(location, value);\n          } else if (obj instanceof Map) {\n            ((Map) obj).put(s, value);\n          }\n          return true;\n        } else {\n          Object v = getVal(obj, s, -1);\n          if (v instanceof List) {\n            @SuppressWarnings({\"rawtypes\"})\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","sourceOld":"  public static boolean setObjectByPath(Object root, List<String> hierarchy, Object value) {\n    if (root == null) return false;\n    if (!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    Object obj = root;\n    for (int i = 0; i < hierarchy.size(); i++) {\n      int idx = -2; //-1 means append to list, -2 means not found\n      String s = hierarchy.get(i);\n      if (s.endsWith(\"]\")) {\n        Matcher matcher = ARRAY_ELEMENT_INDEX.matcher(s);\n        if (matcher.find()) {\n          s = matcher.group(1);\n          idx = Integer.parseInt(matcher.group(2));\n        }\n      }\n      if (i < hierarchy.size() - 1) {\n        Object o = getVal(obj, s, -1);\n        if (o == null) return false;\n        if (idx > -1) {\n          List l = (List) o;\n          o = idx < l.size() ? l.get(idx) : null;\n        }\n        if (!isMapLike(o)) return false;\n        obj = o;\n      } else {\n        if (idx == -2) {\n          if (obj instanceof NamedList) {\n            NamedList namedList = (NamedList) obj;\n            int location = namedList.indexOf(s, 0);\n            if (location == -1) namedList.add(s, value);\n            else namedList.setVal(location, value);\n          } else if (obj instanceof Map) {\n            ((Map) obj).put(s, value);\n          }\n          return true;\n        } else {\n          Object v = getVal(obj, s, -1);\n          if (v instanceof List) {\n            List list = (List) v;\n            if (idx == -1) {\n              list.add(value);\n            } else {\n              if (idx < list.size()) list.set(idx, value);\n              else return false;\n            }\n            return true;\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return false;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["c44cc06c26e456fe9c215072b79fce30babe3975"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"024c78dd4c15dee30a69bfc8093aef62ee9d49ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","024c78dd4c15dee30a69bfc8093aef62ee9d49ce"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","024c78dd4c15dee30a69bfc8093aef62ee9d49ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["024c78dd4c15dee30a69bfc8093aef62ee9d49ce","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","b0b597c65628ca9e73913a07e81691f8229bae35"],"024c78dd4c15dee30a69bfc8093aef62ee9d49ce":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}