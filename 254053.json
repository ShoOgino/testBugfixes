{"path":"solr/core/src/java/org/apache/solr/core/RuntimeLib#init(PluginInfo).mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RuntimeLib#init(PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(PluginInfo info) {\n    name = info.attributes.get(NAME);\n    url = info.attributes.get(\"url\");\n    sig = info.attributes.get(\"sig\");\n    if (url == null) {\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n    } else {\n      sha512 = info.attributes.get(SHA512);\n      if (sha512 == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha512' attribute\");\n      }\n      ByteBuffer buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n      String digest = BlobRepository.sha512Digest(buf);\n      if (!sha512.equals(digest)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha512, digest));\n      }\n      verifyJarSignature(buf);\n\n      log.debug(\"dynamic library verified {}, sha512: {}\", url, sha512);\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RuntimeLib#init(PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RuntimeLib#init(PluginInfo).mjava","sourceNew":"  @Override\n  public void init(PluginInfo info) {\n    name = info.attributes.get(NAME);\n    url = info.attributes.get(\"url\");\n    sig = info.attributes.get(\"sig\");\n    if (url == null) {\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n    } else {\n      sha256 = info.attributes.get(SHA256);\n      if (sha256 == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha256' attribute\");\n      }\n      ByteBuffer buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n      String digest = BlobRepository.sha256Digest(buf);\n      if (!sha256.equals(digest)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha256, digest));\n      }\n      verifyJarSignature(buf);\n\n      log.debug(\"dynamic library verified {}, sha256: {}\", url, sha256);\n\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void init(PluginInfo info) {\n    name = info.attributes.get(NAME);\n    url = info.attributes.get(\"url\");\n    sig = info.attributes.get(\"sig\");\n    if (url == null) {\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n    } else {\n      sha512 = info.attributes.get(SHA512);\n      if (sha512 == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha512' attribute\");\n      }\n      ByteBuffer buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n      String digest = BlobRepository.sha512Digest(buf);\n      if (!sha512.equals(digest)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha512, digest));\n      }\n      verifyJarSignature(buf);\n\n      log.debug(\"dynamic library verified {}, sha512: {}\", url, sha512);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RuntimeLib#init(PluginInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(PluginInfo info) {\n    name = info.attributes.get(NAME);\n    url = info.attributes.get(\"url\");\n    sig = info.attributes.get(\"sig\");\n    if (url == null) {\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n    } else {\n      sha256 = info.attributes.get(SHA256);\n      if (sha256 == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha256' attribute\");\n      }\n      ByteBuffer buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n      String digest = BlobRepository.sha256Digest(buf);\n      if (!sha256.equals(digest)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha256, digest));\n      }\n      verifyJarSignature(buf);\n\n      log.debug(\"dynamic library verified {}, sha256: {}\", url, sha256);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RuntimeLib#init(PluginInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(PluginInfo info) {\n    name = info.attributes.get(NAME);\n    url = info.attributes.get(\"url\");\n    sig = info.attributes.get(\"sig\");\n    if (url == null) {\n      Object v = info.attributes.get(\"version\");\n      if (name == null || v == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"runtimeLib must have name and version\");\n      }\n      version = String.valueOf(v);\n    } else {\n      sha256 = info.attributes.get(SHA256);\n      if (sha256 == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"runtimeLib with url must have a 'sha256' attribute\");\n      }\n      ByteBuffer buf = coreContainer.getBlobRepository().fetchFromUrl(name, url);\n\n      String digest = BlobRepository.sha256Digest(buf);\n      if (!sha256.equals(digest)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(BlobRepository.INVALID_JAR_MSG, url, sha256, digest));\n      }\n      verifyJarSignature(buf);\n\n      log.debug(\"dynamic library verified {}, sha256: {}\", url, sha256);\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}