{"path":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#addCombos(List[Token],int,int,boolean,boolean,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#addCombos(List[Token],int,int,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  // index \"a\",\"b\",\"c\" as  pos0=\"a\", pos1=\"b\", pos2=\"c\", pos2=\"abc\"\n  private void addCombos(List<Token> lst, int start, int end, boolean generateSubwords, boolean catenateSubwords, int posOffset) {\n    if (end-start==1) {\n      // always generate a word alone, even if generateSubwords=0 because\n      // the catenation of all the subwords *is* the subword.\n      queue.add(lst.get(start));\n      return;\n    }\n\n    StringBuilder sb = null;\n    if (catenateSubwords) sb=new StringBuilder();\n    Token firstTok=null;\n    Token tok=null;\n    for (int i=start; i<end; i++) {\n      tok = lst.get(i);\n      if (catenateSubwords) {\n        if (i==start) firstTok=tok;\n        sb.append(tok.termBuffer(), 0, tok.termLength());\n      }\n      if (generateSubwords) {\n        queue.add(tok);\n      }\n    }\n\n    if (catenateSubwords) {\n      Token concatTok = new Token(sb.toString(),\n              firstTok.startOffset(),\n              tok.endOffset(),\n              firstTok.type());\n      // if we indexed some other tokens, then overlap concatTok with the last.\n      // Otherwise, use the value passed in as the position offset.\n      concatTok.setPositionIncrement(generateSubwords==true ? 0 : posOffset);\n      queue.add(concatTok);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#addCombos(List[Token],int,int,boolean,boolean,int).mjava","sourceNew":null,"sourceOld":"  // index \"a\",\"b\",\"c\" as  pos0=\"a\", pos1=\"b\", pos2=\"c\", pos2=\"abc\"\n  private void addCombos(List<Token> lst, int start, int end, boolean generateSubwords, boolean catenateSubwords, int posOffset) {\n    if (end-start==1) {\n      // always generate a word alone, even if generateSubwords=0 because\n      // the catenation of all the subwords *is* the subword.\n      queue.add(lst.get(start));\n      return;\n    }\n\n    StringBuilder sb = null;\n    if (catenateSubwords) sb=new StringBuilder();\n    Token firstTok=null;\n    Token tok=null;\n    for (int i=start; i<end; i++) {\n      tok = lst.get(i);\n      if (catenateSubwords) {\n        if (i==start) firstTok=tok;\n        sb.append(tok.termBuffer(), 0, tok.termLength());\n      }\n      if (generateSubwords) {\n        queue.add(tok);\n      }\n    }\n\n    if (catenateSubwords) {\n      Token concatTok = new Token(sb.toString(),\n              firstTok.startOffset(),\n              tok.endOffset(),\n              firstTok.type());\n      // if we indexed some other tokens, then overlap concatTok with the last.\n      // Otherwise, use the value passed in as the position offset.\n      concatTok.setPositionIncrement(generateSubwords==true ? 0 : posOffset);\n      queue.add(concatTok);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}