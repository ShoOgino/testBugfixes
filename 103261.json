{"path":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes transitions to dead states and calls {@link #reduce()} and\n   * {@link #clearHashCode()}. (A state is \"dead\" if no accept state is\n   * reachable from it.)\n   */\n  public void removeDeadTransitions() {\n    clearHashCode();\n    if (isSingleton()) return;\n    Set<State> states = getStates();\n    Set<State> live = getLiveStates(states);\n    for (State s : states) {\n      Set<Transition> st = s.transitions;\n      s.resetTransitions();\n      for (Transition t : st)\n        if (live.contains(t.to)) s.transitions.add(t);\n    }\n    reduce();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","sourceNew":"  /**\n   * Removes transitions to dead states and calls {@link #reduce()}.\n   * (A state is \"dead\" if no accept state is\n   * reachable from it.)\n   */\n  public void removeDeadTransitions() {\n    final State[] states = getNumberedStates();\n    //clearHashCode();\n    if (isSingleton()) return;\n    State[] live = getLiveStates();\n\n    BitSet liveSet = new BitSet(states.length);\n    for (State s : live)\n      liveSet.set(s.number);\n\n    for (State s : states) {\n      // filter out transitions to dead states:\n      int upto = 0;\n      for(int i=0;i<s.numTransitions;i++) {\n        final Transition t = s.transitionsArray[i];\n        if (liveSet.get(t.to.number)) {\n          s.transitionsArray[upto++] = s.transitionsArray[i];\n        }\n      }\n      s.numTransitions = upto;\n    }\n    for(int i=0;i<live.length;i++) {\n      live[i].number = i;\n    }\n    if (live.length > 0) {\n      setNumberedStates(live);\n    } else {\n      // sneaky corner case -- if machine accepts no strings\n      clearNumberedStates();\n    }\n    reduce();\n  }\n\n","sourceOld":"  /**\n   * Removes transitions to dead states and calls {@link #reduce()} and\n   * {@link #clearHashCode()}. (A state is \"dead\" if no accept state is\n   * reachable from it.)\n   */\n  public void removeDeadTransitions() {\n    clearHashCode();\n    if (isSingleton()) return;\n    Set<State> states = getStates();\n    Set<State> live = getLiveStates(states);\n    for (State s : states) {\n      Set<Transition> st = s.transitions;\n      s.resetTransitions();\n      for (Transition t : st)\n        if (live.contains(t.to)) s.transitions.add(t);\n    }\n    reduce();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#removeDeadTransitions().mjava","sourceNew":"  /**\n   * Removes transitions to dead states and calls {@link #reduce()}.\n   * (A state is \"dead\" if no accept state is\n   * reachable from it.)\n   */\n  public void removeDeadTransitions() {\n    final State[] states = getNumberedStates();\n    //clearHashCode();\n    if (isSingleton()) return;\n    State[] live = getLiveStates();\n\n    BitSet liveSet = new BitSet(states.length);\n    for (State s : live)\n      liveSet.set(s.number);\n\n    for (State s : states) {\n      // filter out transitions to dead states:\n      int upto = 0;\n      for(int i=0;i<s.numTransitions;i++) {\n        final Transition t = s.transitionsArray[i];\n        if (liveSet.get(t.to.number)) {\n          s.transitionsArray[upto++] = s.transitionsArray[i];\n        }\n      }\n      s.numTransitions = upto;\n    }\n    for(int i=0;i<live.length;i++) {\n      live[i].number = i;\n    }\n    if (live.length > 0) {\n      setNumberedStates(live);\n    } else {\n      // sneaky corner case -- if machine accepts no strings\n      clearNumberedStates();\n    }\n    reduce();\n  }\n\n","sourceOld":"  /**\n   * Removes transitions to dead states and calls {@link #reduce()}.\n   * (A state is \"dead\" if no accept state is\n   * reachable from it.)\n   */\n  public void removeDeadTransitions() {\n    final State[] states = getNumberedStates();\n    //clearHashCode();\n    if (isSingleton()) return;\n    State[] live = getLiveStates();\n\n    BitSet liveSet = new BitSet(states.length);\n    for (State s : live)\n      liveSet.set(s.number);\n\n    for (State s : states) {\n      // filter out transitions to dead states:\n      int upto = 0;\n      for(int i=0;i<s.numTransitions;i++) {\n        final Transition t = s.transitionsArray[i];\n        if (liveSet.get(t.to.number)) {\n          s.transitionsArray[upto++] = s.transitionsArray[i];\n        }\n      }\n      s.numTransitions = upto;\n    }\n    for(int i=0;i<live.length;i++) {\n      live[i].number = i;\n    }\n    if (live.length > 0) {\n      setNumberedStates(live);\n    } else {\n      // sneaky corner case -- if machine accepts no strings\n      clearNumberedStates();\n    }\n    reduce();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}