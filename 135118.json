{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","commits":[{"id":"cbd8af67010775ee4b53c58597a30bbe480707ee","date":1455837524,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","pathOld":"/dev/null","sourceNew":"  private void testCollectionCreationShardNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"router.name\", \"implicit\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"shards\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"Shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06043fcf612d2cd93636c22cd062e0641406b417","date":1455841699,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","pathOld":"/dev/null","sourceNew":"  private void testCollectionCreationShardNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"router.name\", \"implicit\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"shards\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"Shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a839eb6696740aa302262e32e6f45b5e70b47bff","date":1457028247,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","sourceNew":"  private void testCollectionCreationShardNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"router.name\", \"implicit\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"shards\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testCollectionCreationShardNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"router.name\", \"implicit\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"shards\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"Shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","sourceNew":"  private void testCollectionCreationShardNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"router.name\", \"implicit\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"shards\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testCollectionCreationShardNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"router.name\", \"implicit\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"shards\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"Shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","sourceNew":"  private void testCollectionCreationShardNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"router.name\", \"implicit\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"shards\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testCollectionCreationShardNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"router.name\", \"implicit\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"shards\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testCollectionCreationShardNameValidation().mjava","sourceNew":"  private void testCollectionCreationShardNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"router.name\", \"implicit\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"shards\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","sourceOld":"  private void testCollectionCreationShardNameValidation() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CREATE.toString());\n      params.set(\"name\", \"valid_collection_name\");\n      params.set(\"router.name\", \"implicit\");\n      params.set(\"numShards\", \"1\");\n      params.set(\"shards\", \"invalid@name#with$weird%characters\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      try {\n        client.request(request);\n        fail();\n      } catch (RemoteSolrException e) {\n        final String errorMessage = e.getMessage();\n        assertTrue(errorMessage.contains(\"Invalid shard\"));\n        assertTrue(errorMessage.contains(\"invalid@name#with$weird%characters\"));\n        assertTrue(errorMessage.contains(\"shard names must consist entirely of\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a839eb6696740aa302262e32e6f45b5e70b47bff":["06043fcf612d2cd93636c22cd062e0641406b417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["06043fcf612d2cd93636c22cd062e0641406b417","a839eb6696740aa302262e32e6f45b5e70b47bff"],"06043fcf612d2cd93636c22cd062e0641406b417":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cbd8af67010775ee4b53c58597a30bbe480707ee"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a839eb6696740aa302262e32e6f45b5e70b47bff":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06043fcf612d2cd93636c22cd062e0641406b417","cbd8af67010775ee4b53c58597a30bbe480707ee"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"06043fcf612d2cd93636c22cd062e0641406b417":["a839eb6696740aa302262e32e6f45b5e70b47bff","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["06043fcf612d2cd93636c22cd062e0641406b417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}