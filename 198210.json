{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapDefaultConfigSet(SolrZkClient).mjava","commits":[{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapDefaultConfigSet(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private static void bootstrapDefaultConfigSet(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    if (zkClient.exists(\"/configs/_default\", true) == false) {\n      String configDirPath = getDefaultConfigDirPath();\n      if (configDirPath == null) {\n        log.warn(\"The _default configset could not be uploaded. Please provide 'solr.default.confdir' parameter that points to a configset\" +\n            \" intended to be the default. Current 'solr.default.confdir' value: {}\", System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE));\n      } else {\n        ZkMaintenanceUtils.upConfig(zkClient, Paths.get(configDirPath), ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapDefaultConfigSet(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private static void bootstrapDefaultConfigSet(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    if (zkClient.exists(\"/configs/_default\", true) == false) {\n      String configDirPath = getDefaultConfigDirPath();\n      if (configDirPath == null) {\n        log.warn(\"The _default configset could not be uploaded. Please provide 'solr.default.confdir' parameter that points to a configset\" +\n            \" intended to be the default. Current 'solr.default.confdir' value: {}\", System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE));\n      } else {\n        ZkMaintenanceUtils.upConfig(zkClient, Paths.get(configDirPath), ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapDefaultConfigSet(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private static void bootstrapDefaultConfigSet(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    if (zkClient.exists(\"/configs/_default\", true) == false) {\n      String configDirPath = getDefaultConfigDirPath();\n      if (configDirPath == null) {\n        log.warn(\"The _default configset could not be uploaded. Please provide 'solr.default.confdir' parameter that points to a configset\" +\n            \" intended to be the default. Current 'solr.default.confdir' value: {}\", System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE));\n      } else {\n        ZkMaintenanceUtils.upConfig(zkClient, Paths.get(configDirPath), ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapDefaultConfigSet(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapDefaultConfigSet(SolrZkClient).mjava","sourceNew":"  private static void bootstrapDefaultConfigSet(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    if (zkClient.exists(\"/configs/_default\", true) == false) {\n      String configDirPath = getDefaultConfigDirPath();\n      if (configDirPath == null) {\n        log.warn(\"The _default configset could not be uploaded. Please provide 'solr.default.confdir' parameter that points to a configset {} {}\"\n            , \"intended to be the default. Current 'solr.default.confdir' value:\"\n            , System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE));\n      } else {\n        ZkMaintenanceUtils.upConfig(zkClient, Paths.get(configDirPath), ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n      }\n    }\n  }\n\n","sourceOld":"  private static void bootstrapDefaultConfigSet(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    if (zkClient.exists(\"/configs/_default\", true) == false) {\n      String configDirPath = getDefaultConfigDirPath();\n      if (configDirPath == null) {\n        log.warn(\"The _default configset could not be uploaded. Please provide 'solr.default.confdir' parameter that points to a configset\" +\n            \" intended to be the default. Current 'solr.default.confdir' value: {}\", System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE));\n      } else {\n        ZkMaintenanceUtils.upConfig(zkClient, Paths.get(configDirPath), ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852cb03cf4922477072449dd9de2fab588d1adb","date":1600862151,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapDefaultConfigSet(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapDefaultConfigSet(SolrZkClient).mjava","sourceNew":"  private static void bootstrapDefaultConfigSet(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    if (zkClient.exists(\"/configs/_default\", true) == false) {\n      String configDirPath = getDefaultConfigDirPath();\n      if (configDirPath == null) {\n        log.warn(\"The _default configset could not be uploaded. Please provide 'solr.default.confdir' parameter that points to a configset {} {}\"\n            , \"intended to be the default. Current 'solr.default.confdir' value:\"\n            , System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE));\n      } else {\n        ZkMaintenanceUtils.upConfig(zkClient, Paths.get(configDirPath), ConfigSetsHandler.DEFAULT_CONFIGSET_NAME);\n      }\n    }\n  }\n\n","sourceOld":"  private static void bootstrapDefaultConfigSet(SolrZkClient zkClient) throws KeeperException, InterruptedException, IOException {\n    if (zkClient.exists(\"/configs/_default\", true) == false) {\n      String configDirPath = getDefaultConfigDirPath();\n      if (configDirPath == null) {\n        log.warn(\"The _default configset could not be uploaded. Please provide 'solr.default.confdir' parameter that points to a configset {} {}\"\n            , \"intended to be the default. Current 'solr.default.confdir' value:\"\n            , System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE));\n      } else {\n        ZkMaintenanceUtils.upConfig(zkClient, Paths.get(configDirPath), ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"197bbedf08450ade98a11f4a0001448059666bec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","197bbedf08450ade98a11f4a0001448059666bec"],"ad4957cde742defe6db19689abdc267c5d948066":["28288370235ed02234a64753cdbf0c6ec096304a"],"1852cb03cf4922477072449dd9de2fab588d1adb":["ad4957cde742defe6db19689abdc267c5d948066"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","197bbedf08450ade98a11f4a0001448059666bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1852cb03cf4922477072449dd9de2fab588d1adb"]},"commit2Childs":{"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["197bbedf08450ade98a11f4a0001448059666bec","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"ad4957cde742defe6db19689abdc267c5d948066":["1852cb03cf4922477072449dd9de2fab588d1adb"],"1852cb03cf4922477072449dd9de2fab588d1adb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["ad4957cde742defe6db19689abdc267c5d948066"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}