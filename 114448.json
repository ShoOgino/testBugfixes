{"path":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(String,String,String,boolean,boolean,Collator).mjava","commits":[{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(String,String,String,boolean,boolean,Collator).mjava","pathOld":"/dev/null","sourceNew":"  /** Constructs a query selecting all terms greater/equal than\n   * <code>lowerTerm</code> but less/equal than <code>upperTerm</code>.\n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * <p>\n   * If <code>collator</code> is not null, it will be used to decide whether\n   * index terms are within the given range, rather than using the Unicode code\n   * point order in which index terms are stored.\n   * <p>\n   * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n   * value in the <code>collator</code> parameter will cause every single \n   * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n   * examined.  Depending on the number of index Terms in this Field, the \n   * operation could be very slow.\n   *\n   * @param lowerTerm The Term text at the lower end of the range\n   * @param upperTerm The Term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   * @param collator The collator to use to collate index Terms, to determine\n   *  their membership in the range bounded by <code>lowerTerm</code> and\n   *  <code>upperTerm</code>.\n   */\n  public RangeQuery(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper,\n                    Collator collator) {\n    init(new Term(field, lowerTerm), new Term(field,upperTerm), includeLower, includeUpper, collator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,String,String,boolean,boolean,Collator).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(String,String,String,boolean,boolean,Collator).mjava","sourceNew":"  /** Constructs a query selecting all terms greater/equal than\n   * <code>lowerTerm</code> but less/equal than <code>upperTerm</code>.\n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * <p>\n   * If <code>collator</code> is not null, it will be used to decide whether\n   * index terms are within the given range, rather than using the Unicode code\n   * point order in which index terms are stored.\n   * <p>\n   * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n   * value in the <code>collator</code> parameter will cause every single \n   * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n   * examined.  Depending on the number of index Terms in this Field, the \n   * operation could be very slow.\n   *\n   * @param lowerTerm The Term text at the lower end of the range\n   * @param upperTerm The Term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   * @param collator The collator to use to collate index Terms, to determine\n   *  their membership in the range bounded by <code>lowerTerm</code> and\n   *  <code>upperTerm</code>.\n   */\n  public TermRangeQuery(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper,\n                    Collator collator) {\n    this.field = field;\n    this.lowerTerm = lowerTerm;\n    this.upperTerm = upperTerm;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n    this.collator = collator;\n    setConstantScoreRewrite(true);\n  }\n\n","sourceOld":"  /** Constructs a query selecting all terms greater/equal than\n   * <code>lowerTerm</code> but less/equal than <code>upperTerm</code>.\n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * <p>\n   * If <code>collator</code> is not null, it will be used to decide whether\n   * index terms are within the given range, rather than using the Unicode code\n   * point order in which index terms are stored.\n   * <p>\n   * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n   * value in the <code>collator</code> parameter will cause every single \n   * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n   * examined.  Depending on the number of index Terms in this Field, the \n   * operation could be very slow.\n   *\n   * @param lowerTerm The Term text at the lower end of the range\n   * @param upperTerm The Term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   * @param collator The collator to use to collate index Terms, to determine\n   *  their membership in the range bounded by <code>lowerTerm</code> and\n   *  <code>upperTerm</code>.\n   */\n  public RangeQuery(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper,\n                    Collator collator) {\n    init(new Term(field, lowerTerm), new Term(field,upperTerm), includeLower, includeUpper, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}