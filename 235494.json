{"path":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","commits":[{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      if (scorer instanceof BlockJoinQuery.BlockJoinScorer) {\n        enroll((BlockJoinQuery) scorer.getWeight().getQuery(), (BlockJoinQuery.BlockJoinScorer)scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer scorer) {\n    //System.out.println(\"C.setScorer scorer=\" + scorer);\n    // Since we invoke .score(), and the comparators likely\n    // do as well, cache it so it's only \"really\" computed\n    // once:\n    this.scorer = new ScoreCachingWrappingScorer(scorer);\n    for (int compIDX = 0; compIDX < comparators.length; compIDX++) {\n      comparators[compIDX].setScorer(this.scorer);\n    }\n    Arrays.fill(joinScorers, null);\n\n    Queue<Scorer> queue = new LinkedList<Scorer>();\n    queue.add(scorer);\n    while ((scorer = queue.poll()) != null) {\n      if (scorer instanceof ToParentBlockJoinQuery.BlockJoinScorer) {\n        enroll((ToParentBlockJoinQuery) scorer.getWeight().getQuery(), (ToParentBlockJoinQuery.BlockJoinScorer) scorer);\n      }\n\n      for (ChildScorer sub : scorer.getChildren()) {\n        queue.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6bd4a7478aca8c3880512b730b28bf3239340635"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bd4a7478aca8c3880512b730b28bf3239340635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}