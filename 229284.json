{"path":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource.SolrOutputRepresentation#write(OutputStream).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource.SolrOutputRepresentation#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/BaseSchemaResource.SolrOutputRepresentation#write(OutputStream).mjava","sourceNew":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        if (responseWriter instanceof BinaryQueryResponseWriter) {\n          BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter)responseWriter;\n          binWriter.write(outputStream, solrRequest, solrResponse);\n        } else {\n          String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n          Writer out = (charset == null || charset.equalsIgnoreCase(\"UTF-8\"))\n              ? new OutputStreamWriter(outputStream, UTF8)\n              : new OutputStreamWriter(outputStream, charset);\n          out = new FastWriter(out);\n          responseWriter.write(out, solrRequest, solrResponse);\n          out.flush();\n        }\n      }\n    }\n\n","sourceOld":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        if (responseWriter instanceof BinaryQueryResponseWriter) {\n          BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter)responseWriter;\n          binWriter.write(outputStream, solrRequest, solrResponse);\n        } else {\n          String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n          Writer out = (charset == null || charset.equalsIgnoreCase(\"UTF-8\"))\n              ? new OutputStreamWriter(outputStream, UTF8)\n              : new OutputStreamWriter(outputStream, charset);\n          out = new FastWriter(out);\n          responseWriter.write(out, solrRequest, solrResponse);\n          out.flush();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource.SolrOutputRepresentation#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource.SolrOutputRepresentation#write(OutputStream).mjava","sourceNew":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        if (responseWriter instanceof BinaryQueryResponseWriter) {\n          BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter)responseWriter;\n          binWriter.write(outputStream, solrRequest, solrResponse);\n        } else {\n          String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n          Writer out = (charset == null)\n              ? new OutputStreamWriter(outputStream, UTF8)\n              : new OutputStreamWriter(outputStream, charset);\n          out = new FastWriter(out);\n          responseWriter.write(out, solrRequest, solrResponse);\n          out.flush();\n        }\n      }\n    }\n\n","sourceOld":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        if (responseWriter instanceof BinaryQueryResponseWriter) {\n          BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter)responseWriter;\n          binWriter.write(outputStream, solrRequest, solrResponse);\n        } else {\n          String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n          Writer out = (charset == null || charset.equalsIgnoreCase(\"UTF-8\"))\n              ? new OutputStreamWriter(outputStream, UTF8)\n              : new OutputStreamWriter(outputStream, charset);\n          out = new FastWriter(out);\n          responseWriter.write(out, solrRequest, solrResponse);\n          out.flush();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["9272dcea19192a5fb261980a4737677abfcabab3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource.SolrOutputRepresentation#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource.SolrOutputRepresentation#write(OutputStream).mjava","sourceNew":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        if (responseWriter instanceof BinaryQueryResponseWriter) {\n          BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter)responseWriter;\n          binWriter.write(outputStream, solrRequest, solrResponse);\n        } else {\n          String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n          Writer out = (charset == null)\n              ? new OutputStreamWriter(outputStream, UTF8)\n              : new OutputStreamWriter(outputStream, charset);\n          out = new FastWriter(out);\n          responseWriter.write(out, solrRequest, solrResponse);\n          out.flush();\n        }\n      }\n    }\n\n","sourceOld":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        if (responseWriter instanceof BinaryQueryResponseWriter) {\n          BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter)responseWriter;\n          binWriter.write(outputStream, solrRequest, solrResponse);\n        } else {\n          String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n          Writer out = (charset == null || charset.equalsIgnoreCase(\"UTF-8\"))\n              ? new OutputStreamWriter(outputStream, UTF8)\n              : new OutputStreamWriter(outputStream, charset);\n          out = new FastWriter(out);\n          responseWriter.write(out, solrRequest, solrResponse);\n          out.flush();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9272dcea19192a5fb261980a4737677abfcabab3","date":1409771900,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource.SolrOutputRepresentation#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource.SolrOutputRepresentation#write(OutputStream).mjava","sourceNew":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        QueryResponseWriterUtil.writeQueryResponse(outputStream, responseWriter, solrRequest, solrResponse, contentType);\n      }\n    }\n\n","sourceOld":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        if (responseWriter instanceof BinaryQueryResponseWriter) {\n          BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter)responseWriter;\n          binWriter.write(outputStream, solrRequest, solrResponse);\n        } else {\n          String charset = ContentStreamBase.getCharsetFromContentType(contentType);\n          Writer out = (charset == null)\n              ? new OutputStreamWriter(outputStream, UTF8)\n              : new OutputStreamWriter(outputStream, charset);\n          out = new FastWriter(out);\n          responseWriter.write(out, solrRequest, solrResponse);\n          out.flush();\n        }\n      }\n    }\n\n","bugFix":["9d3d365762604952e436b51980101dfc84cc1b3e","054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource.SolrOutputRepresentation#write(OutputStream).mjava","sourceNew":null,"sourceOld":"    /** Called by Restlet to get the response body */\n    @Override\n    public void write(OutputStream outputStream) throws IOException {\n      if (getRequest().getMethod() != Method.HEAD) {\n        QueryResponseWriterUtil.writeQueryResponse(outputStream, responseWriter, solrRequest, solrResponse, contentType);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d","9d3d365762604952e436b51980101dfc84cc1b3e"],"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["9272dcea19192a5fb261980a4737677abfcabab3"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d3d365762604952e436b51980101dfc84cc1b3e":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9272dcea19192a5fb261980a4737677abfcabab3":["9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","9272dcea19192a5fb261980a4737677abfcabab3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"9272dcea19192a5fb261980a4737677abfcabab3":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}