{"path":"lucene/core/src/java/org/apache/lucene/search/QueryRescorer.OnlyDocIDsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9","date":1395396517,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryRescorer.OnlyDocIDsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      int loc = Arrays.binarySearch(docIDs, context.docBase);\n      if (loc < 0) {\n        loc = -loc-1;\n      }\n\n      final int startLoc = loc;\n      final int endDoc = context.docBase + context.reader().maxDoc();\n\n      return new DocIdSet() {\n\n        int pos = startLoc;\n\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return new DocIdSetIterator() {\n\n            int docID;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int nextDoc() {\n              if (pos == docIDs.length) {\n                return NO_MORE_DOCS;\n              }\n              int docID = docIDs[pos];\n              if (docID >= endDoc) {\n                return NO_MORE_DOCS;\n              }\n              pos++;\n              assert acceptDocs == null || acceptDocs.get(docID-context.docBase);\n              return docID-context.docBase;\n            }\n\n            @Override\n            public long cost() {\n              // NOTE: not quite right, since this is cost\n              // across all segments, and we are supposed to\n              // return cost for just this segment:\n              return docIDs.length;\n            }\n\n            @Override\n            public int advance(int target) {\n              // TODO: this is a full binary search; we\n              // could optimize (a bit) by setting lower\n              // bound to current pos instead:\n              int loc = Arrays.binarySearch(docIDs, target + context.docBase);\n              if (loc < 0) {\n                loc = -loc-1;\n              }\n              pos = loc;\n              return nextDoc();\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"222ff577a0e1b2399d3151966bf561ecd7a0b7d0","date":1395575041,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryRescorer.OnlyDocIDsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      int loc = Arrays.binarySearch(docIDs, context.docBase);\n      if (loc < 0) {\n        loc = -loc-1;\n      }\n\n      final int startLoc = loc;\n      final int endDoc = context.docBase + context.reader().maxDoc();\n\n      return new DocIdSet() {\n\n        int pos = startLoc;\n\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return new DocIdSetIterator() {\n\n            int docID;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int nextDoc() {\n              if (pos == docIDs.length) {\n                return NO_MORE_DOCS;\n              }\n              int docID = docIDs[pos];\n              if (docID >= endDoc) {\n                return NO_MORE_DOCS;\n              }\n              pos++;\n              assert acceptDocs == null || acceptDocs.get(docID-context.docBase);\n              return docID-context.docBase;\n            }\n\n            @Override\n            public long cost() {\n              // NOTE: not quite right, since this is cost\n              // across all segments, and we are supposed to\n              // return cost for just this segment:\n              return docIDs.length;\n            }\n\n            @Override\n            public int advance(int target) {\n              // TODO: this is a full binary search; we\n              // could optimize (a bit) by setting lower\n              // bound to current pos instead:\n              int loc = Arrays.binarySearch(docIDs, target + context.docBase);\n              if (loc < 0) {\n                loc = -loc-1;\n              }\n              pos = loc;\n              return nextDoc();\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"]},"commit2Childs":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9"],"74799e1ff172d6be3cf96eb89c15cdbb96bfe0d9":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}