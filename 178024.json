{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#trimToSize().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#trimToSize().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#trimToSize().mjava","sourceNew":"  /**\n   * Each node stores a character (splitchar) which is part of some key(s). In a\n   * compressed branch (one that only contain a single string key) the trailer\n   * of the key which is not already in nodes is stored externally in the kv\n   * array. As items are inserted, key substrings decrease. Some substrings may\n   * completely disappear when the whole branch is totally decompressed. The\n   * tree is traversed to find the key substrings actually used. In addition,\n   * duplicate substrings are removed using a map (implemented with a\n   * TernaryTree!).\n   * \n   */\n  public void trimToSize() {\n    // first balance the tree for best performance\n    balance();\n\n    // redimension the node arrays\n    redimNodeArrays(freenode);\n\n    // ok, compact kv array\n    CharVector kx = new CharVector();\n    kx.alloc(1);\n    TernaryTree map = new TernaryTree();\n    compact(kx, map, root);\n    kv = kx;\n    kv.trimToSize();\n  }\n\n","sourceOld":"  /**\n   * Each node stores a character (splitchar) which is part of some key(s). In a\n   * compressed branch (one that only contain a single string key) the trailer\n   * of the key which is not already in nodes is stored externally in the kv\n   * array. As items are inserted, key substrings decrease. Some substrings may\n   * completely disappear when the whole branch is totally decompressed. The\n   * tree is traversed to find the key substrings actually used. In addition,\n   * duplicate substrings are removed using a map (implemented with a\n   * TernaryTree!).\n   * \n   */\n  public void trimToSize() {\n    // first balance the tree for best performance\n    balance();\n\n    // redimension the node arrays\n    redimNodeArrays(freenode);\n\n    // ok, compact kv array\n    CharVector kx = new CharVector();\n    kx.alloc(1);\n    TernaryTree map = new TernaryTree();\n    compact(kx, map, root);\n    kv = kx;\n    kv.trimToSize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#trimToSize().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#trimToSize().mjava","sourceNew":"  /**\n   * Each node stores a character (splitchar) which is part of some key(s). In a\n   * compressed branch (one that only contain a single string key) the trailer\n   * of the key which is not already in nodes is stored externally in the kv\n   * array. As items are inserted, key substrings decrease. Some substrings may\n   * completely disappear when the whole branch is totally decompressed. The\n   * tree is traversed to find the key substrings actually used. In addition,\n   * duplicate substrings are removed using a map (implemented with a\n   * TernaryTree!).\n   * \n   */\n  public void trimToSize() {\n    // first balance the tree for best performance\n    balance();\n\n    // redimension the node arrays\n    redimNodeArrays(freenode);\n\n    // ok, compact kv array\n    CharVector kx = new CharVector();\n    kx.alloc(1);\n    TernaryTree map = new TernaryTree();\n    compact(kx, map, root);\n    kv = kx;\n    kv.trimToSize();\n  }\n\n","sourceOld":"  /**\n   * Each node stores a character (splitchar) which is part of some key(s). In a\n   * compressed branch (one that only contain a single string key) the trailer\n   * of the key which is not already in nodes is stored externally in the kv\n   * array. As items are inserted, key substrings decrease. Some substrings may\n   * completely disappear when the whole branch is totally decompressed. The\n   * tree is traversed to find the key substrings actually used. In addition,\n   * duplicate substrings are removed using a map (implemented with a\n   * TernaryTree!).\n   * \n   */\n  public void trimToSize() {\n    // first balance the tree for best performance\n    balance();\n\n    // redimension the node arrays\n    redimNodeArrays(freenode);\n\n    // ok, compact kv array\n    CharVector kx = new CharVector();\n    kx.alloc(1);\n    TernaryTree map = new TernaryTree();\n    compact(kx, map, root);\n    kv = kx;\n    kv.trimToSize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}