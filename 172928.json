{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   * \n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   * \n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   * \n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3268d17c69c8720ec02a4815ece73ac3ab438c1","date":1499337647,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","sourceNew":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   * \n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiTrieField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiTrieField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiTrieField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiTrieField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiTrieField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   * \n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","sourceNew":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   * \n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiTrieField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiTrieField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiTrieField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiTrieField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiTrieField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   * \n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","sourceNew":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   *\n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiTrieField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiTrieField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiTrieField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiTrieField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiTrieField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   * \n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiTrieField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiTrieField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiTrieField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiTrieField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiTrieField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","sourceNew":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   *\n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiTrieField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiTrieField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiTrieField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiTrieField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiTrieField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   * \n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiTrieField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiTrieField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiTrieField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiTrieField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiTrieField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","sourceNew":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   *\n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  @SuppressWarnings(\"deprecation\")\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiTrieField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiTrieField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiTrieField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiTrieField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiTrieField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   *\n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiTrieField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiTrieField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiTrieField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiTrieField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiTrieField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createField(SchemaField).mjava","sourceNew":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   *\n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiTrieField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiTrieField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiTrieField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiTrieField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiTrieField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","sourceOld":"  /**\n   * Create an {@link AnalyticsField} out of the given {@link SchemaField}.\n   * <p>\n   * Currently only fields with doc-values enabled are supported.\n   *\n   * @param field the field to convert for analytics\n   * @return an analytics representation of the field\n   * @throws SolrException if the field is not supported by the analytics framework\n   */\n  @SuppressWarnings(\"deprecation\")\n  private AnalyticsField createField(SchemaField field) throws SolrException {\n    String fieldName = field.getName();\n    if (fields.containsKey(fieldName)) {\n      return fields.get(fieldName);\n    }\n    if (!field.hasDocValues()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The field \"+fieldName+\" does not have docValues enabled.\");\n    }\n    boolean multivalued = field.multiValued();\n    FieldType fieldType = field.getType();\n    AnalyticsField aField;\n    if (fieldType instanceof BoolField) {\n      if (multivalued) {\n        aField = new BooleanMultiField(fieldName);\n      } else {\n        aField = new BooleanField(fieldName);\n      }\n    } else if (fieldType instanceof TrieIntField) {\n      if (multivalued) {\n        aField = new IntMultiTrieField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof IntPointField) {\n      if (multivalued) {\n        aField = new IntMultiPointField(fieldName);\n      } else {\n        aField = new IntField(fieldName);\n      }\n    } else if (fieldType instanceof TrieLongField) {\n      if (multivalued) {\n        aField = new LongMultiTrieField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof LongPointField) {\n      if (multivalued) {\n        aField = new LongMultiPointField(fieldName);\n      } else {\n        aField = new LongField(fieldName);\n      }\n    } else if (fieldType instanceof TrieFloatField) {\n      if (multivalued) {\n        aField = new FloatMultiTrieField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof FloatPointField) {\n      if (multivalued) {\n        aField = new FloatMultiPointField(fieldName);\n      } else {\n        aField = new FloatField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDoubleField) {\n      if (multivalued) {\n        aField = new DoubleMultiTrieField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof DoublePointField) {\n      if (multivalued) {\n        aField = new DoubleMultiPointField(fieldName);\n      } else {\n        aField = new DoubleField(fieldName);\n      }\n    } else if (fieldType instanceof TrieDateField) {\n      if (multivalued) {\n        aField = new DateMultiTrieField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof DatePointField) {\n      if (multivalued) {\n        aField = new DateMultiPointField(fieldName);\n      } else {\n        aField = new DateField(fieldName);\n      }\n    } else if (fieldType instanceof StrField) {\n      if (multivalued) {\n        aField = new StringMultiField(fieldName);\n      } else {\n        aField = new StringField(fieldName);\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"FieldType of the following field not supported by analytics: \"+fieldName);\n    }\n    return aField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["e3268d17c69c8720ec02a4815ece73ac3ab438c1"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"e3268d17c69c8720ec02a4815ece73ac3ab438c1":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"e73d8d559120669b47658108d818b637df5456ea":["30c8e5574b55d57947e989443dfde611646530ee","e3268d17c69c8720ec02a4815ece73ac3ab438c1"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["e3268d17c69c8720ec02a4815ece73ac3ab438c1","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","f8061ddd97f3352007d927dae445884a6f3d857b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"e3268d17c69c8720ec02a4815ece73ac3ab438c1":["1e4e64b7199d2f2a17be7f3926c7532553910dce","e73d8d559120669b47658108d818b637df5456ea","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":["e73d8d559120669b47658108d818b637df5456ea"],"e73d8d559120669b47658108d818b637df5456ea":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["e3268d17c69c8720ec02a4815ece73ac3ab438c1","30c8e5574b55d57947e989443dfde611646530ee"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e73d8d559120669b47658108d818b637df5456ea","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}