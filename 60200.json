{"path":"lucene/sandbox/src/java/org/apache/lucene/search/PhraseWildcardQuery#createPhraseWeight(IndexSearcher,ScoreMode,float,TermsData).mjava","commits":[{"id":"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e","date":1574848425,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/PhraseWildcardQuery#createPhraseWeight(IndexSearcher,ScoreMode,float,TermsData).mjava","pathOld":"/dev/null","sourceNew":"  PhraseWeight createPhraseWeight(IndexSearcher searcher, ScoreMode scoreMode,\n                                            float boost, TermsData termsData) throws IOException {\n    return new PhraseWeight(this, field, searcher, scoreMode) {\n\n      @Override\n      protected Similarity.SimScorer getStats(IndexSearcher searcher) throws IOException {\n        if (termsData.termStatsList.isEmpty()) {\n          return null;\n        }\n        return searcher.getSimilarity().scorer(\n            boost,\n            searcher.collectionStatistics(field),\n            termsData.termStatsList.toArray(new TermStatistics[0]));\n      }\n\n      @Override\n      protected PhraseMatcher getPhraseMatcher(LeafReaderContext leafReaderContext, Similarity.SimScorer scorer, boolean exposeOffsets) throws IOException {\n        Terms fieldTerms = leafReaderContext.reader().terms(field);\n        if (fieldTerms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = fieldTerms.iterator();\n        float totalMatchCost = 0;\n\n        PhraseQuery.PostingsAndFreq[] postingsFreqs = new PhraseQuery.PostingsAndFreq[phraseTerms.size()];\n        for (int termPosition = 0; termPosition < postingsFreqs.length; termPosition++) {\n          TermData termData = termsData.getTermData(termPosition);\n          assert termData != null;\n          List<TermBytesTermState> termStates = termData.getTermStatesForSegment(leafReaderContext);\n          if (termStates == null) {\n            // If the current phrase term does not match in the segment, then the phrase cannot match on the segment.\n            // So early stop by returning a null scorer.\n            return null;\n          }\n          assert !termStates.isEmpty();\n\n          List<PostingsEnum> postingsEnums = new ArrayList<>(termStates.size());\n          for (TermBytesTermState termBytesTermState : termStates) {\n            termsEnum.seekExact(termBytesTermState.termBytes, termBytesTermState.termState);\n            postingsEnums.add(termsEnum.postings(null, exposeOffsets ? PostingsEnum.ALL : PostingsEnum.POSITIONS));\n            totalMatchCost += PhraseQuery.termPositionsCost(termsEnum);\n          }\n          PostingsEnum unionPostingsEnum;\n          if (postingsEnums.size() == 1) {\n            unionPostingsEnum = postingsEnums.get(0);\n          } else {\n            unionPostingsEnum = exposeOffsets ? new MultiPhraseQuery.UnionFullPostingsEnum(postingsEnums) : new MultiPhraseQuery.UnionPostingsEnum(postingsEnums);\n          }\n          postingsFreqs[termPosition] = new PhraseQuery.PostingsAndFreq(unionPostingsEnum, new SlowImpactsEnum(unionPostingsEnum), termPosition, termData.terms);\n        }\n\n        if (slop == 0) {\n          // Sort by increasing docFreq order.\n          ArrayUtil.timSort(postingsFreqs);\n          return new ExactPhraseMatcher(postingsFreqs, scoreMode, scorer, totalMatchCost);\n        } else {\n          return new SloppyPhraseMatcher(postingsFreqs, slop, scoreMode, scorer, totalMatchCost, exposeOffsets);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"]},"commit2Childs":{"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}