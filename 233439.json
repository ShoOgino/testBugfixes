{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","sourceNew":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#getStatistics(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Finds the set of statistics that must be computed for the expression.\n   * @param expression The string representation of an expression\n   * @return The set of statistics (sum, mean, median, etc.) found in the expression\n   */\n  public static Set<String> getStatistics(String expression) {\n    HashSet<String> set = new HashSet<>();\n    int firstParen = expression.indexOf('(');\n    if (firstParen>0) {\n      String topOperation = expression.substring(0,firstParen).trim();\n      if (AnalyticsParams.ALL_STAT_SET.contains(topOperation)) {\n        set.add(expression);\n      } else if (!(topOperation.equals(AnalyticsParams.CONSTANT_NUMBER)||topOperation.equals(AnalyticsParams.CONSTANT_DATE)||topOperation.equals(AnalyticsParams.CONSTANT_STRING))) {\n        String operands = expression.substring(firstParen+1, expression.lastIndexOf(')')).trim();\n        String[] arguments = ExpressionFactory.getArguments(operands);\n        for (String argument : arguments) {\n          Set<String> more = getStatistics(argument);\n          if (more!=null) {\n            set.addAll(more);\n          }\n        }\n      }\n    }\n    if (set.size()==0) {\n      return null;\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}