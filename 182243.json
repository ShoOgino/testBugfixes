{"path":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#search(Query,int,Sort).mjava","commits":[{"id":"226aae72c0326f4299c16280195bade4530de537","date":1324221898,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#search(Query,int,Sort).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public TopFieldDocs search(Query query, int numHits, Sort sort) throws IOException {\n        assert sort != null;\n        final TopDocs[] shardHits = new TopDocs[nodeVersions.length];\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            // My node; run using local shard searcher we\n            // already aquired:\n            shardHits[nodeID] = localSearch(query, numHits, sort);\n          } else {\n            shardHits[nodeID] = searchNode(nodeID, nodeVersions, query, sort, numHits, null);\n          }\n        }\n\n        // Merge:\n        return (TopFieldDocs) TopDocs.merge(sort, numHits, shardHits);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#search(Query,int,Sort).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#search(Query,int,Sort).mjava","sourceNew":"      @Override\n      public TopFieldDocs search(Query query, int numHits, Sort sort) throws IOException {\n        assert sort != null;\n        final TopDocs[] shardHits = new TopDocs[nodeVersions.length];\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            // My node; run using local shard searcher we\n            // already aquired:\n            shardHits[nodeID] = localSearch(query, numHits, sort);\n          } else {\n            shardHits[nodeID] = searchNode(nodeID, nodeVersions, query, sort, numHits, null);\n          }\n        }\n\n        // Merge:\n        return (TopFieldDocs) TopDocs.merge(sort, numHits, shardHits);\n      }\n\n","sourceOld":"      @Override\n      public TopFieldDocs search(Query query, int numHits, Sort sort) throws IOException {\n        assert sort != null;\n        final TopDocs[] shardHits = new TopDocs[nodeVersions.length];\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            // My node; run using local shard searcher we\n            // already aquired:\n            shardHits[nodeID] = localSearch(query, numHits, sort);\n          } else {\n            shardHits[nodeID] = searchNode(nodeID, nodeVersions, query, sort, numHits, null);\n          }\n        }\n\n        // Merge:\n        return (TopFieldDocs) TopDocs.merge(sort, numHits, shardHits);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["226aae72c0326f4299c16280195bade4530de537"],"226aae72c0326f4299c16280195bade4530de537":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"226aae72c0326f4299c16280195bade4530de537":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226aae72c0326f4299c16280195bade4530de537"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}