{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts2#randomCategories(Random).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts2#randomCategories(Random).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#randomCategories(Random).mjava","sourceNew":"  private static List<FacetField> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<FacetField> categories_a = new ArrayList<FacetField>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<FacetField> categories_b = new ArrayList<FacetField>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<FacetField> categories = new ArrayList<FacetField>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    \n    // add the NO_PARENT categories\n    categories.add(CATEGORIES_C[random().nextInt(NUM_CHILDREN_CP_C)]);\n    categories.add(CATEGORIES_D[random().nextInt(NUM_CHILDREN_CP_D)]);\n\n    return categories;\n  }\n\n","sourceOld":"  private static List<FacetField> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<FacetField> categories_a = new ArrayList<FacetField>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<FacetField> categories_b = new ArrayList<FacetField>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<FacetField> categories = new ArrayList<FacetField>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    \n    // add the NO_PARENT categories\n    categories.add(CATEGORIES_C[random().nextInt(NUM_CHILDREN_CP_C)]);\n    categories.add(CATEGORIES_D[random().nextInt(NUM_CHILDREN_CP_D)]);\n\n    return categories;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts2#randomCategories(Random).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts2#randomCategories(Random).mjava","sourceNew":"  private static List<FacetField> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<FacetField> categories_a = new ArrayList<FacetField>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<FacetField> categories_b = new ArrayList<FacetField>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<FacetField> categories = new ArrayList<FacetField>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    \n    // add the NO_PARENT categories\n    categories.add(CATEGORIES_C[random().nextInt(NUM_CHILDREN_CP_C)]);\n    categories.add(CATEGORIES_D[random().nextInt(NUM_CHILDREN_CP_D)]);\n\n    return categories;\n  }\n\n","sourceOld":"  private static List<FacetField> randomCategories(Random random) {\n    // add random categories from the two dimensions, ensuring that the same\n    // category is not added twice.\n    int numFacetsA = random.nextInt(3) + 1; // 1-3\n    int numFacetsB = random.nextInt(2) + 1; // 1-2\n    ArrayList<FacetField> categories_a = new ArrayList<FacetField>();\n    categories_a.addAll(Arrays.asList(CATEGORIES_A));\n    ArrayList<FacetField> categories_b = new ArrayList<FacetField>();\n    categories_b.addAll(Arrays.asList(CATEGORIES_B));\n    Collections.shuffle(categories_a, random);\n    Collections.shuffle(categories_b, random);\n\n    ArrayList<FacetField> categories = new ArrayList<FacetField>();\n    categories.addAll(categories_a.subList(0, numFacetsA));\n    categories.addAll(categories_b.subList(0, numFacetsB));\n    \n    // add the NO_PARENT categories\n    categories.add(CATEGORIES_C[random().nextInt(NUM_CHILDREN_CP_C)]);\n    categories.add(CATEGORIES_D[random().nextInt(NUM_CHILDREN_CP_D)]);\n\n    return categories;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["21d36d0db865f7b84026b447bec653469a6e66df"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"21d36d0db865f7b84026b447bec653469a6e66df":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}