{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testContainedBy().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testContainedBy().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testContainedBy().mjava","sourceNew":"  public void testContainedBy() throws IOException {\n    IntervalsSource source = Intervals.containedBy(\n        Intervals.term(\"porridge\"),\n        Intervals.ordered(Intervals.term(\"pease\"), Intervals.term(\"cold\"))\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 4, 4, 7, 7 },\n        { 1, 1, 7, 7 },\n        {},\n        { 4, 4 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 4, 4, 20, 39);\n    MatchesIterator subs = mi.getSubMatches();\n    assertMatch(subs, 3, 3, 20, 25);\n    assertMatch(subs, 4, 4, 26, 34);\n    assertMatch(subs, 5, 5, 35, 39);\n    assertFalse(subs.next());\n    assertMatch(mi, 7, 7, 41, 118);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 21, 21, 114, 118);\n    assertFalse(subs.next());\n    assertFalse(mi.next());\n    assertEquals(1, source.minExtent());\n  }\n\n","sourceOld":"  public void testContainedBy() throws IOException {\n    IntervalsSource source = Intervals.containedBy(\n        Intervals.term(\"porridge\"),\n        Intervals.ordered(Intervals.term(\"pease\"), Intervals.term(\"cold\"))\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 4, 4, 7, 7 },\n        { 1, 1, 7, 7 },\n        {},\n        { 4, 4 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 4, 4, 20, 39);\n    MatchesIterator subs = mi.getSubMatches();\n    assertMatch(subs, 3, 3, 20, 25);\n    assertMatch(subs, 4, 4, 26, 34);\n    assertMatch(subs, 5, 5, 35, 39);\n    assertFalse(subs.next());\n    assertMatch(mi, 7, 7, 41, 118);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 21, 21, 114, 118);\n    assertFalse(subs.next());\n    assertFalse(mi.next());\n    assertEquals(1, source.minExtent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed67e557f509069144486ee34fd0275a6dcbe991","date":1574418540,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testContainedBy().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testContainedBy().mjava","sourceNew":"  public void testContainedBy() throws IOException {\n    IntervalsSource source = Intervals.containedBy(\n        Intervals.term(\"porridge\"),\n        Intervals.ordered(Intervals.term(\"pease\"), Intervals.term(\"cold\"))\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 4, 4, 7, 7 },\n        { 1, 1, 7, 7 },\n        {},\n        { 4, 4 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 4, 4, 20, 39);\n    MatchesIterator subs = mi.getSubMatches();\n    assertMatch(subs, 3, 3, 20, 25);\n    assertMatch(subs, 4, 4, 26, 34);\n    assertMatch(subs, 5, 5, 35, 39);\n    assertFalse(subs.next());\n    assertMatch(mi, 7, 7, 41, 118);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 21, 21, 114, 118);\n    assertFalse(subs.next());\n    assertFalse(mi.next());\n    assertEquals(1, source.minExtent());\n\n    checkVisits(source, 5, \"porridge\", \"pease\", \"cold\");\n  }\n\n","sourceOld":"  public void testContainedBy() throws IOException {\n    IntervalsSource source = Intervals.containedBy(\n        Intervals.term(\"porridge\"),\n        Intervals.ordered(Intervals.term(\"pease\"), Intervals.term(\"cold\"))\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 4, 4, 7, 7 },\n        { 1, 1, 7, 7 },\n        {},\n        { 4, 4 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 4, 4, 20, 39);\n    MatchesIterator subs = mi.getSubMatches();\n    assertMatch(subs, 3, 3, 20, 25);\n    assertMatch(subs, 4, 4, 26, 34);\n    assertMatch(subs, 5, 5, 35, 39);\n    assertFalse(subs.next());\n    assertMatch(mi, 7, 7, 41, 118);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 21, 21, 114, 118);\n    assertFalse(subs.next());\n    assertFalse(mi.next());\n    assertEquals(1, source.minExtent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed67e557f509069144486ee34fd0275a6dcbe991":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed67e557f509069144486ee34fd0275a6dcbe991"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["ed67e557f509069144486ee34fd0275a6dcbe991"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"ed67e557f509069144486ee34fd0275a6dcbe991":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}