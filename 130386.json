{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","commits":[{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final File [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.getAbsolutePath() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new File [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        TestUtil.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final File [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.getAbsolutePath() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new File [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        TestUtil.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final File [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.getAbsolutePath() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new File [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final File [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.getAbsolutePath() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new File [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        TestUtil.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","bugFix":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final File [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.getAbsolutePath() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new File [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cefb6c0aa217f293070c43e7a77682dd56e0a33","date":1416928878,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n\n      if (virusCheckingFS != null) {\n        // Otherwise our IOUtils.rm below can fail:\n        virusCheckingFS.disable();\n      }\n\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n\n      if (virusCheckingFS != null) {\n        // Otherwise our IOUtils.rm below can fail:\n        virusCheckingFS.disable();\n      }\n\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleTemporaryFilesCleanup#afterAlways(List[Throwable]).mjava","sourceNew":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void afterAlways(List<Throwable> errors) throws Throwable {\n    // Drain cleanup queue and clear it.\n    final Path [] everything;\n    final String tempDirBasePath;\n    synchronized (cleanupQueue) {\n      tempDirBasePath = (tempDirBase != null ? tempDirBase.toAbsolutePath().toString() : null);\n      tempDirBase = null;\n\n      Collections.reverse(cleanupQueue);\n      everything = new Path [cleanupQueue.size()];\n      cleanupQueue.toArray(everything);\n      cleanupQueue.clear();\n    }\n\n    // Only check and throw an IOException on un-removable files if the test\n    // was successful. Otherwise just report the path of temporary files\n    // and leave them there.\n    if (failureMarker.wasSuccessful()) {\n      try {\n        IOUtils.rm(everything);\n      } catch (IOException e) {\n        Class<?> suiteClass = RandomizedContext.current().getTargetClass();\n        if (suiteClass.isAnnotationPresent(SuppressTempFileChecks.class)) {\n          System.err.println(\"WARNING: Leftover undeleted temporary files (bugUrl: \"\n              + suiteClass.getAnnotation(SuppressTempFileChecks.class).bugUrl() + \"): \"\n              + e.getMessage());\n          return;\n        }\n        throw e;\n      }\n      if (fileSystem != FileSystems.getDefault()) {\n        fileSystem.close();\n      }\n    } else {\n      if (tempDirBasePath != null) {\n        System.err.println(\"NOTE: leaving temporary files on disk at: \" + tempDirBasePath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"5a207d19eac354d649c3f0e2cce070017c78125e":["7cefb6c0aa217f293070c43e7a77682dd56e0a33","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["7cefb6c0aa217f293070c43e7a77682dd56e0a33","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["7cefb6c0aa217f293070c43e7a77682dd56e0a33","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["b470f36a9372c97283360b1304eacbde22df6c0d"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"b7605579001505896d48b07160075a5c8b8e128e":[],"7cefb6c0aa217f293070c43e7a77682dd56e0a33":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"f4abec28b874149a7223e32cc7a01704c27790de":["7cefb6c0aa217f293070c43e7a77682dd56e0a33"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["cbc3688252d4a8045d69a164236b2cf87b721f17","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}