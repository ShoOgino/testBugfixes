{"path":"solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","pathOld":"solr/contrib/solr-morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","sourceNew":"  /**\n   * Test that the ContentHandler properly strips the illegal characters\n   */\n  @Test\n  public void testTransformValue() {\n    String fieldName = \"user_name\";\n    assertFalse(\"foobar\".equals(getFoobarWithNonChars()));\n\n    Metadata metadata = new Metadata();\n    // load illegal char string into a metadata field and generate a new document,\n    // which will cause the ContentHandler to be invoked.\n    metadata.set(fieldName, getFoobarWithNonChars());\n    StripNonCharSolrContentHandlerFactory contentHandlerFactory =\n      new StripNonCharSolrContentHandlerFactory(DateUtil.DEFAULT_DATE_FORMATS);\n    IndexSchema schema = h.getCore().getLatestSchema();\n    SolrContentHandler contentHandler =\n      contentHandlerFactory.createSolrContentHandler(metadata, new MapSolrParams(new HashMap()), schema);\n    SolrInputDocument doc = contentHandler.newDocument();\n    String foobar = doc.getFieldValue(fieldName).toString();\n    assertTrue(\"foobar\".equals(foobar));\n  }\n\n","sourceOld":"  /**\n   * Test that the ContentHandler properly strips the illegal characters\n   */\n  @Test\n  public void testTransformValue() {\n    String fieldName = \"user_name\";\n    assertFalse(\"foobar\".equals(getFoobarWithNonChars()));\n\n    Metadata metadata = new Metadata();\n    // load illegal char string into a metadata field and generate a new document,\n    // which will cause the ContentHandler to be invoked.\n    metadata.set(fieldName, getFoobarWithNonChars());\n    StripNonCharSolrContentHandlerFactory contentHandlerFactory =\n      new StripNonCharSolrContentHandlerFactory(DateUtil.DEFAULT_DATE_FORMATS);\n    IndexSchema schema = h.getCore().getLatestSchema();\n    SolrContentHandler contentHandler =\n      contentHandlerFactory.createSolrContentHandler(metadata, new MapSolrParams(new HashMap()), schema);\n    SolrInputDocument doc = contentHandler.newDocument();\n    String foobar = doc.getFieldValue(fieldName).toString();\n    assertTrue(\"foobar\".equals(foobar));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that the ContentHandler properly strips the illegal characters\n   */\n  @Test\n  public void testTransformValue() {\n    String fieldName = \"user_name\";\n    assertFalse(\"foobar\".equals(getFoobarWithNonChars()));\n\n    Metadata metadata = new Metadata();\n    // load illegal char string into a metadata field and generate a new document,\n    // which will cause the ContentHandler to be invoked.\n    metadata.set(fieldName, getFoobarWithNonChars());\n    StripNonCharSolrContentHandlerFactory contentHandlerFactory =\n      new StripNonCharSolrContentHandlerFactory(DateUtil.DEFAULT_DATE_FORMATS);\n    IndexSchema schema = h.getCore().getLatestSchema();\n    SolrContentHandler contentHandler =\n      contentHandlerFactory.createSolrContentHandler(metadata, new MapSolrParams(new HashMap()), schema);\n    SolrInputDocument doc = contentHandler.newDocument();\n    String foobar = doc.getFieldValue(fieldName).toString();\n    assertTrue(\"foobar\".equals(foobar));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","date":1459364429,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","pathOld":"solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","sourceNew":"  /**\n   * Test that the ContentHandler properly strips the illegal characters\n   */\n  @Test\n  public void testTransformValue() {\n    String fieldName = \"user_name\";\n    assertFalse(\"foobar\".equals(getFoobarWithNonChars()));\n\n    Metadata metadata = new Metadata();\n    // load illegal char string into a metadata field and generate a new document,\n    // which will cause the ContentHandler to be invoked.\n    metadata.set(fieldName, getFoobarWithNonChars());\n    StripNonCharSolrContentHandlerFactory contentHandlerFactory =\n      new StripNonCharSolrContentHandlerFactory(ExtractionDateUtil.DEFAULT_DATE_FORMATS);\n    IndexSchema schema = h.getCore().getLatestSchema();\n    SolrContentHandler contentHandler =\n      contentHandlerFactory.createSolrContentHandler(metadata, new MapSolrParams(new HashMap()), schema);\n    SolrInputDocument doc = contentHandler.newDocument();\n    String foobar = doc.getFieldValue(fieldName).toString();\n    assertTrue(\"foobar\".equals(foobar));\n  }\n\n","sourceOld":"  /**\n   * Test that the ContentHandler properly strips the illegal characters\n   */\n  @Test\n  public void testTransformValue() {\n    String fieldName = \"user_name\";\n    assertFalse(\"foobar\".equals(getFoobarWithNonChars()));\n\n    Metadata metadata = new Metadata();\n    // load illegal char string into a metadata field and generate a new document,\n    // which will cause the ContentHandler to be invoked.\n    metadata.set(fieldName, getFoobarWithNonChars());\n    StripNonCharSolrContentHandlerFactory contentHandlerFactory =\n      new StripNonCharSolrContentHandlerFactory(DateUtil.DEFAULT_DATE_FORMATS);\n    IndexSchema schema = h.getCore().getLatestSchema();\n    SolrContentHandler contentHandler =\n      contentHandlerFactory.createSolrContentHandler(metadata, new MapSolrParams(new HashMap()), schema);\n    SolrInputDocument doc = contentHandler.newDocument();\n    String foobar = doc.getFieldValue(fieldName).toString();\n    assertTrue(\"foobar\".equals(foobar));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that the ContentHandler properly strips the illegal characters\n   */\n  @Test\n  public void testTransformValue() {\n    String fieldName = \"user_name\";\n    assertFalse(\"foobar\".equals(getFoobarWithNonChars()));\n\n    Metadata metadata = new Metadata();\n    // load illegal char string into a metadata field and generate a new document,\n    // which will cause the ContentHandler to be invoked.\n    metadata.set(fieldName, getFoobarWithNonChars());\n    StripNonCharSolrContentHandlerFactory contentHandlerFactory =\n      new StripNonCharSolrContentHandlerFactory(ExtractionDateUtil.DEFAULT_DATE_FORMATS);\n    IndexSchema schema = h.getCore().getLatestSchema();\n    SolrContentHandler contentHandler =\n      contentHandlerFactory.createSolrContentHandler(metadata, new MapSolrParams(new HashMap()), schema);\n    SolrInputDocument doc = contentHandler.newDocument();\n    String foobar = doc.getFieldValue(fieldName).toString();\n    assertTrue(\"foobar\".equals(foobar));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-cell/src/test/org/apache/solr/morphlines/cell/SolrCellMorphlineTest#testTransformValue().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that the ContentHandler properly strips the illegal characters\n   */\n  @Test\n  public void testTransformValue() {\n    String fieldName = \"user_name\";\n    assertFalse(\"foobar\".equals(getFoobarWithNonChars()));\n\n    Metadata metadata = new Metadata();\n    // load illegal char string into a metadata field and generate a new document,\n    // which will cause the ContentHandler to be invoked.\n    metadata.set(fieldName, getFoobarWithNonChars());\n    StripNonCharSolrContentHandlerFactory contentHandlerFactory =\n      new StripNonCharSolrContentHandlerFactory(ExtractionDateUtil.DEFAULT_DATE_FORMATS);\n    IndexSchema schema = h.getCore().getLatestSchema();\n    SolrContentHandler contentHandler =\n      contentHandlerFactory.createSolrContentHandler(metadata, new MapSolrParams(new HashMap()), schema);\n    SolrInputDocument doc = contentHandler.newDocument();\n    String foobar = doc.getFieldValue(fieldName).toString();\n    assertTrue(\"foobar\".equals(foobar));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}