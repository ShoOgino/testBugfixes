{"path":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#advance(int).mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"508fe97d1cab6f2348b96dbd66b055655a7d3b8c","date":1316959842,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      // Every parent must have at least one child:\n      assert parentTarget != 0;\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6442a1e611a2a329dd4725e0419ea23d118b89b3","date":1322422217,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      // Every parent must have at least one child:\n      assert parentTarget != 0;\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#advance(int).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinQuery.BlockJoinScorer#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int parentTarget) throws IOException {\n\n      //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n      if (parentTarget == NO_MORE_DOCS) {\n        return parentDoc = NO_MORE_DOCS;\n      }\n\n      if (parentTarget == 0) {\n        // Callers should only be passing in a docID from\n        // the parent space, so this means this parent\n        // has no children (it got docID 0), so it cannot\n        // possibly match.  We must handle this case\n        // separately otherwise we pass invalid -1 to\n        // prevSetBit below:\n        return nextDoc();\n      }\n\n      final int prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n      //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n      assert prevParentDoc >= parentDoc;\n      if (prevParentDoc > nextChildDoc) {\n        nextChildDoc = childScorer.advance(prevParentDoc);\n        // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n      //} else {\n        //System.out.println(\"  skip childScorer advance\");\n      }\n\n      // Parent & child docs are supposed to be orthogonal:\n      assert nextChildDoc != prevParentDoc;\n\n      final int nd = nextDoc();\n      //System.out.println(\"  return nextParentDoc=\" + nd);\n      return nd;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["6442a1e611a2a329dd4725e0419ea23d118b89b3"],"6442a1e611a2a329dd4725e0419ea23d118b89b3":["508fe97d1cab6f2348b96dbd66b055655a7d3b8c"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"508fe97d1cab6f2348b96dbd66b055655a7d3b8c":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bd4a7478aca8c3880512b730b28bf3239340635"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6442a1e611a2a329dd4725e0419ea23d118b89b3":["6bd4a7478aca8c3880512b730b28bf3239340635"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["508fe97d1cab6f2348b96dbd66b055655a7d3b8c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"508fe97d1cab6f2348b96dbd66b055655a7d3b8c":["6442a1e611a2a329dd4725e0419ea23d118b89b3"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}