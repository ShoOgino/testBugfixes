{"path":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","commits":[{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** Responsible for issuing build and rebload command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"Suggester prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    SolrSuggester suggester = getSuggester(params);\n    if (suggester == null) {\n      throw new IllegalArgumentException(\"Error in configuration, no suggester found\");\n    }\n    if (params.getBool(SUGGEST_BUILD, false)) {\n      suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      rb.rsp.add(\"command\", \"build\");\n    } else if (params.getBool(SUGGEST_RELOAD, false)) {\n      suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      rb.rsp.add(\"command\", \"reload\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf2ccf302186b563c9549824a4d45db1e8cf8a0d","date":1387322051,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","sourceNew":"  /** Responsible for issuing build and rebload command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    SolrSuggester suggester = getSuggester(params);\n    if (suggester == null) {\n      if (params.get(SUGGEST_DICT) != null) {\n        throw new IllegalArgumentException(\"No suggester named \" + params.get(SUGGEST_DICT) +\" was configured\");\n      } else {\n        throw new IllegalArgumentException(\"No default suggester was configured\");\n      }\n    }\n    if (params.getBool(SUGGEST_BUILD, false)) {\n      suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      rb.rsp.add(\"command\", \"build\");\n    } else if (params.getBool(SUGGEST_RELOAD, false)) {\n      suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      rb.rsp.add(\"command\", \"reload\");\n    }\n  }\n\n","sourceOld":"  /** Responsible for issuing build and rebload command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"Suggester prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    SolrSuggester suggester = getSuggester(params);\n    if (suggester == null) {\n      throw new IllegalArgumentException(\"Error in configuration, no suggester found\");\n    }\n    if (params.getBool(SUGGEST_BUILD, false)) {\n      suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      rb.rsp.add(\"command\", \"build\");\n    } else if (params.getBool(SUGGEST_RELOAD, false)) {\n      suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      rb.rsp.add(\"command\", \"reload\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** Responsible for issuing build and rebload command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    SolrSuggester suggester = getSuggester(params);\n    if (suggester == null) {\n      if (params.get(SUGGEST_DICT) != null) {\n        throw new IllegalArgumentException(\"No suggester named \" + params.get(SUGGEST_DICT) +\" was configured\");\n      } else {\n        throw new IllegalArgumentException(\"No default suggester was configured\");\n      }\n    }\n    if (params.getBool(SUGGEST_BUILD, false)) {\n      suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      rb.rsp.add(\"command\", \"build\");\n    } else if (params.getBool(SUGGEST_RELOAD, false)) {\n      suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      rb.rsp.add(\"command\", \"reload\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214b8610690edbe7e294594a7bc58a978ef1863c","date":1389376762,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","sourceNew":"  /** Responsible for issuing build and rebload command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    \n    final Collection<SolrSuggester> querysuggesters;\n    if (buildAll || reloadAll) {\n      querysuggesters = suggesters.values();\n    } else {\n      querysuggesters = getSuggesters(params);\n    }\n    \n    if (params.getBool(SUGGEST_BUILD, false) || buildAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!buildAll) ? \"build\" : \"buildAll\");\n    } else if (params.getBool(SUGGEST_RELOAD, false) || reloadAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!reloadAll) ? \"reload\" : \"reloadAll\");\n    }\n  }\n\n","sourceOld":"  /** Responsible for issuing build and rebload command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    SolrSuggester suggester = getSuggester(params);\n    if (suggester == null) {\n      if (params.get(SUGGEST_DICT) != null) {\n        throw new IllegalArgumentException(\"No suggester named \" + params.get(SUGGEST_DICT) +\" was configured\");\n      } else {\n        throw new IllegalArgumentException(\"No default suggester was configured\");\n      }\n    }\n    if (params.getBool(SUGGEST_BUILD, false)) {\n      suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      rb.rsp.add(\"command\", \"build\");\n    } else if (params.getBool(SUGGEST_RELOAD, false)) {\n      suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      rb.rsp.add(\"command\", \"reload\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e420cf346a4034f40350b74b9153180d96ba06","date":1436578568,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","sourceNew":"  /** Responsible for issuing build and rebuild command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    \n    final Collection<SolrSuggester> querysuggesters;\n    if (buildAll || reloadAll) {\n      querysuggesters = suggesters.values();\n    } else {\n      querysuggesters = getSuggesters(params);\n    }\n    \n    if (params.getBool(SUGGEST_BUILD, false) || buildAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!buildAll) ? \"build\" : \"buildAll\");\n    } else if (params.getBool(SUGGEST_RELOAD, false) || reloadAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!reloadAll) ? \"reload\" : \"reloadAll\");\n    }\n  }\n\n","sourceOld":"  /** Responsible for issuing build and rebload command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    \n    final Collection<SolrSuggester> querysuggesters;\n    if (buildAll || reloadAll) {\n      querysuggesters = suggesters.values();\n    } else {\n      querysuggesters = getSuggesters(params);\n    }\n    \n    if (params.getBool(SUGGEST_BUILD, false) || buildAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!buildAll) ? \"build\" : \"buildAll\");\n    } else if (params.getBool(SUGGEST_RELOAD, false) || reloadAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!reloadAll) ? \"reload\" : \"reloadAll\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","sourceNew":"  /** Responsible for issuing build and rebuild command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    \n    final Collection<SolrSuggester> querysuggesters;\n    if (buildAll || reloadAll) {\n      querysuggesters = suggesters.values();\n    } else {\n      querysuggesters = getSuggesters(params);\n    }\n    \n    if (params.getBool(SUGGEST_BUILD, false) || buildAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!buildAll) ? \"build\" : \"buildAll\");\n    } else if (params.getBool(SUGGEST_RELOAD, false) || reloadAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!reloadAll) ? \"reload\" : \"reloadAll\");\n    }\n  }\n\n","sourceOld":"  /** Responsible for issuing build and rebuild command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    \n    final Collection<SolrSuggester> querysuggesters;\n    if (buildAll || reloadAll) {\n      querysuggesters = suggesters.values();\n    } else {\n      querysuggesters = getSuggesters(params);\n    }\n    \n    if (params.getBool(SUGGEST_BUILD, false) || buildAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!buildAll) ? \"build\" : \"buildAll\");\n    } else if (params.getBool(SUGGEST_RELOAD, false) || reloadAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!reloadAll) ? \"reload\" : \"reloadAll\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#prepare(ResponseBuilder).mjava","sourceNew":"  /** Responsible for issuing build and rebuild command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent prepare with : {}\", params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    \n    final Collection<SolrSuggester> querysuggesters;\n    if (buildAll || reloadAll) {\n      querysuggesters = suggesters.values();\n    } else {\n      querysuggesters = getSuggesters(params);\n    }\n    \n    if (params.getBool(SUGGEST_BUILD, false) || buildAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!buildAll) ? \"build\" : \"buildAll\");\n    } else if (params.getBool(SUGGEST_RELOAD, false) || reloadAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!reloadAll) ? \"reload\" : \"reloadAll\");\n    }\n  }\n\n","sourceOld":"  /** Responsible for issuing build and rebuild command to the specified {@link SolrSuggester} */\n  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent prepare with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    \n    final Collection<SolrSuggester> querysuggesters;\n    if (buildAll || reloadAll) {\n      querysuggesters = suggesters.values();\n    } else {\n      querysuggesters = getSuggesters(params);\n    }\n    \n    if (params.getBool(SUGGEST_BUILD, false) || buildAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.build(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!buildAll) ? \"build\" : \"buildAll\");\n    } else if (params.getBool(SUGGEST_RELOAD, false) || reloadAll) {\n      for (SolrSuggester suggester : querysuggesters) {\n        suggester.reload(rb.req.getCore(), rb.req.getSearcher());\n      }\n      rb.rsp.add(\"command\", (!reloadAll) ? \"reload\" : \"reloadAll\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f2e96099703c24c0c63d27806ba7020626b649b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"214b8610690edbe7e294594a7bc58a978ef1863c":["bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"01e420cf346a4034f40350b74b9153180d96ba06":["214b8610690edbe7e294594a7bc58a978ef1863c"],"bf2ccf302186b563c9549824a4d45db1e8cf8a0d":["7f2e96099703c24c0c63d27806ba7020626b649b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["01e420cf346a4034f40350b74b9153180d96ba06"]},"commit2Childs":{"7f2e96099703c24c0c63d27806ba7020626b649b":["bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"214b8610690edbe7e294594a7bc58a978ef1863c":["01e420cf346a4034f40350b74b9153180d96ba06"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01e420cf346a4034f40350b74b9153180d96ba06":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"bf2ccf302186b563c9549824a4d45db1e8cf8a0d":["214b8610690edbe7e294594a7bc58a978ef1863c","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}