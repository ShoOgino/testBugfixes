{"path":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"0731ce99d6c47159d45adbeb814875c92b193134","date":1496694366,"type":1,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/valuesource/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed","date":1590169220,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/MultiStringFunction#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public FunctionValues getValues(@SuppressWarnings({\"rawtypes\"})Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final FunctionValues[] valsArr = new FunctionValues[sources.length];\n    for (int i=0; i<sources.length; i++) {\n      valsArr[i] = sources[i].getValues(context, readerContext);\n    }\n\n    return new StrDocValues(this) {\n      @Override\n      public String strVal(int doc) throws IOException {\n        CharSequence cs = func(doc, valsArr);\n        return  cs != null ? cs.toString() : null;\n      }\n      \n      @Override\n      public boolean exists(int doc) throws IOException {\n        boolean exists = true;\n        for (FunctionValues val : valsArr) {\n          exists = exists & val.exists(doc);\n        }\n        return exists;\n      }\n      \n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder bytes) throws IOException {\n        bytes.clear();\n        CharSequence cs = func(doc, valsArr);\n        if( cs != null ){\n          bytes.copyChars(func(doc,valsArr));\n          return true;\n        } else {\n          return false;\n        }\n      }\n      \n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime=true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime=false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueStr mval = new MutableValueStr();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.exists = bytesVal(doc, mval.value);\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0731ce99d6c47159d45adbeb814875c92b193134"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed":["28288370235ed02234a64753cdbf0c6ec096304a"],"0731ce99d6c47159d45adbeb814875c92b193134":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0731ce99d6c47159d45adbeb814875c92b193134"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","0731ce99d6c47159d45adbeb814875c92b193134","28288370235ed02234a64753cdbf0c6ec096304a"],"0731ce99d6c47159d45adbeb814875c92b193134":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}