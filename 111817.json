{"path":"backwards/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #next()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/DisjunctionSumScorer#score(Collector,int,int).mjava","sourceNew":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #next()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Expert: Collects matching documents in a range.  Hook for optimization.\n   * Note that {@link #next()} must be called once before this method is called\n   * for the first time.\n   * @param collector The collector to which all matching documents are passed through.\n   * @param max Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // firstDocID is ignored since nextDoc() sets 'currentDoc'\n    collector.setScorer(this);\n    while (currentDoc < max) {\n      collector.collect(currentDoc);\n      if (nextDoc() == NO_MORE_DOCS) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}