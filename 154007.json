{"path":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getContext().mjava","commits":[{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. \n   * <p>\n   * Iff this reader is composed of sub\n   * readers, i.e. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves()}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves()}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40b1146cfcb60029fd03986ab893030aa5e72c1c","date":1345017710,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getContext().mjava","sourceNew":"  /**\n   * Expert: Returns the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. \n   * <p>\n   * Iff this reader is composed of sub\n   * readers, i.e. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances referenced\n   * from this top-level context do not support {@link CompositeReaderContext#leaves()}.\n   * Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   */\n  public abstract IndexReaderContext getContext();\n\n","sourceOld":"  /**\n   * Expert: Returns the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. \n   * <p>\n   * Iff this reader is composed of sub\n   * readers, i.e. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves()}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. \n   * <p>\n   * Iff this reader is composed of sub\n   * readers, i.e. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances referenced\n   * from this top-level context do not support {@link CompositeReaderContext#leaves()}.\n   * Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   */\n  public abstract IndexReaderContext getContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves()}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. \n   * <p>\n   * Iff this reader is composed of sub\n   * readers, i.e. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances referenced\n   * from this top-level context do not support {@link CompositeReaderContext#leaves()}.\n   * Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   */\n  public abstract IndexReaderContext getContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves()}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getContext().mjava","sourceNew":"  /**\n   * Expert: Returns a the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves()}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getTopReaderContext();\n\n","sourceOld":"  /**\n   * Expert: Returns the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. \n   * <p>\n   * Iff this reader is composed of sub\n   * readers, i.e. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances referenced\n   * from this top-level context do not support {@link CompositeReaderContext#leaves()}.\n   * Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   */\n  public abstract IndexReaderContext getContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. \n   * <p>\n   * Iff this reader is composed of sub\n   * readers, i.e. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances referenced\n   * from this top-level context do not support {@link CompositeReaderContext#leaves()}.\n   * Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   */\n  public abstract IndexReaderContext getContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves()}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getContext().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getContext().mjava","sourceNew":"  /**\n   * Expert: Returns the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. \n   * <p>\n   * Iff this reader is composed of sub\n   * readers, i.e. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link LeafReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances referenced\n   * from this top-level context do not support {@link CompositeReaderContext#leaves()}.\n   * Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   */\n  public abstract IndexReaderContext getContext();\n\n","sourceOld":"  /**\n   * Expert: Returns the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. \n   * <p>\n   * Iff this reader is composed of sub\n   * readers, i.e. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances referenced\n   * from this top-level context do not support {@link CompositeReaderContext#leaves()}.\n   * Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   */\n  public abstract IndexReaderContext getContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","40b1146cfcb60029fd03986ab893030aa5e72c1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40b1146cfcb60029fd03986ab893030aa5e72c1c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["40b1146cfcb60029fd03986ab893030aa5e72c1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"40b1146cfcb60029fd03986ab893030aa5e72c1c":["211b1506e56f7860762fbd4698f6d1d1b57f672c"]},"commit2Childs":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c188105a9aae04f56c24996f98f8333fc825d2e","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["40b1146cfcb60029fd03986ab893030aa5e72c1c"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40b1146cfcb60029fd03986ab893030aa5e72c1c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}