{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#incrementToken().mjava","commits":[{"id":"344d7fb38511184be27e3eba27408ad5f634b91c","date":1270838455,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#incrementToken().mjava","pathOld":"lucene/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#incrementToken().mjava","sourceNew":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","sourceOld":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer#incrementToken().mjava","sourceNew":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","sourceOld":"  /*\n  * (non-Javadoc)\n  *\n  * @see org.apache.lucene.analysis.TokenStream#next()\n  */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (tokens != null && tokens.hasNext()){\n      AttributeSource.State state = tokens.next();\n      restoreState(state);\n      return true;\n    }\n    clearAttributes();\n    int tokenType = scanner.getNextToken();\n\n    if (tokenType == WikipediaTokenizerImpl.YYEOF) {\n      return false;\n    }\n    String type = WikipediaTokenizerImpl.TOKEN_TYPES[tokenType];\n    if (tokenOutput == TOKENS_ONLY || untokenizedTypes.contains(type) == false){\n      setupToken();\n    } else if (tokenOutput == UNTOKENIZED_ONLY && untokenizedTypes.contains(type) == true){\n      collapseTokens(tokenType);\n\n    }\n    else if (tokenOutput == BOTH){\n      //collapse into a single token, add it to tokens AND output the individual tokens\n      //output the untokenized Token first\n      collapseAndSaveTokens(tokenType, type);\n    }\n    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());\n    typeAtt.setType(type);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"344d7fb38511184be27e3eba27408ad5f634b91c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["344d7fb38511184be27e3eba27408ad5f634b91c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"344d7fb38511184be27e3eba27408ad5f634b91c":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["344d7fb38511184be27e3eba27408ad5f634b91c"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}