{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int,CompressingStoredFieldsIndex).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int,CompressingStoredFieldsIndex).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and uncompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * atio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   * <p>\n   * The <code>storedFieldsIndexFormat</code> parameter allows you to choose\n   * bettwen several fields index formats that offer various trade-offs between\n   * memory usage and speed.\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @param storedFieldsIndexFormat the format to use to load the fields index\n   * @see CompressionMode\n   * @see CompressingStoredFieldsIndex\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize,\n      CompressingStoredFieldsIndex storedFieldsIndexFormat) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    this.storedFieldsIndexFormat = storedFieldsIndexFormat;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"599fe298ad4fe49c3f20845d435151bc0e2d45a6","date":1349876576,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int,CompressingStoredFieldsIndex).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int,CompressingStoredFieldsIndex).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and uncompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * atio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   * <p>\n   * The <code>storedFieldsIndex</code> parameter allows you to choose between\n   * several fields index implementations that offer various trade-offs between\n   * memory usage and speed.\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @param storedFieldsIndex the fields index impl to use\n   * @see CompressionMode\n   * @see CompressingStoredFieldsIndex\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize,\n      CompressingStoredFieldsIndex storedFieldsIndex) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    this.storedFieldsIndex = storedFieldsIndex;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and uncompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * atio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   * <p>\n   * The <code>storedFieldsIndexFormat</code> parameter allows you to choose\n   * bettwen several fields index formats that offer various trade-offs between\n   * memory usage and speed.\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @param storedFieldsIndexFormat the format to use to load the fields index\n   * @see CompressionMode\n   * @see CompressingStoredFieldsIndex\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize,\n      CompressingStoredFieldsIndex storedFieldsIndexFormat) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    this.storedFieldsIndexFormat = storedFieldsIndexFormat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","date":1351696336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int,CompressingStoredFieldsIndex).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int,CompressingStoredFieldsIndex).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   * <p>\n   * The <code>storedFieldsIndex</code> parameter allows you to choose between\n   * several fields index implementations that offer various trade-offs between\n   * memory usage and speed.\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @param storedFieldsIndex the fields index impl to use\n   * @see CompressionMode\n   * @see CompressingStoredFieldsIndex\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize,\n      CompressingStoredFieldsIndex storedFieldsIndex) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    this.storedFieldsIndex = storedFieldsIndex;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and uncompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * atio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   * <p>\n   * The <code>storedFieldsIndex</code> parameter allows you to choose between\n   * several fields index implementations that offer various trade-offs between\n   * memory usage and speed.\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @param storedFieldsIndex the fields index impl to use\n   * @see CompressionMode\n   * @see CompressingStoredFieldsIndex\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize,\n      CompressingStoredFieldsIndex storedFieldsIndex) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    this.storedFieldsIndex = storedFieldsIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a96cceee825e15cd8e042b683d404086e2a58d1","date":1351872237,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int,CompressingStoredFieldsIndex).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   * <p>\n   * The <code>storedFieldsIndex</code> parameter allows you to choose between\n   * several fields index implementations that offer various trade-offs between\n   * memory usage and speed.\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @param storedFieldsIndex the fields index impl to use\n   * @see CompressionMode\n   * @see CompressingStoredFieldsIndex\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize,\n      CompressingStoredFieldsIndex storedFieldsIndex) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n    this.storedFieldsIndex = storedFieldsIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["599fe298ad4fe49c3f20845d435151bc0e2d45a6"],"599fe298ad4fe49c3f20845d435151bc0e2d45a6":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a96cceee825e15cd8e042b683d404086e2a58d1"]},"commit2Childs":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"599fe298ad4fe49c3f20845d435151bc0e2d45a6":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["599fe298ad4fe49c3f20845d435151bc0e2d45a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}