{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#rename(String,String).mjava","commits":[{"id":"214256b5eeeaba88b8293b37d30460b462b19562","date":1468250146,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#rename(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#renameFile(String,String).mjava","sourceNew":"  @Override\n  public synchronized void rename(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.rename(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void renameFile(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.renameFile(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#rename(String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized void rename(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.rename(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d203e5c4d54b6f6e78e98d2342905df37f816f6","date":1532511271,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#rename(String,String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#rename(String,String).mjava","sourceNew":"  @Override\n  public synchronized void rename(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.rename(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void rename(String source, String dest) throws IOException {\n    maybeYield();\n    maybeThrowDeterministicException();\n\n    if (crashed) {\n      throw new IOException(\"cannot rename after crash\");\n    }\n    \n    if (openFiles.containsKey(source) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: source file \\\"\" + source + \"\\\" is still open: cannot rename\"), source, true);\n    }\n\n    if (openFiles.containsKey(dest) && assertNoDeleteOpenFile) {\n      throw (AssertionError) fillOpenTrace(new AssertionError(\"MockDirectoryWrapper: dest file \\\"\" + dest + \"\\\" is still open: cannot rename\"), dest, true);\n    }\n\n    boolean success = false;\n    try {\n      in.rename(source, dest);\n      success = true;\n    } finally {\n      if (success) {\n        // we don't do this stuff with lucene's commit, but it's just for completeness\n        if (unSyncedFiles.contains(source)) {\n          unSyncedFiles.remove(source);\n          unSyncedFiles.add(dest);\n        }\n        openFilesDeleted.remove(source);\n        createdFiles.remove(source);\n        createdFiles.add(dest);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d203e5c4d54b6f6e78e98d2342905df37f816f6":["214256b5eeeaba88b8293b37d30460b462b19562"],"214256b5eeeaba88b8293b37d30460b462b19562":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","214256b5eeeaba88b8293b37d30460b462b19562"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d203e5c4d54b6f6e78e98d2342905df37f816f6"]},"commit2Childs":{"3d203e5c4d54b6f6e78e98d2342905df37f816f6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"214256b5eeeaba88b8293b37d30460b462b19562":["3d203e5c4d54b6f6e78e98d2342905df37f816f6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["214256b5eeeaba88b8293b37d30460b462b19562","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}