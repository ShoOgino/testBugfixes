{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#testCheckVersionId().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#testCheckVersionId().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#testCheckVersionId().mjava","sourceNew":"    public void testCheckVersionId() throws IOException, StorageException{\n        this.modifier.forceWrite();\n        ReferenceCounter<StorageQuery> sQuery = this.controller.getStorageQuery();\n        ServerBaseEntry entry = new ServerBaseEntry(new Entry());\n        entry.setId(\"test\");\n        entry.setServiceConfig(this.configurator);\n        entry.setUpdated(new DateTime(System.currentTimeMillis(),0));\n        entry.setFeedId(feedId);\n        entry.setVersion(5);\n        StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,StorageOperation.INSERT);\n        this.modifier.insertEntry(wrapper);\n        //test in buffer\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),\"someOtherFeed\",entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        \n        \n        this.modifier.forceWrite();\n        //test in buffer after written\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),\"someOtherFeed\",entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        sQuery.decrementRef();\n        sQuery = this.controller.getStorageQuery();\n        //test in index\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        sQuery.decrementRef();\n        \n        \n        \n        \n    }\n\n","sourceOld":"    public void testCheckVersionId() throws IOException, StorageException{\n        this.modifier.forceWrite();\n        ReferenceCounter<StorageQuery> sQuery = this.controller.getStorageQuery();\n        ServerBaseEntry entry = new ServerBaseEntry(new Entry());\n        entry.setId(\"test\");\n        entry.setServiceConfig(this.configurator);\n        entry.setUpdated(new DateTime(System.currentTimeMillis(),0));\n        entry.setFeedId(feedId);\n        entry.setVersion(5);\n        StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,StorageOperation.INSERT);\n        this.modifier.insertEntry(wrapper);\n        //test in buffer\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),\"someOtherFeed\",entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        \n        \n        this.modifier.forceWrite();\n        //test in buffer after written\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),\"someOtherFeed\",entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        sQuery.decrementRef();\n        sQuery = this.controller.getStorageQuery();\n        //test in index\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        sQuery.decrementRef();\n        \n        \n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#testCheckVersionId().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageQuery#testCheckVersionId().mjava","sourceNew":"    public void testCheckVersionId() throws IOException, StorageException{\n        this.modifier.forceWrite();\n        ReferenceCounter<StorageQuery> sQuery = this.controller.getStorageQuery();\n        ServerBaseEntry entry = new ServerBaseEntry(new Entry());\n        entry.setId(\"test\");\n        entry.setServiceConfig(this.configurator);\n        entry.setUpdated(new DateTime(System.currentTimeMillis(),0));\n        entry.setFeedId(feedId);\n        entry.setVersion(5);\n        StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,StorageOperation.INSERT);\n        this.modifier.insertEntry(wrapper);\n        //test in buffer\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),\"someOtherFeed\",entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        \n        \n        this.modifier.forceWrite();\n        //test in buffer after written\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),\"someOtherFeed\",entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        sQuery.decrementRef();\n        sQuery = this.controller.getStorageQuery();\n        //test in index\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        sQuery.decrementRef();\n        \n        \n        \n        \n    }\n\n","sourceOld":"    public void testCheckVersionId() throws IOException, StorageException{\n        this.modifier.forceWrite();\n        ReferenceCounter<StorageQuery> sQuery = this.controller.getStorageQuery();\n        ServerBaseEntry entry = new ServerBaseEntry(new Entry());\n        entry.setId(\"test\");\n        entry.setServiceConfig(this.configurator);\n        entry.setUpdated(new DateTime(System.currentTimeMillis(),0));\n        entry.setFeedId(feedId);\n        entry.setVersion(5);\n        StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,StorageOperation.INSERT);\n        this.modifier.insertEntry(wrapper);\n        //test in buffer\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),\"someOtherFeed\",entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        \n        \n        this.modifier.forceWrite();\n        //test in buffer after written\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),\"someOtherFeed\",entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        sQuery.decrementRef();\n        sQuery = this.controller.getStorageQuery();\n        //test in index\n        assertTrue(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion()));\n        assertFalse(sQuery.get().checkEntryVersion(entry.getId(),entry.getFeedId(),10000));\n        assertFalse(sQuery.get().checkEntryVersion(\"foobar\",entry.getFeedId(),entry.getVersion()));\n        sQuery.decrementRef();\n        \n        \n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}