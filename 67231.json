{"path":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#createSchemaFromType(Type).mjava","commits":[{"id":"6ba409fa7dec3437c7631ef2582c2ad91a8368b1","date":1570400397,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#createSchemaFromType(Type).mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, Object> createSchemaFromType(Type t) {\n    Map<String, Object> map = new LinkedHashMap<>();\n\n    if (primitives.containsKey(t)) {\n      map.put(\"type\", primitives.get(t));\n    } else if (t == List.class) {\n\n    } else if (t instanceof ParameterizedType && ((ParameterizedType) t).getRawType() == List.class) {\n      Type typ = ((ParameterizedType) t).getActualTypeArguments()[0];\n      map.put(\"type\", \"array\");\n      map.put(\"items\", createSchemaFromType(typ));\n    } else {\n      createObjectSchema((Class) t, map);\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8","date":1570799519,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#createSchemaFromType(Type).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#createSchemaFromType(Type).mjava","sourceNew":"  private static Map<String, Object> createSchemaFromType(Type t) {\n    Map<String, Object> map = new LinkedHashMap<>();\n    if (t instanceof ParameterizedType) {\n      ParameterizedType typ = (ParameterizedType) t;\n      if (typ.getRawType() == PayloadObj.class) {\n        t = typ.getActualTypeArguments()[0];\n      }\n    }\n\n    if (primitives.containsKey(t)) {\n      map.put(\"type\", primitives.get(t));\n    } else if (t instanceof ParameterizedType && ((ParameterizedType) t).getRawType() == List.class) {\n      Type typ = ((ParameterizedType) t).getActualTypeArguments()[0];\n      map.put(\"type\", \"array\");\n      map.put(\"items\", createSchemaFromType(typ));\n    } else {\n      createObjectSchema((Class) t, map);\n    }\n    return map;\n  }\n\n","sourceOld":"  private static Map<String, Object> createSchemaFromType(Type t) {\n    Map<String, Object> map = new LinkedHashMap<>();\n\n    if (primitives.containsKey(t)) {\n      map.put(\"type\", primitives.get(t));\n    } else if (t == List.class) {\n\n    } else if (t instanceof ParameterizedType && ((ParameterizedType) t).getRawType() == List.class) {\n      Type typ = ((ParameterizedType) t).getActualTypeArguments()[0];\n      map.put(\"type\", \"array\");\n      map.put(\"items\", createSchemaFromType(typ));\n    } else {\n      createObjectSchema((Class) t, map);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38d63171317f90b25910c2374de2e33c55c243f5","date":1570800220,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#createSchemaFromType(Type).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#createSchemaFromType(Type).mjava","sourceNew":"  private static Map<String, Object> createSchemaFromType(Type t) {\n    Map<String, Object> map = new LinkedHashMap<>();\n\n    if (primitives.containsKey(t)) {\n      map.put(\"type\", primitives.get(t));\n    } else if (t == List.class) {\n\n    } else if (t instanceof ParameterizedType && ((ParameterizedType) t).getRawType() == List.class) {\n      Type typ = ((ParameterizedType) t).getActualTypeArguments()[0];\n      map.put(\"type\", \"array\");\n      map.put(\"items\", createSchemaFromType(typ));\n    } else {\n      createObjectSchema((Class) t, map);\n    }\n    return map;\n  }\n\n","sourceOld":"  private static Map<String, Object> createSchemaFromType(Type t) {\n    Map<String, Object> map = new LinkedHashMap<>();\n    if (t instanceof ParameterizedType) {\n      ParameterizedType typ = (ParameterizedType) t;\n      if (typ.getRawType() == PayloadObj.class) {\n        t = typ.getActualTypeArguments()[0];\n      }\n    }\n\n    if (primitives.containsKey(t)) {\n      map.put(\"type\", primitives.get(t));\n    } else if (t instanceof ParameterizedType && ((ParameterizedType) t).getRawType() == List.class) {\n      Type typ = ((ParameterizedType) t).getActualTypeArguments()[0];\n      map.put(\"type\", \"array\");\n      map.put(\"items\", createSchemaFromType(typ));\n    } else {\n      createObjectSchema((Class) t, map);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4505d603fb135c5279b5c6b1fc375feeeff582f1","date":1570801145,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#createSchemaFromType(Type).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#createSchemaFromType(Type).mjava","sourceNew":"  private static Map<String, Object> createSchemaFromType(Type t) {\n    Map<String, Object> map = new LinkedHashMap<>();\n    if (t instanceof ParameterizedType) {\n      ParameterizedType typ = (ParameterizedType) t;\n      if (typ.getRawType() == PayloadObj.class) {\n        t = typ.getActualTypeArguments()[0];\n      }\n    }\n\n    if (primitives.containsKey(t)) {\n      map.put(\"type\", primitives.get(t));\n    } else if (t instanceof ParameterizedType && ((ParameterizedType) t).getRawType() == List.class) {\n      Type typ = ((ParameterizedType) t).getActualTypeArguments()[0];\n      map.put(\"type\", \"array\");\n      map.put(\"items\", createSchemaFromType(typ));\n    } else {\n      createObjectSchema((Class) t, map);\n    }\n    return map;\n  }\n\n","sourceOld":"  private static Map<String, Object> createSchemaFromType(Type t) {\n    Map<String, Object> map = new LinkedHashMap<>();\n\n    if (primitives.containsKey(t)) {\n      map.put(\"type\", primitives.get(t));\n    } else if (t == List.class) {\n\n    } else if (t instanceof ParameterizedType && ((ParameterizedType) t).getRawType() == List.class) {\n      Type typ = ((ParameterizedType) t).getActualTypeArguments()[0];\n      map.put(\"type\", \"array\");\n      map.put(\"items\", createSchemaFromType(typ));\n    } else {\n      createObjectSchema((Class) t, map);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#createSchemaFromType(Type).mjava","pathOld":"/dev/null","sourceNew":"  private static Map<String, Object> createSchemaFromType(Type t) {\n    Map<String, Object> map = new LinkedHashMap<>();\n    if (t instanceof ParameterizedType) {\n      ParameterizedType typ = (ParameterizedType) t;\n      if (typ.getRawType() == PayloadObj.class) {\n        t = typ.getActualTypeArguments()[0];\n      }\n    }\n\n    if (primitives.containsKey(t)) {\n      map.put(\"type\", primitives.get(t));\n    } else if (t instanceof ParameterizedType && ((ParameterizedType) t).getRawType() == List.class) {\n      Type typ = ((ParameterizedType) t).getActualTypeArguments()[0];\n      map.put(\"type\", \"array\");\n      map.put(\"items\", createSchemaFromType(typ));\n    } else {\n      createObjectSchema((Class) t, map);\n    }\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"856d72a5f63c995cad4c6fd92b7c121aa140285c","date":1572845901,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonSchemaCreator#createSchemaFromType(java.lang.reflect.Type,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#createSchemaFromType(Type).mjava","sourceNew":"  private static Map<String, Object> createSchemaFromType(java.lang.reflect.Type t, Map<String, Object> map) {\n    if (natives.containsKey(t)) {\n      map.put(\"type\", natives.get(t));\n    } else if (t instanceof ParameterizedType && ((ParameterizedType) t).getRawType() == List.class) {\n      Type typ = ((ParameterizedType) t).getActualTypeArguments()[0];\n      map.put(\"type\", \"array\");\n      map.put(\"items\", getSchema(typ));\n    } else {\n      createObjectSchema((Class) t, map);\n    }\n    return map;\n  }\n\n","sourceOld":"  private static Map<String, Object> createSchemaFromType(Type t) {\n    Map<String, Object> map = new LinkedHashMap<>();\n    if (t instanceof ParameterizedType) {\n      ParameterizedType typ = (ParameterizedType) t;\n      if (typ.getRawType() == PayloadObj.class) {\n        t = typ.getActualTypeArguments()[0];\n      }\n    }\n\n    if (primitives.containsKey(t)) {\n      map.put(\"type\", primitives.get(t));\n    } else if (t instanceof ParameterizedType && ((ParameterizedType) t).getRawType() == List.class) {\n      Type typ = ((ParameterizedType) t).getActualTypeArguments()[0];\n      map.put(\"type\", \"array\");\n      map.put(\"items\", createSchemaFromType(typ));\n    } else {\n      createObjectSchema((Class) t, map);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38d63171317f90b25910c2374de2e33c55c243f5":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"856d72a5f63c995cad4c6fd92b7c121aa140285c":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["38d63171317f90b25910c2374de2e33c55c243f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["856d72a5f63c995cad4c6fd92b7c121aa140285c"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4505d603fb135c5279b5c6b1fc375feeeff582f1"]},"commit2Childs":{"38d63171317f90b25910c2374de2e33c55c243f5":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["38d63171317f90b25910c2374de2e33c55c243f5"],"856d72a5f63c995cad4c6fd92b7c121aa140285c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1","b0b597c65628ca9e73913a07e81691f8229bae35"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["856d72a5f63c995cad4c6fd92b7c121aa140285c","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}