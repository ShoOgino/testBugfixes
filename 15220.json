{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","commits":[{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c139c2928baf8d32ac74e253cfdeff1d358ea67","date":1499799769,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","sourceNew":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='\" + (dates.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b23fe6201251493352f6659420b536be65ede254","date":1499843263,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","sourceNew":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='\" + (dates.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","sourceNew":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='\" + (dates.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","sourceNew":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='\" + (dates.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='11']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointStats(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","sourceNew":"  private void doTestDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='\" + (dates.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='\" + (dates.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestDatePointStats(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testDatePointStats(String,String,String[]).mjava","sourceNew":"  private void doTestDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='\" + (dates.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testDatePointStats(String field, String dvField, String[] dates) {\n    for (int i = 0; i < dates.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvField, dates[i], field, dates[i]));\n    }\n    assertU(adoc(\"id\", String.valueOf(dates.length)));\n    assertU(commit());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvField).getType() instanceof PointField);\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvField, \"stats\", \"true\", \"stats.field\", dvField),\n        \"//*[@numFound='\" + (dates.length + 1) + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='min'][.='\" + dates[0] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/date[@name='max'][.='\" + dates[dates.length-1] + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='count'][.='\" + dates.length + \"']\",\n        \"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='\" + dvField+ \"']/long[@name='missing'][.='1']\");\n\n    assertFalse(h.getCore().getLatestSchema().getField(field).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\",\n        \"Can't calculate stats on a PointField without docValues\",\n        req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"stats\", \"true\", \"stats.field\", field),\n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c139c2928baf8d32ac74e253cfdeff1d358ea67":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"b23fe6201251493352f6659420b536be65ede254":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","0c139c2928baf8d32ac74e253cfdeff1d358ea67"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["b23fe6201251493352f6659420b536be65ede254"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","b23fe6201251493352f6659420b536be65ede254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"0c139c2928baf8d32ac74e253cfdeff1d358ea67":["b23fe6201251493352f6659420b536be65ede254"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["0c139c2928baf8d32ac74e253cfdeff1d358ea67","fb569fd721c41eafc2a2d788499a7df490c7f1a5","b23fe6201251493352f6659420b536be65ede254","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"b23fe6201251493352f6659420b536be65ede254":["17e844d4f9ba6804f10747d7e51e83a9a8868c94","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}