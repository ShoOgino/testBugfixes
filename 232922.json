{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(charUtils.codePointAt(chArray, i)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(charUtils.codePointAt(chArray, i)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(charUtils.codePointAt(chArray, i, chLen)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(charUtils.codePointAt(chArray, i)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(Character.codePointAt(chArray, i, chLen)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(charUtils.codePointAt(chArray, i, chLen)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(Character.codePointAt(chArray, i, chLen)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(charUtils.codePointAt(chArray, i, chLen)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(Character.codePointAt(chArray, i, chLen)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] chArray = termAtt.buffer();\n      int chLen = termAtt.length();\n      for (int i = 0; i < chLen;) {\n        i += Character.toChars(\n            lowerCase(charUtils.codePointAt(chArray, i, chLen)), chArray, i);\n       }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}