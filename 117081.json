{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8bf184cb0ae7013c446f68cc56a9843098366e","date":1518522879,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"397b96a886ece05a1444aa3771e10825e1145c1f","date":1529309393,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82b686ab2904b3e81184ecea0d238b4ab0885376","date":1529576124,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c72a217478b8fa40b34697477ecd97e00789579f","date":1529924692,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n//    listCollection();\n//    clusterStatusNoCollection();\n//    clusterStatusWithCollection();\n//    clusterStatusWithCollectionAndShard();\n//    clusterStatusWithCollectionAndMultipleShards();\n//    clusterStatusWithRouteKey();\n//    clusterStatusAliasTest();\n//    clusterStatusRolesTest();\n//    clusterStatusBadCollectionTest();\n//    replicaPropTest();\n//    clusterStatusZNodeVersion();\n//    testClusterStateMigration();\n//    testCollectionCreationCollectionNameValidation();\n//    testReplicationFactorValidaton();\n//    testCollectionCreationShardNameValidation();\n//    testAliasCreationNameValidation();\n//    testShardCreationNameValidation();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baafdb5673d9fc26424346a295a669e380861a4e","date":1529928065,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n//    listCollection();\n//    clusterStatusNoCollection();\n//    clusterStatusWithCollection();\n//    clusterStatusWithCollectionAndShard();\n//    clusterStatusWithCollectionAndMultipleShards();\n//    clusterStatusWithRouteKey();\n//    clusterStatusAliasTest();\n//    clusterStatusRolesTest();\n//    clusterStatusBadCollectionTest();\n//    replicaPropTest();\n//    clusterStatusZNodeVersion();\n//    testClusterStateMigration();\n//    testCollectionCreationCollectionNameValidation();\n//    testReplicationFactorValidaton();\n//    testCollectionCreationShardNameValidation();\n//    testAliasCreationNameValidation();\n//    testShardCreationNameValidation();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4949836c6e83246ddba8997472e3333f40986c8c","date":1560293762,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testNoConfigset();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ccfa992b91fcebaecaa804a2bffd48542ef2e939","date":1579772993,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationTooManyShards();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testNoConfigset();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testNoConfigset();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationTooManyShards();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testNoConfigset();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testClusterStateMigration();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationTooManyShards();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testNoConfigset();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","bugFix":["baafdb5673d9fc26424346a295a669e380861a4e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testCollectionCreationCollectionNameValidation();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testNoConfigset();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      CollectionAdminRequest.Create req;\n      if (useTlogReplicas()) {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 0, 1, 1);\n      } else {\n        req = CollectionAdminRequest.createCollection(COLLECTION_NAME, \"conf1\",2, 1, 0, 1);\n      }\n      req.setMaxShardsPerNode(2);\n      setV2(req);\n      client.request(req);\n      assertV2CallsCount();\n      createCollection(null, COLLECTION_NAME1, 1, 1, 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME1, 1);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n    waitForRecoveriesToFinish(COLLECTION_NAME1, false);\n\n    listCollection();\n    clusterStatusNoCollection();\n    clusterStatusWithCollection();\n    clusterStatusWithCollectionAndShard();\n    clusterStatusWithCollectionAndMultipleShards();\n    clusterStatusWithRouteKey();\n    clusterStatusAliasTest();\n    clusterStatusRolesTest();\n    clusterStatusBadCollectionTest();\n    replicaPropTest();\n    clusterStatusZNodeVersion();\n    testCollectionCreationCollectionNameValidation();\n    testCollectionCreationTooManyShards();\n    testReplicationFactorValidaton();\n    testCollectionCreationShardNameValidation();\n    testAliasCreationNameValidation();\n    testShardCreationNameValidation();\n    testNoConfigset();\n    testModifyCollection(); // deletes replicationFactor property from collections, be careful adding new tests after this one!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["ccfa992b91fcebaecaa804a2bffd48542ef2e939"],"397b96a886ece05a1444aa3771e10825e1145c1f":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["397b96a886ece05a1444aa3771e10825e1145c1f"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["b94236357aaa22b76c10629851fe4e376e0cea82","3f8bf184cb0ae7013c446f68cc56a9843098366e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["bfcdec9fcf0409223f35c5ec3bc14094314941b4","baafdb5673d9fc26424346a295a669e380861a4e"],"ccfa992b91fcebaecaa804a2bffd48542ef2e939":["4949836c6e83246ddba8997472e3333f40986c8c"],"baafdb5673d9fc26424346a295a669e380861a4e":["c72a217478b8fa40b34697477ecd97e00789579f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4949836c6e83246ddba8997472e3333f40986c8c":["baafdb5673d9fc26424346a295a669e380861a4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"c72a217478b8fa40b34697477ecd97e00789579f":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"3f8bf184cb0ae7013c446f68cc56a9843098366e":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["bfcdec9fcf0409223f35c5ec3bc14094314941b4","baafdb5673d9fc26424346a295a669e380861a4e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bfcdec9fcf0409223f35c5ec3bc14094314941b4","3f8bf184cb0ae7013c446f68cc56a9843098366e"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"397b96a886ece05a1444aa3771e10825e1145c1f":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["c72a217478b8fa40b34697477ecd97e00789579f"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["397b96a886ece05a1444aa3771e10825e1145c1f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"ccfa992b91fcebaecaa804a2bffd48542ef2e939":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"baafdb5673d9fc26424346a295a669e380861a4e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4949836c6e83246ddba8997472e3333f40986c8c","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4949836c6e83246ddba8997472e3333f40986c8c":["ccfa992b91fcebaecaa804a2bffd48542ef2e939"],"3f8bf184cb0ae7013c446f68cc56a9843098366e":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"c72a217478b8fa40b34697477ecd97e00789579f":["baafdb5673d9fc26424346a295a669e380861a4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}