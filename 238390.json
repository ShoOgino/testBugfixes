{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":"    @Override\n    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        private Term term;\n        \n        public void seek(Term term) {\n          this.term = term;\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          if (term == null) {\n            hasNext = true;  // term==null means match all docs\n          } else {\n            Info info = getInfo(term.field());\n            current = info == null ? null : info.getPositions(term.text());\n            hasNext = (current != null);\n            cursor = 0;\n          }\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : (term == null ? 1 : 0);\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        private Term term;\n        \n        public void seek(Term term) {\n          this.term = term;\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          if (term == null) {\n            hasNext = true;  // term==null means match all docs\n          } else {\n            Info info = getInfo(term.field());\n            current = info == null ? null : info.getPositions(term.text());\n            hasNext = (current != null);\n            cursor = 0;\n          }\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : (term == null ? 1 : 0);\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":null,"sourceOld":"    @Override\n    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        private Term term;\n        \n        public void seek(Term term) {\n          this.term = term;\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          if (term == null) {\n            hasNext = true;  // term==null means match all docs\n          } else {\n            Info info = getInfo(term.field());\n            current = info == null ? null : info.getPositions(term.text());\n            hasNext = (current != null);\n            cursor = 0;\n          }\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : (term == null ? 1 : 0);\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":null,"sourceOld":"    @Override\n    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        private Term term;\n        \n        public void seek(Term term) {\n          this.term = term;\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          if (term == null) {\n            hasNext = true;  // term==null means match all docs\n          } else {\n            Info info = getInfo(term.field());\n            current = info == null ? null : info.getPositions(term.text());\n            hasNext = (current != null);\n            cursor = 0;\n          }\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : (term == null ? 1 : 0);\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}