{"path":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrQueryRequest,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","sourceNew":"  /**\n   * Executes a basic query\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrQueryRequest req,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    try {\n    Query query = QParser.getParser(qs, null, req).getQuery();\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req);\n    }\n\n    DocList results = req.getSearcher().getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing query: \" + qs);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doSimpleQuery(String,SolrIndexSearcher,IndexSchema,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Executes a basic query in lucene syntax\n   */\n  public static DocList doSimpleQuery(String sreq,\n                                      SolrIndexSearcher searcher,\n                                      IndexSchema schema,\n                                      int start, int limit) throws IOException {\n    List<String> commands = StrUtils.splitSmart(sreq,';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    Query query = QueryParsing.parseQuery(qs, schema);\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), schema);\n    }\n\n    DocList results = searcher.getDocList(query,(DocSet)null, sort, start, limit);\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0883328ff2cc09b5c999d05c04e16530d819c627":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","0883328ff2cc09b5c999d05c04e16530d819c627"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0883328ff2cc09b5c999d05c04e16530d819c627"]},"commit2Childs":{"0883328ff2cc09b5c999d05c04e16530d819c627":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["0883328ff2cc09b5c999d05c04e16530d819c627","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}