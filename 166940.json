{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","commits":[{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        // if we can't we rely on IFD to pick up and retry\n        IOUtils.deleteFilesIgnoringExceptions(fileEntry.dir, fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        // if we can't we rely on IFD to pick up and retry\n        IOUtils.deleteFilesIgnoringExceptions(fileEntry.dir, fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f936b67ab4a872d22231aae4f63608e7f411071","date":1412266152,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileWriter#copyFileEntry(IndexOutput,FileEntry).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copy the contents of the file with specified extension into the provided\n   * output stream.\n   */\n  private final long copyFileEntry(IndexOutput dataOut, FileEntry fileEntry)\n      throws IOException {\n    final IndexInput is = fileEntry.dir.openInput(fileEntry.file, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final long startPtr = dataOut.getFilePointer();\n      final long length = fileEntry.length;\n      dataOut.copyBytes(is, length);\n      // Verify that the output length diff is equal to original file\n      long endPtr = dataOut.getFilePointer();\n      long diff = endPtr - startPtr;\n      if (diff != length)\n        throw new IOException(\"Difference in the output file offsets \" + diff\n            + \" does not match the original file length \" + length);\n      fileEntry.offset = startPtr;\n      success = true;\n      return length;\n    } finally {\n      if (success) {\n        IOUtils.close(is);\n        // copy successful - delete file\n        // if we can't we rely on IFD to pick up and retry\n        IOUtils.deleteFilesIgnoringExceptions(fileEntry.dir, fileEntry.file);\n      } else {\n        IOUtils.closeWhileHandlingException(is);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f936b67ab4a872d22231aae4f63608e7f411071":["989d940c4bf402188f4f0ae13736836885227383"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["7f936b67ab4a872d22231aae4f63608e7f411071"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["989d940c4bf402188f4f0ae13736836885227383","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f936b67ab4a872d22231aae4f63608e7f411071":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7f936b67ab4a872d22231aae4f63608e7f411071","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}