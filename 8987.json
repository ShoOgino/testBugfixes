{"path":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,byte[],int).mjava","commits":[{"id":"bfde954cd162c74a48f6b035e596f252c9939a73","date":1442329231,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Encode characters from this String, starting at offset\n   *  for length characters. Output to the destination array\n   *  will begin at {@code outOffset}. It is the responsibility of the\n   *  caller to make sure that the destination array is large enough.\n   *  <p>\n   *  note this method returns the final output offset (outOffset + number of bytes written)\n   */\n  public static int UTF16toUTF8(final CharSequence s, final int offset, final int length, byte[] out, int outOffset) {\n    final int end = offset + length;\n\n    int upto = outOffset;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = (code << 10) + utf32 + SURROGATE_OFFSET;\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    return upto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfde954cd162c74a48f6b035e596f252c9939a73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfde954cd162c74a48f6b035e596f252c9939a73"]},"commit2Childs":{"bfde954cd162c74a48f6b035e596f252c9939a73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfde954cd162c74a48f6b035e596f252c9939a73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}