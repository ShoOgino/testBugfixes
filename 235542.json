{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\"));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":["dd86d8c5713fc65e119372f12a3c5fdc47987b56"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":["dd86d8c5713fc65e119372f12a3c5fdc47987b56"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n      private Scorer scorer;\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        this.scorer = scorer;\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", scorer.getClass().getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"551db74111df22d4f6684319479c9f3d5f7ddf23","date":1394018258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$FakeScorer\", clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"956ed30f06fa518bc14a442f5dadfa7a0ef51c69","date":1394534863,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$FakeScorer\", clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", BooleanScorer.class.getName() + \"$BucketScorer\", clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new SimpleCollector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"658a1d7b74c99b3d845fb1f852331a1c4623368e","date":1396631281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    // we don't wrap with AssertingIndexSearcher in order to have the original scorer in setScorer.\n    final IndexSearcher s = newSearcher(r, true, false);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new SimpleCollector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new SimpleCollector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    // we don't wrap with AssertingIndexSearcher in order to have the original scorer in setScorer.\n    final IndexSearcher s = newSearcher(r, true, false);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new SimpleCollector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    final IndexSearcher s = newSearcher(r);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new Collector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer instanceof AssertingScorer ? ((AssertingScorer) scorer).getIn().getClass() : scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.shutdown();\n    // we don't wrap with AssertingIndexSearcher in order to have the original scorer in setScorer.\n    final IndexSearcher s = newSearcher(r, true, false);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new SimpleCollector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    // we don't wrap with AssertingIndexSearcher in order to have the original scorer in setScorer.\n    final IndexSearcher s = newSearcher(r, true, false);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new SimpleCollector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    // we don't wrap with AssertingIndexSearcher in order to have the original scorer in setScorer.\n    final IndexSearcher s = newSearcher(r, true, false);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new SimpleCollector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.shutdown();\n    // we don't wrap with AssertingIndexSearcher in order to have the original scorer in setScorer.\n    final IndexSearcher s = newSearcher(r, true, false);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new SimpleCollector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbd0c3bb84a0d7674a684216c9dcbd9296e899dd","date":1421103556,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMoreThan32ProhibitedClauses().mjava","sourceNew":null,"sourceOld":"  public void testMoreThan32ProhibitedClauses() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\", Field.Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new TextField(\"field\", \"33\", Field.Store.NO));\n    w.addDocument(doc);\n    final IndexReader r = w.getReader();\n    w.close();\n    // we don't wrap with AssertingIndexSearcher in order to have the original scorer in setScorer.\n    final IndexSearcher s = newSearcher(r, true, false);\n\n    final BooleanQuery q = new BooleanQuery();\n    for(int term=0;term<33;term++) {\n      q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"\"+term)),\n                              BooleanClause.Occur.MUST_NOT));\n    }\n    q.add(new BooleanClause(new TermQuery(new Term(\"field\", \"33\")),\n                            BooleanClause.Occur.SHOULD));\n                            \n    final int[] count = new int[1];\n    s.search(q, new SimpleCollector() {\n    \n      @Override\n      public void setScorer(Scorer scorer) {\n        // Make sure we got BooleanScorer:\n        final Class<?> clazz = scorer.getClass();\n        assertEquals(\"Scorer is implemented by wrong class\", FakeScorer.class.getName(), clazz.getName());\n      }\n      \n      @Override\n      public void collect(int doc) {\n        count[0]++;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n\n    assertEquals(1, count[0]);\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbd0c3bb84a0d7674a684216c9dcbd9296e899dd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"658a1d7b74c99b3d845fb1f852331a1c4623368e":["ae73da626f97850c922c42736f808d0378e165f0"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"956ed30f06fa518bc14a442f5dadfa7a0ef51c69":["551db74111df22d4f6684319479c9f3d5f7ddf23"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"551db74111df22d4f6684319479c9f3d5f7ddf23":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["acf00221f44c5f08ccea014f2492b53af15ecd66","658a1d7b74c99b3d845fb1f852331a1c4623368e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae73da626f97850c922c42736f808d0378e165f0":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["658a1d7b74c99b3d845fb1f852331a1c4623368e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","956ed30f06fa518bc14a442f5dadfa7a0ef51c69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cbd0c3bb84a0d7674a684216c9dcbd9296e899dd"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cbd0c3bb84a0d7674a684216c9dcbd9296e899dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"658a1d7b74c99b3d845fb1f852331a1c4623368e":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["551db74111df22d4f6684319479c9f3d5f7ddf23","acf00221f44c5f08ccea014f2492b53af15ecd66"],"956ed30f06fa518bc14a442f5dadfa7a0ef51c69":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"551db74111df22d4f6684319479c9f3d5f7ddf23":["956ed30f06fa518bc14a442f5dadfa7a0ef51c69"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cbd0c3bb84a0d7674a684216c9dcbd9296e899dd"],"ae73da626f97850c922c42736f808d0378e165f0":["658a1d7b74c99b3d845fb1f852331a1c4623368e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}