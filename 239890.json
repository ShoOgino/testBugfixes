{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","commits":[{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(v2r.getContentStreams().iterator().next().getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(v2r.getContentStreams().iterator().next().getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(v2r.getContentStreams().iterator().next().getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(v2r.getContentStreams().iterator().next().getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(v2r.getContentStreams().iterator().next().getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(v2r.getContentStreams().iterator().next().getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a8ed351d8c6bdf0007c9e567785707b6d2f7169","date":1509612777,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","sourceNew":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n\n\n  }\n\n","sourceOld":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(v2r.getContentStreams().iterator().next().getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(v2r.getContentStreams().iterator().next().getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","sourceNew":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n    CollectionAdminRequest.CollectionProp collectionProp = CollectionAdminRequest.setCollectionProperty(\"mycoll\", \"prop\", \"value\");\n    v2r = V1toV2ApiMapper.convert(collectionProp).build();\n    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"mycoll\", Utils.getObjectByPath(m,true,\"/set-collection-property/name\"));\n    assertEquals(\"prop\", Utils.getObjectByPath(m,true,\"/set-collection-property/propertyName\"));\n    assertEquals(\"value\", Utils.getObjectByPath(m,true,\"/set-collection-property/propertyValue\"));\n\n\n  }\n\n","sourceOld":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33f0a2f6e0bdd1e75afd591742fa52d02fa9b5d","date":1520360098,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","sourceNew":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n//    CollectionAdminRequest.CollectionProp collectionProp = CollectionAdminRequest.setCollectionProperty(\"mycoll\", \"prop\", \"value\");\n//    v2r = V1toV2ApiMapper.convert(collectionProp).build();\n//    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n//    assertEquals(\"/c\", v2r.getPath());\n//    assertEquals(\"mycoll\", Utils.getObjectByPath(m,true,\"/set-collection-property/name\"));\n//    assertEquals(\"prop\", Utils.getObjectByPath(m,true,\"/set-collection-property/name\"));\n//    assertEquals(\"value\", Utils.getObjectByPath(m,true,\"/set-collection-property/value\"));\n\n\n  }\n\n","sourceOld":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n    CollectionAdminRequest.CollectionProp collectionProp = CollectionAdminRequest.setCollectionProperty(\"mycoll\", \"prop\", \"value\");\n    v2r = V1toV2ApiMapper.convert(collectionProp).build();\n    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"mycoll\", Utils.getObjectByPath(m,true,\"/set-collection-property/name\"));\n    assertEquals(\"prop\", Utils.getObjectByPath(m,true,\"/set-collection-property/propertyName\"));\n    assertEquals(\"value\", Utils.getObjectByPath(m,true,\"/set-collection-property/propertyValue\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fb90b6f156f755246cc924556ceb4bbdba7c2a7","date":1520449097,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCreate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV1toV2ApiMapper#testCommands().mjava","sourceNew":"  public void testCreate() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map<?,?> m = (Map<?,?>) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n  }\n\n","sourceOld":"  public void testCommands() throws IOException {\n    Create cmd = CollectionAdminRequest\n        .createCollection(\"mycoll\", \"conf1\", 3, 2)\n        .setProperties(ImmutableMap.<String,String>builder()\n            .put(\"p1\",\"v1\")\n            .put(\"p2\",\"v2\")\n            .build());\n    V2Request v2r = V1toV2ApiMapper.convert(cmd).build();\n    Map m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c\", v2r.getPath());\n    assertEquals(\"v1\", Utils.getObjectByPath(m,true,\"/create/properties/p1\"));\n    assertEquals(\"v2\", Utils.getObjectByPath(m,true,\"/create/properties/p2\"));\n    assertEquals(\"3\", Utils.getObjectByPath(m,true,\"/create/numShards\"));\n    assertEquals(\"2\", Utils.getObjectByPath(m,true,\"/create/nrtReplicas\"));\n\n    CollectionAdminRequest.AddReplica addReplica = CollectionAdminRequest.addReplicaToShard(\"mycoll\", \"shard1\");\n    v2r = V1toV2ApiMapper.convert(addReplica).build();\n    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n    assertEquals(\"/c/mycoll/shards\", v2r.getPath());\n    assertEquals(\"shard1\", Utils.getObjectByPath(m,true,\"/add-replica/shard\"));\n    assertEquals(\"NRT\", Utils.getObjectByPath(m,true,\"/add-replica/type\"));\n\n//    CollectionAdminRequest.CollectionProp collectionProp = CollectionAdminRequest.setCollectionProperty(\"mycoll\", \"prop\", \"value\");\n//    v2r = V1toV2ApiMapper.convert(collectionProp).build();\n//    m = (Map) Utils.fromJSON(ContentStreamBase.create(new BinaryRequestWriter(), v2r).getStream());\n//    assertEquals(\"/c\", v2r.getPath());\n//    assertEquals(\"mycoll\", Utils.getObjectByPath(m,true,\"/set-collection-property/name\"));\n//    assertEquals(\"prop\", Utils.getObjectByPath(m,true,\"/set-collection-property/name\"));\n//    assertEquals(\"value\", Utils.getObjectByPath(m,true,\"/set-collection-property/value\"));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3fc88a06a44fc3112186e9be4562b36713955d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8fb90b6f156f755246cc924556ceb4bbdba7c2a7":["b33f0a2f6e0bdd1e75afd591742fa52d02fa9b5d"],"de3459a54b4c8751d9ef19b035577e2418064be7":["0a8ed351d8c6bdf0007c9e567785707b6d2f7169"],"b33f0a2f6e0bdd1e75afd591742fa52d02fa9b5d":["de3459a54b4c8751d9ef19b035577e2418064be7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a8ed351d8c6bdf0007c9e567785707b6d2f7169":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4d3fc88a06a44fc3112186e9be4562b36713955d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8fb90b6f156f755246cc924556ceb4bbdba7c2a7"]},"commit2Childs":{"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"8fb90b6f156f755246cc924556ceb4bbdba7c2a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de3459a54b4c8751d9ef19b035577e2418064be7":["b33f0a2f6e0bdd1e75afd591742fa52d02fa9b5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d3fc88a06a44fc3112186e9be4562b36713955d","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b33f0a2f6e0bdd1e75afd591742fa52d02fa9b5d":["8fb90b6f156f755246cc924556ceb4bbdba7c2a7"],"0a8ed351d8c6bdf0007c9e567785707b6d2f7169":["de3459a54b4c8751d9ef19b035577e2418064be7"],"28288370235ed02234a64753cdbf0c6ec096304a":["0a8ed351d8c6bdf0007c9e567785707b6d2f7169"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}