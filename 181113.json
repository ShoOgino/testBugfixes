{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testBogusArguments().mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testBogusArguments().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    try {\n      tokenizerFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenizerFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenFilterFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenFilterFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8a255765a5625ff80fba75863de5a16ea392015e","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    try {\n      tokenizerFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenizerFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenFilterFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n    \n    try {\n      tokenFilterFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n      fail();\n    } catch (IllegalArgumentException expected) {\n      assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    }\n  }\n\n","bugFix":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"bugIntro":["8a255765a5625ff80fba75863de5a16ea392015e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a255765a5625ff80fba75863de5a16ea392015e","date":1528161860,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = null;\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"NGram\", \"minGramSize\", \"2\", \"maxGramSize\", \"5\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"EdgeNGram\", \"minGramSize\", \"2\", \"maxGramSize\", \"5\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":["05fe562aa248790944d43cdd478f512572835ba0","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = null;\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"NGram\", \"minGramSize\", \"2\", \"maxGramSize\", \"5\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"EdgeNGram\", \"minGramSize\", \"2\", \"maxGramSize\", \"5\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testBogusArguments().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/TestNGramFilters#testBogusArguments().mjava","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = null;\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"NGram\", \"minGramSize\", \"2\", \"maxGramSize\", \"5\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"EdgeNGram\", \"minGramSize\", \"2\", \"maxGramSize\", \"5\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","sourceOld":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenizerFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"NGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n    \n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      tokenFilterFactory(\"EdgeNGram\", \"bogusArg\", \"bogusValue\");\n    });\n    assertTrue(expected.getMessage().contains(\"Unknown parameters\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a255765a5625ff80fba75863de5a16ea392015e":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["05fe562aa248790944d43cdd478f512572835ba0","8a255765a5625ff80fba75863de5a16ea392015e"],"05fe562aa248790944d43cdd478f512572835ba0":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["05fe562aa248790944d43cdd478f512572835ba0","8a255765a5625ff80fba75863de5a16ea392015e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a255765a5625ff80fba75863de5a16ea392015e"]},"commit2Childs":{"8a255765a5625ff80fba75863de5a16ea392015e":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"05fe562aa248790944d43cdd478f512572835ba0":["8a255765a5625ff80fba75863de5a16ea392015e","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["05fe562aa248790944d43cdd478f512572835ba0"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}