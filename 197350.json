{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreExplanations#testSubExplanations().mjava","commits":[{"id":"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","date":1484565333,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreExplanations#testSubExplanations().mjava","pathOld":"/dev/null","sourceNew":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionScoreQuery(new MatchAllDocsQuery(), DoubleValuesSource.constant(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    assertEquals(\"constant(5.0)\", expl.getDescription());\n    assertEquals(0, expl.getDetails().length);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreExplanations#testSubExplanations().mjava","pathOld":"/dev/null","sourceNew":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionScoreQuery(new MatchAllDocsQuery(), DoubleValuesSource.constant(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    assertEquals(\"constant(5.0)\", expl.getDescription());\n    assertEquals(0, expl.getDetails().length);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a38488a55cc52553c9792da5044dd31b15128cd8","date":1510755769,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreExplanations#testSubExplanations().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreExplanations#testSubExplanations().mjava","sourceNew":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionScoreQuery(new MatchAllDocsQuery(), DoubleValuesSource.constant(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    Explanation subExpl = expl.getDetails()[1];\n    assertEquals(\"constant(5.0)\", subExpl.getDescription());\n    assertEquals(0, subExpl.getDetails().length);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n  }\n\n","sourceOld":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionScoreQuery(new MatchAllDocsQuery(), DoubleValuesSource.constant(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    assertEquals(\"constant(5.0)\", expl.getDescription());\n    assertEquals(0, expl.getDetails().length);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreExplanations#testSubExplanations().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreExplanations#testSubExplanations().mjava","sourceNew":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionScoreQuery(new MatchAllDocsQuery(), DoubleValuesSource.constant(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    Explanation subExpl = expl.getDetails()[0];\n    assertEquals(\"constant(5.0)\", subExpl.getDescription());\n    assertEquals(0, subExpl.getDetails().length);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n  }\n\n","sourceOld":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionScoreQuery(new MatchAllDocsQuery(), DoubleValuesSource.constant(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    Explanation subExpl = expl.getDetails()[1];\n    assertEquals(\"constant(5.0)\", subExpl.getDescription());\n    assertEquals(0, subExpl.getDetails().length);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreExplanations#testSubExplanations().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreExplanations#testSubExplanations().mjava","sourceNew":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionScoreQuery(new MatchAllDocsQuery(), DoubleValuesSource.constant(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    Explanation subExpl = expl.getDetails()[0];\n    assertEquals(\"constant(5.0)\", subExpl.getDescription());\n    assertEquals(0, subExpl.getDetails().length);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue().doubleValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue().doubleValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue().doubleValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue().doubleValue(), 0f);\n  }\n\n","sourceOld":"  public void testSubExplanations() throws IOException {\n    Query query = new FunctionScoreQuery(new MatchAllDocsQuery(), DoubleValuesSource.constant(5));\n    IndexSearcher searcher = newSearcher(BaseExplanationTestCase.searcher.getIndexReader());\n    searcher.setSimilarity(new BM25Similarity());\n\n    Explanation expl = searcher.explain(query, 0);\n    Explanation subExpl = expl.getDetails()[0];\n    assertEquals(\"constant(5.0)\", subExpl.getDescription());\n    assertEquals(0, subExpl.getDetails().length);\n\n    query = new BoostQuery(query, 2);\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n\n    searcher.setSimilarity(new ClassicSimilarity()); // in order to have a queryNorm != 1\n    expl = searcher.explain(query, 0);\n    assertEquals(2, expl.getDetails().length);\n    // function\n    assertEquals(5f, expl.getDetails()[1].getValue(), 0f);\n    // boost\n    assertEquals(\"boost\", expl.getDetails()[0].getDescription());\n    assertEquals(2f, expl.getDetails()[0].getValue(), 0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["a38488a55cc52553c9792da5044dd31b15128cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a38488a55cc52553c9792da5044dd31b15128cd8":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["507e7decdf00981d09a74632ea30299a4ce6ba72","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"a38488a55cc52553c9792da5044dd31b15128cd8":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["a38488a55cc52553c9792da5044dd31b15128cd8","507e7decdf00981d09a74632ea30299a4ce6ba72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}