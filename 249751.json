{"path":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","sourceOld":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","date":1269379515,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","sourceOld":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}