{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER, false).get(docID));\n                  break;\n                }\n                BytesRef term = bdv.get(docID);\n                assertEquals(binary.get(docID), term);\n                term = sdv.get(docID);\n                assertEquals(sorted.get(docID), term);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER, false).get(docID));\n                  break;\n                }\n                BytesRef term = bdv.get(docID);\n                assertEquals(binary.get(docID), term);\n                term = sdv.get(docID);\n                assertEquals(sorted.get(docID), term);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER, false).get(docID));\n                  break;\n                }\n                BytesRef term = bdv.get(docID);\n                assertEquals(binary.get(docID), term);\n                term = sdv.get(docID);\n                assertEquals(sorted.get(docID), term);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER, false).get(docID));\n                  break;\n                }\n                BytesRef term = bdv.get(docID);\n                assertEquals(binary.get(docID), term);\n                term = sdv.get(docID);\n                assertEquals(sorted.get(docID), term);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER, false).get(docID));\n                  break;\n                }\n                BytesRef term = bdv.get(docID);\n                assertEquals(binary.get(docID), term);\n                term = sdv.get(docID);\n                assertEquals(sorted.get(docID), term);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER, false).get(docID));\n                  break;\n                }\n                BytesRef term = bdv.get(docID);\n                assertEquals(binary.get(docID), term);\n                term = sdv.get(docID);\n                assertEquals(sorted.get(docID), term);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                case 1:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                case 2:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                case 3:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                }\n                BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n                assertEquals(docID, bdv.advance(docID));\n                assertEquals(binary.get(docID), bdv.binaryValue());\n                SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n                assertEquals(docID, sdv.advance(docID));\n                assertEquals(sorted.get(docID), sdv.binaryValue());\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER, false).get(docID));\n                  break;\n                }\n                BytesRef term = bdv.get(docID);\n                assertEquals(binary.get(docID), term);\n                term = sdv.get(docID);\n                assertEquals(sorted.get(docID), term);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                case 1:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                case 2:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                case 3:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                }\n                BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n                assertEquals(docID, bdv.advance(docID));\n                assertEquals(binary.get(docID), bdv.binaryValue());\n                SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n                assertEquals(docID, sdv.advance(docID));\n                assertEquals(sorted.get(docID), sdv.binaryValue());\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              //NumericDocValues ndv = ar.getNumericDocValues(\"number\");\n              NumericDocValues ndv = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false);\n              //BinaryDocValues bdv = ar.getBinaryDocValues(\"bytes\");\n              BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\", false);\n              SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER, false).get(docID));\n                  break;\n                case 1:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER, false).get(docID));\n                  break;\n                case 2:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER, false).get(docID));\n                  break;\n                case 3:\n                  assertEquals(numbers.get(docID).longValue(), FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER, false).get(docID));\n                  break;\n                }\n                BytesRef term = bdv.get(docID);\n                assertEquals(binary.get(docID), term);\n                term = sdv.get(docID);\n                assertEquals(sorted.get(docID), term);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    final List<Long> numbers = new ArrayList<>();\n    final List<BytesRef> binary = new ArrayList<>();\n    final List<BytesRef> sorted = new ArrayList<>();\n    final int numDocs = atLeast(100);\n    for(int i=0;i<numDocs;i++) {\n      Document d = new Document();\n      long number = random().nextLong();\n      d.add(new NumericDocValuesField(\"number\", number));\n      BytesRef bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new BinaryDocValuesField(\"bytes\", bytes));\n      binary.add(bytes);\n      bytes = new BytesRef(TestUtil.randomRealisticUnicodeString(random()));\n      d.add(new SortedDocValuesField(\"sorted\", bytes));\n      sorted.add(bytes);\n      w.addDocument(d);\n      numbers.add(number);\n    }\n\n    w.forceMerge(1);\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    assertEquals(1, r.leaves().size());\n    final LeafReader ar = r.leaves().get(0).reader();\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n    List<Thread> threads = new ArrayList<>();\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    for(int t=0;t<numThreads;t++) {\n      final Random threadRandom = new Random(random().nextLong());\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              int iters = atLeast(1000);\n              for(int iter=0;iter<iters;iter++) {\n                int docID = threadRandom.nextInt(numDocs);\n                switch(threadRandom.nextInt(4)) {\n                case 0:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.INT_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                case 1:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.LONG_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                case 2:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.FLOAT_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                case 3:\n                  {\n                    NumericDocValues values = FieldCache.DEFAULT.getNumerics(ar, \"number\", FieldCache.DOUBLE_POINT_PARSER);\n                    assertEquals(docID, values.advance(docID));\n                    assertEquals(numbers.get(docID).longValue(), values.longValue());\n                  }\n                  break;\n                }\n                BinaryDocValues bdv = FieldCache.DEFAULT.getTerms(ar, \"bytes\");\n                assertEquals(docID, bdv.advance(docID));\n                assertEquals(binary.get(docID), bdv.binaryValue());\n                SortedDocValues sdv = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n                assertEquals(docID, sdv.advance(docID));\n                assertEquals(sorted.get(docID), sdv.binaryValue());\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      thread.start();\n      threads.add(thread);\n    }\n\n    startingGun.countDown();\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0e121d43b5a10f2df530f406f935102656e9c4e8","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}