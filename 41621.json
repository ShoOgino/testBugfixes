{"path":"src/test/org/apache/solr/search/function/TestFunctionQuery#testGeneral().mjava","commits":[{"id":"e1720d203cff791bcdef2bae580cf24e8906b4d8","date":1240608665,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#testGeneral().mjava","pathOld":"/dev/null","sourceNew":"  public void testGeneral() {\n    assertU(adoc(\"id\",\"1\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n    assertU(commit());\n\n    // test that ord and rord are working on a global index basis, not just\n    // at the segment level (since Lucene 2.9 has switched to per-segment searching)\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ord(id)\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(ord(id))\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}rord(id)\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(rord(id))\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"920a0686ed72437773f441d7d5088d3aff98f6cb","date":1250805909,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#testGeneral().mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#testGeneral().mjava","sourceNew":"  public void testGeneral() {\n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n    assertU(commit());\n\n    // test that ord and rord are working on a global index basis, not just\n    // at the segment level (since Lucene 2.9 has switched to per-segment searching)\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ord(id)\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(ord(id))\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}rord(id)\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(rord(id))\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n\n\n    // test that we can subtract dates to millisecond precision\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(a_tdt,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='-1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(b_tdt,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,2009-08-31T12:10:10.124Z)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.124Z,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z/SECOND,2009-08-31T12:10:10.124Z/SECOND)\", \"fq\",\"id:1\"), \"//float[@name='score']='0.0'\");\n  }\n\n","sourceOld":"  public void testGeneral() {\n    assertU(adoc(\"id\",\"1\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n    assertU(commit());\n\n    // test that ord and rord are working on a global index basis, not just\n    // at the segment level (since Lucene 2.9 has switched to per-segment searching)\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ord(id)\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(ord(id))\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}rord(id)\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(rord(id))\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42","date":1253196493,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#testGeneral().mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#testGeneral().mjava","sourceNew":"  public void testGeneral() {\n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n    assertU(commit());\n\n    // test that ord and rord are working on a global index basis, not just\n    // at the segment level (since Lucene 2.9 has switched to per-segment searching)\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ord(id)\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(ord(id))\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}rord(id)\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(rord(id))\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n\n\n    // test that we can subtract dates to millisecond precision\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(a_tdt,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='-1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(b_tdt,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,2009-08-31T12:10:10.124Z)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.124Z,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z/SECOND,2009-08-31T12:10:10.124Z/SECOND)\", \"fq\",\"id:1\"), \"//float[@name='score']='0.0'\");\n\n    for (int i=100; i<112; i++) {\n      assertU(adoc(\"id\",\"\"+i, \"text\",\"batman\"));\n    }\n    assertU(commit());\n    assertU(adoc(\"id\",\"120\", \"text\",\"batman superman\"));   // in a segment by itself\n    assertU(commit());\n\n    // batman and superman have the same idf in single-doc segment, but very different in the complete index.\n    String q =\"{!func}query($qq)\";\n    String fq=\"id:120\"; \n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:batman\", \"fq\",fq), \"//float[@name='score']<'1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:superman\", \"fq\",fq), \"//float[@name='score']>'1.0'\");\n\n    // test weighting through a function range query\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!frange l=1 u=10}query($qq)\", \"qq\",\"text:superman\"), \"//*[@numFound='1']\");\n\n    // test weighting through a complex function\n    q =\"{!func}sub(div(sum(0.0,product(1,query($qq))),1),0)\";\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:batman\", \"fq\",fq), \"//float[@name='score']<'1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:superman\", \"fq\",fq), \"//float[@name='score']>'1.0'\");\n  }\n\n","sourceOld":"  public void testGeneral() {\n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n    assertU(commit());\n\n    // test that ord and rord are working on a global index basis, not just\n    // at the segment level (since Lucene 2.9 has switched to per-segment searching)\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ord(id)\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(ord(id))\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}rord(id)\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(rord(id))\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n\n\n    // test that we can subtract dates to millisecond precision\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(a_tdt,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='-1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(b_tdt,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,2009-08-31T12:10:10.124Z)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.124Z,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z/SECOND,2009-08-31T12:10:10.124Z/SECOND)\", \"fq\",\"id:1\"), \"//float[@name='score']='0.0'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2604ccf9cc6da5b54e94a913978dc494dd7d2ee5","date":1258729777,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#testGeneral().mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#testGeneral().mjava","sourceNew":"  public void testGeneral() throws Exception {\n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n    assertU(commit());\n\n    // test that ord and rord are working on a global index basis, not just\n    // at the segment level (since Lucene 2.9 has switched to per-segment searching)\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ord(id)\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(ord(id))\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}rord(id)\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(rord(id))\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n\n\n    // test that we can subtract dates to millisecond precision\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(a_tdt,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='-1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(b_tdt,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,2009-08-31T12:10:10.124Z)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.124Z,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z/SECOND,2009-08-31T12:10:10.124Z/SECOND)\", \"fq\",\"id:1\"), \"//float[@name='score']='0.0'\");\n\n    for (int i=100; i<112; i++) {\n      assertU(adoc(\"id\",\"\"+i, \"text\",\"batman\"));\n    }\n    assertU(commit());\n    assertU(adoc(\"id\",\"120\", \"text\",\"batman superman\"));   // in a segment by itself\n    assertU(commit());\n\n    // batman and superman have the same idf in single-doc segment, but very different in the complete index.\n    String q =\"{!func}query($qq)\";\n    String fq=\"id:120\"; \n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:batman\", \"fq\",fq), \"//float[@name='score']<'1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:superman\", \"fq\",fq), \"//float[@name='score']>'1.0'\");\n\n    // test weighting through a function range query\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!frange l=1 u=10}query($qq)\", \"qq\",\"text:superman\"), \"//*[@numFound='1']\");\n\n    // test weighting through a complex function\n    q =\"{!func}sub(div(sum(0.0,product(1,query($qq))),1),0)\";\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:batman\", \"fq\",fq), \"//float[@name='score']<'1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:superman\", \"fq\",fq), \"//float[@name='score']>'1.0'\");\n\n    doTestDegreeRads();\n    doTestFuncs();\n  }\n\n","sourceOld":"  public void testGeneral() {\n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n    assertU(commit());\n\n    // test that ord and rord are working on a global index basis, not just\n    // at the segment level (since Lucene 2.9 has switched to per-segment searching)\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ord(id)\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(ord(id))\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}rord(id)\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(rord(id))\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n\n\n    // test that we can subtract dates to millisecond precision\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(a_tdt,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='-1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(b_tdt,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,2009-08-31T12:10:10.124Z)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.124Z,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z/SECOND,2009-08-31T12:10:10.124Z/SECOND)\", \"fq\",\"id:1\"), \"//float[@name='score']='0.0'\");\n\n    for (int i=100; i<112; i++) {\n      assertU(adoc(\"id\",\"\"+i, \"text\",\"batman\"));\n    }\n    assertU(commit());\n    assertU(adoc(\"id\",\"120\", \"text\",\"batman superman\"));   // in a segment by itself\n    assertU(commit());\n\n    // batman and superman have the same idf in single-doc segment, but very different in the complete index.\n    String q =\"{!func}query($qq)\";\n    String fq=\"id:120\"; \n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:batman\", \"fq\",fq), \"//float[@name='score']<'1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:superman\", \"fq\",fq), \"//float[@name='score']>'1.0'\");\n\n    // test weighting through a function range query\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!frange l=1 u=10}query($qq)\", \"qq\",\"text:superman\"), \"//*[@numFound='1']\");\n\n    // test weighting through a complex function\n    q =\"{!func}sub(div(sum(0.0,product(1,query($qq))),1),0)\";\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:batman\", \"fq\",fq), \"//float[@name='score']<'1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:superman\", \"fq\",fq), \"//float[@name='score']>'1.0'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testGeneral().mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#testGeneral().mjava","sourceNew":"  public void testGeneral() throws Exception {\n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n    assertU(commit());\n\n    // test that ord and rord are working on a global index basis, not just\n    // at the segment level (since Lucene 2.9 has switched to per-segment searching)\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ord(id)\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(ord(id))\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}rord(id)\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(rord(id))\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n\n\n    // test that we can subtract dates to millisecond precision\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(a_tdt,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='-1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(b_tdt,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,2009-08-31T12:10:10.124Z)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.124Z,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z/SECOND,2009-08-31T12:10:10.124Z/SECOND)\", \"fq\",\"id:1\"), \"//float[@name='score']='0.0'\");\n\n    for (int i=100; i<112; i++) {\n      assertU(adoc(\"id\",\"\"+i, \"text\",\"batman\"));\n    }\n    assertU(commit());\n    assertU(adoc(\"id\",\"120\", \"text\",\"batman superman\"));   // in a segment by itself\n    assertU(commit());\n\n    // batman and superman have the same idf in single-doc segment, but very different in the complete index.\n    String q =\"{!func}query($qq)\";\n    String fq=\"id:120\"; \n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:batman\", \"fq\",fq), \"//float[@name='score']<'1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:superman\", \"fq\",fq), \"//float[@name='score']>'1.0'\");\n\n    // test weighting through a function range query\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!frange l=1 u=10}query($qq)\", \"qq\",\"text:superman\"), \"//*[@numFound='1']\");\n\n    // test weighting through a complex function\n    q =\"{!func}sub(div(sum(0.0,product(1,query($qq))),1),0)\";\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:batman\", \"fq\",fq), \"//float[@name='score']<'1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:superman\", \"fq\",fq), \"//float[@name='score']>'1.0'\");\n\n    doTestDegreeRads();\n    doTestFuncs();\n  }\n\n","sourceOld":"  public void testGeneral() throws Exception {\n    assertU(adoc(\"id\",\"1\", \"a_tdt\",\"2009-08-31T12:10:10.123Z\", \"b_tdt\",\"2009-08-31T12:10:10.124Z\"));\n    assertU(adoc(\"id\",\"2\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"3\"));\n    assertU(adoc(\"id\",\"4\"));\n    assertU(commit()); // create more than one segment\n    assertU(adoc(\"id\",\"5\"));\n    assertU(adoc(\"id\",\"6\"));\n    assertU(commit());\n\n    // test that ord and rord are working on a global index basis, not just\n    // at the segment level (since Lucene 2.9 has switched to per-segment searching)\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ord(id)\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(ord(id))\", \"fq\",\"id:6\"), \"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}rord(id)\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}top(rord(id))\", \"fq\",\"id:1\"),\"//float[@name='score']='6.0'\");\n\n\n    // test that we can subtract dates to millisecond precision\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(a_tdt,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='-1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(b_tdt,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,2009-08-31T12:10:10.124Z)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.124Z,a_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z,b_tdt)\", \"fq\",\"id:1\"), \"//float[@name='score']='1.0'\");\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}ms(2009-08-31T12:10:10.125Z/SECOND,2009-08-31T12:10:10.124Z/SECOND)\", \"fq\",\"id:1\"), \"//float[@name='score']='0.0'\");\n\n    for (int i=100; i<112; i++) {\n      assertU(adoc(\"id\",\"\"+i, \"text\",\"batman\"));\n    }\n    assertU(commit());\n    assertU(adoc(\"id\",\"120\", \"text\",\"batman superman\"));   // in a segment by itself\n    assertU(commit());\n\n    // batman and superman have the same idf in single-doc segment, but very different in the complete index.\n    String q =\"{!func}query($qq)\";\n    String fq=\"id:120\"; \n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:batman\", \"fq\",fq), \"//float[@name='score']<'1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:superman\", \"fq\",fq), \"//float[@name='score']>'1.0'\");\n\n    // test weighting through a function range query\n    assertQ(req(\"fl\",\"*,score\", \"q\", \"{!frange l=1 u=10}query($qq)\", \"qq\",\"text:superman\"), \"//*[@numFound='1']\");\n\n    // test weighting through a complex function\n    q =\"{!func}sub(div(sum(0.0,product(1,query($qq))),1),0)\";\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:batman\", \"fq\",fq), \"//float[@name='score']<'1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", q, \"qq\",\"text:superman\", \"fq\",fq), \"//float[@name='score']>'1.0'\");\n\n    doTestDegreeRads();\n    doTestFuncs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":["920a0686ed72437773f441d7d5088d3aff98f6cb"],"e1720d203cff791bcdef2bae580cf24e8906b4d8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2604ccf9cc6da5b54e94a913978dc494dd7d2ee5"],"2604ccf9cc6da5b54e94a913978dc494dd7d2ee5":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42"],"920a0686ed72437773f441d7d5088d3aff98f6cb":["e1720d203cff791bcdef2bae580cf24e8906b4d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7e00023dc6828d09dbfb05d4dfa4d488cc81ee42":["2604ccf9cc6da5b54e94a913978dc494dd7d2ee5"],"e1720d203cff791bcdef2bae580cf24e8906b4d8":["920a0686ed72437773f441d7d5088d3aff98f6cb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e1720d203cff791bcdef2bae580cf24e8906b4d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2604ccf9cc6da5b54e94a913978dc494dd7d2ee5":["ad94625fb8d088209f46650c8097196fec67f00c"],"920a0686ed72437773f441d7d5088d3aff98f6cb":["7e00023dc6828d09dbfb05d4dfa4d488cc81ee42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}