{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApplyForMerge(List[SegmentCommitInfo]).mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApplyForMerge(List[SegmentCommitInfo]).mjava","pathOld":"/dev/null","sourceNew":"  /** Waits only for those in-flight packets that apply to these merge segments.  This is\n   *  called when a merge needs to finish and must ensure all deletes to the merging\n   *  segments are resolved. */\n  public void waitApplyForMerge(List<SegmentCommitInfo> mergeInfos) throws IOException {\n    assert Thread.holdsLock(writer) == false;\n\n    final long t0 = System.nanoTime();\n\n    long maxDelGen = Long.MIN_VALUE;\n    for (SegmentCommitInfo info : mergeInfos) {\n      maxDelGen = Math.max(maxDelGen, info.getBufferedDeletesGen());\n    }\n\n    Set<FrozenBufferedUpdates> waitFor = new HashSet<>();\n    synchronized (this) {\n      for (FrozenBufferedUpdates packet : updates) {\n        if (packet.delGen() <= maxDelGen) {\n          // We must wait for this packet before finishing the merge because its\n          // deletes apply to a subset of the segments being merged:\n          waitFor.add(packet);\n        }\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApplyForMerge: \" + waitFor.size() + \" packets, \" + mergeInfos.size() + \" merging segments\");\n    }\n    \n    waitApply(waitFor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApplyForMerge(List[SegmentCommitInfo]).mjava","pathOld":"/dev/null","sourceNew":"  /** Waits only for those in-flight packets that apply to these merge segments.  This is\n   *  called when a merge needs to finish and must ensure all deletes to the merging\n   *  segments are resolved. */\n  public void waitApplyForMerge(List<SegmentCommitInfo> mergeInfos) throws IOException {\n    assert Thread.holdsLock(writer) == false;\n\n    final long t0 = System.nanoTime();\n\n    long maxDelGen = Long.MIN_VALUE;\n    for (SegmentCommitInfo info : mergeInfos) {\n      maxDelGen = Math.max(maxDelGen, info.getBufferedDeletesGen());\n    }\n\n    Set<FrozenBufferedUpdates> waitFor = new HashSet<>();\n    synchronized (this) {\n      for (FrozenBufferedUpdates packet : updates) {\n        if (packet.delGen() <= maxDelGen) {\n          // We must wait for this packet before finishing the merge because its\n          // deletes apply to a subset of the segments being merged:\n          waitFor.add(packet);\n        }\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApplyForMerge: \" + waitFor.size() + \" packets, \" + mergeInfos.size() + \" merging segments\");\n    }\n    \n    waitApply(waitFor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApplyForMerge(List[SegmentCommitInfo]).mjava","pathOld":"/dev/null","sourceNew":"  /** Waits only for those in-flight packets that apply to these merge segments.  This is\n   *  called when a merge needs to finish and must ensure all deletes to the merging\n   *  segments are resolved. */\n  public void waitApplyForMerge(List<SegmentCommitInfo> mergeInfos) throws IOException {\n    assert Thread.holdsLock(writer) == false;\n\n    final long t0 = System.nanoTime();\n\n    long maxDelGen = Long.MIN_VALUE;\n    for (SegmentCommitInfo info : mergeInfos) {\n      maxDelGen = Math.max(maxDelGen, info.getBufferedDeletesGen());\n    }\n\n    Set<FrozenBufferedUpdates> waitFor = new HashSet<>();\n    synchronized (this) {\n      for (FrozenBufferedUpdates packet : updates) {\n        if (packet.delGen() <= maxDelGen) {\n          // We must wait for this packet before finishing the merge because its\n          // deletes apply to a subset of the segments being merged:\n          waitFor.add(packet);\n        }\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApplyForMerge: \" + waitFor.size() + \" packets, \" + mergeInfos.size() + \" merging segments\");\n    }\n    \n    waitApply(waitFor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApplyForMerge(List[SegmentCommitInfo],IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#waitApplyForMerge(List[SegmentCommitInfo]).mjava","sourceNew":"  /** Waits only for those in-flight packets that apply to these merge segments.  This is\n   *  called when a merge needs to finish and must ensure all deletes to the merging\n   *  segments are resolved. */\n  void waitApplyForMerge(List<SegmentCommitInfo> mergeInfos, IndexWriter writer) throws IOException {\n    long maxDelGen = Long.MIN_VALUE;\n    for (SegmentCommitInfo info : mergeInfos) {\n      maxDelGen = Math.max(maxDelGen, info.getBufferedDeletesGen());\n    }\n\n    Set<FrozenBufferedUpdates> waitFor = new HashSet<>();\n    synchronized (this) {\n      for (FrozenBufferedUpdates packet : updates) {\n        if (packet.delGen() <= maxDelGen) {\n          // We must wait for this packet before finishing the merge because its\n          // deletes apply to a subset of the segments being merged:\n          waitFor.add(packet);\n        }\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApplyForMerge: \" + waitFor.size() + \" packets, \" + mergeInfos.size() + \" merging segments\");\n    }\n    \n    waitApply(waitFor, writer);\n  }\n\n","sourceOld":"  /** Waits only for those in-flight packets that apply to these merge segments.  This is\n   *  called when a merge needs to finish and must ensure all deletes to the merging\n   *  segments are resolved. */\n  public void waitApplyForMerge(List<SegmentCommitInfo> mergeInfos) throws IOException {\n    assert Thread.holdsLock(writer) == false;\n\n    final long t0 = System.nanoTime();\n\n    long maxDelGen = Long.MIN_VALUE;\n    for (SegmentCommitInfo info : mergeInfos) {\n      maxDelGen = Math.max(maxDelGen, info.getBufferedDeletesGen());\n    }\n\n    Set<FrozenBufferedUpdates> waitFor = new HashSet<>();\n    synchronized (this) {\n      for (FrozenBufferedUpdates packet : updates) {\n        if (packet.delGen() <= maxDelGen) {\n          // We must wait for this packet before finishing the merge because its\n          // deletes apply to a subset of the segments being merged:\n          waitFor.add(packet);\n        }\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"waitApplyForMerge: \" + waitFor.size() + \" packets, \" + mergeInfos.size() + \" merging segments\");\n    }\n    \n    waitApply(waitFor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["28288370235ed02234a64753cdbf0c6ec096304a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"]},"commit2Childs":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}