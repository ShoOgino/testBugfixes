{"path":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(InputStream,FieldInfos,boolean).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(InputStream,FieldInfos,boolean).mjava","pathOld":"/dev/null","sourceNew":"  SegmentTermEnum(InputStream i, FieldInfos fis, boolean isi)\n       throws IOException {\n    input = i;\n    fieldInfos = fis; \n    size = input.readInt();\n    isIndex = isi;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(InputStream,FieldInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(InputStream,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(InputStream i, FieldInfos fis, boolean isi)\n       throws IOException {\n    input = i;\n    fieldInfos = fis; \n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE;\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new IOException(\"Unknown format version:\" + format);\n      \n      size = input.readLong();                    // read the size\n      \n      if (!isIndex) {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n    \n  }\n\n","sourceOld":"  SegmentTermEnum(InputStream i, FieldInfos fis, boolean isi)\n       throws IOException {\n    input = i;\n    fieldInfos = fis; \n    size = input.readInt();\n    isIndex = isi;\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(InputStream,FieldInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(InputStream,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(InputStream i, FieldInfos fis, boolean isi)\n          throws IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE;\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new IOException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n\n      if (!isIndex) {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n\n  }\n\n","sourceOld":"  SegmentTermEnum(InputStream i, FieldInfos fis, boolean isi)\n       throws IOException {\n    input = i;\n    fieldInfos = fis; \n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE;\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new IOException(\"Unknown format version:\" + format);\n      \n      size = input.readLong();                    // read the size\n      \n      if (!isIndex) {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5cf8ed8dfc080044944e2cabac618bc36199013","date":1082468878,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(InputStream,FieldInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(InputStream,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(InputStream i, FieldInfos fis, boolean isi)\n          throws IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new IOException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      }\n      else{\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n\n  }\n\n","sourceOld":"  SegmentTermEnum(InputStream i, FieldInfos fis, boolean isi)\n          throws IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE;\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new IOException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n\n      if (!isIndex) {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermEnum#SegmentTermEnum(InputStream,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new IOException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      }\n      else{\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n\n  }\n\n","sourceOld":"  SegmentTermEnum(InputStream i, FieldInfos fis, boolean isi)\n          throws IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n\n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < TermInfosWriter.FORMAT)\n        throw new IOException(\"Unknown format version:\" + format);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      }\n      else{\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["15c469602973ef1a33c9a07367a380d278ffab20"],"e971ba25509e21a130fef61f0687be0446ca27a0":["f5cf8ed8dfc080044944e2cabac618bc36199013"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f5cf8ed8dfc080044944e2cabac618bc36199013":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e971ba25509e21a130fef61f0687be0446ca27a0"],"15c469602973ef1a33c9a07367a380d278ffab20":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f5cf8ed8dfc080044944e2cabac618bc36199013"],"e971ba25509e21a130fef61f0687be0446ca27a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["15c469602973ef1a33c9a07367a380d278ffab20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"f5cf8ed8dfc080044944e2cabac618bc36199013":["e971ba25509e21a130fef61f0687be0446ca27a0"],"15c469602973ef1a33c9a07367a380d278ffab20":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}