{"path":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#afterClassParserCoverageTest().mjava","commits":[{"id":"69227e655c7a72315c68e596f0a899f339b1ec2b","date":1340137626,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#afterClassParserCoverageTest().mjava","pathOld":"/dev/null","sourceNew":"  /** @see #testParserCoverage */\n  @AfterClass\n  public static void afterClassParserCoverageTest() {\n\n    if ( ! doAssertParserCoverage) return;\n\n    for (int i=0; i < QParserPlugin.standardPlugins.length; i+=2) {\n      assertTrue(\"qparser #\"+i+\" name not a string\", \n                 QParserPlugin.standardPlugins[i] instanceof String);\n      final String name = (String)QParserPlugin.standardPlugins[i];\n      assertTrue(\"testParserCoverage was run w/o any other method explicitly testing qparser: \" + name, qParsersTested.contains(name));\n    }\n\n    for (final String name : ValueSourceParser.standardValueSourceParsers.keySet()) {\n      assertTrue(\"testParserCoverage was run w/o any other method explicitly testing val parser: \" + name, valParsersTested.contains(name));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#afterClassParserCoverageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#afterClassParserCoverageTest().mjava","sourceNew":"  /** @see #testParserCoverage */\n  @AfterClass\n  public static void afterClassParserCoverageTest() {\n\n    if ( ! doAssertParserCoverage) return;\n    for (String name : QParserPlugin.standardPlugins.keySet()) {\n      assertTrue(\"testParserCoverage was run w/o any other method explicitly testing qparser: \" + name, qParsersTested.contains(name));\n    }\n\n    for (final String name : ValueSourceParser.standardValueSourceParsers.keySet()) {\n      assertTrue(\"testParserCoverage was run w/o any other method explicitly testing val parser: \" + name, valParsersTested.contains(name));\n    }\n\n  }\n\n","sourceOld":"  /** @see #testParserCoverage */\n  @AfterClass\n  public static void afterClassParserCoverageTest() {\n\n    if ( ! doAssertParserCoverage) return;\n\n    for (int i=0; i < QParserPlugin.standardPlugins.length; i+=2) {\n      assertTrue(\"qparser #\"+i+\" name not a string\", \n                 QParserPlugin.standardPlugins[i] instanceof String);\n      final String name = (String)QParserPlugin.standardPlugins[i];\n      assertTrue(\"testParserCoverage was run w/o any other method explicitly testing qparser: \" + name, qParsersTested.contains(name));\n    }\n\n    for (final String name : ValueSourceParser.standardValueSourceParsers.keySet()) {\n      assertTrue(\"testParserCoverage was run w/o any other method explicitly testing val parser: \" + name, valParsersTested.contains(name));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#afterClassParserCoverageTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#afterClassParserCoverageTest().mjava","sourceNew":"  /** @see #testParserCoverage */\n  @AfterClass\n  public static void afterClassParserCoverageTest() {\n\n    if ( ! doAssertParserCoverage) return;\n    for (String name : QParserPlugin.standardPlugins.keySet()) {\n      assertTrue(\"testParserCoverage was run w/o any other method explicitly testing qparser: \" + name, qParsersTested.contains(name));\n    }\n\n    for (final String name : ValueSourceParser.standardValueSourceParsers.keySet()) {\n      assertTrue(\"testParserCoverage was run w/o any other method explicitly testing val parser: \" + name, valParsersTested.contains(name));\n    }\n\n  }\n\n","sourceOld":"  /** @see #testParserCoverage */\n  @AfterClass\n  public static void afterClassParserCoverageTest() {\n\n    if ( ! doAssertParserCoverage) return;\n\n    for (int i=0; i < QParserPlugin.standardPlugins.length; i+=2) {\n      assertTrue(\"qparser #\"+i+\" name not a string\", \n                 QParserPlugin.standardPlugins[i] instanceof String);\n      final String name = (String)QParserPlugin.standardPlugins[i];\n      assertTrue(\"testParserCoverage was run w/o any other method explicitly testing qparser: \" + name, qParsersTested.contains(name));\n    }\n\n    for (final String name : ValueSourceParser.standardValueSourceParsers.keySet()) {\n      assertTrue(\"testParserCoverage was run w/o any other method explicitly testing val parser: \" + name, valParsersTested.contains(name));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["69227e655c7a72315c68e596f0a899f339b1ec2b","9aea0485ecacb6734c17da2d02569816c23a69c1"],"69227e655c7a72315c68e596f0a899f339b1ec2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["69227e655c7a72315c68e596f0a899f339b1ec2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aea0485ecacb6734c17da2d02569816c23a69c1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"69227e655c7a72315c68e596f0a899f339b1ec2b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69227e655c7a72315c68e596f0a899f339b1ec2b"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}