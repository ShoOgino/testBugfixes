{"path":"lucene/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","commits":[{"id":"fb1ee331628e5e48978d05663ce7cd8c8fe2a471","date":1324228266,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      assertTrue(size >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestWeakIdentityMap#testSimpleHashMap().mjava","sourceNew":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      assertTrue(size >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  public void testSimpleHashMap() {\n    final WeakIdentityMap<String,String> map =\n      WeakIdentityMap.newHashMap();\n    // we keep strong references to the keys,\n    // so WeakIdentityMap will not forget about them:\n    String key1 = new String(\"foo\");\n    String key2 = new String(\"foo\");\n    String key3 = new String(\"foo\");\n    \n    assertNotSame(key1, key2);\n    assertEquals(key1, key2);\n    assertNotSame(key1, key3);\n    assertEquals(key1, key3);\n    assertNotSame(key2, key3);\n    assertEquals(key2, key3);\n\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n    \n    assertEquals(3, map.size());\n\n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    // repeat and check that we have no double entries\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(null, \"null\");\n\n    assertEquals(3, map.size());\n    \n    assertEquals(\"bar1\", map.get(key1));\n    assertEquals(\"bar2\", map.get(key2));\n    assertEquals(null, map.get(key3));\n    assertEquals(\"null\", map.get(null));\n    \n    assertTrue(map.containsKey(key1));\n    assertTrue(map.containsKey(key2));\n    assertFalse(map.containsKey(key3));\n    assertTrue(map.containsKey(null));\n\n    map.remove(null);\n    assertEquals(2, map.size());\n    map.remove(key1);\n    assertEquals(1, map.size());\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    map.put(key3, \"bar3\");\n    assertEquals(3, map.size());\n    \n    // clear strong refs\n    key1 = key2 = key3 = null;\n    \n    // check that GC does not cause problems in reap() method, wait 1 second and let GC work:\n    int size = map.size();\n    for (int i = 0; size > 0 && i < 10; i++) try {\n      System.runFinalization();\n      System.gc();\n      Thread.sleep(100L);\n      assertTrue(size >= map.size());\n      size = map.size();\n    } catch (InterruptedException ie) {}\n\n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n    \n    key1 = new String(\"foo\");\n    key2 = new String(\"foo\");\n    map.put(key1, \"bar1\");\n    map.put(key2, \"bar2\");\n    assertEquals(2, map.size());\n    \n    map.clear();\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb1ee331628e5e48978d05663ce7cd8c8fe2a471"],"fb1ee331628e5e48978d05663ce7cd8c8fe2a471":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb1ee331628e5e48978d05663ce7cd8c8fe2a471":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb1ee331628e5e48978d05663ce7cd8c8fe2a471"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}