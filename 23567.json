{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sortedSetDocValues(BytesRefHash,int[]).mjava","commits":[{"id":"95e93d67f29b6bee6e39efb3fb6f1237b5b9850b","date":1487325043,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sortedSetDocValues(BytesRefHash,int[]).mjava","pathOld":"/dev/null","sourceNew":"  private static SortedSetDocValues sortedSetDocValues(BytesRefHash values, int[] bytesIds) {\n    MemoryDocValuesIterator it = new MemoryDocValuesIterator();\n    BytesRef scratch = new BytesRef();\n    return new SortedSetDocValues() {\n      int ord = 0;\n\n      @Override\n      public long nextOrd() throws IOException {\n        if (ord >= values.size())\n          return NO_MORE_ORDS;\n        return ord++;\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        return values.get(bytesIds[(int) ord], scratch);\n      }\n\n      @Override\n      public long getValueCount() {\n        return values.size();\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        return it.advance(target) == target;\n      }\n\n      @Override\n      public int docID() {\n        return it.docId();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c05513b96726572e07f5b4955a89ca7ed5e3a862","date":1498741424,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sortedSetDocValues(BytesRefHash,int[]).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sortedSetDocValues(BytesRefHash,int[]).mjava","sourceNew":"  private static SortedSetDocValues sortedSetDocValues(BytesRefHash values, int[] bytesIds) {\n    MemoryDocValuesIterator it = new MemoryDocValuesIterator();\n    BytesRef scratch = new BytesRef();\n    return new SortedSetDocValues() {\n      int ord = 0;\n\n      @Override\n      public long nextOrd() throws IOException {\n        if (ord >= values.size())\n          return NO_MORE_ORDS;\n        return ord++;\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        return values.get(bytesIds[(int) ord], scratch);\n      }\n\n      @Override\n      public long getValueCount() {\n        return values.size();\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        ord = 0;\n        return it.advance(target) == target;\n      }\n\n      @Override\n      public int docID() {\n        return it.docId();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  private static SortedSetDocValues sortedSetDocValues(BytesRefHash values, int[] bytesIds) {\n    MemoryDocValuesIterator it = new MemoryDocValuesIterator();\n    BytesRef scratch = new BytesRef();\n    return new SortedSetDocValues() {\n      int ord = 0;\n\n      @Override\n      public long nextOrd() throws IOException {\n        if (ord >= values.size())\n          return NO_MORE_ORDS;\n        return ord++;\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        return values.get(bytesIds[(int) ord], scratch);\n      }\n\n      @Override\n      public long getValueCount() {\n        return values.size();\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        return it.advance(target) == target;\n      }\n\n      @Override\n      public int docID() {\n        return it.docId();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sortedSetDocValues(BytesRefHash,int[]).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#sortedSetDocValues(BytesRefHash,int[]).mjava","sourceNew":"  private static SortedSetDocValues sortedSetDocValues(BytesRefHash values, int[] bytesIds) {\n    MemoryDocValuesIterator it = new MemoryDocValuesIterator();\n    BytesRef scratch = new BytesRef();\n    return new SortedSetDocValues() {\n      int ord = 0;\n\n      @Override\n      public long nextOrd() throws IOException {\n        if (ord >= values.size())\n          return NO_MORE_ORDS;\n        return ord++;\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        return values.get(bytesIds[(int) ord], scratch);\n      }\n\n      @Override\n      public long getValueCount() {\n        return values.size();\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        ord = 0;\n        return it.advance(target) == target;\n      }\n\n      @Override\n      public int docID() {\n        return it.docId();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  private static SortedSetDocValues sortedSetDocValues(BytesRefHash values, int[] bytesIds) {\n    MemoryDocValuesIterator it = new MemoryDocValuesIterator();\n    BytesRef scratch = new BytesRef();\n    return new SortedSetDocValues() {\n      int ord = 0;\n\n      @Override\n      public long nextOrd() throws IOException {\n        if (ord >= values.size())\n          return NO_MORE_ORDS;\n        return ord++;\n      }\n\n      @Override\n      public BytesRef lookupOrd(long ord) throws IOException {\n        return values.get(bytesIds[(int) ord], scratch);\n      }\n\n      @Override\n      public long getValueCount() {\n        return values.size();\n      }\n\n      @Override\n      public boolean advanceExact(int target) throws IOException {\n        return it.advance(target) == target;\n      }\n\n      @Override\n      public int docID() {\n        return it.docId();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return it.nextDoc();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        return it.advance(target);\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95e93d67f29b6bee6e39efb3fb6f1237b5b9850b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c8e5574b55d57947e989443dfde611646530ee":["95e93d67f29b6bee6e39efb3fb6f1237b5b9850b","c05513b96726572e07f5b4955a89ca7ed5e3a862"],"c05513b96726572e07f5b4955a89ca7ed5e3a862":["95e93d67f29b6bee6e39efb3fb6f1237b5b9850b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c05513b96726572e07f5b4955a89ca7ed5e3a862"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95e93d67f29b6bee6e39efb3fb6f1237b5b9850b"],"95e93d67f29b6bee6e39efb3fb6f1237b5b9850b":["30c8e5574b55d57947e989443dfde611646530ee","c05513b96726572e07f5b4955a89ca7ed5e3a862"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c05513b96726572e07f5b4955a89ca7ed5e3a862":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}