{"path":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"modules/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase();\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase();\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c70cdb81dc660d90f9d0664dd91b473b7e66563","date":1341679310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase();\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"714058a3bd900646d4df5e21af2d4e109ed3e4bc","date":1341692336,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), IOUtils.CHARSET_UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), IOUtils.CHARSET_UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase();\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), IOUtils.CHARSET_UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase();\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), IOUtils.CHARSET_UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase();\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3123be0c46a5ed1c1a40d102db7c24106694c35","date":1355608257,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), IOUtils.CHARSET_UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n    \n    in.close();\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), IOUtils.CHARSET_UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), IOUtils.CHARSET_UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n    \n    in.close();\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), IOUtils.CHARSET_UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n    \n    in.close();\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), IOUtils.CHARSET_UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n    \n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n    \n    in.close();\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), IOUtils.CHARSET_UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n    \n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,Path,boolean,boolean).mjava","pathOld":"lucene/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, Path file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(Files.newBufferedReader(file, StandardCharsets.UTF_8));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n    \n    in.close();\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase(Locale.ROOT);\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(Locale.ROOT), stm.toString().toLowerCase(Locale.ROOT));\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n    \n    in.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["e3123be0c46a5ed1c1a40d102db7c24106694c35","7d89d7e4e5101347833eea558851bf4209218619"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2acf500f78aa12b92e371fd89c719291986b6b90","e3123be0c46a5ed1c1a40d102db7c24106694c35"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","714058a3bd900646d4df5e21af2d4e109ed3e4bc"],"f4abec28b874149a7223e32cc7a01704c27790de":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["e3123be0c46a5ed1c1a40d102db7c24106694c35"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"714058a3bd900646d4df5e21af2d4e109ed3e4bc":["9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3123be0c46a5ed1c1a40d102db7c24106694c35":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","e3123be0c46a5ed1c1a40d102db7c24106694c35"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["714058a3bd900646d4df5e21af2d4e109ed3e4bc"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"714058a3bd900646d4df5e21af2d4e109ed3e4bc":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2acf500f78aa12b92e371fd89c719291986b6b90","9c70cdb81dc660d90f9d0664dd91b473b7e66563","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e3123be0c46a5ed1c1a40d102db7c24106694c35":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}