{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertOrdinalsExist(String,IndexReader).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertOrdinalsExist(String,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.docValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertOrdinalsExist(String,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertOrdinalsExist(String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertOrdinalsExist(String,IndexReader).mjava","sourceNew":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","sourceOld":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.docValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","bugFix":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestMultipleIndexFields#assertOrdinalsExist(String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertOrdinalsExist(String,IndexReader).mjava","sourceNew":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","sourceOld":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertOrdinalsExist(String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertOrdinalsExist(String,IndexReader).mjava","sourceNew":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","sourceOld":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0","c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d4d69c535930b5cce125cff868d40f6373dc27d4","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3cc728b07df73b197e6d940d27f9b08b63918f13","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["d4d69c535930b5cce125cff868d40f6373dc27d4","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}