{"path":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","commits":[{"id":"77855215e331ce146763531cb9b0c050726f6ae5","date":1338323851,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          TermsEnum.SeekStatus status = termsEnum.seekCeil(terms.get(ords[upto++], spare), true);\n          if (status == TermsEnum.SeekStatus.FOUND) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, false);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","sourceNew":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          TermsEnum.SeekStatus status = termsEnum.seekCeil(terms.get(ords[upto++], spare), true);\n          if (status == TermsEnum.SeekStatus.FOUND) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, 0);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          TermsEnum.SeekStatus status = termsEnum.seekCeil(terms.get(ords[upto++], spare), true);\n          if (status == TermsEnum.SeekStatus.FOUND) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, false);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":["77855215e331ce146763531cb9b0c050726f6ae5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","sourceNew":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          TermsEnum.SeekStatus status = termsEnum.seekCeil(terms.get(ords[upto++], spare), true);\n          if (status == TermsEnum.SeekStatus.FOUND) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, 0);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          TermsEnum.SeekStatus status = termsEnum.seekCeil(terms.get(ords[upto++], spare), true);\n          if (status == TermsEnum.SeekStatus.FOUND) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, false);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","sourceNew":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          TermsEnum.SeekStatus status = termsEnum.seekCeil(terms.get(ords[upto++], spare), true);\n          if (status == TermsEnum.SeekStatus.FOUND) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, 0);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          TermsEnum.SeekStatus status = termsEnum.seekCeil(terms.get(ords[upto++], spare), true);\n          if (status == TermsEnum.SeekStatus.FOUND) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, false);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b64a4420c88dd81303e7f7959057baf9f3b45f94","date":1346077333,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","sourceNew":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, 0);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          TermsEnum.SeekStatus status = termsEnum.seekCeil(terms.get(ords[upto++], spare), true);\n          if (status == TermsEnum.SeekStatus.FOUND) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, 0);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","sourceNew":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, 0);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          TermsEnum.SeekStatus status = termsEnum.seekCeil(terms.get(ords[upto++], spare), true);\n          if (status == TermsEnum.SeekStatus.FOUND) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, 0);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","sourceNew":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, DocsEnum.FLAG_NONE);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, 0);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, DocsEnum.FLAG_NONE);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, DocsEnum.FLAG_NONE);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, DocsEnum.FLAG_NONE);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":"    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, 0);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDocOutOfOrder().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","sourceNew":"    @Override\n    int nextDocOutOfOrder() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, DocsEnum.FLAG_NONE);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, DocsEnum.FLAG_NONE);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b64a4420c88dd81303e7f7959057baf9f3b45f94","7530de27b87b961b51f01bd1299b7004d46e8823"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["b64a4420c88dd81303e7f7959057baf9f3b45f94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["77855215e331ce146763531cb9b0c050726f6ae5","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["77855215e331ce146763531cb9b0c050726f6ae5","02331260bb246364779cb6f04919ca47900d01bb"],"77855215e331ce146763531cb9b0c050726f6ae5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["7530de27b87b961b51f01bd1299b7004d46e8823"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","b64a4420c88dd81303e7f7959057baf9f3b45f94"],"7530de27b87b961b51f01bd1299b7004d46e8823":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"b64a4420c88dd81303e7f7959057baf9f3b45f94":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["77855215e331ce146763531cb9b0c050726f6ae5"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77855215e331ce146763531cb9b0c050726f6ae5"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"77855215e331ce146763531cb9b0c050726f6ae5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"b64a4420c88dd81303e7f7959057baf9f3b45f94":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","05a14b2611ead08655a2b2bdc61632eb31316e57"],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","b64a4420c88dd81303e7f7959057baf9f3b45f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}