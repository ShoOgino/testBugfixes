{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/CachedOrdsCountingFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","commits":[{"id":"136bf9d69957766255ca222d35e715158cd0aa9c","date":1360686043,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CachedOrdsCountingFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    final CachedOrds ords = OrdinalsCache.getCachedOrds(matchingDocs.context, clp);\n    if (ords == null) {\n      return; // this segment has no ordinals for the given category list\n    }\n    final int[] counts = facetArrays.getIntArray();\n    int doc = 0;\n    int length = matchingDocs.bits.length();\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      int start = ords.offsets[doc];\n      int end = ords.offsets[doc + 1];\n      for (int i = start; i < end; i++) {\n        ++counts[ords.ordinals[i]];\n      }\n      ++doc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/CachedOrdsCountingFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    final CachedOrds ords = OrdinalsCache.getCachedOrds(matchingDocs.context, clp);\n    if (ords == null) {\n      return; // this segment has no ordinals for the given category list\n    }\n    final int[] counts = facetArrays.getIntArray();\n    int doc = 0;\n    int length = matchingDocs.bits.length();\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      int start = ords.offsets[doc];\n      int end = ords.offsets[doc + 1];\n      for (int i = start; i < end; i++) {\n        ++counts[ords.ordinals[i]];\n      }\n      ++doc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CachedOrdsCountingFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    final CachedOrds ords = OrdinalsCache.getCachedOrds(matchingDocs.context, clp);\n    if (ords == null) {\n      return; // this segment has no ordinals for the given category list\n    }\n    final int[] counts = facetArrays.getIntArray();\n    int doc = 0;\n    int length = matchingDocs.bits.length();\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      int start = ords.offsets[doc];\n      int end = ords.offsets[doc + 1];\n      for (int i = start; i < end; i++) {\n        ++counts[ords.ordinals[i]];\n      }\n      ++doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/CachedOrdsCountingFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    final CachedOrds ords = OrdinalsCache.getCachedOrds(matchingDocs.context, clp);\n    if (ords == null) {\n      return; // this segment has no ordinals for the given category list\n    }\n    final int[] counts = facetArrays.getIntArray();\n    int doc = 0;\n    int length = matchingDocs.bits.length();\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      int start = ords.offsets[doc];\n      int end = ords.offsets[doc + 1];\n      for (int i = start; i < end; i++) {\n        ++counts[ords.ordinals[i]];\n      }\n      ++doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["136bf9d69957766255ca222d35e715158cd0aa9c"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","136bf9d69957766255ca222d35e715158cd0aa9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["136bf9d69957766255ca222d35e715158cd0aa9c","d33e19a97046248623a7591aeaa6547233fd15e2"],"136bf9d69957766255ca222d35e715158cd0aa9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","136bf9d69957766255ca222d35e715158cd0aa9c"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"136bf9d69957766255ca222d35e715158cd0aa9c":["d33e19a97046248623a7591aeaa6547233fd15e2","6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}