{"path":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","commits":[{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param indexOptions if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n  }\n\n","sourceOld":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param indexOptions if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,ValueType).mjava","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param indexOptions if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n  }\n\n","sourceOld":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param indexOptions if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, ValueType docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#addOrUpdate(String,boolean,boolean,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type).mjava","sourceNew":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param indexOptions if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues);\n  }\n\n","sourceOld":"  /** If the field is not yet known, adds it. If it is known, checks to make\n   *  sure that the isIndexed flag is the same as was given previously for this\n   *  field. If not - marks it as being indexed.  Same goes for the TermVector\n   * parameters.\n   *\n   * @param name The name of the field\n   * @param isIndexed true if the field is indexed\n   * @param storeTermVector true if the term vector should be stored\n   * @param storePositionWithTermVector true if the term vector with positions should be stored\n   * @param storeOffsetWithTermVector true if the term vector with offsets should be stored\n   * @param omitNorms true if the norms for the indexed field should be omitted\n   * @param storePayloads true if payloads should be stored for this field\n   * @param indexOptions if term freqs should be omitted for this field\n   */\n  synchronized public FieldInfo addOrUpdate(String name, boolean isIndexed, boolean storeTermVector,\n                       boolean storePositionWithTermVector, boolean storeOffsetWithTermVector,\n                       boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues) {\n    return addOrUpdateInternal(name, -1, isIndexed, storeTermVector, storePositionWithTermVector,\n                               storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}