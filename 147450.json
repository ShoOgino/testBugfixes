{"path":"src/test/org/apache/solr/client/solrj/TestBatchUpdate#doIt(CommonsHttpSolrServer).mjava","commits":[{"id":"ed6d8c5d4a7a15ca41307188b42215913e14922b","date":1237454110,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/TestBatchUpdate#doIt(CommonsHttpSolrServer).mjava","pathOld":"/dev/null","sourceNew":"  private void doIt(CommonsHttpSolrServer commonsHttpSolrServer) throws SolrServerException, IOException {\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addAndCommit(new Iterator<SolrInputDocument>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public SolrInputDocument next() {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"\" + (++counter[0]));\n        doc.addField(\"cat\", \"foocat\");\n        return doc;\n      }\n\n      public void remove() {\n        //do nothing\n\n      }\n    }, null);\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8af37fc0bd22cbb9ea10450ba25cd0d80b84dfe2","date":1238440757,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/TestBatchUpdate#doIt(CommonsHttpSolrServer).mjava","pathOld":"src/test/org/apache/solr/client/solrj/TestBatchUpdate#doIt(CommonsHttpSolrServer).mjava","sourceNew":"  private void doIt(CommonsHttpSolrServer commonsHttpSolrServer) throws SolrServerException, IOException {\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.add(new Iterator<SolrInputDocument>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public SolrInputDocument next() {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"\" + (++counter[0]));\n        doc.addField(\"cat\", \"foocat\");\n        return doc;\n      }\n\n      public void remove() {\n        //do nothing\n\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void doIt(CommonsHttpSolrServer commonsHttpSolrServer) throws SolrServerException, IOException {\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.addAndCommit(new Iterator<SolrInputDocument>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public SolrInputDocument next() {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"\" + (++counter[0]));\n        doc.addField(\"cat\", \"foocat\");\n        return doc;\n      }\n\n      public void remove() {\n        //do nothing\n\n      }\n    }, null);\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/TestBatchUpdate#doIt(CommonsHttpSolrServer).mjava","pathOld":"src/test/org/apache/solr/client/solrj/TestBatchUpdate#doIt(CommonsHttpSolrServer).mjava","sourceNew":"  private void doIt(CommonsHttpSolrServer commonsHttpSolrServer) throws SolrServerException, IOException {\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.add(new Iterator<SolrInputDocument>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public SolrInputDocument next() {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"\" + (++counter[0]));\n        doc.addField(\"cat\", \"foocat\");\n        return doc;\n      }\n\n      public void remove() {\n        //do nothing\n\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","sourceOld":"  private void doIt(CommonsHttpSolrServer commonsHttpSolrServer) throws SolrServerException, IOException {\n    final int[] counter = new int[1];\n    counter[0] = 0;\n    commonsHttpSolrServer.add(new Iterator<SolrInputDocument>() {\n\n      public boolean hasNext() {\n        return counter[0] < numdocs;\n      }\n\n      public SolrInputDocument next() {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"\" + (++counter[0]));\n        doc.addField(\"cat\", \"foocat\");\n        return doc;\n      }\n\n      public void remove() {\n        //do nothing\n\n      }\n    });\n    commonsHttpSolrServer.commit();\n    SolrQuery query = new SolrQuery(\"*:*\");\n    QueryResponse response = commonsHttpSolrServer.query(query);\n    assertEquals(0, response.getStatus());\n    assertEquals(numdocs, response.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ed6d8c5d4a7a15ca41307188b42215913e14922b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"8af37fc0bd22cbb9ea10450ba25cd0d80b84dfe2":["ed6d8c5d4a7a15ca41307188b42215913e14922b"],"ad94625fb8d088209f46650c8097196fec67f00c":["8af37fc0bd22cbb9ea10450ba25cd0d80b84dfe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ed6d8c5d4a7a15ca41307188b42215913e14922b"],"ed6d8c5d4a7a15ca41307188b42215913e14922b":["8af37fc0bd22cbb9ea10450ba25cd0d80b84dfe2"],"8af37fc0bd22cbb9ea10450ba25cd0d80b84dfe2":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}