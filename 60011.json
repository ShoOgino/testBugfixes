{"path":"backwards/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestAtomicUpdate#runTest(Directory).mjava","sourceNew":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","sourceOld":"  /*\n    Run one indexer and 2 searchers against single index as\n    stress test.\n  */\n  public void runTest(Directory directory) throws Exception {\n\n    TimedThread[] threads = new TimedThread[4];\n\n    IndexWriter writer = new MockIndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(7);\n    writer.setMergeFactor(3);\n\n    // Establish a base index of 100 docs:\n    for(int i=0;i<100;i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n      d.add(new Field(\"contents\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      if ((i-1)%7 == 0) {\n        writer.commit();\n      }\n      writer.addDocument(d);\n    }\n    writer.commit();\n\n    IndexReader r = IndexReader.open(directory, true);\n    assertEquals(100, r.numDocs());\n    r.close();\n\n    IndexerThread indexerThread = new IndexerThread(writer, threads);\n    threads[0] = indexerThread;\n    indexerThread.start();\n    \n    IndexerThread indexerThread2 = new IndexerThread(writer, threads);\n    threads[1] = indexerThread2;\n    indexerThread2.start();\n      \n    SearcherThread searcherThread1 = new SearcherThread(directory, threads);\n    threads[2] = searcherThread1;\n    searcherThread1.start();\n\n    SearcherThread searcherThread2 = new SearcherThread(directory, threads);\n    threads[3] = searcherThread2;\n    searcherThread2.start();\n\n    indexerThread.join();\n    indexerThread2.join();\n    searcherThread1.join();\n    searcherThread2.join();\n\n    writer.close();\n\n    assertTrue(\"hit unexpected exception in indexer\", !indexerThread.failed);\n    assertTrue(\"hit unexpected exception in indexer2\", !indexerThread2.failed);\n    assertTrue(\"hit unexpected exception in search1\", !searcherThread1.failed);\n    assertTrue(\"hit unexpected exception in search2\", !searcherThread2.failed);\n    //System.out.println(\"    Writer: \" + indexerThread.count + \" iterations\");\n    //System.out.println(\"Searcher 1: \" + searcherThread1.count + \" searchers created\");\n    //System.out.println(\"Searcher 2: \" + searcherThread2.count + \" searchers created\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}