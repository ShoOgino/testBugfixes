{"path":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1da8d55113b689b06716246649de6f62430f15c0","1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}