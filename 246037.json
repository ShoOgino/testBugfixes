{"path":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(DocSet,int,IntFunction[SlotContext]).mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":1,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(DocSet,int,IntFunction[SlotContext]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(DocSet,int).mjava","sourceNew":"  /**\n   * Bulk collection of all documents in a slot.  The default implementation calls {@link #collect(int,int,IntFunction)}\n   *\n   * @param docs (global) Documents to collect\n   * @param slot The slot number to collect these documents in\n   * @param slotContext A callback that can be used for Accumulators that would like additional info \n   *        about the current slot -- the {@link IntFunction} is only garunteed to be valid for \n   *        the current slot, and the {@link SlotContext} returned is only valid for the duration \n   *        of the <code>collect()</code> call.\n   */\n  public int collect(DocSet docs, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n    int count = 0;\n    SolrIndexSearcher searcher = fcontext.searcher;\n\n    final List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext();) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          if (ctx == null) {\n            // should be impossible\n            throw new RuntimeException(\"INTERNAL FACET ERROR\");\n          }\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n      count++;\n      collect(doc - segBase, slot, slotContext); // per-seg collectors\n    }\n    return count;\n  }\n\n","sourceOld":"  public int collect(DocSet docs, int slot) throws IOException {\n    int count = 0;\n    SolrIndexSearcher searcher = fcontext.searcher;\n\n    final List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext();) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          if (ctx == null) {\n            // should be impossible\n            throw new RuntimeException(\"INTERNAL FACET ERROR\");\n          }\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n      count++;\n      collect(doc - segBase, slot); // per-seg collectors\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(DocSet,int,IntFunction[SlotContext]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/SlotAcc#collect(DocSet,int,IntFunction[SlotContext]).mjava","sourceNew":"  /**\n   * Bulk collection of all documents in a slot.  The default implementation calls {@link #collect(int, int, IntFunction)}\n   *\n   * @param docs        (global) Documents to collect\n   * @param slot        The slot number to collect these documents in\n   * @param slotContext A callback that can be used for Accumulators that would like additional info\n   *                    about the current slot -- the {@link IntFunction} is only garunteed to be valid for\n   *                    the current slot, and the {@link SlotContext} returned is only valid for the duration\n   *                    of the <code>collect()</code> call.\n   */\n  public int collect(DocSet docs, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n    int count = 0;\n    SolrIndexSearcher searcher = fcontext.searcher;\n\n    final List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          if (ctx == null) {\n            // should be impossible\n            throw new RuntimeException(\"INTERNAL FACET ERROR\");\n          }\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n      count++;\n      collect(doc - segBase, slot, slotContext); // per-seg collectors\n    }\n    return count;\n  }\n\n","sourceOld":"  /**\n   * Bulk collection of all documents in a slot.  The default implementation calls {@link #collect(int,int,IntFunction)}\n   *\n   * @param docs (global) Documents to collect\n   * @param slot The slot number to collect these documents in\n   * @param slotContext A callback that can be used for Accumulators that would like additional info \n   *        about the current slot -- the {@link IntFunction} is only garunteed to be valid for \n   *        the current slot, and the {@link SlotContext} returned is only valid for the duration \n   *        of the <code>collect()</code> call.\n   */\n  public int collect(DocSet docs, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n    int count = 0;\n    SolrIndexSearcher searcher = fcontext.searcher;\n\n    final List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext();) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          if (ctx == null) {\n            // should be impossible\n            throw new RuntimeException(\"INTERNAL FACET ERROR\");\n          }\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n      count++;\n      collect(doc - segBase, slot, slotContext); // per-seg collectors\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}