{"path":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#checkAllNumberDVs(IndexReader,String,boolean,int).mjava","commits":[{"id":"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","date":1416999434,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#checkAllNumberDVs(IndexReader,String,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkAllNumberDVs(IndexReader r, String fieldName, boolean doThrow, int multiplier) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(r, fieldName);\n    int maxDoc = r.maxDoc();\n    boolean failed = false;\n    long t0 = System.currentTimeMillis();\n    for(int i=0;i<maxDoc;i++) {\n      StoredDocument oldDoc = r.document(i);\n      long value = multiplier * Long.parseLong(oldDoc.get(\"text\").split(\" \")[1]);\n      if (value != numbers.get(i)) {\n        System.out.println(\"FAIL: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i) + \" numbers=\" + numbers);\n        failed = true;\n      } else if (failed) {\n        System.out.println(\"OK: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i));\n      }\n    }\n    if (failed) {\n      if (r instanceof LeafReader == false) {\n        System.out.println(\"TEST FAILED; check leaves\");\n        for(LeafReaderContext ctx : r.leaves()) {\n          System.out.println(\"CHECK LEAF=\" + ctx.reader());\n          checkAllNumberDVs(ctx.reader(), fieldName, false, 1);\n        }\n      }\n      if (doThrow) {\n        assertFalse(\"FAILED field=\" + fieldName + \" r=\" + r, failed);\n      } else {\n        System.out.println(\"FAILED field=\" + fieldName + \" r=\" + r);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#checkAllNumberDVs(IndexReader,String,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#checkAllNumberDVs(IndexReader,String,boolean,int).mjava","sourceNew":"  private static void checkAllNumberDVs(IndexReader r, String fieldName, boolean doThrow, int multiplier) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(r, fieldName);\n    int maxDoc = r.maxDoc();\n    boolean failed = false;\n    long t0 = System.currentTimeMillis();\n    for(int i=0;i<maxDoc;i++) {\n      Document oldDoc = r.document(i);\n      long value = multiplier * Long.parseLong(oldDoc.get(\"text\").split(\" \")[1]);\n      if (value != numbers.get(i)) {\n        System.out.println(\"FAIL: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i) + \" numbers=\" + numbers);\n        failed = true;\n      } else if (failed) {\n        System.out.println(\"OK: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i));\n      }\n    }\n    if (failed) {\n      if (r instanceof LeafReader == false) {\n        System.out.println(\"TEST FAILED; check leaves\");\n        for(LeafReaderContext ctx : r.leaves()) {\n          System.out.println(\"CHECK LEAF=\" + ctx.reader());\n          checkAllNumberDVs(ctx.reader(), fieldName, false, 1);\n        }\n      }\n      if (doThrow) {\n        assertFalse(\"FAILED field=\" + fieldName + \" r=\" + r, failed);\n      } else {\n        System.out.println(\"FAILED field=\" + fieldName + \" r=\" + r);\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkAllNumberDVs(IndexReader r, String fieldName, boolean doThrow, int multiplier) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(r, fieldName);\n    int maxDoc = r.maxDoc();\n    boolean failed = false;\n    long t0 = System.currentTimeMillis();\n    for(int i=0;i<maxDoc;i++) {\n      StoredDocument oldDoc = r.document(i);\n      long value = multiplier * Long.parseLong(oldDoc.get(\"text\").split(\" \")[1]);\n      if (value != numbers.get(i)) {\n        System.out.println(\"FAIL: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i) + \" numbers=\" + numbers);\n        failed = true;\n      } else if (failed) {\n        System.out.println(\"OK: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i));\n      }\n    }\n    if (failed) {\n      if (r instanceof LeafReader == false) {\n        System.out.println(\"TEST FAILED; check leaves\");\n        for(LeafReaderContext ctx : r.leaves()) {\n          System.out.println(\"CHECK LEAF=\" + ctx.reader());\n          checkAllNumberDVs(ctx.reader(), fieldName, false, 1);\n        }\n      }\n      if (doThrow) {\n        assertFalse(\"FAILED field=\" + fieldName + \" r=\" + r, failed);\n      } else {\n        System.out.println(\"FAILED field=\" + fieldName + \" r=\" + r);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#checkAllNumberDVs(IndexReader,String,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#checkAllNumberDVs(IndexReader,String,boolean,int).mjava","sourceNew":"  private static void checkAllNumberDVs(IndexReader r, String fieldName, boolean doThrow, int multiplier) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(r, fieldName);\n    int maxDoc = r.maxDoc();\n    boolean failed = false;\n    long t0 = System.currentTimeMillis();\n    for(int i=0;i<maxDoc;i++) {\n      Document oldDoc = r.document(i);\n      long value = multiplier * Long.parseLong(oldDoc.get(\"text\").split(\" \")[1]);\n      assertEquals(i, numbers.nextDoc());\n      if (value != numbers.longValue()) {\n        System.out.println(\"FAIL: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.longValue() + \" numbers=\" + numbers);\n        failed = true;\n      } else if (failed) {\n        System.out.println(\"OK: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.longValue());\n      }\n    }\n    if (failed) {\n      if (r instanceof LeafReader == false) {\n        System.out.println(\"TEST FAILED; check leaves\");\n        for(LeafReaderContext ctx : r.leaves()) {\n          System.out.println(\"CHECK LEAF=\" + ctx.reader());\n          checkAllNumberDVs(ctx.reader(), fieldName, false, 1);\n        }\n      }\n      if (doThrow) {\n        assertFalse(\"FAILED field=\" + fieldName + \" r=\" + r, failed);\n      } else {\n        System.out.println(\"FAILED field=\" + fieldName + \" r=\" + r);\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkAllNumberDVs(IndexReader r, String fieldName, boolean doThrow, int multiplier) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(r, fieldName);\n    int maxDoc = r.maxDoc();\n    boolean failed = false;\n    long t0 = System.currentTimeMillis();\n    for(int i=0;i<maxDoc;i++) {\n      Document oldDoc = r.document(i);\n      long value = multiplier * Long.parseLong(oldDoc.get(\"text\").split(\" \")[1]);\n      if (value != numbers.get(i)) {\n        System.out.println(\"FAIL: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i) + \" numbers=\" + numbers);\n        failed = true;\n      } else if (failed) {\n        System.out.println(\"OK: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i));\n      }\n    }\n    if (failed) {\n      if (r instanceof LeafReader == false) {\n        System.out.println(\"TEST FAILED; check leaves\");\n        for(LeafReaderContext ctx : r.leaves()) {\n          System.out.println(\"CHECK LEAF=\" + ctx.reader());\n          checkAllNumberDVs(ctx.reader(), fieldName, false, 1);\n        }\n      }\n      if (doThrow) {\n        assertFalse(\"FAILED field=\" + fieldName + \" r=\" + r, failed);\n      } else {\n        System.out.println(\"FAILED field=\" + fieldName + \" r=\" + r);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#checkAllNumberDVs(IndexReader,String,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#checkAllNumberDVs(IndexReader,String,boolean,int).mjava","sourceNew":"  private static void checkAllNumberDVs(IndexReader r, String fieldName, boolean doThrow, int multiplier) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(r, fieldName);\n    int maxDoc = r.maxDoc();\n    boolean failed = false;\n    long t0 = System.currentTimeMillis();\n    for(int i=0;i<maxDoc;i++) {\n      Document oldDoc = r.document(i);\n      long value = multiplier * Long.parseLong(oldDoc.get(\"text\").split(\" \")[1]);\n      assertEquals(i, numbers.nextDoc());\n      if (value != numbers.longValue()) {\n        System.out.println(\"FAIL: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.longValue() + \" numbers=\" + numbers);\n        failed = true;\n      } else if (failed) {\n        System.out.println(\"OK: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.longValue());\n      }\n    }\n    if (failed) {\n      if (r instanceof LeafReader == false) {\n        System.out.println(\"TEST FAILED; check leaves\");\n        for(LeafReaderContext ctx : r.leaves()) {\n          System.out.println(\"CHECK LEAF=\" + ctx.reader());\n          checkAllNumberDVs(ctx.reader(), fieldName, false, 1);\n        }\n      }\n      if (doThrow) {\n        assertFalse(\"FAILED field=\" + fieldName + \" r=\" + r, failed);\n      } else {\n        System.out.println(\"FAILED field=\" + fieldName + \" r=\" + r);\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkAllNumberDVs(IndexReader r, String fieldName, boolean doThrow, int multiplier) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(r, fieldName);\n    int maxDoc = r.maxDoc();\n    boolean failed = false;\n    long t0 = System.currentTimeMillis();\n    for(int i=0;i<maxDoc;i++) {\n      Document oldDoc = r.document(i);\n      long value = multiplier * Long.parseLong(oldDoc.get(\"text\").split(\" \")[1]);\n      if (value != numbers.get(i)) {\n        System.out.println(\"FAIL: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i) + \" numbers=\" + numbers);\n        failed = true;\n      } else if (failed) {\n        System.out.println(\"OK: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i));\n      }\n    }\n    if (failed) {\n      if (r instanceof LeafReader == false) {\n        System.out.println(\"TEST FAILED; check leaves\");\n        for(LeafReaderContext ctx : r.leaves()) {\n          System.out.println(\"CHECK LEAF=\" + ctx.reader());\n          checkAllNumberDVs(ctx.reader(), fieldName, false, 1);\n        }\n      }\n      if (doThrow) {\n        assertFalse(\"FAILED field=\" + fieldName + \" r=\" + r, failed);\n      } else {\n        System.out.println(\"FAILED field=\" + fieldName + \" r=\" + r);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#checkAllNumberDVs(IndexReader,String,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#checkAllNumberDVs(IndexReader,String,boolean,int).mjava","sourceNew":"  private static void checkAllNumberDVs(IndexReader r, String fieldName, boolean doThrow, int multiplier) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(r, fieldName);\n    int maxDoc = r.maxDoc();\n    boolean failed = false;\n    long t0 = System.currentTimeMillis();\n    for(int i=0;i<maxDoc;i++) {\n      Document oldDoc = r.document(i);\n      long value = multiplier * Long.parseLong(oldDoc.get(\"text\").split(\" \")[1]);\n      assertEquals(i, numbers.nextDoc());\n      if (value != numbers.longValue()) {\n        System.out.println(\"FAIL: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.longValue() + \" numbers=\" + numbers);\n        failed = true;\n      } else if (failed) {\n        System.out.println(\"OK: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.longValue());\n      }\n    }\n    if (failed) {\n      if (r instanceof LeafReader == false) {\n        System.out.println(\"TEST FAILED; check leaves\");\n        for(LeafReaderContext ctx : r.leaves()) {\n          System.out.println(\"CHECK LEAF=\" + ctx.reader());\n          checkAllNumberDVs(ctx.reader(), fieldName, false, 1);\n        }\n      }\n      if (doThrow) {\n        assertFalse(\"FAILED field=\" + fieldName + \" r=\" + r, failed);\n      } else {\n        System.out.println(\"FAILED field=\" + fieldName + \" r=\" + r);\n      }\n    }\n  }\n\n","sourceOld":"  private static void checkAllNumberDVs(IndexReader r, String fieldName, boolean doThrow, int multiplier) throws IOException {\n    NumericDocValues numbers = MultiDocValues.getNumericValues(r, fieldName);\n    int maxDoc = r.maxDoc();\n    boolean failed = false;\n    long t0 = System.currentTimeMillis();\n    for(int i=0;i<maxDoc;i++) {\n      Document oldDoc = r.document(i);\n      long value = multiplier * Long.parseLong(oldDoc.get(\"text\").split(\" \")[1]);\n      if (value != numbers.get(i)) {\n        System.out.println(\"FAIL: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i) + \" numbers=\" + numbers);\n        failed = true;\n      } else if (failed) {\n        System.out.println(\"OK: docID=\" + i + \" \" + oldDoc+ \" value=\" + value + \" number=\" + numbers.get(i));\n      }\n    }\n    if (failed) {\n      if (r instanceof LeafReader == false) {\n        System.out.println(\"TEST FAILED; check leaves\");\n        for(LeafReaderContext ctx : r.leaves()) {\n          System.out.println(\"CHECK LEAF=\" + ctx.reader());\n          checkAllNumberDVs(ctx.reader(), fieldName, false, 1);\n        }\n      }\n      if (doThrow) {\n        assertFalse(\"FAILED field=\" + fieldName + \" r=\" + r, failed);\n      } else {\n        System.out.println(\"FAILED field=\" + fieldName + \" r=\" + r);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"]},"commit2Childs":{"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}