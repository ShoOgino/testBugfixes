{"path":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","commits":[{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"/dev/null","sourceNew":"  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(small, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(new Field(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(new Field(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    writer.optimize();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}