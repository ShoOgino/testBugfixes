{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getOrdinal(CategoryPath).mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getOrdinal(CategoryPath).mjava","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getOrdinal(CategoryPath).mjava","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path), false);\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getOrdinal(CategoryPath).mjava","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path), false);\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path));\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getOrdinal(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getOrdinal(CategoryPath).mjava","sourceNew":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path), false);\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  public int getOrdinal(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    if (categoryPath.length()==0) {\n      return ROOT_ORDINAL;\n    }\n    String path = categoryPath.toString(delimiter);\n\n    // First try to find the answer in the LRU cache:\n    synchronized(ordinalCache) {\n      Integer res = ordinalCache.get(path);\n      if (res!=null) {\n        return res.intValue();\n      }\n    }\n\n    // If we're still here, we have a cache miss. We need to fetch the\n    // value from disk, and then also put it in the cache:\n    int ret = TaxonomyReader.INVALID_ORDINAL;\n    try {\n      indexReaderLock.readLock().lock();\n      // TODO (Facet): avoid Multi*?\n      Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n      DocsEnum docs = MultiFields.getTermDocsEnum(indexReader, liveDocs, Consts.FULL, new BytesRef(path), false);\n      if (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        ret = docs.docID();\n      }\n    } finally {\n      indexReaderLock.readLock().unlock();\n    }\n\n    // Put the new value in the cache. Note that it is possible that while\n    // we were doing the above fetching (without the cache locked), some\n    // other thread already added the same category to the cache. We do\n    // not care about this possibilty, as LRUCache replaces previous values\n    // of the same keys (it doesn't store duplicates).\n    synchronized(ordinalCache) {\n      // GB: new Integer(int); creates a new object each and every time.\n      // Integer.valueOf(int) might not (See JavaDoc). \n      ordinalCache.put(path, Integer.valueOf(ret));\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}