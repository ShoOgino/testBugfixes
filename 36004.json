{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric), fieldsStream);\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":["6c28b0647b24e28fecccdb64f6810820d783cde9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":null,"sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric), fieldsStream);\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}