{"path":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","commits":[{"id":"a1faffa11cb75e88a16b5dd8f927fee95a2c448d","date":1222249525,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(new String[0]), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c881464041e282c06fdb34e91f883b83b8d97968","date":1247607562,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(new HashSet(0)), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(new String[0]), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(new HashSet(0)), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(new HashSet(0)), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(new HashSet(0)), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(new HashSet(0)), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet()), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(new HashSet(0)), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet()), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet()), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT, Collections.emptySet())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet()), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet()), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT, Collections.emptySet())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT, Collections.emptySet())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet()), IndexWriter.MaxFieldLength.LIMITED);\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testNPESpanQuery().mjava","sourceNew":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT, Collections.emptySet())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1404\n  public void testNPESpanQuery() throws Throwable {\n    final Directory dir = new MockRAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT, Collections.emptySet())));\n\n    // Add documents\n    addDoc(writer, \"1\", \"the big dogs went running to the market\");\n    addDoc(writer, \"2\", \"the cat chased the mouse, then the cat ate the mouse quickly\");\n    \n    // Commit\n    writer.close();\n\n    // Get searcher\n    final IndexReader reader = IndexReader.open(dir, true);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    // Control (make sure docs indexed)\n    assertEquals(2, hitCount(searcher, \"the\"));\n    assertEquals(1, hitCount(searcher, \"cat\"));\n    assertEquals(1, hitCount(searcher, \"dogs\"));\n    assertEquals(0, hitCount(searcher, \"rabbit\"));\n\n    // This throws exception (it shouldn't)\n    assertEquals(1,\n                 searcher.search(createSpan(0, true,                                 \n                                            new SpanQuery[] {createSpan(4, false, \"chased\", \"cat\"),\n                                                             createSpan(\"ate\")}), 10).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c881464041e282c06fdb34e91f883b83b8d97968"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["c881464041e282c06fdb34e91f883b83b8d97968","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c881464041e282c06fdb34e91f883b83b8d97968":["a1faffa11cb75e88a16b5dd8f927fee95a2c448d"],"a1faffa11cb75e88a16b5dd8f927fee95a2c448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1faffa11cb75e88a16b5dd8f927fee95a2c448d"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"c881464041e282c06fdb34e91f883b83b8d97968":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"a1faffa11cb75e88a16b5dd8f927fee95a2c448d":["c881464041e282c06fdb34e91f883b83b8d97968"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}