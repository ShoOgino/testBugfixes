{"path":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 1 from opening writer + 2 from closing writer\n      assertEquals(3, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 1 from opening writer + 2 from closing writer\n      assertEquals(3, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 1 from opening writer + 2 from closing writer\n      assertEquals(3, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy));\n      lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 1 from opening writer + 2 from closing writer\n      assertEquals(3, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 1 from opening writer + 2 from closing writer\n      assertEquals(3, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 1 from opening writer + 2 from closing writer\n      assertEquals(3, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 1 from opening writer + 2 from closing writer\n      assertEquals(3, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    Random random = newRandom();\n    \n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(random,\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    Random random = newRandom();\n    \n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new MockRAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(random,\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    Random random = newRandom();\n    \n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(random,\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    Random random = newRandom();\n    \n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory(random);\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(random,\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    Random random = newRandom();\n    \n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new MockRAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(random,\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    Random random = newRandom();\n    \n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory(random);\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(random,\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer()).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer()).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer()).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setMergeFactor(10);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setIndexDeletionPolicy(policy);\n      lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      writer = new IndexWriter(dir, conf);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(2, commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer()).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer()).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer()).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer()).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer()).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.setInfoStream(VERBOSE ? System.out : null);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean isOptimized;\n      {\n        IndexReader r = IndexReader.open(dir);\n        isOptimized = r.isOptimized();\n        r.close();\n      }\n      if (!isOptimized) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for optimize\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.optimize();\n        writer.close();\n      }\n      assertEquals(isOptimized ? 0:1, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (isOptimized ? 0:1), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (isOptimized ? 0:1), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit, null, false);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir, true);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","date":1327848882,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868186558eb3a854ce7e720a52bb445795d54910","date":1327853682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        IndexReader r = IndexReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepAllDeletionPolicy().mjava","sourceNew":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a silly deletion policy that keeps all commits around.\n   */\n  public void testKeepAllDeletionPolicy() throws IOException {\n    for(int pass=0;pass<2;pass++) {\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle pass=\" + pass);\n      }\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      // Never deletes a commit\n      KeepAllDeletionPolicy policy = new KeepAllDeletionPolicy();\n\n      Directory dir = newDirectory();\n      policy.dir = dir;\n\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy).setMaxBufferedDocs(10)\n          .setMergeScheduler(new SerialMergeScheduler());\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      final boolean needsMerging;\n      {\n        DirectoryReader r = DirectoryReader.open(dir);\n        needsMerging = r.getSequentialSubReaders().length != 1;\n        r.close();\n      }\n      if (needsMerging) {\n        conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                    new MockAnalyzer(random)).setOpenMode(\n                                                                    OpenMode.APPEND).setIndexDeletionPolicy(policy);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        if (VERBOSE) {\n          System.out.println(\"TEST: open writer for forceMerge\");\n        }\n        writer = new IndexWriter(dir, conf);\n        writer.forceMerge(1);\n        writer.close();\n      }\n      assertEquals(needsMerging ? 1:0, policy.numOnInit);\n\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(1 + (needsMerging ? 1:0), policy.numOnCommit);\n\n      // Test listCommits\n      Collection<IndexCommit> commits = DirectoryReader.listCommits(dir);\n      // 2 from closing writer\n      assertEquals(1 + (needsMerging ? 1:0), commits.size());\n\n      // Make sure we can open a reader on each commit:\n      for (final IndexCommit commit : commits) {\n        IndexReader r = IndexReader.open(commit);\n        r.close();\n      }\n\n      // Simplistic check: just verify all segments_N's still\n      // exist, and, I can open a reader on each:\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      while(gen > 0) {\n        IndexReader reader = IndexReader.open(dir);\n        reader.close();\n        dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        gen--;\n\n        if (gen > 0) {\n          // Now that we've removed a commit point, which\n          // should have orphan'd at least one index file.\n          // Open & close a writer and assert that it\n          // actually removed something:\n          int preCount = dir.listAll().length;\n          writer = new IndexWriter(dir, newIndexWriterConfig(\n              TEST_VERSION_CURRENT,\n              new MockAnalyzer(random)).setOpenMode(\n              OpenMode.APPEND).setIndexDeletionPolicy(policy));\n          writer.close();\n          int postCount = dir.listAll().length;\n          assertTrue(postCount < preCount);\n        }\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c19f985e36a65cc969e8e564fe337a0d41512075":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"868186558eb3a854ce7e720a52bb445795d54910":["f9172d6bebb12f0bba2ebb1756779c2f8948ab7e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","868186558eb3a854ce7e720a52bb445795d54910"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["06584e6e98d592b34e1329b384182f368d2025e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"868186558eb3a854ce7e720a52bb445795d54910":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["868186558eb3a854ce7e720a52bb445795d54910"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b21422ff1d1d56499dec481f193b402e5e8def5b","8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"962d04139994fce5193143ef35615499a9a96d78":[],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}