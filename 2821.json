{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":["1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28","1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n    SolrCloseableLatch countDownLatch;\n    try {\n      List<ReplicaPosition> positions = buildReplicaPositions(ocmh.cloudManager, clusterState, collectionName, message, sessionWrapper);\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n      // wait for a while until we see the shard\n      ocmh.waitForNewShard(collectionName, sliceName);\n\n      String async = message.getStr(ASYNC);\n      countDownLatch = new SolrCloseableLatch(positions.size(), ocmh);\n      for (ReplicaPosition position : positions) {\n        String nodeName = position.node;\n        String coreName = Assign.buildSolrCoreName(ocmh.cloudManager.getDistribStateManager(), collection, sliceName, position.type);\n        log.info(\"Creating replica \" + coreName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n            + \" on \" + nodeName);\n\n        // Need to create new params for each request\n        ZkNodeProps addReplicasProps = new ZkNodeProps(\n            COLLECTION_PROP, collectionName,\n            SHARD_ID_PROP, sliceName,\n            ZkStateReader.REPLICA_TYPE, position.type.name(),\n            CoreAdminParams.NODE, nodeName,\n            CoreAdminParams.NAME, coreName,\n            CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n        Map<String, Object> propertyParams = new HashMap<>();\n        ocmh.addPropertyParams(message, propertyParams);\n        addReplicasProps = addReplicasProps.plus(propertyParams);\n        if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n        final NamedList addResult = new NamedList();\n        ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n          countDownLatch.countDown();\n          Object addResultFailure = addResult.get(\"failure\");\n          if (addResultFailure != null) {\n            SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n            if (failure == null) {\n              failure = new SimpleOrderedMap();\n              results.add(\"failure\", failure);\n            }\n            failure.addAll((NamedList) addResultFailure);\n          } else {\n            SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n            if (success == null) {\n              success = new SimpleOrderedMap();\n              results.add(\"success\", success);\n            }\n            success.addAll((NamedList) addResult.get(\"success\"));\n          }\n        });\n      }\n    } finally {\n      if (sessionWrapper.get() != null) sessionWrapper.get().release();\n    }\n\n    log.debug(\"Waiting for create shard action to complete\");\n    countDownLatch.await(5, TimeUnit.MINUTES);\n    log.debug(\"Finished waiting for create shard action to complete\");\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","bugFix":["deea3439de4f487ae553317e50d5d641ca386374"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","date":1562161956,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28","date":1571131262,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","bugFix":["deea3439de4f487ae553317e50d5d641ca386374"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    ocmh.waitForNewShard(collectionName, sliceName);\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, cloudConfig, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, cloudConfig, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    //ZkStateReader zkStateReader = ocmh.zkStateReader;\n    ocmh.overseer.offerStateUpdate(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    //ocmh.waitForNewShard(collectionName, sliceName);\n    // wait for a while until we see the shard and update the local view of the cluster state\n    clusterState = ocmh.waitForNewShard(collectionName, sliceName);\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        OverseerCollectionMessageHandler.CREATE_NODE_SET, message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    ocmh.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      //ocmh.addReplica(zkStateReader.getClusterState(), addReplicasProps, addResult, () -> {\n      ocmh.addReplica(clusterState, cloudConfig, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      // clean up the slice that we created\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ocmh).call(clusterState, cloudConfig, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"c526352db87264a72a7a9ad68c1b769b81e54305":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"4abf821a41a2fdca2a1dea148999931d22e20529":["1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["b94236357aaa22b76c10629851fe4e376e0cea82","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"deea3439de4f487ae553317e50d5d641ca386374":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"],"b0b597c65628ca9e73913a07e81691f8229bae35":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28","b0b597c65628ca9e73913a07e81691f8229bae35"],"1498cb4cd65cf2303ccde0e0d6edf5a5e1e8fd28":["4abf821a41a2fdca2a1dea148999931d22e20529","b0b597c65628ca9e73913a07e81691f8229bae35"],"4abf821a41a2fdca2a1dea148999931d22e20529":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["c526352db87264a72a7a9ad68c1b769b81e54305"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}