{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String,String).mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public String getShardId(String collectionName, String nodeName, String coreName) {\n    Collection<DocCollection> states = collectionStates.values();\n    if (collectionName != null) {\n      DocCollection c = getCollectionOrNull(collectionName);\n      if (c != null) states = Collections.singletonList(c);\n    }\n\n    for (DocCollection coll : states) {\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rnodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (nodeName.equals(rnodeName) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String,String).mjava","sourceNew":"  public String getShardId(String collectionName, String nodeName, String coreName) {\n    Collection<CollectionRef> states = collectionStates.values();\n    if (collectionName != null) {\n      CollectionRef c = collectionStates.get(collectionName);\n      if (c != null) states = Collections.singletonList( c );\n    }\n\n    for (CollectionRef coll : states) {\n      for (Slice slice : coll.get().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rnodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (nodeName.equals(rnodeName) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  public String getShardId(String collectionName, String nodeName, String coreName) {\n    Collection<DocCollection> states = collectionStates.values();\n    if (collectionName != null) {\n      DocCollection c = getCollectionOrNull(collectionName);\n      if (c != null) states = Collections.singletonList(c);\n    }\n\n    for (DocCollection coll : states) {\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rnodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (nodeName.equals(rnodeName) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["2de0e5687c5ff563e2e4a443f52fdb84fb801f45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2de0e5687c5ff563e2e4a443f52fdb84fb801f45","date":1413629909,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String,String).mjava","sourceNew":"  public String getShardId(String collectionName, String nodeName, String coreName) {\n    Collection<CollectionRef> states = collectionStates.values();\n    if (collectionName != null) {\n      CollectionRef c = collectionStates.get(collectionName);\n      if (c != null) states = Collections.singletonList( c );\n    }\n\n    for (CollectionRef ref : states) {\n      DocCollection coll = ref.get();\n      if(coll == null) continue;// this collection go tremoved in between, skip\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rnodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (nodeName.equals(rnodeName) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  public String getShardId(String collectionName, String nodeName, String coreName) {\n    Collection<CollectionRef> states = collectionStates.values();\n    if (collectionName != null) {\n      CollectionRef c = collectionStates.get(collectionName);\n      if (c != null) states = Collections.singletonList( c );\n    }\n\n    for (CollectionRef coll : states) {\n      for (Slice slice : coll.get().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rnodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (nodeName.equals(rnodeName) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardId(String,String,String).mjava","sourceNew":"  public String getShardId(String collectionName, String nodeName, String coreName) {\n    Collection<CollectionRef> states = collectionStates.values();\n    if (collectionName != null) {\n      CollectionRef c = collectionStates.get(collectionName);\n      if (c != null) states = Collections.singletonList( c );\n    }\n\n    for (CollectionRef ref : states) {\n      DocCollection coll = ref.get();\n      if(coll == null) continue;// this collection go tremoved in between, skip\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rnodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (nodeName.equals(rnodeName) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  public String getShardId(String collectionName, String nodeName, String coreName) {\n    Collection<CollectionRef> states = collectionStates.values();\n    if (collectionName != null) {\n      CollectionRef c = collectionStates.get(collectionName);\n      if (c != null) states = Collections.singletonList( c );\n    }\n\n    for (CollectionRef coll : states) {\n      for (Slice slice : coll.get().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          // TODO: for really large clusters, we could 'index' on this\n          String rnodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n          String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n          if (nodeName.equals(rnodeName) && coreName.equals(rcore)) {\n            return slice.getName();\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["9279b175e5e66258442d2123a50f052219a9cc1b","2de0e5687c5ff563e2e4a443f52fdb84fb801f45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2de0e5687c5ff563e2e4a443f52fdb84fb801f45":["9279b175e5e66258442d2123a50f052219a9cc1b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2de0e5687c5ff563e2e4a443f52fdb84fb801f45"],"9279b175e5e66258442d2123a50f052219a9cc1b":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"2de0e5687c5ff563e2e4a443f52fdb84fb801f45":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["9279b175e5e66258442d2123a50f052219a9cc1b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2de0e5687c5ff563e2e4a443f52fdb84fb801f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}