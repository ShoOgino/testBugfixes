{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#next(Token).mjava","sourceNew":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    public boolean incrementToken() throws IOException {\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n\n                    break;\n                } else {\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(input.correctOffset(start), input.correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns the next token in the stream, or null at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @param reusableToken a reusable token\n     * @return Token\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    public final Token next(final Token reusableToken) throws java.io.IOException {\n        /** how many character(s) has been stored in buffer */\n        assert reusableToken != null;\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n\n                    break;\n                } else {\n                    return null;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n            return reusableToken.reinit\n                (buffer, 0, length, input.correctOffset(start), input.correctOffset(start+length), TOKEN_TYPE_NAMES[tokenType]);\n        } else if (dataLen == -1) {\n          return null;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d0e16ae1a83f5658ad4d16453fb88650460140","date":1250287302,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","sourceNew":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n\n                    break;\n                } else {\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(input.correctOffset(start), input.correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    public boolean incrementToken() throws IOException {\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n\n                    break;\n                } else {\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(input.correctOffset(start), input.correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a82fda1447250ff156ff3b862d94a99bf0a3c23c","date":1252649533,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","sourceNew":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n\n                    break;\n                } else {\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n\n                    break;\n                } else {\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(input.correctOffset(start), input.correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","bugFix":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","sourceNew":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n\n                    break;\n                } else {\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n\n                    break;\n                } else {\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e64a71406348a5942a2166256238aff8313d0914","date":1263756357,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","sourceNew":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n                    else{\n                      offset--;\n                    }\n\n                    break;\n                } else {\n                    offset--;\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          offset--;\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n\n                    break;\n                } else {\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cjk/CJKTokenizer#incrementToken().mjava","sourceNew":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n                    else{\n                      offset--;\n                    }\n\n                    break;\n                } else {\n                    offset--;\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          offset--;\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns true for the next token in the stream, or false at EOS.\n     * See http://java.sun.com/j2se/1.3/docs/api/java/lang/Character.UnicodeBlock.html\n     * for detail.\n     *\n     * @return false for end of stream, true otherwise\n     *\n     * @throws java.io.IOException - throw IOException when read error <br>\n     *         happened in the InputStream\n     *\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n        clearAttributes();\n        /** how many character(s) has been stored in buffer */\n\n        while(true) { // loop until we find a non-empty token\n\n          int length = 0;\n\n          /** the position used to create Token */\n          int start = offset;\n\n          while (true) { // loop until we've found a full token\n            /** current character */\n            char c;\n\n            /** unicode block of current character for detail */\n            Character.UnicodeBlock ub;\n\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) {\n                if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    }\n                    else{\n                      offset--;\n                    }\n\n                    break;\n                } else {\n                    offset--;\n                    return false;\n                }\n            } else {\n                //get current character\n                c = ioBuffer[bufferIndex++];\n\n                //get the UnicodeBlock of the current character\n                ub = Character.UnicodeBlock.of(c);\n            }\n\n            //if the current character is ASCII or Extend ASCII\n            if ((ub == Character.UnicodeBlock.BASIC_LATIN)\n                    || (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS)\n               ) {\n                if (ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {\n                  int i = (int) c;\n                  if (i >= 65281 && i <= 65374) {\n                    // convert certain HALFWIDTH_AND_FULLWIDTH_FORMS to BASIC_LATIN\n                    i = i - 65248;\n                    c = (char) i;\n                  }\n                }\n\n                // if the current character is a letter or \"_\" \"+\" \"#\"\n                if (Character.isLetterOrDigit(c)\n                        || ((c == '_') || (c == '+') || (c == '#'))\n                   ) {\n                    if (length == 0) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //      ^--: the current character begin to token the ASCII\n                        // letter\n                        start = offset - 1;\n                    } else if (tokenType == DOUBLE_TOKEN_TYPE) {\n                        // \"javaC1C2C3C4linux\" <br>\n                        //              ^--: the previous non-ASCII\n                        // : the current character\n                        offset--;\n                        bufferIndex--;\n\n                        if (preIsTokened == true) {\n                            // there is only one non-ASCII has been stored\n                            length = 0;\n                            preIsTokened = false;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    // store the LowerCase(c) in the buffer\n                    buffer[length++] = Character.toLowerCase(c);\n                    tokenType = SINGLE_TOKEN_TYPE;\n\n                    // break the procedure if buffer overflowed!\n                    if (length == MAX_WORD_LEN) {\n                        break;\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                // non-ASCII letter, e.g.\"C1C2C3C4\"\n                if (Character.isLetter(c)) {\n                    if (length == 0) {\n                        start = offset - 1;\n                        buffer[length++] = c;\n                        tokenType = DOUBLE_TOKEN_TYPE;\n                    } else {\n                      if (tokenType == SINGLE_TOKEN_TYPE) {\n                            offset--;\n                            bufferIndex--;\n\n                            //return the previous ASCII characters\n                            break;\n                        } else {\n                            buffer[length++] = c;\n                            tokenType = DOUBLE_TOKEN_TYPE;\n\n                            if (length == 2) {\n                                offset--;\n                                bufferIndex--;\n                                preIsTokened = true;\n\n                                break;\n                            }\n                        }\n                    }\n                } else if (length > 0) {\n                    if (preIsTokened == true) {\n                        // empty the buffer\n                        length = 0;\n                        preIsTokened = false;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n      \n        if (length > 0) {\n          termAtt.setTermBuffer(buffer, 0, length);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(start+length));\n          typeAtt.setType(TOKEN_TYPE_NAMES[tokenType]);\n          return true;\n        } else if (dataLen == -1) {\n          offset--;\n          return false;\n        }\n\n        // Cycle back and try for the next token (don't\n        // return an empty string)\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"91d0e16ae1a83f5658ad4d16453fb88650460140":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"e64a71406348a5942a2166256238aff8313d0914":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e64a71406348a5942a2166256238aff8313d0914"]},"commit2Childs":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"91d0e16ae1a83f5658ad4d16453fb88650460140":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"e64a71406348a5942a2166256238aff8313d0914":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["e64a71406348a5942a2166256238aff8313d0914"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}