{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","commits":[{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        replicaCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = replicaCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          AtomicInteger count = null;\n          Object tagVal = row.getVal(tag.name);\n          if (tag.isPass(tagVal)) {\n            tagVsCount.put(String.valueOf(tagVal), count = tagVsCount.getOrDefault(tagVal, new AtomicInteger()));\n            count.addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return replicaCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        replicaCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = replicaCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal)? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(tagVal).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return replicaCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        replicaCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = replicaCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          AtomicInteger count = null;\n          Object tagVal = row.getVal(tag.name);\n          if (tag.isPass(tagVal)) {\n            tagVsCount.put(String.valueOf(tagVal), count = tagVsCount.getOrDefault(tagVal, new AtomicInteger()));\n            count.addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return replicaCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b","date":1495756308,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        replicaCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = replicaCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(tagVal).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return replicaCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        replicaCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = replicaCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal)? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(tagVal).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return replicaCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9172627dfd9e49ff7f66c8ab428bf2fd5210af96","date":1495778514,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        replicaCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = replicaCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return replicaCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        replicaCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = replicaCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(tagVal).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return replicaCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        replicaCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = replicaCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return replicaCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.computeIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, AtomicInteger>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows)\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        collVsShardVsTagVsCount.putIfAbsent(collectionName, new HashMap<>());\n        Map<String, Map<String, AtomicInteger>> collMap = collVsShardVsTagVsCount.get(collectionName);\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          collMap.putIfAbsent(shardName, new HashMap<>());\n          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.putIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", new AtomicInteger());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).addAndGet(shards.getValue().size());\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.computeIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          tagVsCount.computeIfAbsent(tag.isPass(tagVal) ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (tag.isPass(tagVal)) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n          }\n        }\n      }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"9172627dfd9e49ff7f66c8ab428bf2fd5210af96":["901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["9172627dfd9e49ff7f66c8ab428bf2fd5210af96"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1852ff897aecd2f7c8376a02aedfd44104533f28","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["1fca549db64ee4c87a83a94e7c224506fa20d396"]},"commit2Childs":{"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b":["9172627dfd9e49ff7f66c8ab428bf2fd5210af96"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"9172627dfd9e49ff7f66c8ab428bf2fd5210af96":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","1fca549db64ee4c87a83a94e7c224506fa20d396","a513b6a92751e54c76fb5447948c9e7d437163a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}