{"path":"solr/core/src/java/org/apache/solr/search/similarities/DFRSimilarityFactory#parseNormalization(String,String,String,String).mjava","commits":[{"id":"be60bc09ab4dbf4eb2d18b649eed80eca1f67261","date":1328197603,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/similarities/DFRSimilarityFactory#parseNormalization(String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/similarities/DFRSimilarityFactory#parseNormalization(String,String,String).mjava","sourceNew":"  // also used by IBSimilarityFactory\n  static Normalization parseNormalization(String expr, String c, String mu, String z) {\n    if (mu != null && !\"H3\".equals(expr)) {\n      throw new RuntimeException(\n          \"parameter mu only makes sense for normalization H3\");\n    }\n    if (z != null && !\"Z\".equals(expr)) {\n      throw new RuntimeException(\n          \"parameter z only makes sense for normalization Z\");\n    }\n    if (c != null && !(\"H1\".equals(expr) || \"H2\".equals(expr))) {\n      throw new RuntimeException(\n          \"parameter c only makese sense for normalizations H1 and H2\");\n    }\n    if (\"H1\".equals(expr)) {\n      return (c != null) ? new NormalizationH1(Float.parseFloat(c))\n                         : new NormalizationH1();\n    } else if (\"H2\".equals(expr)) {\n      return (c != null) ? new NormalizationH2(Float.parseFloat(c))\n                         : new NormalizationH2();\n    } else if (\"H3\".equals(expr)) {\n      return (mu != null) ? new NormalizationH3(Float.parseFloat(mu))\n                          : new NormalizationH3();\n    } else if (\"Z\".equals(expr)) {\n      return (z != null) ? new NormalizationZ(Float.parseFloat(z))\n                         : new NormalizationZ();\n    } else if (\"none\".equals(expr)) {\n      return new Normalization.NoNormalization();\n    } else {\n      throw new RuntimeException(\"Invalid normalization: \" + expr);\n    }\n  }\n\n","sourceOld":"  // also used by IBSimilarityFactory\n  static Normalization parseNormalization(String expr, String mu, String z) {\n    if (mu != null && z != null) {\n      throw new RuntimeException(\n          \"specifying mu and z make no sense for: \" + expr);\n    }\n    if (mu != null && !\"H3\".equals(expr)) {\n      throw new RuntimeException(\n          \"parameter mu only makes sense for normalization H3\");\n    }\n    if (z != null && !\"Z\".equals(expr)) {\n      throw new RuntimeException(\n          \"parameter z only makes sense for normalization Z\");\n    }\n    \n    if (\"H1\".equals(expr)) {\n      return new NormalizationH1();\n    } else if (\"H2\".equals(expr)) {\n      return new NormalizationH2();\n    } else if (\"H3\".equals(expr)) {\n      return (mu != null) ? new NormalizationH3(Float.parseFloat(mu))\n                          : new NormalizationH3();\n    } else if (\"Z\".equals(expr)) {\n      return (z != null) ? new NormalizationZ(Float.parseFloat(z))\n                         : new NormalizationZ();\n    } else if (\"none\".equals(expr)) {\n      return new Normalization.NoNormalization();\n    } else {\n      throw new RuntimeException(\"Invalid normalization: \" + expr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be60bc09ab4dbf4eb2d18b649eed80eca1f67261":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be60bc09ab4dbf4eb2d18b649eed80eca1f67261"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be60bc09ab4dbf4eb2d18b649eed80eca1f67261"],"be60bc09ab4dbf4eb2d18b649eed80eca1f67261":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}