{"path":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#authValid().mjava","commits":[{"id":"5d5482e225fe64e9f868c423923d1144adc88142","date":1571270194,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#authValid().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void authValid() throws Exception {\n    setupCluster(false, null, true);\n    final CloudSolrClient client = testHarness.get().cluster.getSolrClient();\n    final CallbackReceiver receiver = testHarness.get().receiver;\n\n    { // valid READ requests: #1 with, and #2 without, (valid) Authentication\n      final CollectionAdminRequest.List req = new CollectionAdminRequest.List();\n\n      // we don't block unknown users for READ, so this should succeed\n      client.request(req);\n\n      // Authenticated user (w/valid password) should also succeed\n      req.setBasicAuthCredentials(\"solr\", SOLR_PASS);\n      client.request(req);\n\n      final List<AuditEvent> events = receiver.waitForAuditEvents(2);\n      assertAuditEvent(events.get(0), COMPLETED, \"/admin/collections\", ADMIN, null, 200, \"action\", \"LIST\");\n      assertAuditEvent(events.get(1), COMPLETED, \"/admin/collections\", ADMIN, \"solr\", 200, \"action\", \"LIST\");\n    }\n\n    { // valid CREATE request: Authenticated admin user should be allowed to CREATE collection\n      final Create req = CollectionAdminRequest.createCollection(\"test_create\", 1, 1);\n      req.setBasicAuthCredentials(\"solr\", SOLR_PASS);\n      client.request(req);\n\n      // collection createion leads to AuditEvent's for the core as well...\n      final List<AuditEvent> events = receiver.waitForAuditEvents(2);\n      assertAuditEvent(events.get(0), COMPLETED, \"/admin/cores\", ADMIN, null, 200, \"action\", \"CREATE\");\n      assertAuditEvent(events.get(1), COMPLETED, \"/admin/collections\", ADMIN, null, 200, \"action\", \"CREATE\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d5482e225fe64e9f868c423923d1144adc88142":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d5482e225fe64e9f868c423923d1144adc88142"]},"commit2Childs":{"5d5482e225fe64e9f868c423923d1144adc88142":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d5482e225fe64e9f868c423923d1144adc88142"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}