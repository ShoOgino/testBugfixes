{"path":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link IndexReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52","date":1370989568,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<IndexCommit>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = SegmentInfos.readLatestCommit(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = null;\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis = SegmentInfos.readCommit(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = SegmentInfos.readLatestCommit(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = null;\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis = SegmentInfos.readCommit(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = new SegmentInfos();\n    latest.read(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = new SegmentInfos();\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis.read(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n          sis = null;\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b82a3644db30161c3cbd3e23aeefe19cb88113","date":1435478870,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = SegmentInfos.readLatestCommit(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(null, latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = null;\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis = SegmentInfos.readCommit(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n        }\n\n        if (sis != null) {\n          commits.add(new StandardDirectoryReader.ReaderCommit(null, sis, dir));\n        }\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = SegmentInfos.readLatestCommit(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = null;\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis = SegmentInfos.readCommit(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n        }\n\n        if (sis != null)\n          commits.add(new StandardDirectoryReader.ReaderCommit(sis, dir));\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7166881391ea0f64d02756406371ce34719e4e8","date":1567583487,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#listCommits(Directory).mjava","sourceNew":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = SegmentInfos.readLatestCommit(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(null, latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = null;\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis = SegmentInfos.readCommit(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n        }\n\n        if (sis != null) {\n          commits.add(new StandardDirectoryReader.ReaderCommit(null, sis, dir));\n        }\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","sourceOld":"  /** Returns all commit points that exist in the Directory.\n   *  Normally, because the default is {@link\n   *  KeepOnlyLastCommitDeletionPolicy}, there would be only\n   *  one commit point.  But if you're using a custom {@link\n   *  IndexDeletionPolicy} then there could be many commits.\n   *  Once you have a given commit, you can open a reader on\n   *  it by calling {@link DirectoryReader#open(IndexCommit)}\n   *  There must be at least one commit in\n   *  the Directory, else this method throws {@link\n   *  IndexNotFoundException}.  Note that if a commit is in\n   *  progress while this method is running, that commit\n   *  may or may not be returned.\n   *  \n   *  @return a sorted list of {@link IndexCommit}s, from oldest \n   *  to latest. */\n  public static List<IndexCommit> listCommits(Directory dir) throws IOException {\n    final String[] files = dir.listAll();\n\n    List<IndexCommit> commits = new ArrayList<>();\n\n    SegmentInfos latest = SegmentInfos.readLatestCommit(dir);\n    final long currentGen = latest.getGeneration();\n\n    commits.add(new StandardDirectoryReader.ReaderCommit(null, latest, dir));\n\n    for(int i=0;i<files.length;i++) {\n\n      final String fileName = files[i];\n\n      if (fileName.startsWith(IndexFileNames.SEGMENTS) &&\n          !fileName.equals(IndexFileNames.OLD_SEGMENTS_GEN) &&\n          SegmentInfos.generationFromSegmentsFileName(fileName) < currentGen) {\n\n        SegmentInfos sis = null;\n        try {\n          // IOException allowed to throw there, in case\n          // segments_N is corrupt\n          sis = SegmentInfos.readCommit(dir, fileName);\n        } catch (FileNotFoundException | NoSuchFileException fnfe) {\n          // LUCENE-948: on NFS (and maybe others), if\n          // you have writers switching back and forth\n          // between machines, it's very likely that the\n          // dir listing will be stale and will claim a\n          // file segments_X exists when in fact it\n          // doesn't.  So, we catch this and handle it\n          // as if the file does not exist\n        }\n\n        if (sis != null) {\n          commits.add(new StandardDirectoryReader.ReaderCommit(null, sis, dir));\n        }\n      }\n    }\n\n    // Ensure that the commit points are sorted in ascending order.\n    Collections.sort(commits);\n\n    return commits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7166881391ea0f64d02756406371ce34719e4e8":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["46e4a8bdfbafda795ef9c39a2bc2d47095770299","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7166881391ea0f64d02756406371ce34719e4e8"]},"commit2Childs":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f7166881391ea0f64d02756406371ce34719e4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["f7166881391ea0f64d02756406371ce34719e4e8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}