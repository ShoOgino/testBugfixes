{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testSetWithCrazyWhitespaceAndBOMs().mjava","commits":[{"id":"d2676f60312754dc25ef542551cb2623527013a4","date":1394298418,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testSetWithCrazyWhitespaceAndBOMs().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetWithCrazyWhitespaceAndBOMs() throws Exception {\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\tUTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\t UTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\r\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testSetWithCrazyWhitespaceAndBOMs().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetWithCrazyWhitespaceAndBOMs() throws Exception {\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\tUTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\t UTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\r\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testSetWithCrazyWhitespaceAndBOMs().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testSetWithCrazyWhitespaceAndBOMs().mjava","sourceNew":"  public void testSetWithCrazyWhitespaceAndBOMs() throws Exception {\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\tUTF-8\\n\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\t UTF-8\\n\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\n\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\r\\n\".getBytes(StandardCharsets.UTF_8))));\n  }\n\n","sourceOld":"  public void testSetWithCrazyWhitespaceAndBOMs() throws Exception {\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\tUTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\t UTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\r\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testSetWithCrazyWhitespaceAndBOMs().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testSetWithCrazyWhitespaceAndBOMs().mjava","sourceNew":"  public void testSetWithCrazyWhitespaceAndBOMs() throws Exception {\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\tUTF-8\\n\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\t UTF-8\\n\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\n\".getBytes(StandardCharsets.UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\r\\n\".getBytes(StandardCharsets.UTF_8))));\n  }\n\n","sourceOld":"  public void testSetWithCrazyWhitespaceAndBOMs() throws Exception {\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\tUTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"SET\\t UTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n    assertEquals(\"UTF-8\", Dictionary.getDictionaryEncoding(new ByteArrayInputStream(\"\\uFEFFSET\\tUTF-8\\r\\n\".getBytes(IOUtils.CHARSET_UTF_8))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d2676f60312754dc25ef542551cb2623527013a4","7d89d7e4e5101347833eea558851bf4209218619"],"d2676f60312754dc25ef542551cb2623527013a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2676f60312754dc25ef542551cb2623527013a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d89d7e4e5101347833eea558851bf4209218619":["d2676f60312754dc25ef542551cb2623527013a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d2676f60312754dc25ef542551cb2623527013a4":["5eb2511ababf862ea11e10761c70ee560cd84510","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","7d89d7e4e5101347833eea558851bf4209218619"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2676f60312754dc25ef542551cb2623527013a4","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}