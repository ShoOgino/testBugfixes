{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/SimpleGeoPolygonRelationshipsTest#testGeoSimplePolygonWithCircle().mjava","commits":[{"id":"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705","date":1501767131,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/SimpleGeoPolygonRelationshipsTest#testGeoSimplePolygonWithCircle().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGeoSimplePolygonWithCircle() {\n    //POLYGON ((19.845091 -60.452631, 20.119948 -61.655652, 23.207901 -61.453298, 22.820804 -60.257713, 19.845091 -60.452631)) disjoint\n    GeoPolygon originalConvexPol = buildConvexGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoPolygon originalConcavePol = buildConcaveGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoPolygon originalComplexPol = buildComplexGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoCircle outCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.toRadians(-70), Math.toRadians(23), Math.toRadians(1));\n    int rel = originalConvexPol.getRelationship(outCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n    rel = originalConcavePol.getRelationship(outCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n    rel = originalComplexPol.getRelationship(outCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n\n    GeoCircle overlapCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.toRadians(-61.5), Math.toRadians(20), Math.toRadians(1));\n    rel = originalConvexPol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalConcavePol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalComplexPol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n\n    GeoCircle inCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.toRadians(-61), Math.toRadians(21), Math.toRadians(0.1));\n    rel = originalConvexPol.getRelationship(inCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n    rel = originalConcavePol.getRelationship(inCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n    rel = originalComplexPol.getRelationship(inCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n\n    GeoCircle onCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.toRadians(-61), Math.toRadians(21), Math.toRadians(10.));\n    rel = originalConvexPol.getRelationship(onCircle);\n    assertEquals(GeoArea.CONTAINS, rel);\n    rel = originalConcavePol.getRelationship(onCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalComplexPol.getRelationship(onCircle);\n    assertEquals(GeoArea.CONTAINS, rel);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cf5416daa86f8b76735f3f885d396a70943f9be","date":1501795780,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/SimpleGeoPolygonRelationshipsTest#testGeoSimplePolygonWithCircle().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/SimpleGeoPolygonRelationshipsTest#testGeoSimplePolygonWithCircle().mjava","sourceNew":"  @Test\n  public void testGeoSimplePolygonWithCircle() {\n    //POLYGON ((19.845091 -60.452631, 20.119948 -61.655652, 23.207901 -61.453298, 22.820804 -60.257713, 19.845091 -60.452631)) disjoint\n    GeoPolygon originalConvexPol = buildConvexGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoPolygon originalConcavePol = buildConcaveGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoPolygon originalComplexPol = buildComplexGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoCircle outCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-70), Geo3DUtil.fromDegrees(23), Geo3DUtil.fromDegrees(1));\n    int rel = originalConvexPol.getRelationship(outCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n    rel = originalConcavePol.getRelationship(outCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n    rel = originalComplexPol.getRelationship(outCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n\n    GeoCircle overlapCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-61.5), Geo3DUtil.fromDegrees(20), Geo3DUtil.fromDegrees(1));\n    rel = originalConvexPol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalConcavePol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalComplexPol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n\n    GeoCircle inCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-61), Geo3DUtil.fromDegrees(21), Geo3DUtil.fromDegrees(0.1));\n    rel = originalConvexPol.getRelationship(inCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n    rel = originalConcavePol.getRelationship(inCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n    rel = originalComplexPol.getRelationship(inCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n\n    GeoCircle onCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-61), Geo3DUtil.fromDegrees(21), Geo3DUtil.fromDegrees(10.));\n    rel = originalConvexPol.getRelationship(onCircle);\n    assertEquals(GeoArea.CONTAINS, rel);\n    rel = originalConcavePol.getRelationship(onCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalComplexPol.getRelationship(onCircle);\n    assertEquals(GeoArea.CONTAINS, rel);\n  }\n\n","sourceOld":"  @Test\n  public void testGeoSimplePolygonWithCircle() {\n    //POLYGON ((19.845091 -60.452631, 20.119948 -61.655652, 23.207901 -61.453298, 22.820804 -60.257713, 19.845091 -60.452631)) disjoint\n    GeoPolygon originalConvexPol = buildConvexGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoPolygon originalConcavePol = buildConcaveGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoPolygon originalComplexPol = buildComplexGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoCircle outCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.toRadians(-70), Math.toRadians(23), Math.toRadians(1));\n    int rel = originalConvexPol.getRelationship(outCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n    rel = originalConcavePol.getRelationship(outCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n    rel = originalComplexPol.getRelationship(outCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n\n    GeoCircle overlapCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.toRadians(-61.5), Math.toRadians(20), Math.toRadians(1));\n    rel = originalConvexPol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalConcavePol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalComplexPol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n\n    GeoCircle inCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.toRadians(-61), Math.toRadians(21), Math.toRadians(0.1));\n    rel = originalConvexPol.getRelationship(inCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n    rel = originalConcavePol.getRelationship(inCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n    rel = originalComplexPol.getRelationship(inCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n\n    GeoCircle onCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Math.toRadians(-61), Math.toRadians(21), Math.toRadians(10.));\n    rel = originalConvexPol.getRelationship(onCircle);\n    assertEquals(GeoArea.CONTAINS, rel);\n    rel = originalConcavePol.getRelationship(onCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalComplexPol.getRelationship(onCircle);\n    assertEquals(GeoArea.CONTAINS, rel);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/SimpleGeoPolygonRelationshipsTest#testGeoSimplePolygonWithCircle().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGeoSimplePolygonWithCircle() {\n    //POLYGON ((19.845091 -60.452631, 20.119948 -61.655652, 23.207901 -61.453298, 22.820804 -60.257713, 19.845091 -60.452631)) disjoint\n    GeoPolygon originalConvexPol = buildConvexGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoPolygon originalConcavePol = buildConcaveGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoPolygon originalComplexPol = buildComplexGeoPolygon(19.84509, -60.452631,\n        20.119948, -61.655652,\n        23.207901, -61.453298,\n        22.820804, -60.257713);\n\n    GeoCircle outCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-70), Geo3DUtil.fromDegrees(23), Geo3DUtil.fromDegrees(1));\n    int rel = originalConvexPol.getRelationship(outCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n    rel = originalConcavePol.getRelationship(outCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n    rel = originalComplexPol.getRelationship(outCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n\n    GeoCircle overlapCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-61.5), Geo3DUtil.fromDegrees(20), Geo3DUtil.fromDegrees(1));\n    rel = originalConvexPol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalConcavePol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalComplexPol.getRelationship(overlapCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n\n    GeoCircle inCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-61), Geo3DUtil.fromDegrees(21), Geo3DUtil.fromDegrees(0.1));\n    rel = originalConvexPol.getRelationship(inCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n    rel = originalConcavePol.getRelationship(inCircle);\n    assertEquals(GeoArea.DISJOINT, rel);\n    rel = originalComplexPol.getRelationship(inCircle);\n    assertEquals(GeoArea.WITHIN, rel);\n\n    GeoCircle onCircle = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-61), Geo3DUtil.fromDegrees(21), Geo3DUtil.fromDegrees(10.));\n    rel = originalConvexPol.getRelationship(onCircle);\n    assertEquals(GeoArea.CONTAINS, rel);\n    rel = originalConcavePol.getRelationship(onCircle);\n    assertEquals(GeoArea.OVERLAPS, rel);\n    rel = originalComplexPol.getRelationship(onCircle);\n    assertEquals(GeoArea.CONTAINS, rel);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2cf5416daa86f8b76735f3f885d396a70943f9be":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2cf5416daa86f8b76735f3f885d396a70943f9be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2cf5416daa86f8b76735f3f885d396a70943f9be"]},"commit2Childs":{"2cf5416daa86f8b76735f3f885d396a70943f9be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["2cf5416daa86f8b76735f3f885d396a70943f9be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}