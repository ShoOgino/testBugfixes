{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","commits":[{"id":"bd6ddfc8e622041c356ebd25ea5530e8f86b1132","date":1380207591,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n      BinaryDocValues values = ar.getBinaryDocValues(\"field\");\n      BytesRef result = new BytesRef();\n      for(int j=0;j<5;j++) {\n        values.get(0, result);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      ar.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","sourceNew":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.shutdown();\n\n      AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n      BinaryDocValues values = ar.getBinaryDocValues(\"field\");\n      BytesRef result = new BytesRef();\n      for(int j=0;j<5;j++) {\n        values.get(0, result);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      ar.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n      BinaryDocValues values = ar.getBinaryDocValues(\"field\");\n      BytesRef result = new BytesRef();\n      for(int j=0;j<5;j++) {\n        values.get(0, result);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      ar.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","sourceNew":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.shutdown();\n\n      AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n      BinaryDocValues values = ar.getBinaryDocValues(\"field\");\n      for(int j=0;j<5;j++) {\n        BytesRef result = values.get(0);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      ar.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.shutdown();\n\n      AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n      BinaryDocValues values = ar.getBinaryDocValues(\"field\");\n      BytesRef result = new BytesRef();\n      for(int j=0;j<5;j++) {\n        values.get(0, result);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      ar.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","sourceNew":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n      BinaryDocValues values = ar.getBinaryDocValues(\"field\");\n      for(int j=0;j<5;j++) {\n        BytesRef result = values.get(0);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      ar.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.shutdown();\n\n      AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n      BinaryDocValues values = ar.getBinaryDocValues(\"field\");\n      for(int j=0;j<5;j++) {\n        BytesRef result = values.get(0);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      ar.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","sourceNew":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      LeafReader ar = SlowCompositeReaderWrapper.wrap(r);\n      BinaryDocValues values = ar.getBinaryDocValues(\"field\");\n      for(int j=0;j<5;j++) {\n        BytesRef result = values.get(0);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      ar.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      AtomicReader ar = SlowCompositeReaderWrapper.wrap(r);\n      BinaryDocValues values = ar.getBinaryDocValues(\"field\");\n      for(int j=0;j<5;j++) {\n        BytesRef result = values.get(0);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      ar.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","sourceNew":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      BinaryDocValues values = MultiDocValues.getBinaryValues(r, \"field\");\n      for(int j=0;j<5;j++) {\n        BytesRef result = values.get(0);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      LeafReader ar = SlowCompositeReaderWrapper.wrap(r);\n      BinaryDocValues values = ar.getBinaryDocValues(\"field\");\n      for(int j=0;j<5;j++) {\n        BytesRef result = values.get(0);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      ar.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","bd6ddfc8e622041c356ebd25ea5530e8f86b1132"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","sourceNew":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      BinaryDocValues values = MultiDocValues.getBinaryValues(r, \"field\");\n      for(int j=0;j<5;j++) {\n        assertEquals(j, values.nextDoc());\n        BytesRef result = values.binaryValue();\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      BinaryDocValues values = MultiDocValues.getBinaryValues(r, \"field\");\n      for(int j=0;j<5;j++) {\n        BytesRef result = values.get(0);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","sourceNew":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      BinaryDocValues values = MultiDocValues.getBinaryValues(r, \"field\");\n      for(int j=0;j<5;j++) {\n        assertEquals(j, values.nextDoc());\n        BytesRef result = values.binaryValue();\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      BinaryDocValues values = MultiDocValues.getBinaryValues(r, \"field\");\n      for(int j=0;j<5;j++) {\n        BytesRef result = values.get(0);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testEmptyBinaryValueOnPageSizes().mjava","sourceNew":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      BinaryDocValues values = MultiDocValues.getBinaryValues(r, \"field\");\n      for(int j=0;j<5;j++) {\n        assertEquals(j, values.nextDoc());\n        BytesRef result = values.binaryValue();\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-5218\n  public void testEmptyBinaryValueOnPageSizes() throws Exception {\n    // Test larger and larger power-of-two sized values,\n    // followed by empty string value:\n    for(int i=0;i<20;i++) {\n      if (i > 14 && codecAcceptsHugeBinaryValues(\"field\") == false) {\n        break;\n      }\n      Directory dir = newDirectory();\n      RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n      BytesRef bytes = new BytesRef();\n      bytes.bytes = new byte[1<<i];\n      bytes.length = 1<<i;\n      for(int j=0;j<4;j++) {\n        Document doc = new Document();\n        doc.add(new BinaryDocValuesField(\"field\", bytes));\n        w.addDocument(doc);\n      }\n      Document doc = new Document();\n      doc.add(new StoredField(\"id\", \"5\"));\n      doc.add(new BinaryDocValuesField(\"field\", new BytesRef()));\n      w.addDocument(doc);\n      IndexReader r = w.getReader();\n      w.close();\n\n      BinaryDocValues values = MultiDocValues.getBinaryValues(r, \"field\");\n      for(int j=0;j<5;j++) {\n        BytesRef result = values.get(0);\n        assertTrue(result.length == 0 || result.length == 1<<i);\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bd6ddfc8e622041c356ebd25ea5530e8f86b1132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["bd6ddfc8e622041c356ebd25ea5530e8f86b1132"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bd6ddfc8e622041c356ebd25ea5530e8f86b1132":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd6ddfc8e622041c356ebd25ea5530e8f86b1132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}