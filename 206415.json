{"path":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestCustomSeparatorBreakIterator#testBreakOnCustomSeparator().mjava","commits":[{"id":"ee117f8569fdc90c1335087fe14e0b691f879289","date":1432757377,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestCustomSeparatorBreakIterator#testBreakOnCustomSeparator().mjava","pathOld":"/dev/null","sourceNew":"  public void testBreakOnCustomSeparator() throws Exception {\n    Character separator = randomSeparator();\n    BreakIterator bi = new CustomSeparatorBreakIterator(separator);\n    String source = \"this\" + separator + \"is\" + separator + \"the\" + separator + \"first\" + separator + \"sentence\";\n    bi.setText(source);\n    assertThat(bi.current(), equalTo(0));\n    assertThat(bi.first(), equalTo(0));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"this\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"is\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"the\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"first\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"sentence\"));\n    assertThat(bi.next(), equalTo(BreakIterator.DONE));\n\n    assertThat(bi.last(), equalTo(source.length()));\n    int current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"sentence\"));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"first\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"the\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"is\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"this\" + separator));\n    assertThat(bi.previous(), equalTo(BreakIterator.DONE));\n    assertThat(bi.current(), equalTo(0));\n\n    assertThat(source.substring(0, bi.following(9)), equalTo(\"this\" + separator + \"is\" + separator + \"the\" + separator));\n\n    assertThat(source.substring(0, bi.preceding(9)), equalTo(\"this\" + separator + \"is\" + separator));\n\n    assertThat(bi.first(), equalTo(0));\n    assertThat(source.substring(0, bi.next(3)), equalTo(\"this\" + separator + \"is\" + separator + \"the\" + separator));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2507f0948c6e908135f1ea7f8e1f9af031b65483","date":1495573983,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestCustomSeparatorBreakIterator#testBreakOnCustomSeparator().mjava","sourceNew":null,"sourceOld":"  public void testBreakOnCustomSeparator() throws Exception {\n    Character separator = randomSeparator();\n    BreakIterator bi = new CustomSeparatorBreakIterator(separator);\n    String source = \"this\" + separator + \"is\" + separator + \"the\" + separator + \"first\" + separator + \"sentence\";\n    bi.setText(source);\n    assertThat(bi.current(), equalTo(0));\n    assertThat(bi.first(), equalTo(0));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"this\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"is\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"the\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"first\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"sentence\"));\n    assertThat(bi.next(), equalTo(BreakIterator.DONE));\n\n    assertThat(bi.last(), equalTo(source.length()));\n    int current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"sentence\"));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"first\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"the\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"is\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"this\" + separator));\n    assertThat(bi.previous(), equalTo(BreakIterator.DONE));\n    assertThat(bi.current(), equalTo(0));\n\n    assertThat(source.substring(0, bi.following(9)), equalTo(\"this\" + separator + \"is\" + separator + \"the\" + separator));\n\n    assertThat(source.substring(0, bi.preceding(9)), equalTo(\"this\" + separator + \"is\" + separator));\n\n    assertThat(bi.first(), equalTo(0));\n    assertThat(source.substring(0, bi.next(3)), equalTo(\"this\" + separator + \"is\" + separator + \"the\" + separator));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestCustomSeparatorBreakIterator#testBreakOnCustomSeparator().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestCustomSeparatorBreakIterator#testBreakOnCustomSeparator().mjava","sourceNew":"  public void testBreakOnCustomSeparator() throws Exception {\n    Character separator = randomSeparator();\n    BreakIterator bi = new CustomSeparatorBreakIterator(separator);\n    String source = \"this\" + separator + \"is\" + separator + \"the\" + separator + \"first\" + separator + \"sentence\";\n    bi.setText(source);\n    assertThat(bi.current(), equalTo(0));\n    assertThat(bi.first(), equalTo(0));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"this\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"is\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"the\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"first\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"sentence\"));\n    assertThat(bi.next(), equalTo(BreakIterator.DONE));\n\n    assertThat(bi.last(), equalTo(source.length()));\n    int current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"sentence\"));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"first\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"the\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"is\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"this\" + separator));\n    assertThat(bi.previous(), equalTo(BreakIterator.DONE));\n    assertThat(bi.current(), equalTo(0));\n\n    assertThat(source.substring(0, bi.following(9)), equalTo(\"this\" + separator + \"is\" + separator + \"the\" + separator));\n\n    assertThat(source.substring(0, bi.preceding(9)), equalTo(\"this\" + separator + \"is\" + separator));\n\n    assertThat(bi.first(), equalTo(0));\n    assertThat(source.substring(0, bi.next(3)), equalTo(\"this\" + separator + \"is\" + separator + \"the\" + separator));\n  }\n\n","sourceOld":"  public void testBreakOnCustomSeparator() throws Exception {\n    Character separator = randomSeparator();\n    BreakIterator bi = new CustomSeparatorBreakIterator(separator);\n    String source = \"this\" + separator + \"is\" + separator + \"the\" + separator + \"first\" + separator + \"sentence\";\n    bi.setText(source);\n    assertThat(bi.current(), equalTo(0));\n    assertThat(bi.first(), equalTo(0));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"this\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"is\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"the\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"first\" + separator));\n    assertThat(source.substring(bi.current(), bi.next()), equalTo(\"sentence\"));\n    assertThat(bi.next(), equalTo(BreakIterator.DONE));\n\n    assertThat(bi.last(), equalTo(source.length()));\n    int current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"sentence\"));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"first\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"the\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"is\" + separator));\n    current = bi.current();\n    assertThat(source.substring(bi.previous(), current), equalTo(\"this\" + separator));\n    assertThat(bi.previous(), equalTo(BreakIterator.DONE));\n    assertThat(bi.current(), equalTo(0));\n\n    assertThat(source.substring(0, bi.following(9)), equalTo(\"this\" + separator + \"is\" + separator + \"the\" + separator));\n\n    assertThat(source.substring(0, bi.preceding(9)), equalTo(\"this\" + separator + \"is\" + separator));\n\n    assertThat(bi.first(), equalTo(0));\n    assertThat(source.substring(0, bi.next(3)), equalTo(\"this\" + separator + \"is\" + separator + \"the\" + separator));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["ee117f8569fdc90c1335087fe14e0b691f879289","2507f0948c6e908135f1ea7f8e1f9af031b65483"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2507f0948c6e908135f1ea7f8e1f9af031b65483":["ee117f8569fdc90c1335087fe14e0b691f879289"],"ee117f8569fdc90c1335087fe14e0b691f879289":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2507f0948c6e908135f1ea7f8e1f9af031b65483"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee117f8569fdc90c1335087fe14e0b691f879289"],"2507f0948c6e908135f1ea7f8e1f9af031b65483":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee117f8569fdc90c1335087fe14e0b691f879289":["e9017cf144952056066919f1ebc7897ff9bd71b1","2507f0948c6e908135f1ea7f8e1f9af031b65483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}