{"path":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = null;\n    TermEnum termEnum = null;\n    TermDocs termDocs = null;\n    try {\n      reader = IndexReader.open(dir, false);\n      termCounts = new int[reader.maxDoc()];\n      try {\n        termEnum = reader.terms(new Term(field));\n        try {\n          termDocs = reader.termDocs();\n          do {\n            Term term = termEnum.term();\n            if (term != null && term.field().equals(fieldName)) {\n              termDocs.seek(termEnum.term());\n              while (termDocs.next()) {\n                termCounts[termDocs.doc()] += termDocs.freq();\n              }\n            }\n          } while (termEnum.next());\n        } finally {\n          if (null != termDocs) termDocs.close();\n        }\n      } finally {\n        if (null != termEnum) termEnum.close();\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n    \n    try {\n      reader = IndexReader.open(dir, false); \n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","sourceNew":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n\n      termCounts = new int[reader.maxDoc()];\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      DocsEnum docs = null;\n\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(termsEnum.next() != null) {\n          docs = termsEnum.docs(delDocs, docs);\n          int doc;\n          while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n            termCounts[doc] += docs.freq();\n          }\n        }\n      }\n\n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = null;\n    TermEnum termEnum = null;\n    TermDocs termDocs = null;\n    try {\n      reader = IndexReader.open(dir, false);\n      termCounts = new int[reader.maxDoc()];\n      try {\n        termEnum = reader.terms(new Term(field));\n        try {\n          termDocs = reader.termDocs();\n          do {\n            Term term = termEnum.term();\n            if (term != null && term.field().equals(fieldName)) {\n              termDocs.seek(termEnum.term());\n              while (termDocs.next()) {\n                termCounts[termDocs.doc()] += termDocs.freq();\n              }\n            }\n          } while (termEnum.next());\n        } finally {\n          if (null != termDocs) termDocs.close();\n        }\n      } finally {\n        if (null != termEnum) termEnum.close();\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n    \n    try {\n      reader = IndexReader.open(dir, false); \n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","sourceNew":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n\n      termCounts = new int[reader.maxDoc()];\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      DocsEnum docs = null;\n\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(termsEnum.next() != null) {\n          docs = termsEnum.docs(delDocs, docs);\n          int doc;\n          while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n            termCounts[doc] += docs.freq();\n          }\n        }\n      }\n\n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = null;\n    TermEnum termEnum = null;\n    TermDocs termDocs = null;\n    try {\n      reader = IndexReader.open(dir, false);\n      termCounts = new int[reader.maxDoc()];\n      try {\n        termEnum = reader.terms(new Term(field));\n        try {\n          termDocs = reader.termDocs();\n          do {\n            Term term = termEnum.term();\n            if (term != null && term.field().equals(fieldName)) {\n              termDocs.seek(termEnum.term());\n              while (termDocs.next()) {\n                termCounts[termDocs.doc()] += termDocs.freq();\n              }\n            }\n          } while (termEnum.next());\n        } finally {\n          if (null != termDocs) termDocs.close();\n        }\n      } finally {\n        if (null != termEnum) termEnum.close();\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n    \n    try {\n      reader = IndexReader.open(dir, false); \n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      if (null != reader) reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","sourceNew":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n\n      termCounts = new int[reader.maxDoc()];\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      DocsEnum docs = null;\n\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(termsEnum.next() != null) {\n          docs = termsEnum.docs(delDocs, docs);\n          int doc;\n          while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n            termCounts[doc] += docs.freq();\n          }\n        }\n      }\n\n      for (int d = 0; d < termCounts.length; d++) {\n        if (!delDocs.get(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n\n      termCounts = new int[reader.maxDoc()];\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      DocsEnum docs = null;\n\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(termsEnum.next() != null) {\n          docs = termsEnum.docs(delDocs, docs);\n          int doc;\n          while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n            termCounts[doc] += docs.freq();\n          }\n        }\n      }\n\n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n\n      termCounts = new int[reader.maxDoc()];\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      DocsEnum docs = null;\n\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(termsEnum.next() != null) {\n          docs = termsEnum.docs(delDocs, docs);\n          int doc;\n          while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n            termCounts[doc] += docs.freq();\n          }\n        }\n      }\n\n      for (int d = 0; d < termCounts.length; d++) {\n        if (!delDocs.get(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n\n      termCounts = new int[reader.maxDoc()];\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      DocsEnum docs = null;\n\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(termsEnum.next() != null) {\n          docs = termsEnum.docs(delDocs, docs);\n          int doc;\n          while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n            termCounts[doc] += docs.freq();\n          }\n        }\n      }\n\n      for (int d = 0; d < termCounts.length; d++) {\n        if (!delDocs.get(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/LengthNormModifier#reSetNorms(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Resets the norms for the specified field.\n   *\n   * <p>\n   * Opens a new IndexReader on the Directory given to this instance,\n   * modifies the norms using the Similarity given to this instance,\n   * and closes the IndexReader.\n   * </p>\n   *\n   * @param field the field whose norms should be reset\n   */\n  public void reSetNorms(String field) throws IOException {\n    String fieldName = StringHelper.intern(field);\n    int[] termCounts = new int[0];\n    \n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n\n      termCounts = new int[reader.maxDoc()];\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      DocsEnum docs = null;\n\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator();\n        while(termsEnum.next() != null) {\n          docs = termsEnum.docs(delDocs, docs);\n          int doc;\n          while ((doc = docs.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n            termCounts[doc] += docs.freq();\n          }\n        }\n      }\n\n      for (int d = 0; d < termCounts.length; d++) {\n        if (! reader.isDeleted(d)) {\n          byte norm = Similarity.encodeNorm(sim.lengthNorm(fieldName, termCounts[d]));\n          reader.setNorm(d, fieldName, norm);\n        }\n      }\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","28427ef110c4c5bf5b4057731b83110bd1e13724"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["406e7055a3e99d3fa6ce49a555a51dd18b321806","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["406e7055a3e99d3fa6ce49a555a51dd18b321806"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}