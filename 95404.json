{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","commits":[{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle,BBoxFieldInfo).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get round it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox);\n    Query qIsNonXDL = this.makeXDL(false);\n    Query qIsXDL = this.makeXDL(true);\n    Query qHasEnv = this.makeQuery(new Query[]{qIsNonXDL, qIsXDL}, BooleanClause.Occur.SHOULD);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox, BBoxFieldInfo fieldInfo) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get round it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox, fieldInfo);\n    Query qIsNonXDL = this.makeXDL(false, fieldInfo);\n    Query qIsXDL = this.makeXDL(true, fieldInfo);\n    Query qHasEnv = this.makeQuery(new Query[]{qIsNonXDL, qIsXDL}, BooleanClause.Occur.SHOULD);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get round it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox);\n    Query qIsNonXDL = this.makeXDL(false);\n    Query qIsXDL = this.makeXDL(true);\n    Query qHasEnv = this.makeQuery(new Query[]{qIsNonXDL, qIsXDL}, BooleanClause.Occur.SHOULD);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dfc24eeacea277c182acfad3a446cf9137f791d","date":1403022573,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox);\n    Query qIsNonXDL = this.makeXDL(false);\n    Query qIsXDL = this.makeXDL(true);\n    Query qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get round it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox);\n    Query qIsNonXDL = this.makeXDL(false);\n    Query qIsXDL = this.makeXDL(true);\n    Query qHasEnv = this.makeQuery(new Query[]{qIsNonXDL, qIsXDL}, BooleanClause.Occur.SHOULD);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox);\n    Query qIsNonXDL = this.makeXDL(false);\n    Query qIsXDL = this.makeXDL(true);\n    Query qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get round it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox);\n    Query qIsNonXDL = this.makeXDL(false);\n    Query qIsXDL = this.makeXDL(true);\n    Query qHasEnv = this.makeQuery(new Query[]{qIsNonXDL, qIsXDL}, BooleanClause.Occur.SHOULD);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018","date":1404828935,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qDisjoint = makeDisjoint(bbox);\n    Query qIsNonXDL = this.makeXDL(false);\n    Query qIsXDL = this.makeXDL(true);\n    Query qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery.Builder qNotDisjoint = new BooleanQuery.Builder();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint.build();\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery qNotDisjoint = new BooleanQuery();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery.Builder qNotDisjoint = new BooleanQuery.Builder();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint.build();\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery.Builder qNotDisjoint = new BooleanQuery.Builder();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery.Builder qNotDisjoint = new BooleanQuery.Builder();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint.build();\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery.Builder qNotDisjoint = new BooleanQuery.Builder();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"4dfc24eeacea277c182acfad3a446cf9137f791d":["0415a016b37e58a017fed0a91234f733ab359971"],"af2638813028b254a88b418ebeafb541afb49653":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","112d77ac8d3e10a362516ad834c9a11d35c94234"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["0415a016b37e58a017fed0a91234f733ab359971","4dfc24eeacea277c182acfad3a446cf9137f791d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["4dfc24eeacea277c182acfad3a446cf9137f791d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["4dfc24eeacea277c182acfad3a446cf9137f791d","e57c73924f3b8c19defa62e96bfa34a4922d49c2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"4dfc24eeacea277c182acfad3a446cf9137f791d":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0415a016b37e58a017fed0a91234f733ab359971","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}