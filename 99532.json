{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","commits":[{"id":"edfbc64812ce67598712702d2e4c81bfefccdd57","date":1310457524,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    IndexWriter w = new IndexWriter(target, config);\n    try {\n      w.addIndexes(new DocumentFilteredIndexReader(reader, preserveFilter, negateFilter));\n      success = true;\n    } finally {\n      IOUtils.closeSafely(!success, w);\n    }\n  }\n\n","sourceOld":"  private void createIndex(Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    IndexWriter w = new IndexWriter(target, new IndexWriterConfig(\n        Version.LUCENE_CURRENT, null).setOpenMode(OpenMode.CREATE));\n    try {\n      w.addIndexes(new DocumentFilteredIndexReader(reader, preserveFilter, negateFilter));\n      success = true;\n    } finally {\n      IOUtils.closeSafely(!success, w);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    IndexWriter w = new IndexWriter(target, config);\n    try {\n      w.addIndexes(new DocumentFilteredIndexReader(reader, preserveFilter, negateFilter));\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    IndexWriter w = new IndexWriter(target, config);\n    try {\n      w.addIndexes(new DocumentFilteredIndexReader(reader, preserveFilter, negateFilter));\n      success = true;\n    } finally {\n      IOUtils.closeSafely(!success, w);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a118fcb91dbf1aea61227687b4241d7b136558d","date":1323554852,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n      final IndexReader[] subReaders = new IndexReader[leaves.length];\n      for (int i = 0; i < leaves.length; i++) {\n        subReaders[i] = new DocumentFilteredAtomicIndexReader(leaves[i], preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    IndexWriter w = new IndexWriter(target, config);\n    try {\n      w.addIndexes(new DocumentFilteredIndexReader(reader, preserveFilter, negateFilter));\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n      final IndexReader[] subReaders = new IndexReader[leaves.length];\n      for (int i = 0; i < leaves.length; i++) {\n        subReaders[i] = new DocumentFilteredAtomicIndexReader(leaves[i], preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    IndexWriter w = new IndexWriter(target, config);\n    try {\n      w.addIndexes(new DocumentFilteredIndexReader(reader, preserveFilter, negateFilter));\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","date":1328775259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final AtomicReaderContext[] leaves = reader.getTopReaderContext().leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.length];\n      for (int i = 0; i < leaves.length; i++) {\n        subReaders[i] = new DocumentFilteredAtomicIndexReader(leaves[i], preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n      final IndexReader[] subReaders = new IndexReader[leaves.length];\n      for (int i = 0; i < leaves.length; i++) {\n        subReaders[i] = new DocumentFilteredAtomicIndexReader(leaves[i], preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter#createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean).mjava","sourceNew":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final AtomicReaderContext[] leaves = reader.getTopReaderContext().leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.length];\n      for (int i = 0; i < leaves.length; i++) {\n        subReaders[i] = new DocumentFilteredAtomicIndexReader(leaves[i], preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","sourceOld":"  private void createIndex(IndexWriterConfig config, Directory target, IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n    boolean success = false;\n    final IndexWriter w = new IndexWriter(target, config);\n    try {\n      final AtomicReaderContext[] leaves = reader.getTopReaderContext().leaves();\n      final IndexReader[] subReaders = new IndexReader[leaves.length];\n      for (int i = 0; i < leaves.length; i++) {\n        subReaders[i] = new DocumentFilteredAtomicIndexReader(leaves[i], preserveFilter, negateFilter);\n      }\n      w.addIndexes(subReaders);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(w);\n      } else {\n        IOUtils.closeWhileHandlingException(w);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["edfbc64812ce67598712702d2e4c81bfefccdd57"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"7a118fcb91dbf1aea61227687b4241d7b136558d":["24230fe54121f9be9d85f2c2067536296785e421"],"edfbc64812ce67598712702d2e4c81bfefccdd57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["24230fe54121f9be9d85f2c2067536296785e421","7a118fcb91dbf1aea61227687b4241d7b136558d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["7a118fcb91dbf1aea61227687b4241d7b136558d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7a118fcb91dbf1aea61227687b4241d7b136558d","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"edfbc64812ce67598712702d2e4c81bfefccdd57":["24230fe54121f9be9d85f2c2067536296785e421"],"7a118fcb91dbf1aea61227687b4241d7b136558d":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edfbc64812ce67598712702d2e4c81bfefccdd57"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}