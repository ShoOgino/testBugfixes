{"path":"lucene/core/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   * @deprecated Use {@link DirectoryReader#open(IndexWriter,boolean)}\n   */\n  @Deprecated\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   * @deprecated Use {@link DirectoryReader#open(IndexWriter,boolean)}\n   */\n  @Deprecated\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#open(IndexWriter,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter}.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @return The new IndexReader\n   * @throws CorruptIndexException\n   * @throws IOException if there is a low-level IO error\n   *\n   * @see DirectoryReader#openIfChanged(DirectoryReader,IndexWriter,boolean)\n   *\n   * @lucene.experimental\n   * @deprecated Use {@link DirectoryReader#open(IndexWriter,boolean)}\n   */\n  @Deprecated\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws CorruptIndexException, IOException {\n    return DirectoryReader.open(writer, applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}