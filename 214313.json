{"path":"lucene/src/java/org/apache/lucene/index/SegmentMerger#copyVectorsNoDeletions(TermVectorsWriter,TermVectorsReader,MergeState.IndexReaderAndLiveDocs,int[],int[]).mjava","commits":[{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#copyVectorsNoDeletions(TermVectorsWriter,TermVectorsReader,MergeState.IndexReaderAndLiveDocs,int[],int[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#copyVectorsNoDeletions(TermVectorsWriter,TermVectorsReader,MergeState.IndexReaderAndLiveDocs).mjava","sourceNew":"  private void copyVectorsNoDeletions(final TermVectorsWriter termVectorsWriter,\n                                      final TermVectorsReader matchingVectorsReader,\n                                      final MergeState.IndexReaderAndLiveDocs reader,\n                                      int rawDocLengths[],\n                                      int rawDocLengths2[])\n      throws IOException, MergeAbortedException {\n    final int maxDoc = reader.reader.maxDoc();\n    if (matchingVectorsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      int docCount = 0;\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        matchingVectorsReader.rawDocs(rawDocLengths, rawDocLengths2, docCount, len);\n        termVectorsWriter.addRawDocuments(matchingVectorsReader, rawDocLengths, rawDocLengths2, len);\n        docCount += len;\n        mergeState.checkAbort.work(300 * len);\n      }\n    } else {\n      for (int docNum = 0; docNum < maxDoc; docNum++) {\n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        TermFreqVector[] vectors = reader.reader.getTermFreqVectors(docNum);\n        termVectorsWriter.addAllDocVectors(vectors);\n        mergeState.checkAbort.work(300);\n      }\n    }\n  }\n\n","sourceOld":"  private void copyVectorsNoDeletions(final TermVectorsWriter termVectorsWriter,\n                                      final TermVectorsReader matchingVectorsReader,\n                                      final MergeState.IndexReaderAndLiveDocs reader)\n      throws IOException, MergeAbortedException {\n    final int maxDoc = reader.reader.maxDoc();\n    if (matchingVectorsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      int docCount = 0;\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        matchingVectorsReader.rawDocs(rawDocLengths, rawDocLengths2, docCount, len);\n        termVectorsWriter.addRawDocuments(matchingVectorsReader, rawDocLengths, rawDocLengths2, len);\n        docCount += len;\n        checkAbort.work(300 * len);\n      }\n    } else {\n      for (int docNum = 0; docNum < maxDoc; docNum++) {\n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        TermFreqVector[] vectors = reader.reader.getTermFreqVectors(docNum);\n        termVectorsWriter.addAllDocVectors(vectors);\n        checkAbort.work(300);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultTermVectorsWriter#copyVectorsNoDeletions(MergeState,DefaultTermVectorsReader,MergeState.IndexReaderAndLiveDocs,int[],int[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#copyVectorsNoDeletions(TermVectorsWriter,TermVectorsReader,MergeState.IndexReaderAndLiveDocs,int[],int[]).mjava","sourceNew":"  private int copyVectorsNoDeletions(MergeState mergeState,\n                                      final DefaultTermVectorsReader matchingVectorsReader,\n                                      final MergeState.IndexReaderAndLiveDocs reader,\n                                      int rawDocLengths[],\n                                      int rawDocLengths2[])\n          throws IOException, MergeAbortedException {\n    final int maxDoc = reader.reader.maxDoc();\n    if (matchingVectorsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      int docCount = 0;\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        matchingVectorsReader.rawDocs(rawDocLengths, rawDocLengths2, docCount, len);\n        addRawDocuments(matchingVectorsReader, rawDocLengths, rawDocLengths2, len);\n        docCount += len;\n        mergeState.checkAbort.work(300 * len);\n      }\n    } else {\n      for (int docNum = 0; docNum < maxDoc; docNum++) {\n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        Fields vectors = reader.reader.getTermVectors(docNum);\n        addAllDocVectors(vectors, mergeState.fieldInfos);\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return maxDoc;\n  }\n\n","sourceOld":"  private void copyVectorsNoDeletions(final TermVectorsWriter termVectorsWriter,\n                                      final TermVectorsReader matchingVectorsReader,\n                                      final MergeState.IndexReaderAndLiveDocs reader,\n                                      int rawDocLengths[],\n                                      int rawDocLengths2[])\n      throws IOException, MergeAbortedException {\n    final int maxDoc = reader.reader.maxDoc();\n    if (matchingVectorsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      int docCount = 0;\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        matchingVectorsReader.rawDocs(rawDocLengths, rawDocLengths2, docCount, len);\n        termVectorsWriter.addRawDocuments(matchingVectorsReader, rawDocLengths, rawDocLengths2, len);\n        docCount += len;\n        mergeState.checkAbort.work(300 * len);\n      }\n    } else {\n      for (int docNum = 0; docNum < maxDoc; docNum++) {\n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        TermFreqVector[] vectors = reader.reader.getTermFreqVectors(docNum);\n        termVectorsWriter.addAllDocVectors(vectors);\n        mergeState.checkAbort.work(300);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06584e6e98d592b34e1329b384182f368d2025e8"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}