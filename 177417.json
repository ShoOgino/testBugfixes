{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(adoc(\"id\",\"3\", \"foo_s\",\"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\",\"10\", \"qqq_s\",\"X\"));\n    assertU(adoc(\"id\",\"11\", \"www_s\",\"X\"));\n    assertU(adoc(\"id\",\"12\", \"eee_s\",\"X\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":["7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(adoc(\"id\",\"3\", \"foo_s\",\"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\",\"10\", \"qqq_s\",\"X\"));\n    assertU(adoc(\"id\",\"11\", \"www_s\",\"X\"));\n    assertU(adoc(\"id\",\"12\", \"eee_s\",\"X\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85af36ac27b1cd05e76c9ba0b2161063944753e9","date":1357349397,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(adoc(\"id\",\"3\", \"foo_s\",\"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\",\"10\", \"qqq_s\",\"X\"));\n    assertU(adoc(\"id\",\"11\", \"www_s\",\"X\"));\n    assertU(adoc(\"id\",\"12\", \"eee_s\",\"X\"));\n    assertU(adoc(\"id\",\"13\", \"eee_s\",\"'balance'\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(adoc(\"id\",\"3\", \"foo_s\",\"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\",\"10\", \"qqq_s\",\"X\"));\n    assertU(adoc(\"id\",\"11\", \"www_s\",\"X\"));\n    assertU(adoc(\"id\",\"12\", \"eee_s\",\"X\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":["7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(adoc(\"id\",\"3\", \"foo_s\",\"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\",\"10\", \"qqq_s\",\"X\"));\n    assertU(adoc(\"id\",\"11\", \"www_s\",\"X\"));\n    assertU(adoc(\"id\",\"12\", \"eee_s\",\"X\"));\n    assertU(adoc(\"id\",\"13\", \"eee_s\",\"'balance'\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(adoc(\"id\",\"3\", \"foo_s\",\"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\",\"10\", \"qqq_s\",\"X\"));\n    assertU(adoc(\"id\",\"11\", \"www_s\",\"X\"));\n    assertU(adoc(\"id\",\"12\", \"eee_s\",\"X\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d959d418bddfa46d8eea54f0d8b855165586838","date":1453938797,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(adoc(\"id\",\"3\", \"foo_s\",\"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\",\"10\", \"qqq_s\",\"X\"));\n    assertU(adoc(\"id\",\"11\", \"www_s\",\"X\"));\n    assertU(adoc(\"id\",\"12\", \"eee_s\",\"X\"));\n    assertU(adoc(\"id\",\"13\", \"eee_s\",\"'balance'\"));\n\n    assertU(commit());\n  }\n\n","bugFix":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","3cdb67100dc016748799a77218aa409478372d79","85af36ac27b1cd05e76c9ba0b2161063944753e9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v=\"how now brown cow\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    v=\"now cow\";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    assertU(adoc(\"id\",\"3\", \"foo_s\",\"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\",\"10\", \"qqq_s\",\"X\"));\n    assertU(adoc(\"id\",\"11\", \"www_s\",\"X\"));\n    assertU(adoc(\"id\",\"12\", \"eee_s\",\"X\"));\n    assertU(adoc(\"id\",\"13\", \"eee_s\",\"'balance'\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1728ac6bfc0cea61f3e27436b418295d9982a3","date":1491423806,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n    \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n    \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n\n    { // make a doc that has a value in *lots* of fields that no other doc has\n      SolrInputDocument doc = sdoc(\"id\", \"999\");\n      \n      // numbers...\n      for (String t : Arrays.asList(\"i\", \"l\", \"f\", \"d\")) { \n        for (String s : Arrays.asList(\"\", \"s\", \"_dv\", \"s_dv\", \"_dvo\")) {\n          final String f = \"has_val_\" + t + s;\n          HAS_VAL_FIELDS.add(f);\n          doc.addField(f, \"42\");\n        }\n      }\n      // boolean...\n      HAS_VAL_FIELDS.add(\"has_val_b\");\n      doc.addField(\"has_val_b\", \"false\");\n      // dates (and strings/text -- they don't care about the format)...\n      for (String s : Arrays.asList(\"dt\", \"s\", \"s1\", \"t\")) {\n        final String f = \"has_val_\" + s;\n        HAS_VAL_FIELDS.add(f);\n        doc.addField(f, \"2019-01-12T00:00:00Z\");\n      }\n      assertU(adoc(doc));\n    }\n            \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n    \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n\n    { // make a doc that has a value in *lots* of fields that no other doc has\n      SolrInputDocument doc = sdoc(\"id\", \"999\");\n      \n      // numbers...\n      for (String t : Arrays.asList(\"i\", \"l\", \"f\", \"d\")) { \n        for (String s : Arrays.asList(\"\", \"s\", \"_dv\", \"s_dv\", \"_dvo\")) {\n          final String f = \"has_val_\" + t + s;\n          HAS_VAL_FIELDS.add(f);\n          doc.addField(f, \"42\");\n        }\n      }\n      // boolean...\n      HAS_VAL_FIELDS.add(\"has_val_b\");\n      doc.addField(\"has_val_b\", \"false\");\n      // dates (and strings/text -- they don't care about the format)...\n      for (String s : Arrays.asList(\"dt\", \"s\", \"s1\", \"t\")) {\n        final String f = \"has_val_\" + s;\n        HAS_VAL_FIELDS.add(f);\n        doc.addField(f, \"2019-01-12T00:00:00Z\");\n      }\n      assertU(adoc(doc));\n    }\n            \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n    \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n    \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n\n    { // make a doc that has a value in *lots* of fields that no other doc has\n      SolrInputDocument doc = sdoc(\"id\", \"999\");\n      \n      // numbers...\n      for (String t : Arrays.asList(\"i\", \"l\", \"f\", \"d\")) { \n        for (String s : Arrays.asList(\"\", \"s\", \"_dv\", \"s_dv\", \"_dvo\")) {\n          final String f = \"has_val_\" + t + s;\n          HAS_VAL_FIELDS.add(f);\n          doc.addField(f, \"42\");\n        }\n      }\n      // boolean...\n      HAS_VAL_FIELDS.add(\"has_val_b\");\n      doc.addField(\"has_val_b\", \"false\");\n      // dates (and strings/text -- they don't care about the format)...\n      for (String s : Arrays.asList(\"dt\", \"s\", \"s1\", \"t\")) {\n        final String f = \"has_val_\" + s;\n        HAS_VAL_FIELDS.add(f);\n        doc.addField(f, \"2019-01-12T00:00:00Z\");\n      }\n      assertU(adoc(doc));\n    }\n            \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n    \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n\n    { // make a doc that has a value in *lots* of fields that no other doc has\n      SolrInputDocument doc = sdoc(\"id\", \"999\");\n      \n      // numbers...\n      for (String t : Arrays.asList(\"i\", \"l\", \"f\", \"d\")) { \n        for (String s : Arrays.asList(\"\", \"s\", \"_dv\", \"s_dv\", \"_dvo\")) {\n          final String f = \"has_val_\" + t + s;\n          HAS_VAL_FIELDS.add(f);\n          doc.addField(f, \"42\");\n        }\n      }\n      // boolean...\n      HAS_VAL_FIELDS.add(\"has_val_b\");\n      doc.addField(\"has_val_b\", \"false\");\n      // dates (and strings/text -- they don't care about the format)...\n      for (String s : Arrays.asList(\"dt\", \"s\", \"s1\", \"t\")) {\n        final String f = \"has_val_\" + s;\n        HAS_VAL_FIELDS.add(f);\n        doc.addField(f, \"2019-01-12T00:00:00Z\");\n      }\n      assertU(adoc(doc));\n    }\n            \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#createIndex().mjava","sourceNew":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n\n    { // make a doc that has a value in *lots* of fields that no other doc has\n      SolrInputDocument doc = sdoc(\"id\", \"999\");\n      \n      // numbers...\n      for (String t : Arrays.asList(\"i\", \"l\", \"f\", \"d\")) { \n        for (String s : Arrays.asList(\"\", \"s\", \"_dv\", \"s_dv\", \"_dvo\", \"_norms\")) {\n          final String f = \"has_val_\" + t + s;\n          HAS_VAL_FIELDS.add(f);\n          doc.addField(f, \"42\");\n\n          if (t.equals(\"f\") || t.equals(\"d\")) {\n            String nanField = \"nan_val_\" + t + s;\n            doc.addField(nanField, \"NaN\");\n            HAS_NAN_FIELDS.add(nanField);\n\n            // Add a NaN & non-NaN value for multivalue fields, these should match :* and :[* TO *] equivalently\n            if (s.startsWith(\"s\")) {\n              String bothField = \"both_val_\" + t + s;\n              doc.addField(bothField, \"42\");\n              doc.addField(bothField, \"NaN\");\n              HAS_VAL_FIELDS.add(bothField);\n            }\n          }\n        }\n      }\n      // boolean...booleans\n      for (String s : Arrays.asList(\"\", \"s\", \"_dv\", \"_norms\")) {\n        final String f = \"has_val_b\" + s;\n        HAS_VAL_FIELDS.add(f);\n        doc.addField(f, \"false\");\n      }\n\n      // dates (and strings/text -- they don't care about the format)...\n      for (String s : Arrays.asList(\"dt\", \"s\", \"s1\", \"t\", \"t_on\", \"dt_norms\", \"s_norms\", \"dt_dv\", \"s_dv\")) {\n        final String f = \"has_val_\" + s;\n        HAS_VAL_FIELDS.add(f);\n        doc.addField(f, \"2019-01-12T00:00:00Z\");\n      }\n      assertU(adoc(doc));\n    }\n            \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","sourceOld":"  public static void createIndex() {\n    String v;\n    v = \"how now brown cow\";\n    assertU(adoc(\"id\", \"1\", \"text\", v, \"text_np\", v, \"foo_i\",\"11\"));\n    v = \"now cow\";\n    assertU(adoc(\"id\", \"2\", \"text\", v, \"text_np\", v, \"foo_i\",\"12\"));\n    assertU(adoc(\"id\", \"3\", \"foo_s\", \"a ' \\\" \\\\ {! ) } ( { z\"));  // A value filled with special chars\n\n    assertU(adoc(\"id\", \"10\", \"qqq_s\", \"X\"));\n    assertU(adoc(\"id\", \"11\", \"www_s\", \"X\"));\n    assertU(adoc(\"id\", \"12\", \"eee_s\", \"X\"));\n    assertU(adoc(\"id\", \"13\", \"eee_s\", \"'balance'\", \"rrr_s\", \"/leading_slash\"));\n\n    assertU(adoc(\"id\", \"20\", \"syn\", \"wifi ATM\"));\n    \n    assertU(adoc(\"id\", \"30\", \"shingle23\", \"A B X D E\"));\n\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c03778630c4604270d88c148afb8c7de35b51d3c"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","85af36ac27b1cd05e76c9ba0b2161063944753e9"],"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"85af36ac27b1cd05e76c9ba0b2161063944753e9":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["85af36ac27b1cd05e76c9ba0b2161063944753e9","7d959d418bddfa46d8eea54f0d8b855165586838"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"7d959d418bddfa46d8eea54f0d8b855165586838":["85af36ac27b1cd05e76c9ba0b2161063944753e9"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["0d1728ac6bfc0cea61f3e27436b418295d9982a3","0c81907bd971f786e378654d32b80da32b0e950d"],"c03778630c4604270d88c148afb8c7de35b51d3c":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"e55782fb51a6e9789542818eb2161a3247f39ace":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"0c81907bd971f786e378654d32b80da32b0e950d":["0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"727bb765ff2542275f6d31f67be18d7104bae148":["7d959d418bddfa46d8eea54f0d8b855165586838","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["e55782fb51a6e9789542818eb2161a3247f39ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["7d959d418bddfa46d8eea54f0d8b855165586838"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"85af36ac27b1cd05e76c9ba0b2161063944753e9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1e6acbaae7af722f17204ceccf0f7db5753eccf3","7d959d418bddfa46d8eea54f0d8b855165586838"],"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"3cdb67100dc016748799a77218aa409478372d79":["85af36ac27b1cd05e76c9ba0b2161063944753e9","407687e67faf6e1f02a211ca078d8e3eed631027"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"7d959d418bddfa46d8eea54f0d8b855165586838":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"c03778630c4604270d88c148afb8c7de35b51d3c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"e55782fb51a6e9789542818eb2161a3247f39ace":["0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","0c81907bd971f786e378654d32b80da32b0e950d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1e6acbaae7af722f17204ceccf0f7db5753eccf3","1da93834e39ce341a13e42b611d0a83bd3114bba","727bb765ff2542275f6d31f67be18d7104bae148","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}