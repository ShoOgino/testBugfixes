{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalMatches#wrapMatches(MatchesIterator,int).mjava","commits":[{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalMatches#wrapMatches(MatchesIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  static IntervalIterator wrapMatches(MatchesIterator mi, int doc) {\n    return new IntervalIterator() {\n\n      State state = State.UNPOSITIONED;\n\n      @Override\n      public int start() {\n        assert state == State.ITERATING;\n        return mi.startPosition();\n      }\n\n      @Override\n      public int end() {\n        assert state == State.ITERATING;\n        return mi.endPosition();\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        assert state == State.ITERATING;\n        if (mi.next()) {\n          return mi.startPosition();\n        }\n        return NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public float matchCost() {\n        return 1;\n      }\n\n      @Override\n      public int docID() {\n        switch (state) {\n          case UNPOSITIONED:\n            return -1;\n          case ITERATING:\n            return doc;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int nextDoc() {\n        switch (state) {\n          case UNPOSITIONED:\n            state = State.ITERATING;\n            return doc;\n          case ITERATING:\n            state = State.EXHAUSTED;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int advance(int target) {\n        if (target == doc) {\n          state = State.ITERATING;\n          return doc;\n        }\n        state = State.EXHAUSTED;\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff275d3941a30f2db7c9278444015f412b835254","date":1544435249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalMatches#wrapMatches(MatchesIterator,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalMatches#wrapMatches(MatchesIterator,int).mjava","sourceNew":"  static IntervalIterator wrapMatches(MatchesIterator mi, int doc) {\n    return new IntervalIterator() {\n\n      State state = State.UNPOSITIONED;\n\n      @Override\n      public int start() {\n        assert state == State.ITERATING;\n        return mi.startPosition();\n      }\n\n      @Override\n      public int end() {\n        assert state == State.ITERATING;\n        return mi.endPosition();\n      }\n\n      @Override\n      public int gaps() {\n        assert state == State.ITERATING;\n        if (mi instanceof IntervalMatchesIterator) {\n          return ((IntervalMatchesIterator)mi).gaps();\n        }\n        return 0;\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        assert state == State.ITERATING;\n        if (mi.next()) {\n          return mi.startPosition();\n        }\n        return NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public float matchCost() {\n        return 1;\n      }\n\n      @Override\n      public int docID() {\n        switch (state) {\n          case UNPOSITIONED:\n            return -1;\n          case ITERATING:\n            return doc;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int nextDoc() {\n        switch (state) {\n          case UNPOSITIONED:\n            state = State.ITERATING;\n            return doc;\n          case ITERATING:\n            state = State.EXHAUSTED;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int advance(int target) {\n        if (target == doc) {\n          state = State.ITERATING;\n          return doc;\n        }\n        state = State.EXHAUSTED;\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  static IntervalIterator wrapMatches(MatchesIterator mi, int doc) {\n    return new IntervalIterator() {\n\n      State state = State.UNPOSITIONED;\n\n      @Override\n      public int start() {\n        assert state == State.ITERATING;\n        return mi.startPosition();\n      }\n\n      @Override\n      public int end() {\n        assert state == State.ITERATING;\n        return mi.endPosition();\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        assert state == State.ITERATING;\n        if (mi.next()) {\n          return mi.startPosition();\n        }\n        return NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public float matchCost() {\n        return 1;\n      }\n\n      @Override\n      public int docID() {\n        switch (state) {\n          case UNPOSITIONED:\n            return -1;\n          case ITERATING:\n            return doc;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int nextDoc() {\n        switch (state) {\n          case UNPOSITIONED:\n            state = State.ITERATING;\n            return doc;\n          case ITERATING:\n            state = State.EXHAUSTED;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int advance(int target) {\n        if (target == doc) {\n          state = State.ITERATING;\n          return doc;\n        }\n        state = State.EXHAUSTED;\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalMatches#wrapMatches(MatchesIterator,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalMatches#wrapMatches(MatchesIterator,int).mjava","sourceNew":"  static IntervalIterator wrapMatches(MatchesIterator mi, int doc) {\n    return new IntervalIterator() {\n\n      State state = State.UNPOSITIONED;\n\n      @Override\n      public int start() {\n        assert state == State.ITERATING;\n        return mi.startPosition();\n      }\n\n      @Override\n      public int end() {\n        assert state == State.ITERATING;\n        return mi.endPosition();\n      }\n\n      @Override\n      public int gaps() {\n        assert state == State.ITERATING;\n        if (mi instanceof IntervalMatchesIterator) {\n          return ((IntervalMatchesIterator)mi).gaps();\n        }\n        return 0;\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        assert state == State.ITERATING;\n        if (mi.next()) {\n          return mi.startPosition();\n        }\n        return NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public float matchCost() {\n        return 1;\n      }\n\n      @Override\n      public int docID() {\n        switch (state) {\n          case UNPOSITIONED:\n            return -1;\n          case ITERATING:\n            return doc;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int nextDoc() {\n        switch (state) {\n          case UNPOSITIONED:\n            state = State.ITERATING;\n            return doc;\n          case ITERATING:\n            state = State.EXHAUSTED;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int advance(int target) {\n        if (target == doc) {\n          state = State.ITERATING;\n          return doc;\n        }\n        state = State.EXHAUSTED;\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","sourceOld":"  static IntervalIterator wrapMatches(MatchesIterator mi, int doc) {\n    return new IntervalIterator() {\n\n      State state = State.UNPOSITIONED;\n\n      @Override\n      public int start() {\n        assert state == State.ITERATING;\n        return mi.startPosition();\n      }\n\n      @Override\n      public int end() {\n        assert state == State.ITERATING;\n        return mi.endPosition();\n      }\n\n      @Override\n      public int gaps() {\n        assert state == State.ITERATING;\n        if (mi instanceof IntervalMatchesIterator) {\n          return ((IntervalMatchesIterator)mi).gaps();\n        }\n        return 0;\n      }\n\n      @Override\n      public int nextInterval() throws IOException {\n        assert state == State.ITERATING;\n        if (mi.next()) {\n          return mi.startPosition();\n        }\n        return NO_MORE_INTERVALS;\n      }\n\n      @Override\n      public float matchCost() {\n        return 1;\n      }\n\n      @Override\n      public int docID() {\n        switch (state) {\n          case UNPOSITIONED:\n            return -1;\n          case ITERATING:\n            return doc;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int nextDoc() {\n        switch (state) {\n          case UNPOSITIONED:\n            state = State.ITERATING;\n            return doc;\n          case ITERATING:\n            state = State.EXHAUSTED;\n          case EXHAUSTED:\n        }\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public int advance(int target) {\n        if (target == doc) {\n          state = State.ITERATING;\n          return doc;\n        }\n        state = State.EXHAUSTED;\n        return NO_MORE_DOCS;\n      }\n\n      @Override\n      public long cost() {\n        return 1;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["ff275d3941a30f2db7c9278444015f412b835254"],"ff275d3941a30f2db7c9278444015f412b835254":["2375622520a4e480775e3104a2f9a423536755b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2375622520a4e480775e3104a2f9a423536755b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff275d3941a30f2db7c9278444015f412b835254":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2375622520a4e480775e3104a2f9a423536755b4"],"2375622520a4e480775e3104a2f9a423536755b4":["ff275d3941a30f2db7c9278444015f412b835254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}