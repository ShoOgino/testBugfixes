{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private int sharedPrefix(BytesRef term1, BytesRef term2) {\n      assert term1.offset == 0;\n      assert term2.offset == 0;\n      int pos1 = 0;\n      int pos1End = pos1 + Math.min(term1.length, term2.length);\n      int pos2 = 0;\n      while(pos1 < pos1End) {\n        if (term1.bytes[pos1] != term2.bytes[pos2]) {\n          return pos1;\n        }\n        pos1++;\n        pos2++;\n      }\n      return pos1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1bfe3cedf815c14939d170d53031c88eb5c444","date":1295896578,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private int sharedPrefix(BytesRef term1, BytesRef term2) {\n      assert term1.offset == 0;\n      assert term2.offset == 0;\n      int pos1 = 0;\n      int pos1End = pos1 + Math.min(term1.length, term2.length);\n      int pos2 = 0;\n      while(pos1 < pos1End) {\n        if (term1.bytes[pos1] != term2.bytes[pos2]) {\n          return pos1;\n        }\n        pos1++;\n        pos2++;\n      }\n      return pos1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private int sharedPrefix(BytesRef term1, BytesRef term2) {\n      assert term1.offset == 0;\n      assert term2.offset == 0;\n      int pos1 = 0;\n      int pos1End = pos1 + Math.min(term1.length, term2.length);\n      int pos2 = 0;\n      while(pos1 < pos1End) {\n        if (term1.bytes[pos1] != term2.bytes[pos2]) {\n          return pos1;\n        }\n        pos1++;\n        pos2++;\n      }\n      return pos1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","sourceNew":"    private int sharedPrefix(BytesRef term1, BytesRef term2) {\n      assert term1.offset == 0;\n      assert term2.offset == 0;\n      int pos1 = 0;\n      int pos1End = pos1 + Math.min(term1.length, term2.length);\n      int pos2 = 0;\n      while(pos1 < pos1End) {\n        if (term1.bytes[pos1] != term2.bytes[pos2]) {\n          return pos1;\n        }\n        pos1++;\n        pos2++;\n      }\n      return pos1;\n    }\n\n","sourceOld":"    private int sharedPrefix(BytesRef term1, BytesRef term2) {\n      assert term1.offset == 0;\n      assert term2.offset == 0;\n      int pos1 = 0;\n      int pos1End = pos1 + Math.min(term1.length, term2.length);\n      int pos2 = 0;\n      while(pos1 < pos1End) {\n        if (term1.bytes[pos1] != term2.bytes[pos2]) {\n          return pos1;\n        }\n        pos1++;\n        pos2++;\n      }\n      return pos1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd1bfe3cedf815c14939d170d53031c88eb5c444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"fd1bfe3cedf815c14939d170d53031c88eb5c444":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}