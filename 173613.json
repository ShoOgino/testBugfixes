{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testMultiReaderBeyondLimit().mjava","commits":[{"id":"d6b7c6630218ed9693cdb8643276513f9f0043f4","date":1406648084,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testMultiReaderBeyondLimit().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure MultiReader is upset if you exceed the limit\n  public void testMultiReaderBeyondLimit() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    for (int i = 0; i < 100000; i++) {\n      w.addDocument(doc);\n    }\n    w.shutdown();\n\n    int remainder = IndexWriter.MAX_DOCS % 100000;\n\n    // One too many:\n    remainder++;\n\n    Directory dir2 = newDirectory();\n    w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    for (int i = 0; i < remainder; i++) {\n      w.addDocument(doc);\n    }\n    w.shutdown();\n\n    int copies = IndexWriter.MAX_DOCS / 100000;\n\n    DirectoryReader ir = DirectoryReader.open(dir);\n    DirectoryReader ir2 = DirectoryReader.open(dir2);\n    IndexReader subReaders[] = new IndexReader[copies+1];\n    Arrays.fill(subReaders, ir);\n    subReaders[subReaders.length-1] = ir2;\n\n    try {\n      new MultiReader(subReaders);\n      fail(\"didn't hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testMultiReaderBeyondLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testMultiReaderBeyondLimit().mjava","sourceNew":"  // Make sure MultiReader is upset if you exceed the limit\n  public void testMultiReaderBeyondLimit() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    for (int i = 0; i < 100000; i++) {\n      w.addDocument(doc);\n    }\n    w.close();\n\n    int remainder = IndexWriter.MAX_DOCS % 100000;\n\n    // One too many:\n    remainder++;\n\n    Directory dir2 = newDirectory();\n    w = new IndexWriter(dir2, new IndexWriterConfig(null));\n    for (int i = 0; i < remainder; i++) {\n      w.addDocument(doc);\n    }\n    w.close();\n\n    int copies = IndexWriter.MAX_DOCS / 100000;\n\n    DirectoryReader ir = DirectoryReader.open(dir);\n    DirectoryReader ir2 = DirectoryReader.open(dir2);\n    IndexReader subReaders[] = new IndexReader[copies+1];\n    Arrays.fill(subReaders, ir);\n    subReaders[subReaders.length-1] = ir2;\n\n    try {\n      new MultiReader(subReaders);\n      fail(\"didn't hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // Make sure MultiReader is upset if you exceed the limit\n  public void testMultiReaderBeyondLimit() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    for (int i = 0; i < 100000; i++) {\n      w.addDocument(doc);\n    }\n    w.shutdown();\n\n    int remainder = IndexWriter.MAX_DOCS % 100000;\n\n    // One too many:\n    remainder++;\n\n    Directory dir2 = newDirectory();\n    w = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    for (int i = 0; i < remainder; i++) {\n      w.addDocument(doc);\n    }\n    w.shutdown();\n\n    int copies = IndexWriter.MAX_DOCS / 100000;\n\n    DirectoryReader ir = DirectoryReader.open(dir);\n    DirectoryReader ir2 = DirectoryReader.open(dir2);\n    IndexReader subReaders[] = new IndexReader[copies+1];\n    Arrays.fill(subReaders, ir);\n    subReaders[subReaders.length-1] = ir2;\n\n    try {\n      new MultiReader(subReaders);\n      fail(\"didn't hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testMultiReaderBeyondLimit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMaxDocs#testMultiReaderBeyondLimit().mjava","sourceNew":"  // Make sure MultiReader is upset if you exceed the limit\n  public void testMultiReaderBeyondLimit() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    for (int i = 0; i < 100000; i++) {\n      w.addDocument(doc);\n    }\n    w.close();\n\n    int remainder = IndexWriter.MAX_DOCS % 100000;\n\n    // One too many:\n    remainder++;\n\n    Directory dir2 = newDirectory();\n    w = new IndexWriter(dir2, new IndexWriterConfig(null));\n    for (int i = 0; i < remainder; i++) {\n      w.addDocument(doc);\n    }\n    w.close();\n\n    int copies = IndexWriter.MAX_DOCS / 100000;\n\n    DirectoryReader ir = DirectoryReader.open(dir);\n    DirectoryReader ir2 = DirectoryReader.open(dir2);\n    IndexReader subReaders[] = new IndexReader[copies+1];\n    Arrays.fill(subReaders, ir);\n    subReaders[subReaders.length-1] = ir2;\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new MultiReader(subReaders);\n    });\n\n    ir.close();\n    ir2.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // Make sure MultiReader is upset if you exceed the limit\n  public void testMultiReaderBeyondLimit() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    for (int i = 0; i < 100000; i++) {\n      w.addDocument(doc);\n    }\n    w.close();\n\n    int remainder = IndexWriter.MAX_DOCS % 100000;\n\n    // One too many:\n    remainder++;\n\n    Directory dir2 = newDirectory();\n    w = new IndexWriter(dir2, new IndexWriterConfig(null));\n    for (int i = 0; i < remainder; i++) {\n      w.addDocument(doc);\n    }\n    w.close();\n\n    int copies = IndexWriter.MAX_DOCS / 100000;\n\n    DirectoryReader ir = DirectoryReader.open(dir);\n    DirectoryReader ir2 = DirectoryReader.open(dir2);\n    IndexReader subReaders[] = new IndexReader[copies+1];\n    Arrays.fill(subReaders, ir);\n    subReaders[subReaders.length-1] = ir2;\n\n    try {\n      new MultiReader(subReaders);\n      fail(\"didn't hit exception\");\n    } catch (IllegalArgumentException iae) {\n      // expected\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":["d6b7c6630218ed9693cdb8643276513f9f0043f4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d6b7c6630218ed9693cdb8643276513f9f0043f4"],"d6b7c6630218ed9693cdb8643276513f9f0043f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6b7c6630218ed9693cdb8643276513f9f0043f4"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["05fe562aa248790944d43cdd478f512572835ba0"],"d6b7c6630218ed9693cdb8643276513f9f0043f4":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}