{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30898a79d4bce815d5551a8a22c32e88f1972cb9","date":1298740268,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != -1) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f347b0334e731e40818cae4b797786796ff8becc","date":1304705160,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekFloor().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FSTEnum#doSeekFloor().mjava","sourceNew":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: should we return a status here (SEEK_FOUND / SEEK_NOT_FOUND /\n  // SEEK_END)?  saves the eq check above?\n  /** Seeks to largest term that's <= target. */\n  protected void doSeekFloor() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n    //System.out.println(\"FE: seek floor upto=\" + upto);\n\n    // Save CPU by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n\n    FST.Arc<T> arc = getArc(upto);\n    int targetLabel = getTargetLabel();\n\n    //System.out.println(\"FE: init targetLabel=\" + targetLabel);\n\n    // Now scan forward, matching the new suffix of the target\n    while(true) {\n      //System.out.println(\"  cycle upto=\" + upto + \" arc.label=\" + arc.label + \" (\" + (char) arc.label + \") targetLabel=\" + targetLabel + \" isLast?=\" + arc.isLast());\n\n      if (arc.bytesPerArc != 0 && arc.label != FST.END_LABEL) {\n        // Arcs are fixed array -- use binary search to find\n        // the target.\n\n        final FST<T>.BytesReader in = fst.getBytesReader(0);\n        int low = arc.arcIdx;\n        int high = arc.numArcs-1;\n        int mid = 0;\n        //System.out.println(\"do arc array low=\" + low + \" high=\" + high + \" targetLabel=\" + targetLabel);\n        boolean found = false;\n        while (low <= high) {\n          mid = (low + high) >>> 1;\n          in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n          final int midLabel = fst.readLabel(in);\n          final int cmp = midLabel - targetLabel;\n          //System.out.println(\"  cycle low=\" + low + \" high=\" + high + \" mid=\" + mid + \" midLabel=\" + midLabel + \" cmp=\" + cmp);\n          if (cmp < 0)\n            low = mid + 1;\n          else if (cmp > 0)\n            high = mid - 1;\n          else {\n            found = true;\n            break;\n          }\n        }\n\n        // NOTE: this code is dup'd w/ the code below (in\n        // the outer else clause):\n        if (found) {\n          // Match -- recurse\n          //System.out.println(\"  match!  arcIdx=\" + mid);\n          arc.arcIdx = mid-1;\n          fst.readNextRealArc(arc);\n          assert arc.arcIdx == mid;\n          assert arc.label == targetLabel: \"arc.label=\" + arc.label + \" vs targetLabel=\" + targetLabel + \" mid=\" + mid;\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n          continue;\n        } else if (high == -1) {\n          //System.out.println(\"  before first\");\n          // Very first arc is after our target\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else {\n          // There is a floor arc:\n          arc.arcIdx = (low > high ? high : low)-1;\n          //System.out.println(\" hasFloor arcIdx=\" + (arc.arcIdx+1));\n          fst.readNextRealArc(arc);\n          assert arc.isLast() || fst.readNextArcLabel(arc) > targetLabel;\n          assert arc.label < targetLabel;\n          pushLast();\n          return;\n        }        \n      } else {\n\n        if (arc.label == targetLabel) {\n          // Match -- recurse\n          output[upto] = fst.outputs.add(output[upto-1], arc.output);\n          if (targetLabel == FST.END_LABEL) {\n            return;\n          }\n          setCurrentLabel(arc.label);\n          incr();\n          arc = fst.readFirstTargetArc(arc, getArc(upto));\n          targetLabel = getTargetLabel();\n        } else if (arc.label > targetLabel) {\n          // TODO: if each arc could somehow read the arc just\n          // before, we can save this re-scan.  The ceil case\n          // doesn't need this because it reads the next arc\n          // instead:\n          while(true) {\n            // First, walk backwards until we find a first arc\n            // that's before our target label:\n            fst.readFirstTargetArc(getArc(upto-1), arc);\n            if (arc.label < targetLabel) {\n              // Then, scan forwards to the arc just before\n              // the targetLabel:\n              while(!arc.isLast() && fst.readNextArcLabel(arc) < targetLabel) {\n                fst.readNextArc(arc);\n              }\n              pushLast();\n              return;\n            }\n            upto--;\n            if (upto == 0) {\n              return;\n            }\n            targetLabel = getTargetLabel();\n            arc = getArc(upto);\n          }\n        } else if (!arc.isLast()) {\n          //System.out.println(\"  check next label=\" + fst.readNextArcLabel(arc) + \" (\" + (char) fst.readNextArcLabel(arc) + \")\");\n          if (fst.readNextArcLabel(arc) > targetLabel) {\n            pushLast();\n            return;\n          } else {\n            // keep scanning\n            fst.readNextArc(arc);\n          }\n        } else {\n          pushLast();\n          return;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["f347b0334e731e40818cae4b797786796ff8becc"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","30898a79d4bce815d5551a8a22c32e88f1972cb9"],"f347b0334e731e40818cae4b797786796ff8becc":["30898a79d4bce815d5551a8a22c32e88f1972cb9"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","30898a79d4bce815d5551a8a22c32e88f1972cb9"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["30898a79d4bce815d5551a8a22c32e88f1972cb9","f347b0334e731e40818cae4b797786796ff8becc"],"30898a79d4bce815d5551a8a22c32e88f1972cb9":["56da903869515527852ee21ea7ef7bfe414cd40d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","f347b0334e731e40818cae4b797786796ff8becc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"f347b0334e731e40818cae4b797786796ff8becc":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","30898a79d4bce815d5551a8a22c32e88f1972cb9","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"30898a79d4bce815d5551a8a22c32e88f1972cb9":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f347b0334e731e40818cae4b797786796ff8becc","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}