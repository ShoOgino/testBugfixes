{"path":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"/dev/null","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      refresh(reader, 0, true);\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.addCollectionWatch(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.removeZKWatch(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","4e42079c4c34cc1868518eff79f79ebaeb6d1965","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.updateClusterState();\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.addCollectionWatch(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.removeZKWatch(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      refresh(reader, 0, true);\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.addCollectionWatch(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.removeZKWatch(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.addCollectionWatch(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.removeZKWatch(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.updateClusterState();\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.addCollectionWatch(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.removeZKWatch(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.addCollectionWatch(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.removeZKWatch(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.addCollectionWatch(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.removeZKWatch(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.addCollectionWatch(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.removeZKWatch(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc","date":1464963170,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14ed55f2bfbc6da6c47312889f4946f1ace920e7","date":1465034744,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.addCollectionWatch(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.removeZKWatch(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e42079c4c34cc1868518eff79f79ebaeb6d1965","date":1507883024,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    Path zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    String zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateReaderTest#testExternalCollectionWatchedNotWatched().mjava","sourceNew":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    Path zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0));\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalCollectionWatchedNotWatched() throws Exception{\n    Path zkDir = createTempDir(\"testExternalCollectionWatchedNotWatched\");\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<>(), new HashMap<>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n      writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n      writer.writePendingUpdates();\n      reader.forceUpdateCollection(\"c1\");\n\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.registerCore(\"c1\");\n      assertFalse(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n      reader.unregisterCore(\"c1\");\n      assertTrue(reader.getClusterState().getCollectionRef(\"c1\").isLazilyLoaded());\n\n    } finally {\n      IOUtils.close(reader, zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"14ed55f2bfbc6da6c47312889f4946f1ace920e7":["14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["14ed55f2bfbc6da6c47312889f4946f1ace920e7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"14ed55f2bfbc6da6c47312889f4946f1ace920e7":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc":["14ed55f2bfbc6da6c47312889f4946f1ace920e7"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["4e42079c4c34cc1868518eff79f79ebaeb6d1965","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["14ebce138cd0e2e76c0ab6e22f4e612ace9da0dc"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}