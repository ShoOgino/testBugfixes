{"path":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","commits":[{"id":"0325de99180d346d61d36938843a5c8451fe26ae","date":1447368726,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_ti\", \"10\", \"test_tl\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_ti\", \"10\",\"test_tl\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_ti asc, test_tl desc, id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='7.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='3.0']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_ti asc, test_tl desc, id desc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='3.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_ti desc, test_tl asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='4.0']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_tl desc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='6.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_tl desc, test_ti asc, id asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_tl desc, test_ti asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_tl asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_tl asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_ti sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='4.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_ti asc, test_tl desc, id asc'}\");\n    params.add(\"sort\", \"test_tl asc, id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[3]/float[@name='id'][.='7.0']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_tl asc'}\");\n    params.add(\"sort\", \"test_tl asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='4.0']\",\n            \"//result/doc[2]/float[@name='id'][.='5.0']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_tl asc'}\");\n    params.add(\"sort\", \"test_tl asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='7.0']\",\n            \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ea826cad27aae1c1287b70d2eaf0202ec6aa754","date":1490169633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","sourceNew":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_i asc, test_l desc, id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='7.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='3.0']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i asc, test_l desc, id desc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='3.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i desc, test_l asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='4.0']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_l desc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='6.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_l asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_i sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='4.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_i asc, test_l desc, id asc'}\");\n    params.add(\"sort\", \"test_l asc, id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[3]/float[@name='id'][.='7.0']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='4.0']\",\n            \"//result/doc[2]/float[@name='id'][.='5.0']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='7.0']\",\n            \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n  }\n\n","sourceOld":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_ti\", \"10\", \"test_tl\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_ti\", \"10\",\"test_tl\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_ti asc, test_tl desc, id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='7.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='3.0']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_ti asc, test_tl desc, id desc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='3.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_ti desc, test_tl asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='4.0']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_tl desc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='6.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_tl desc, test_ti asc, id asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_tl desc, test_ti asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_tl asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_tl asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_ti sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='4.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_ti asc, test_tl desc, id asc'}\");\n    params.add(\"sort\", \"test_tl asc, id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[3]/float[@name='id'][.='7.0']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_tl asc'}\");\n    params.add(\"sort\", \"test_tl asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='4.0']\",\n            \"//result/doc[2]/float[@name='id'][.='5.0']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_tl asc'}\");\n    params.add(\"sort\", \"test_tl asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='7.0']\",\n            \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa09e86cb64347ee96ff0a59f09b539abd620e57","date":1490280013,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","sourceNew":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_i asc, test_l desc, id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='7.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='3.0']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i asc, test_l desc, id desc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='3.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i desc, test_l asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='4.0']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_l desc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='6.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_l asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_i sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='4.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_i asc, test_l desc, id asc'}\");\n    params.add(\"sort\", \"test_l asc, id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[3]/float[@name='id'][.='7.0']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='4.0']\",\n            \"//result/doc[2]/float[@name='id'][.='5.0']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='7.0']\",\n            \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n  }\n\n","sourceOld":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_ti\", \"10\", \"test_tl\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_ti\", \"10\",\"test_tl\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_ti asc, test_tl desc, id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='7.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='3.0']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_ti asc, test_tl desc, id desc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='3.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_ti desc, test_tl asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='4.0']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_tl desc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='6.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_tl desc, test_ti asc, id asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_tl desc, test_ti asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_tl asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_tl asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_ti sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='4.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_ti asc, test_tl desc, id asc'}\");\n    params.add(\"sort\", \"test_tl asc, id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[3]/float[@name='id'][.='7.0']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_tl asc'}\");\n    params.add(\"sort\", \"test_tl asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='4.0']\",\n            \"//result/doc[2]/float[@name='id'][.='5.0']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_tl asc'}\");\n    params.add(\"sort\", \"test_tl asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='7.0']\",\n            \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","sourceNew":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_i asc, test_l desc, id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='7']\"\n            ,\"//result/doc[2]/str[@name='id'][.='3']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i asc, test_l desc, id_i desc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='3']\"\n            ,\"//result/doc[2]/str[@name='id'][.='7']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i desc, test_l asc, id_i asc'}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='8']\"\n            ,\"//result/doc[2]/str[@name='id'][.='4']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_l desc'}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='6']\"\n            ,\"//result/doc[2]/str[@name='id'][.='2']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id_i asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='2']\"\n            ,\"//result/doc[2]/str[@name='id'][.='5']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id_i asc'}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='5']\"\n            ,\"//result/doc[2]/str[@name='id'][.='2']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='1']\"\n            ,\"//result/doc[2]/str[@name='id'][.='5']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_l asc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='1']\"\n            ,\"//result/doc[2]/str[@name='id'][.='7']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_i sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='4']\"\n            ,\"//result/doc[2]/str[@name='id'][.='7']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_i asc, test_l desc, id_i asc'}\");\n    params.add(\"sort\", \"test_l asc, id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/str[@name='id'][.='5']\"\n            ,\"//result/doc[2]/str[@name='id'][.='2']\"\n            ,\"//result/doc[3]/str[@name='id'][.='7']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/str[@name='id'][.='4']\",\n            \"//result/doc[2]/str[@name='id'][.='5']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/str[@name='id'][.='7']\",\n            \"//result/doc[2]/str[@name='id'][.='1']\");\n\n  }\n\n","sourceOld":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_i asc, test_l desc, id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='7.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='3.0']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i asc, test_l desc, id desc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='3.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i desc, test_l asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='4.0']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_l desc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='6.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_l asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_i sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='4.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_i asc, test_l desc, id asc'}\");\n    params.add(\"sort\", \"test_l asc, id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[3]/float[@name='id'][.='7.0']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='4.0']\",\n            \"//result/doc[2]/float[@name='id'][.='5.0']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='7.0']\",\n            \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","sourceNew":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_i asc, test_l desc, id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='7']\"\n            ,\"//result/doc[2]/str[@name='id'][.='3']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i asc, test_l desc, id_i desc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='3']\"\n            ,\"//result/doc[2]/str[@name='id'][.='7']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i desc, test_l asc, id_i asc'}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='8']\"\n            ,\"//result/doc[2]/str[@name='id'][.='4']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_l desc'}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='6']\"\n            ,\"//result/doc[2]/str[@name='id'][.='2']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id_i asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='2']\"\n            ,\"//result/doc[2]/str[@name='id'][.='5']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id_i asc'}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='5']\"\n            ,\"//result/doc[2]/str[@name='id'][.='2']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='1']\"\n            ,\"//result/doc[2]/str[@name='id'][.='5']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_l asc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='1']\"\n            ,\"//result/doc[2]/str[@name='id'][.='7']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_i sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='4']\"\n            ,\"//result/doc[2]/str[@name='id'][.='7']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_i asc, test_l desc, id_i asc'}\");\n    params.add(\"sort\", \"test_l asc, id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/str[@name='id'][.='5']\"\n            ,\"//result/doc[2]/str[@name='id'][.='2']\"\n            ,\"//result/doc[3]/str[@name='id'][.='7']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/str[@name='id'][.='4']\",\n            \"//result/doc[2]/str[@name='id'][.='5']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/str[@name='id'][.='7']\",\n            \"//result/doc[2]/str[@name='id'][.='1']\");\n\n  }\n\n","sourceOld":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_i asc, test_l desc, id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='7.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='3.0']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i asc, test_l desc, id desc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='3.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i desc, test_l asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='4.0']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_l desc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='6.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_l asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_i sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='4.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_i asc, test_l desc, id asc'}\");\n    params.add(\"sort\", \"test_l asc, id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[3]/float[@name='id'][.='7.0']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='4.0']\",\n            \"//result/doc[2]/float[@name='id'][.='5.0']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='7.0']\",\n            \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMultiSort().mjava","sourceNew":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_i asc, test_l desc, id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='7']\"\n            ,\"//result/doc[2]/str[@name='id'][.='3']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i asc, test_l desc, id_i desc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='3']\"\n            ,\"//result/doc[2]/str[@name='id'][.='7']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i desc, test_l asc, id_i asc'}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='8']\"\n            ,\"//result/doc[2]/str[@name='id'][.='4']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_l desc'}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='6']\"\n            ,\"//result/doc[2]/str[@name='id'][.='2']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id_i asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='2']\"\n            ,\"//result/doc[2]/str[@name='id'][.='5']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id_i asc'}\");\n    params.add(\"sort\", \"id_i desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='5']\"\n            ,\"//result/doc[2]/str[@name='id'][.='2']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='1']\"\n            ,\"//result/doc[2]/str[@name='id'][.='5']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_l asc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='1']\"\n            ,\"//result/doc[2]/str[@name='id'][.='7']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_i sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/str[@name='id'][.='4']\"\n            ,\"//result/doc[2]/str[@name='id'][.='7']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_i asc, test_l desc, id_i asc'}\");\n    params.add(\"sort\", \"test_l asc, id_i asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/str[@name='id'][.='5']\"\n            ,\"//result/doc[2]/str[@name='id'][.='2']\"\n            ,\"//result/doc[3]/str[@name='id'][.='7']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/str[@name='id'][.='4']\",\n            \"//result/doc[2]/str[@name='id'][.='5']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/str[@name='id'][.='7']\",\n            \"//result/doc[2]/str[@name='id'][.='1']\");\n\n  }\n\n","sourceOld":"  public void testMultiSort() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    ModifiableSolrParams params;\n    \n    // group heads are selected using the same sort that is then applied to the final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort=$sort}\");\n    params.add(\"sort\", \"test_i asc, test_l desc, id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='7.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='3.0']\"\n            );\n    \n    // group heads are selected using a complex sort, simpler sort used for final groups\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i asc, test_l desc, id desc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='3.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // diff up the sort directions, only first clause matters with our data\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_i desc, test_l asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='4.0']\"\n            );\n    \n    // tie broken by index order\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='test_l desc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='6.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n\n    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id asc'}\");\n    params.add(\"sort\", \"score asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:* term_s:YYYY\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id asc'}\");\n    params.add(\"sort\", \"id desc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            );\n    \n    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='5.0']\"\n            );\n\n    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s asc, test_l asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='1.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n\n    // collapse on int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=test_i sort='term_s asc, group_s asc'}\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=2]\"\n            ,\"//result/doc[1]/float[@name='id'][.='4.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n            );\n    \n    // collapse on term_s (very sparse) with nullPolicy=collapse\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=term_s nullPolicy=collapse sort='test_i asc, test_l desc, id asc'}\");\n    params.add(\"sort\", \"test_l asc, id asc\");\n    assertQ(req(params)\n            , \"*[count(//doc)=3]\"\n            ,\"//result/doc[1]/float[@name='id'][.='5.0']\"\n            ,\"//result/doc[2]/float[@name='id'][.='2.0']\"\n            ,\"//result/doc[3]/float[@name='id'][.='7.0']\"\n            );\n    \n    // sort local param + elevation\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"4.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='4.0']\",\n            \"//result/doc[2]/float[@name='id'][.='5.0']\");\n    //\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=group_s sort='term_s desc, test_l asc'}\");\n    params.add(\"sort\", \"test_l asc\");\n    params.add(\"qt\", \"/elevate\");\n    params.add(\"forceElevation\", \"true\");\n    params.add(\"elevateIds\", \"7.0\");\n    assertQ(req(params),\n            \"*[count(//doc)=2]\",\n            \"//result/doc[1]/float[@name='id'][.='7.0']\",\n            \"//result/doc[2]/float[@name='id'][.='1.0']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["5ea826cad27aae1c1287b70d2eaf0202ec6aa754"],"fa09e86cb64347ee96ff0a59f09b539abd620e57":["0325de99180d346d61d36938843a5c8451fe26ae"],"0325de99180d346d61d36938843a5c8451fe26ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["5ea826cad27aae1c1287b70d2eaf0202ec6aa754","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fa09e86cb64347ee96ff0a59f09b539abd620e57","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ea826cad27aae1c1287b70d2eaf0202ec6aa754":["0325de99180d346d61d36938843a5c8451fe26ae"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0325de99180d346d61d36938843a5c8451fe26ae"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"fa09e86cb64347ee96ff0a59f09b539abd620e57":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0325de99180d346d61d36938843a5c8451fe26ae":["fa09e86cb64347ee96ff0a59f09b539abd620e57","5ea826cad27aae1c1287b70d2eaf0202ec6aa754"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"5ea826cad27aae1c1287b70d2eaf0202ec6aa754":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}