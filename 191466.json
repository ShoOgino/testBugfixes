{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d44e38f178539a4cab22ca27c098b653b8bd3d68","date":1327539345,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16877efa27d5de0d19810f4219a84b349f96c4e9","date":1372732777,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    if (isClosed) {\n      log.warn(\"Closed, skipping sync up.\");\n      return false;\n    }\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    if (isClosed) {\n      log.warn(\"Closed, skipping sync up.\");\n      return false;\n    }\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89b56ee224dbe29ee4436d91a7070ca418ffc4fb","date":1383492966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    if (isClosed) {\n      log.warn(\"Closed, skipping sync up.\");\n      return false;\n    }\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    if (isClosed) {\n      log.warn(\"Closed, skipping sync up.\");\n      return false;\n    }\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n    // TODO: look at our state usage of sync\n    // zkController.publish(core, ZkStateReader.SYNC);\n    \n    // solrcloud_debug\n    // System.out.println(\"SYNC UP\");\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"890a7eff437c11ce65940533d6e40746e19afc88","date":1384814005,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    boolean success;\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n      success = syncReplicas(zkController, core, leaderProps);\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    if (isClosed) {\n      log.warn(\"Closed, skipping sync up.\");\n      return false;\n    }\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ef634b7b768e93b832bc8382d91886000d5a816","date":1385780624,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    boolean success;\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n      // wait a second for any floating updates to finish\n      try {\n        Thread.sleep(1500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, e);\n      }\n      success = syncReplicas(zkController, core, leaderProps);\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    boolean success;\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n      success = syncReplicas(zkController, core, leaderProps);\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3a8e79d99866477b7e2b0951ea2e4c397a7e57f","date":1385928947,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    boolean success;\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n\n      success = syncReplicas(zkController, core, leaderProps);\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    boolean success;\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n      // wait a second for any floating updates to finish\n      try {\n        Thread.sleep(1500);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, e);\n      }\n      success = syncReplicas(zkController, core, leaderProps);\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n    return success;\n  }\n\n","bugFix":null,"bugIntro":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    boolean success;\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n\n      success = syncReplicas(zkController, core, leaderProps);\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n    return success;\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    if (isClosed) {\n      log.warn(\"Closed, skipping sync up.\");\n      return false;\n    }\n    log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n\n    if (core.getUpdateHandler().getUpdateLog() == null) {\n      log.error(\"No UpdateLog found - cannot sync\");\n      return false;\n    }\n    boolean success = syncReplicas(zkController, core, leaderProps);\n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26cb11ce089e71fb909641e7030b53c7d9e3fff3","date":1390348343,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps) {\n    return sync(zkController, core, leaderProps, false);\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    if (SKIP_AUTO_RECOVERY) {\n      return true;\n    }\n    boolean success;\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new ModifiableSolrParams());\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n    try {\n      if (isClosed) {\n        log.warn(\"Closed, skipping sync up.\");\n        return false;\n      }\n      log.info(\"Sync replicas to \" + ZkCoreNodeProps.getCoreUrl(leaderProps));\n      \n      if (core.getUpdateHandler().getUpdateLog() == null) {\n        log.error(\"No UpdateLog found - cannot sync\");\n        return false;\n      }\n\n      success = syncReplicas(zkController, core, leaderProps);\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n    return success;\n  }\n\n","bugFix":["d3a8e79d99866477b7e2b0951ea2e4c397a7e57f","890a7eff437c11ce65940533d6e40746e19afc88","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","a6378064655e76cd7b908b1cab4ce425b384b508","16877efa27d5de0d19810f4219a84b349f96c4e9"],"bugIntro":["bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb62cc3362417c3e5136f2f26d34a1072ad633eb","date":1475149102,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public PeerSync.PeerSyncResult sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps) {\n    return sync(zkController, core, leaderProps, false);\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps) {\n    return sync(zkController, core, leaderProps, false);\n  }\n\n","bugFix":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public PeerSync.PeerSyncResult sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps) {\n    return sync(zkController, core, leaderProps, false);\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps) {\n    return sync(zkController, core, leaderProps, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#sync(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  public PeerSync.PeerSyncResult sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps) {\n    return sync(zkController, core, leaderProps, false);\n  }\n\n","sourceOld":"  public boolean sync(ZkController zkController, SolrCore core, ZkNodeProps leaderProps) {\n    return sync(zkController, core, leaderProps, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89b56ee224dbe29ee4436d91a7070ca418ffc4fb":["16877efa27d5de0d19810f4219a84b349f96c4e9"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["d44e38f178539a4cab22ca27c098b653b8bd3d68"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a6378064655e76cd7b908b1cab4ce425b384b508","16877efa27d5de0d19810f4219a84b349f96c4e9"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["d44e38f178539a4cab22ca27c098b653b8bd3d68","221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d44e38f178539a4cab22ca27c098b653b8bd3d68"],"8ef634b7b768e93b832bc8382d91886000d5a816":["890a7eff437c11ce65940533d6e40746e19afc88"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["26cb11ce089e71fb909641e7030b53c7d9e3fff3","bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"16877efa27d5de0d19810f4219a84b349f96c4e9":["a6378064655e76cd7b908b1cab4ce425b384b508"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d44e38f178539a4cab22ca27c098b653b8bd3d68"],"d3a8e79d99866477b7e2b0951ea2e4c397a7e57f":["8ef634b7b768e93b832bc8382d91886000d5a816"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["26cb11ce089e71fb909641e7030b53c7d9e3fff3","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d44e38f178539a4cab22ca27c098b653b8bd3d68":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"890a7eff437c11ce65940533d6e40746e19afc88":["89b56ee224dbe29ee4436d91a7070ca418ffc4fb"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["89b56ee224dbe29ee4436d91a7070ca418ffc4fb","d3a8e79d99866477b7e2b0951ea2e4c397a7e57f"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["d3a8e79d99866477b7e2b0951ea2e4c397a7e57f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"89b56ee224dbe29ee4436d91a7070ca418ffc4fb":["890a7eff437c11ce65940533d6e40746e19afc88","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"8ef634b7b768e93b832bc8382d91886000d5a816":["d3a8e79d99866477b7e2b0951ea2e4c397a7e57f"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","a6378064655e76cd7b908b1cab4ce425b384b508"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16877efa27d5de0d19810f4219a84b349f96c4e9":["89b56ee224dbe29ee4436d91a7070ca418ffc4fb","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"d3a8e79d99866477b7e2b0951ea2e4c397a7e57f":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d44e38f178539a4cab22ca27c098b653b8bd3d68":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fd92b8bcc88e969302510acf77bd6970da3994c4","78a55f24d9b493c2a1cecf79f1d78279062b545b"],"a6378064655e76cd7b908b1cab4ce425b384b508":["37a0f60745e53927c4c876cfe5b5a58170f0646c","16877efa27d5de0d19810f4219a84b349f96c4e9"],"890a7eff437c11ce65940533d6e40746e19afc88":["8ef634b7b768e93b832bc8382d91886000d5a816"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d44e38f178539a4cab22ca27c098b653b8bd3d68"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bb62cc3362417c3e5136f2f26d34a1072ad633eb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fd92b8bcc88e969302510acf77bd6970da3994c4","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","78a55f24d9b493c2a1cecf79f1d78279062b545b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}