{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","sourceNew":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[docs.totalHits];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","sourceOld":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[docs.totalHits];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","sourceNew":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[docs.totalHits];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","sourceOld":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[docs.totalHits];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","sourceNew":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[Math.toIntExact(docs.totalHits)];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","sourceOld":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[docs.totalHits];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","bugFix":["56cb0d38c89b154ab1227808ccd8cac04e4e09d9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","sourceNew":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[Math.toIntExact(docs.totalHits)];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","sourceOld":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[docs.totalHits];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","sourceNew":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[Math.toIntExact(docs.totalHits)];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","sourceOld":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[docs.totalHits];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialExample#assertDocMatchedIds(IndexSearcher,TopDocs,int...).mjava","sourceNew":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    assert docs.totalHits.relation == Relation.EQUAL_TO;\n    int[] gotIds = new int[Math.toIntExact(docs.totalHits.value)];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","sourceOld":"  private void assertDocMatchedIds(IndexSearcher indexSearcher, TopDocs docs, int... ids) throws IOException {\n    int[] gotIds = new int[Math.toIntExact(docs.totalHits)];\n    for (int i = 0; i < gotIds.length; i++) {\n      gotIds[i] = indexSearcher.doc(docs.scoreDocs[i].doc).getField(\"id\").numericValue().intValue();\n    }\n    assertArrayEquals(ids,gotIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["af2638813028b254a88b418ebeafb541afb49653","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["af2638813028b254a88b418ebeafb541afb49653","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}