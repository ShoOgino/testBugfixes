{"path":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],boolean).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],boolean).mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],boolean).mjava","sourceNew":"  private void checkCluster(NamedList<Object> cluster, boolean hasSubclusters) {\n    List<Object> docs = getDocs(cluster);\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      String id = (String) docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List<String> labels = getLabels(cluster);\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List<NamedList<Object>> subclusters = getSubclusters(cluster);\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","sourceOld":"  private void checkCluster(NamedList<Object> cluster, boolean hasSubclusters) {\n    List<Object> docs = getDocs(cluster);\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      String id = (String) docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List<String> labels = getLabels(cluster);\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List<NamedList<Object>> subclusters = getSubclusters(cluster);\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],boolean).mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],boolean).mjava","sourceNew":"  private void checkCluster(NamedList<Object> cluster, boolean hasSubclusters) {\n    List<Object> docs = getDocs(cluster);\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      String id = (String) docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List<String> labels = getLabels(cluster);\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List<NamedList<Object>> subclusters = getSubclusters(cluster);\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","sourceOld":"  private void checkCluster(NamedList<Object> cluster, boolean hasSubclusters) {\n    List<Object> docs = getDocs(cluster);\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      String id = (String) docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List<String> labels = getLabels(cluster);\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List<NamedList<Object>> subclusters = getSubclusters(cluster);\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57123f858a48ace813624f9da70ca12bd803571f","date":1323446440,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],boolean).mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],boolean).mjava","sourceNew":"  private void checkCluster(NamedList<Object> cluster, boolean hasSubclusters) {\n    List<Object> docs = getDocs(cluster);\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      Object id = docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List<String> labels = getLabels(cluster);\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List<NamedList<Object>> subclusters = getSubclusters(cluster);\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","sourceOld":"  private void checkCluster(NamedList<Object> cluster, boolean hasSubclusters) {\n    List<Object> docs = getDocs(cluster);\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      String id = (String) docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List<String> labels = getLabels(cluster);\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List<NamedList<Object>> subclusters = getSubclusters(cluster);\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],boolean).mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkCluster(NamedList[Object],boolean).mjava","sourceNew":"  private void checkCluster(NamedList<Object> cluster, boolean hasSubclusters) {\n    List<Object> docs = getDocs(cluster);\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      Object id = docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List<String> labels = getLabels(cluster);\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List<NamedList<Object>> subclusters = getSubclusters(cluster);\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","sourceOld":"  private void checkCluster(NamedList<Object> cluster, boolean hasSubclusters) {\n    List<Object> docs = getDocs(cluster);\n    assertNotNull(\"docs is null and it shouldn't be\", docs);\n    for (int j = 0; j < docs.size(); j++) {\n      String id = (String) docs.get(j);\n      assertNotNull(\"id is null and it shouldn't be\", id);\n    }\n\n    List<String> labels = getLabels(cluster);\n    assertNotNull(\"labels is null but it shouldn't be\", labels);\n\n    if (hasSubclusters) {\n      List<NamedList<Object>> subclusters = getSubclusters(cluster);\n      assertNotNull(\"subclusters is null but it shouldn't be\", subclusters);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57123f858a48ace813624f9da70ca12bd803571f":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["c26f00b574427b55127e869b935845554afde1fa","57123f858a48ace813624f9da70ca12bd803571f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57123f858a48ace813624f9da70ca12bd803571f"]},"commit2Childs":{"57123f858a48ace813624f9da70ca12bd803571f":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["57123f858a48ace813624f9da70ca12bd803571f","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}