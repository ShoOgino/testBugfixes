{"path":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","pathOld":"/dev/null","sourceNew":"  WANDScorer(Weight weight, Collection<Scorer> scorers) {\n    super(weight);\n\n    this.minCompetitiveScore = 0;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size());\n    // there can be at most num_scorers - 1 scorers beyond the current position\n    tail = new DisiWrapper[scorers.size() - 1];\n\n    OptionalInt scalingFactor = OptionalInt.empty();\n    for (Scorer scorer : scorers) {\n      float maxScore = scorer.maxScore();\n      if (maxScore != 0 && Float.isFinite(maxScore)) {\n        // 0 and +Infty should not impact the scale\n        scalingFactor = OptionalInt.of(Math.min(scalingFactor.orElse(Integer.MAX_VALUE), scalingFactor(maxScore)));\n      }\n    }\n    // Use a scaling factor of 0 if all max scores are either 0 or +Infty\n    this.scalingFactor = scalingFactor.orElse(0);\n    \n    for (Scorer scorer : scorers) {\n      DisiWrapper w = new DisiWrapper(scorer);\n      float maxScore = scorer.maxScore();\n      w.maxScore = scaleMaxScore(maxScore, this.scalingFactor);\n      addLead(w);\n    }\n\n    long cost = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      cost += w.cost;\n    }\n    this.cost = cost;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","pathOld":"/dev/null","sourceNew":"  WANDScorer(Weight weight, Collection<Scorer> scorers) {\n    super(weight);\n\n    this.minCompetitiveScore = 0;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size());\n    // there can be at most num_scorers - 1 scorers beyond the current position\n    tail = new DisiWrapper[scorers.size() - 1];\n\n    OptionalInt scalingFactor = OptionalInt.empty();\n    for (Scorer scorer : scorers) {\n      float maxScore = scorer.maxScore();\n      if (maxScore != 0 && Float.isFinite(maxScore)) {\n        // 0 and +Infty should not impact the scale\n        scalingFactor = OptionalInt.of(Math.min(scalingFactor.orElse(Integer.MAX_VALUE), scalingFactor(maxScore)));\n      }\n    }\n    // Use a scaling factor of 0 if all max scores are either 0 or +Infty\n    this.scalingFactor = scalingFactor.orElse(0);\n    \n    for (Scorer scorer : scorers) {\n      DisiWrapper w = new DisiWrapper(scorer);\n      float maxScore = scorer.maxScore();\n      w.maxScore = scaleMaxScore(maxScore, this.scalingFactor);\n      addLead(w);\n    }\n\n    long cost = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      cost += w.cost;\n    }\n    this.cost = cost;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4874ce841615411ddc4f5998fc9db9a533827976","date":1514294366,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","sourceNew":"  WANDScorer(Weight weight, Collection<Scorer> scorers) {\n    super(weight);\n\n    this.minCompetitiveScore = 0;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size());\n    // there can be at most num_scorers - 1 scorers beyond the current position\n    tail = new DisiWrapper[scorers.size() - 1];\n\n    OptionalInt scalingFactor = OptionalInt.empty();\n    for (Scorer scorer : scorers) {\n      float maxScore = scorer.maxScore();\n      if (maxScore != 0 && Float.isFinite(maxScore)) {\n        // 0 and +Infty should not impact the scale\n        scalingFactor = OptionalInt.of(Math.min(scalingFactor.orElse(Integer.MAX_VALUE), scalingFactor(maxScore)));\n      }\n    }\n    // Use a scaling factor of 0 if all max scores are either 0 or +Infty\n    this.scalingFactor = scalingFactor.orElse(0);\n    \n    double maxScoreSum = 0;\n    for (Scorer scorer : scorers) {\n      DisiWrapper w = new DisiWrapper(scorer);\n      float maxScore = scorer.maxScore();\n      w.maxScore = scaleMaxScore(maxScore, this.scalingFactor);\n      maxScoreSum += maxScore;\n      addLead(w);\n    }\n\n    long cost = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      cost += w.cost;\n    }\n    this.cost = cost;\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    double maxScoreRelativeErrorBound = MathUtil.sumRelativeErrorBound(scorers.size());\n    this.maxScore = (float) ((1.0 + 2 * maxScoreRelativeErrorBound) * maxScoreSum);\n  }\n\n","sourceOld":"  WANDScorer(Weight weight, Collection<Scorer> scorers) {\n    super(weight);\n\n    this.minCompetitiveScore = 0;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size());\n    // there can be at most num_scorers - 1 scorers beyond the current position\n    tail = new DisiWrapper[scorers.size() - 1];\n\n    OptionalInt scalingFactor = OptionalInt.empty();\n    for (Scorer scorer : scorers) {\n      float maxScore = scorer.maxScore();\n      if (maxScore != 0 && Float.isFinite(maxScore)) {\n        // 0 and +Infty should not impact the scale\n        scalingFactor = OptionalInt.of(Math.min(scalingFactor.orElse(Integer.MAX_VALUE), scalingFactor(maxScore)));\n      }\n    }\n    // Use a scaling factor of 0 if all max scores are either 0 or +Infty\n    this.scalingFactor = scalingFactor.orElse(0);\n    \n    for (Scorer scorer : scorers) {\n      DisiWrapper w = new DisiWrapper(scorer);\n      float maxScore = scorer.maxScore();\n      w.maxScore = scaleMaxScore(maxScore, this.scalingFactor);\n      addLead(w);\n    }\n\n    long cost = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      cost += w.cost;\n    }\n    this.cost = cost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c5054bf15748079a041f921a9178e8fe84f1806","date":1514554505,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","sourceNew":"  WANDScorer(Weight weight, Collection<Scorer> scorers) {\n    super(weight);\n\n    this.minCompetitiveScore = 0;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size());\n    // there can be at most num_scorers - 1 scorers beyond the current position\n    tail = new DisiWrapper[scorers.size() - 1];\n\n    OptionalInt scalingFactor = OptionalInt.empty();\n    for (Scorer scorer : scorers) {\n      float maxScore = scorer.maxScore();\n      if (maxScore != 0 && Float.isFinite(maxScore)) {\n        // 0 and +Infty should not impact the scale\n        scalingFactor = OptionalInt.of(Math.min(scalingFactor.orElse(Integer.MAX_VALUE), scalingFactor(maxScore)));\n      }\n    }\n    // Use a scaling factor of 0 if all max scores are either 0 or +Infty\n    this.scalingFactor = scalingFactor.orElse(0);\n    \n    for (Scorer scorer : scorers) {\n      DisiWrapper w = new DisiWrapper(scorer);\n      float maxScore = scorer.maxScore();\n      w.maxScore = scaleMaxScore(maxScore, this.scalingFactor);\n      addLead(w);\n    }\n\n    long cost = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      cost += w.cost;\n    }\n    this.cost = cost;\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorers);\n  }\n\n","sourceOld":"  WANDScorer(Weight weight, Collection<Scorer> scorers) {\n    super(weight);\n\n    this.minCompetitiveScore = 0;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size());\n    // there can be at most num_scorers - 1 scorers beyond the current position\n    tail = new DisiWrapper[scorers.size() - 1];\n\n    OptionalInt scalingFactor = OptionalInt.empty();\n    for (Scorer scorer : scorers) {\n      float maxScore = scorer.maxScore();\n      if (maxScore != 0 && Float.isFinite(maxScore)) {\n        // 0 and +Infty should not impact the scale\n        scalingFactor = OptionalInt.of(Math.min(scalingFactor.orElse(Integer.MAX_VALUE), scalingFactor(maxScore)));\n      }\n    }\n    // Use a scaling factor of 0 if all max scores are either 0 or +Infty\n    this.scalingFactor = scalingFactor.orElse(0);\n    \n    double maxScoreSum = 0;\n    for (Scorer scorer : scorers) {\n      DisiWrapper w = new DisiWrapper(scorer);\n      float maxScore = scorer.maxScore();\n      w.maxScore = scaleMaxScore(maxScore, this.scalingFactor);\n      maxScoreSum += maxScore;\n      addLead(w);\n    }\n\n    long cost = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      cost += w.cost;\n    }\n    this.cost = cost;\n    // The error of sums depends on the order in which values are summed up. In\n    // order to avoid this issue, we compute an upper bound of the value that\n    // the sum may take. If the max relative error is b, then it means that two\n    // sums are always within 2*b of each other.\n    double maxScoreRelativeErrorBound = MathUtil.sumRelativeErrorBound(scorers.size());\n    this.maxScore = (float) ((1.0 + 2 * maxScoreRelativeErrorBound) * maxScoreSum);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","sourceNew":"  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n    super(weight);\n\n    this.minCompetitiveScore = 0;\n    this.doc = -1;\n    this.upTo = -1; // will be computed on the first call to nextDoc/advance\n\n    head = new DisiPriorityQueue(scorers.size());\n    // there can be at most num_scorers - 1 scorers beyond the current position\n    tail = new DisiWrapper[scorers.size()];\n\n    OptionalInt scalingFactor = OptionalInt.empty();\n    for (Scorer scorer : scorers) {\n      float maxScore = scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n      if (maxScore != 0 && Float.isFinite(maxScore)) {\n        // 0 and +Infty should not impact the scale\n        scalingFactor = OptionalInt.of(Math.min(scalingFactor.orElse(Integer.MAX_VALUE), scalingFactor(maxScore)));\n      }\n    }\n    // Use a scaling factor of 0 if all max scores are either 0 or +Infty\n    this.scalingFactor = scalingFactor.orElse(0);\n\n    long cost = 0;\n    for (Scorer scorer : scorers) {\n      DisiWrapper w = new DisiWrapper(scorer);\n      cost += w.cost;\n      addLead(w);\n    }\n    this.cost = cost;\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorers);\n  }\n\n","sourceOld":"  WANDScorer(Weight weight, Collection<Scorer> scorers) {\n    super(weight);\n\n    this.minCompetitiveScore = 0;\n    this.doc = -1;\n\n    head = new DisiPriorityQueue(scorers.size());\n    // there can be at most num_scorers - 1 scorers beyond the current position\n    tail = new DisiWrapper[scorers.size() - 1];\n\n    OptionalInt scalingFactor = OptionalInt.empty();\n    for (Scorer scorer : scorers) {\n      float maxScore = scorer.maxScore();\n      if (maxScore != 0 && Float.isFinite(maxScore)) {\n        // 0 and +Infty should not impact the scale\n        scalingFactor = OptionalInt.of(Math.min(scalingFactor.orElse(Integer.MAX_VALUE), scalingFactor(maxScore)));\n      }\n    }\n    // Use a scaling factor of 0 if all max scores are either 0 or +Infty\n    this.scalingFactor = scalingFactor.orElse(0);\n    \n    for (Scorer scorer : scorers) {\n      DisiWrapper w = new DisiWrapper(scorer);\n      float maxScore = scorer.maxScore();\n      w.maxScore = scaleMaxScore(maxScore, this.scalingFactor);\n      addLead(w);\n    }\n\n    long cost = 0;\n    for (DisiWrapper w = lead; w != null; w = w.next) {\n      cost += w.cost;\n    }\n    this.cost = cost;\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#WANDScorer(Weight,Collection[Scorer]).mjava","sourceNew":"  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n    super(weight);\n\n    this.minCompetitiveScore = 0;\n    this.doc = -1;\n    this.upTo = -1; // will be computed on the first call to nextDoc/advance\n\n    head = new DisiPriorityQueue(scorers.size());\n    // there can be at most num_scorers - 1 scorers beyond the current position\n    tail = new DisiWrapper[scorers.size()];\n\n    OptionalInt scalingFactor = OptionalInt.empty();\n    for (Scorer scorer : scorers) {\n      scorer.advanceShallow(0);\n      float maxScore = scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n      if (maxScore != 0 && Float.isFinite(maxScore)) {\n        // 0 and +Infty should not impact the scale\n        scalingFactor = OptionalInt.of(Math.min(scalingFactor.orElse(Integer.MAX_VALUE), scalingFactor(maxScore)));\n      }\n    }\n    // Use a scaling factor of 0 if all max scores are either 0 or +Infty\n    this.scalingFactor = scalingFactor.orElse(0);\n\n    long cost = 0;\n    for (Scorer scorer : scorers) {\n      DisiWrapper w = new DisiWrapper(scorer);\n      cost += w.cost;\n      addLead(w);\n    }\n    this.cost = cost;\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorers);\n  }\n\n","sourceOld":"  WANDScorer(Weight weight, Collection<Scorer> scorers) throws IOException {\n    super(weight);\n\n    this.minCompetitiveScore = 0;\n    this.doc = -1;\n    this.upTo = -1; // will be computed on the first call to nextDoc/advance\n\n    head = new DisiPriorityQueue(scorers.size());\n    // there can be at most num_scorers - 1 scorers beyond the current position\n    tail = new DisiWrapper[scorers.size()];\n\n    OptionalInt scalingFactor = OptionalInt.empty();\n    for (Scorer scorer : scorers) {\n      float maxScore = scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);\n      if (maxScore != 0 && Float.isFinite(maxScore)) {\n        // 0 and +Infty should not impact the scale\n        scalingFactor = OptionalInt.of(Math.min(scalingFactor.orElse(Integer.MAX_VALUE), scalingFactor(maxScore)));\n      }\n    }\n    // Use a scaling factor of 0 if all max scores are either 0 or +Infty\n    this.scalingFactor = scalingFactor.orElse(0);\n\n    long cost = 0;\n    for (Scorer scorer : scorers) {\n      DisiWrapper w = new DisiWrapper(scorer);\n      cost += w.cost;\n      addLead(w);\n    }\n    this.cost = cost;\n    this.maxScorePropagator = new MaxScoreSumPropagator(scorers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4874ce841615411ddc4f5998fc9db9a533827976":["417142ff08fda9cf0b72d5133e63097a166c6458"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["523cc6563c99a55527ef7993efc5413c6648852d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"523cc6563c99a55527ef7993efc5413c6648852d":["3c5054bf15748079a041f921a9178e8fe84f1806"],"3c5054bf15748079a041f921a9178e8fe84f1806":["4874ce841615411ddc4f5998fc9db9a533827976"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"4874ce841615411ddc4f5998fc9db9a533827976":["3c5054bf15748079a041f921a9178e8fe84f1806"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"3c5054bf15748079a041f921a9178e8fe84f1806":["523cc6563c99a55527ef7993efc5413c6648852d"],"417142ff08fda9cf0b72d5133e63097a166c6458":["4874ce841615411ddc4f5998fc9db9a533827976"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}