{"path":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<Object>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1af881a1691e32ac2275b4008656709aa96e369","date":1404496493,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the highlight content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<Object>()));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(new SimpleOrderedMap(arr)));      \n    }\n  }\n\n","bugFix":["92005ead3266d7b3283282717d5ecffba1594136"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e4e2551cf876382037b76203fc89b89d99b2610","date":1448654485,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the highlight content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            // sdoc maybe null\n            if (sdoc == null) {\n                continue;\n            }\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<Object>()));      \n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the highlight content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<Object>()));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fbf043f7a109d13b86b6fc6fee3953b0c103c24","date":1450713625,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      NamedList.NamedListEntry[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the highlight content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          SolrPluginUtils.copyNamedListIntoArrayByDocPosInResponse(hl, rb.resultIds, arr);\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<>()));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the highlight content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          for (int i=0; i<hl.size(); i++) {\n            String id = hl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(id);\n            // sdoc maybe null\n            if (sdoc == null) {\n                continue;\n            }\n            int idx = sdoc.positionInResponse;\n            arr[idx] = new NamedList.NamedListEntry<>(id, hl.getVal(i));\n          }\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<Object>()));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0","date":1515077688,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      final Object[] objArr = newHighlightsArray(rb.resultIds.size());\n      final String highlightingResponseField = highlightingResponseField();\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the highlight content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          Object hl = srsp.getSolrResponse().getResponse().get(highlightingResponseField);\n          addHighlights(objArr, hl, rb.resultIds);\n        }\n      }\n\n      rb.rsp.add(highlightingResponseField, getAllHighlights(objArr));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      NamedList.NamedListEntry[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the highlight content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          SolrPluginUtils.copyNamedListIntoArrayByDocPosInResponse(hl, rb.resultIds, arr);\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<>()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HighlightComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      final Object[] objArr = newHighlightsArray(rb.resultIds.size());\n      final String highlightingResponseField = highlightingResponseField();\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the highlight content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          Object hl = srsp.getSolrResponse().getResponse().get(highlightingResponseField);\n          addHighlights(objArr, hl, rb.resultIds);\n        }\n      }\n\n      rb.rsp.add(highlightingResponseField, getAllHighlights(objArr));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.doHighlights && rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n\n      NamedList.NamedListEntry[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      // TODO: make a generic routine to do automatic merging of id keyed data\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_HIGHLIGHTS) == 0) continue;\n        for (ShardResponse srsp : sreq.responses) {\n          if (srsp.getException() != null) {\n            // can't expect the highlight content if there was an exception for this request\n            // this should only happen when using shards.tolerant=true\n            continue;\n          }\n          NamedList hl = (NamedList)srsp.getSolrResponse().getResponse().get(\"highlighting\");\n          SolrPluginUtils.copyNamedListIntoArrayByDocPosInResponse(hl, rb.resultIds, arr);\n        }\n      }\n\n      // remove nulls in case not all docs were able to be retrieved\n      rb.rsp.add(\"highlighting\", SolrPluginUtils.removeNulls(arr, new SimpleOrderedMap<>()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"b94236357aaa22b76c10629851fe4e376e0cea82":["6fbf043f7a109d13b86b6fc6fee3953b0c103c24","6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"2e4e2551cf876382037b76203fc89b89d99b2610":["c1af881a1691e32ac2275b4008656709aa96e369"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0":["6fbf043f7a109d13b86b6fc6fee3953b0c103c24"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6fbf043f7a109d13b86b6fc6fee3953b0c103c24":["2e4e2551cf876382037b76203fc89b89d99b2610"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c1af881a1691e32ac2275b4008656709aa96e369":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c1af881a1691e32ac2275b4008656709aa96e369"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2e4e2551cf876382037b76203fc89b89d99b2610":["6fbf043f7a109d13b86b6fc6fee3953b0c103c24"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6fbf043f7a109d13b86b6fc6fee3953b0c103c24":["b94236357aaa22b76c10629851fe4e376e0cea82","6cbfdc8289fa6953689e5d3ee7b8965c9604d6d0"],"c1af881a1691e32ac2275b4008656709aa96e369":["2e4e2551cf876382037b76203fc89b89d99b2610"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}