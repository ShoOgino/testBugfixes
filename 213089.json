{"path":"src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"5947b6265298cdb14a6489a5fbaf8073a1b7203d","date":1199294130,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Add a warning\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Check if they want the file as text\n      final String contentType = req.getParams().get( USE_CONTENT_TYPE );\n      \n      final File file = adminFile;\n      //final URLConnection conn = adminFile.toURI().toURL().openConnection();\n      \n      ContentStream stream = new ContentStream() {\n        public String getName() { return file.getName(); }\n        public Long getSize() { return file.length(); }\n        public String getSourceInfo() { return null; }\n\n        public String getContentType() { \n          if( contentType != null ) {\n            return contentType;\n          }\n          return null; //conn.getContentType(); \n        }\n        \n        public InputStream getStream() throws IOException {\n          return loader.openResource( file.getPath() ); //conn.getInputStream();\n        }\n        \n        public Reader getReader() throws IOException {\n          return new FileReader( file );\n        }\n      };\n      \n      rsp.add( RawResponseWriter.CONTENT, stream );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8221ac2ec1b88c56e0df2282a0d75e7568ae70","date":1207144849,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Add a warning\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Add a warning\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Check if they want the file as text\n      final String contentType = req.getParams().get( USE_CONTENT_TYPE );\n      \n      final File file = adminFile;\n      //final URLConnection conn = adminFile.toURI().toURL().openConnection();\n      \n      ContentStream stream = new ContentStream() {\n        public String getName() { return file.getName(); }\n        public Long getSize() { return file.length(); }\n        public String getSourceInfo() { return null; }\n\n        public String getContentType() { \n          if( contentType != null ) {\n            return contentType;\n          }\n          return null; //conn.getContentType(); \n        }\n        \n        public InputStream getStream() throws IOException {\n          return loader.openResource( file.getPath() ); //conn.getInputStream();\n        }\n        \n        public Reader getReader() throws IOException {\n          return new FileReader( file );\n        }\n      };\n      \n      rsp.add( RawResponseWriter.CONTENT, stream );\n    }\n  }\n\n","bugFix":null,"bugIntro":["488ddee53b8f555fe7c97322cdf3f356d5e49503","488ddee53b8f555fe7c97322cdf3f356d5e49503","488ddee53b8f555fe7c97322cdf3f356d5e49503"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b909e7d84d56c113538485360000872547c3cfd","date":1219961929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Add a warning\n    RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea6404328413e5baef3771fcb95475356c339454","date":1246540822,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    File adminFile = null;\n    \n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() ); \n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase() ) ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname );\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        throw new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname );  \n      }\n      adminFile = new File( configdir, fname );\n    }\n    \n    // Make sure the file exists, is readable and is not a hidden file\n    if( !adminFile.exists() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not find: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    if( !adminFile.canRead() || adminFile.isHidden() ) {\n      throw new SolrException( ErrorCode.BAD_REQUEST, \"Can not show: \"+adminFile.getName() \n          + \" [\"+adminFile.getAbsolutePath()+\"]\" );\n    }\n    \n    // Show a directory listing\n    if( adminFile.isDirectory() ) {\n      \n      int basePath = configdir.getAbsolutePath().length() + 1;\n      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();\n      for( File f : adminFile.listFiles() ) {\n        String path = f.getAbsolutePath().substring( basePath );\n        path = path.replace( '\\\\', '/' ); // normalize slashes\n        if( hiddenFiles.contains( path.toUpperCase() ) ) {\n          continue; // don't show 'hidden' files\n        }\n        if( f.isHidden() || f.getName().startsWith( \".\" ) ) {\n          continue; // skip hidden system files...\n        }\n        \n        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();\n        files.add( path, fileInfo );\n        if( f.isDirectory() ) {\n          fileInfo.add( \"directory\", true ); \n        }\n        else {\n          // TODO? content type\n          fileInfo.add( \"size\", f.length() );\n        }\n        fileInfo.add( \"modified\", new Date( f.lastModified() ) );\n      }\n      rsp.add( \"files\", files );\n    }\n    else {\n      // Include the file contents\n      ContentStreamBase content = new ContentStreamBase.FileStream( adminFile );\n      content.setContentType( req.getParams().get( USE_CONTENT_TYPE ) );\n  \n      rsp.add( RawResponseWriter.CONTENT, content );\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5b8221ac2ec1b88c56e0df2282a0d75e7568ae70":["5947b6265298cdb14a6489a5fbaf8073a1b7203d"],"8b909e7d84d56c113538485360000872547c3cfd":["5b8221ac2ec1b88c56e0df2282a0d75e7568ae70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5947b6265298cdb14a6489a5fbaf8073a1b7203d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["ea6404328413e5baef3771fcb95475356c339454"],"ea6404328413e5baef3771fcb95475356c339454":["8b909e7d84d56c113538485360000872547c3cfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5b8221ac2ec1b88c56e0df2282a0d75e7568ae70":["8b909e7d84d56c113538485360000872547c3cfd"],"8b909e7d84d56c113538485360000872547c3cfd":["ea6404328413e5baef3771fcb95475356c339454"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5947b6265298cdb14a6489a5fbaf8073a1b7203d"],"5947b6265298cdb14a6489a5fbaf8073a1b7203d":["5b8221ac2ec1b88c56e0df2282a0d75e7568ae70"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"ea6404328413e5baef3771fcb95475356c339454":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}