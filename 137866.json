{"path":"solr/core/src/java/org/apache/solr/handler/export/ExportWriterStream#read().mjava","commits":[{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriterStream#read().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Tuple read() throws IOException {\n    Tuple res = null;\n    if (pos < 0) {\n      if (writeOutputTimerContext != null) {\n        writeOutputTimerContext.stop();\n        writeOutputTimerContext = null;\n      }\n      try {\n        buffer.outDocsIndex = ExportBuffers.Buffer.EMPTY;\n        log.debug(\"--- ews exchange empty buffer {}\", buffer);\n        boolean exchanged = false;\n        while (!exchanged) {\n          Timer.Context timerContext = exportBuffers.getWriterWaitTimer().time();\n          try {\n            exportBuffers.exchangeBuffers();\n            exchanged = true;\n          } catch (TimeoutException e) {\n            log.debug(\"--- ews timeout loop\");\n            if (exportBuffers.isShutDown()) {\n              log.debug(\"--- ews - the other end is shutdown, returning EOF\");\n              res = Tuple.EOF();\n              break;\n            }\n            continue;\n          } catch (InterruptedException e) {\n            log.debug(\"--- ews interrupted\");\n            exportBuffers.error(e);\n            res = Tuple.EXCEPTION(e, true);\n            break;\n          } catch (BrokenBarrierException e) {\n            if (exportBuffers.getError() != null) {\n              res = Tuple.EXCEPTION(exportBuffers.getError(), true);\n            } else {\n              res = Tuple.EXCEPTION(e, true);\n            }\n            break;\n          } finally {\n            timerContext.stop();\n          }\n        }\n      } catch (InterruptedException e) {\n        log.debug(\"--- ews interrupt\");\n        exportBuffers.error(e);\n        res = Tuple.EXCEPTION(e, true);\n      } catch (Exception e) {\n        log.debug(\"--- ews exception\", e);\n        exportBuffers.error(e);\n        res = Tuple.EXCEPTION(e, true);\n      }\n      buffer = exportBuffers.getOutputBuffer();\n      if (buffer == null) {\n        res = Tuple.EOF();\n      }\n      if (buffer.outDocsIndex == ExportBuffers.Buffer.NO_MORE_DOCS) {\n        log.debug(\"--- ews EOF\");\n        res = Tuple.EOF();\n      } else {\n        pos = buffer.outDocsIndex;\n        log.debug(\"--- ews new pos=\" + pos);\n      }\n    }\n    if (pos < 0) {\n      log.debug(\"--- ews EOF?\");\n      res = Tuple.EOF();\n    }\n    if (res != null) {\n      // only errors or EOF assigned result so far\n      if (writeOutputTimerContext != null) {\n        writeOutputTimerContext.stop();\n      }\n      return res;\n    }\n    if (writeOutputTimerContext == null) {\n      writeOutputTimerContext = exportBuffers.getWriteOutputBufferTimer().time();\n    }\n    SortDoc sortDoc = buffer.outDocs[pos];\n    tupleEntryWriter.tuple = new Tuple();\n    exportBuffers.exportWriter.writeDoc(sortDoc, exportBuffers.leaves, tupleEntryWriter, exportBuffers.exportWriter.fieldWriters);\n    pos--;\n    return tupleEntryWriter.tuple;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11b8c26c13b294e143adb7359d48c525f7052def","date":1593853283,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriterStream#read().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriterStream#read().mjava","sourceNew":"  @Override\n  public Tuple read() throws IOException {\n    Tuple res = null;\n    if (pos < 0) {\n      if (writeOutputTimerContext != null) {\n        writeOutputTimerContext.stop();\n        writeOutputTimerContext = null;\n      }\n      try {\n        buffer.outDocsIndex = ExportBuffers.Buffer.EMPTY;\n        log.debug(\"--- ews exchange empty buffer {}\", buffer);\n        boolean exchanged = false;\n        while (!exchanged) {\n          Timer.Context timerContext = exportBuffers.getWriterWaitTimer().time();\n          try {\n            exportBuffers.exchangeBuffers();\n            exchanged = true;\n          } catch (TimeoutException e) {\n            log.debug(\"--- ews timeout loop\");\n            if (exportBuffers.isShutDown()) {\n              log.debug(\"--- ews - the other end is shutdown, returning EOF\");\n              res = Tuple.EOF();\n              break;\n            }\n            continue;\n          } catch (InterruptedException e) {\n            log.debug(\"--- ews interrupted\");\n            exportBuffers.error(e);\n            res = Tuple.EXCEPTION(e, true);\n            break;\n          } catch (BrokenBarrierException e) {\n            if (exportBuffers.getError() != null) {\n              res = Tuple.EXCEPTION(exportBuffers.getError(), true);\n            } else {\n              res = Tuple.EXCEPTION(e, true);\n            }\n            break;\n          } finally {\n            timerContext.stop();\n          }\n        }\n      } catch (InterruptedException e) {\n        log.debug(\"--- ews interrupt\");\n        exportBuffers.error(e);\n        res = Tuple.EXCEPTION(e, true);\n      } catch (Exception e) {\n        log.debug(\"--- ews exception\", e);\n        exportBuffers.error(e);\n        res = Tuple.EXCEPTION(e, true);\n      }\n      buffer = exportBuffers.getOutputBuffer();\n      if (buffer == null) {\n        res = Tuple.EOF();\n      }\n      if (buffer.outDocsIndex == ExportBuffers.Buffer.NO_MORE_DOCS) {\n        log.debug(\"--- ews EOF\");\n        res = Tuple.EOF();\n      } else {\n        pos = buffer.outDocsIndex;\n        log.debug(\"--- ews new pos={}\", pos);\n      }\n    }\n    if (pos < 0) {\n      log.debug(\"--- ews EOF?\");\n      res = Tuple.EOF();\n    }\n    if (res != null) {\n      // only errors or EOF assigned result so far\n      if (writeOutputTimerContext != null) {\n        writeOutputTimerContext.stop();\n      }\n      return res;\n    }\n    if (writeOutputTimerContext == null) {\n      writeOutputTimerContext = exportBuffers.getWriteOutputBufferTimer().time();\n    }\n    SortDoc sortDoc = buffer.outDocs[pos];\n    tupleEntryWriter.tuple = new Tuple();\n    exportBuffers.exportWriter.writeDoc(sortDoc, exportBuffers.leaves, tupleEntryWriter, exportBuffers.exportWriter.fieldWriters);\n    pos--;\n    return tupleEntryWriter.tuple;\n  }\n\n","sourceOld":"  @Override\n  public Tuple read() throws IOException {\n    Tuple res = null;\n    if (pos < 0) {\n      if (writeOutputTimerContext != null) {\n        writeOutputTimerContext.stop();\n        writeOutputTimerContext = null;\n      }\n      try {\n        buffer.outDocsIndex = ExportBuffers.Buffer.EMPTY;\n        log.debug(\"--- ews exchange empty buffer {}\", buffer);\n        boolean exchanged = false;\n        while (!exchanged) {\n          Timer.Context timerContext = exportBuffers.getWriterWaitTimer().time();\n          try {\n            exportBuffers.exchangeBuffers();\n            exchanged = true;\n          } catch (TimeoutException e) {\n            log.debug(\"--- ews timeout loop\");\n            if (exportBuffers.isShutDown()) {\n              log.debug(\"--- ews - the other end is shutdown, returning EOF\");\n              res = Tuple.EOF();\n              break;\n            }\n            continue;\n          } catch (InterruptedException e) {\n            log.debug(\"--- ews interrupted\");\n            exportBuffers.error(e);\n            res = Tuple.EXCEPTION(e, true);\n            break;\n          } catch (BrokenBarrierException e) {\n            if (exportBuffers.getError() != null) {\n              res = Tuple.EXCEPTION(exportBuffers.getError(), true);\n            } else {\n              res = Tuple.EXCEPTION(e, true);\n            }\n            break;\n          } finally {\n            timerContext.stop();\n          }\n        }\n      } catch (InterruptedException e) {\n        log.debug(\"--- ews interrupt\");\n        exportBuffers.error(e);\n        res = Tuple.EXCEPTION(e, true);\n      } catch (Exception e) {\n        log.debug(\"--- ews exception\", e);\n        exportBuffers.error(e);\n        res = Tuple.EXCEPTION(e, true);\n      }\n      buffer = exportBuffers.getOutputBuffer();\n      if (buffer == null) {\n        res = Tuple.EOF();\n      }\n      if (buffer.outDocsIndex == ExportBuffers.Buffer.NO_MORE_DOCS) {\n        log.debug(\"--- ews EOF\");\n        res = Tuple.EOF();\n      } else {\n        pos = buffer.outDocsIndex;\n        log.debug(\"--- ews new pos=\" + pos);\n      }\n    }\n    if (pos < 0) {\n      log.debug(\"--- ews EOF?\");\n      res = Tuple.EOF();\n    }\n    if (res != null) {\n      // only errors or EOF assigned result so far\n      if (writeOutputTimerContext != null) {\n        writeOutputTimerContext.stop();\n      }\n      return res;\n    }\n    if (writeOutputTimerContext == null) {\n      writeOutputTimerContext = exportBuffers.getWriteOutputBufferTimer().time();\n    }\n    SortDoc sortDoc = buffer.outDocs[pos];\n    tupleEntryWriter.tuple = new Tuple();\n    exportBuffers.exportWriter.writeDoc(sortDoc, exportBuffers.leaves, tupleEntryWriter, exportBuffers.exportWriter.fieldWriters);\n    pos--;\n    return tupleEntryWriter.tuple;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11b8c26c13b294e143adb7359d48c525f7052def":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11b8c26c13b294e143adb7359d48c525f7052def"]},"commit2Childs":{"11b8c26c13b294e143adb7359d48c525f7052def":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["11b8c26c13b294e143adb7359d48c525f7052def"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}