{"path":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean).mjava","commits":[{"id":"3cdd24a5b48ffd59f921ccc4f5199fc029f65797","date":1485039431,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean).mjava","sourceNew":"  public static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n  }\n\n","sourceOld":"  private static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean).mjava","sourceNew":"  public static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive,\n      boolean multiValued) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    if (multiValued) {\n      // In multiValued case use SortedNumericDocValuesField, this won't work for Trie*Fields wince they use BinaryDV in the multiValue case\n      return SortedNumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n    } else {\n      return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n    }\n  }\n\n","sourceOld":"  public static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean).mjava","sourceNew":"  public static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive,\n      boolean multiValued) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    if (multiValued) {\n      // In multiValued case use SortedNumericDocValuesField, this won't work for Trie*Fields wince they use BinaryDV in the multiValue case\n      return SortedNumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n    } else {\n      return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n    }\n  }\n\n","sourceOld":"  public static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean,boolean).mjava","sourceNew":"  public static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n  }\n\n","sourceOld":"  public static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive,\n      boolean multiValued) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    if (multiValued) {\n      // In multiValued case use SortedNumericDocValuesField, this won't work for Trie*Fields wince they use BinaryDV in the multiValue case\n      return SortedNumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n    } else {\n      return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#numericDocValuesRangeQuery(String,Number,Number,boolean,boolean).mjava","sourceNew":"  public static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive,\n      boolean multiValued) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    if (multiValued) {\n      // In multiValued case use SortedNumericDocValuesField, this won't work for Trie*Fields wince they use BinaryDV in the multiValue case\n      return SortedNumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n    } else {\n      return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n    }\n  }\n\n","sourceOld":"  public static Query numericDocValuesRangeQuery(\n      String field,\n      Number lowerValue, Number upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n\n    long actualLowerValue = Long.MIN_VALUE;\n    if (lowerValue != null) {\n      actualLowerValue = lowerValue.longValue();\n      if (lowerInclusive == false) {\n        if (actualLowerValue == Long.MAX_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        ++actualLowerValue;\n      }\n    }\n\n    long actualUpperValue = Long.MAX_VALUE;\n    if (upperValue != null) {\n      actualUpperValue = upperValue.longValue();\n      if (upperInclusive == false) {\n        if (actualUpperValue == Long.MIN_VALUE) {\n          return new MatchNoDocsQuery();\n        }\n        --actualUpperValue;\n      }\n    }\n    return NumericDocValuesField.newRangeQuery(field, actualLowerValue, actualUpperValue);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"022a4de90e0479b604264ca9c2e134c996454ab3":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","744b111b17d15d490a648eb021bfa240e7f11556"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744b111b17d15d490a648eb021bfa240e7f11556":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897b06b1364bd1f658a8be7591e43f0851458e7f"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}