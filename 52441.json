{"path":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","commits":[{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.termsHashPerField.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord == numTerms) {\n        return SeekStatus.END;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord == numTerms) {\n        return SeekStatus.END;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.termsHashPerField.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord == numTerms) {\n        return SeekStatus.END;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord == numTerms) {\n        return SeekStatus.END;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.termsHashPerField.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord == numTerms) {\n        return SeekStatus.END;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord == numTerms) {\n        return SeekStatus.END;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.termsHashPerField.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord == numTerms) {\n        return SeekStatus.END;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e0cd078dfbe2df4d73a3db81ed598a118caf5fe","date":1405588742,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord >= numTerms) {\n        return SeekStatus.END;\n      } else {\n        int textStart = postingsArray.textStarts[sortedTermIDs[ord]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord == numTerms) {\n        return SeekStatus.END;\n      } else {\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    public SeekStatus seekCeil(BytesRef text) {\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          assert term().compareTo(text) == 0;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo;\n      if (ord >= numTerms) {\n        return SeekStatus.END;\n      } else {\n        int textStart = postingsArray.textStarts[sortedTermIDs[ord]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        assert term().compareTo(text) > 0;\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord >= numTerms) {\n        return SeekStatus.END;\n      } else {\n        int textStart = postingsArray.textStarts[sortedTermIDs[ord]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxFields.FreqProxTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"    public SeekStatus seekCeil(BytesRef text) {\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          assert term().compareTo(text) == 0;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo;\n      if (ord >= numTerms) {\n        return SeekStatus.END;\n      } else {\n        int textStart = postingsArray.textStarts[sortedTermIDs[ord]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        assert term().compareTo(text) > 0;\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","sourceOld":"    public SeekStatus seekCeil(BytesRef text) {\n\n      // TODO: we could instead keep the BytesRefHash\n      // intact so this is a hash lookup\n\n      // binary search:\n      int lo = 0;\n      int hi = numTerms - 1;\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n        int textStart = postingsArray.textStarts[sortedTermIDs[mid]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        int cmp = scratch.compareTo(text);\n        if (cmp < 0) {\n          lo = mid + 1;\n        } else if (cmp > 0) {\n          hi = mid - 1;\n        } else {\n          // found:\n          ord = mid;\n          return SeekStatus.FOUND;\n        }\n      }\n\n      // not found:\n      ord = lo + 1;\n      if (ord >= numTerms) {\n        return SeekStatus.END;\n      } else {\n        int textStart = postingsArray.textStarts[sortedTermIDs[ord]];\n        terms.bytePool.setBytesRef(scratch, textStart);\n        return SeekStatus.NOT_FOUND;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","3394716f52b34ab259ad5247e7595d9f9db6e935"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["2e0cd078dfbe2df4d73a3db81ed598a118caf5fe","3e8715d826e588419327562287d5d6a8040d63d6"],"2e0cd078dfbe2df4d73a3db81ed598a118caf5fe":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"3e8715d826e588419327562287d5d6a8040d63d6":["2e0cd078dfbe2df4d73a3db81ed598a118caf5fe"],"52c7e49be259508735752fba88085255014a6ecf":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","2e0cd078dfbe2df4d73a3db81ed598a118caf5fe"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"2e0cd078dfbe2df4d73a3db81ed598a118caf5fe":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}