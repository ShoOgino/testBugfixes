{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","commits":[{"id":"40f06aec8ac912d126c71c7e9d6065ed70aa9c65","date":1501530021,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2eedfdeb748f47574ced45245973cdb5931d5cf1","date":1511749925,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","sourceNew":"      @Test\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0e53d133180083c87dcb8114b087cfe6bfc7bce","date":1511856078,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","sourceNew":"      @Test\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":"      @Test\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDistributions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testDistributions().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testDistributions() throws Exception {\n    String cexpr = \"let(a=normalDistribution(10, 2), \" +\n                       \"b=sample(a, 250), \" +\n                       \"c=normalDistribution(100, 6), \" +\n                       \"d=sample(c, 250), \" +\n                       \"u=uniformDistribution(1, 6),\"+\n                       \"t=sample(u, 250),\"+\n                       \"e=empiricalDistribution(d),\"+\n                       \"f=sample(e, 250),\"+\n                       \"tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    try {\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n\n    } catch(AssertionError e) {\n\n      //This test will have random failures do to the random sampling. So if it fails try it again.\n      //If it fails twice in a row, we probably broke some code.\n\n      TupleStream solrStream = new SolrStream(url, paramsLoc);\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List<Number> out = (List<Number>) tuples.get(0).get(\"sample\");\n\n      Map ks = (Map) tuples.get(0).get(\"ks\");\n      Map ks2 = (Map) tuples.get(0).get(\"ks2\");\n      Map ks3 = (Map) tuples.get(0).get(\"ks3\");\n\n      assertTrue(out.size() == 250);\n      Number pvalue = (Number) ks.get(\"p-value\");\n      Number pvalue2 = (Number) ks2.get(\"p-value\");\n      Number pvalue3 = (Number) ks3.get(\"p-value\");\n\n      assertTrue(pvalue.doubleValue() > .05D);\n      assertTrue(pvalue2.doubleValue() == 0);\n      assertTrue(pvalue3.doubleValue() > .05D);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2eedfdeb748f47574ced45245973cdb5931d5cf1":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65","2eedfdeb748f47574ced45245973cdb5931d5cf1"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"]},"commit2Childs":{"2eedfdeb748f47574ced45245973cdb5931d5cf1":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["2eedfdeb748f47574ced45245973cdb5931d5cf1","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}