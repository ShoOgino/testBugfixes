{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes#getReader(Directory,String,Mode,boolean,int).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getReader(Directory,String,Mode,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  // nocommit -- I can peek @ header to determing fixed/mode?\n  public static Reader getReader(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        try {\n          return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.DEREF) {\n        try {\n          return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes#getValues(Directory,String,Mode,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes#getReader(Directory,String,Mode,boolean,int).mjava","sourceNew":"  // nocommit -- I can peek @ header to determing fixed/mode?\n  public static DocValues getValues(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        try {\n          return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.DEREF) {\n        try {\n          return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"\");\n  }\n\n","sourceOld":"  // nocommit -- I can peek @ header to determing fixed/mode?\n  public static Reader getReader(Directory dir, String id, Mode mode,\n      boolean fixedSize, int maxDoc) throws IOException {\n    if (fixedSize) {\n      if (mode == Mode.STRAIGHT) {\n        try {\n          return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.DEREF) {\n        try {\n          return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);\n        } catch (IOException e) {\n          throw e;\n        }\n      } else if (mode == Mode.SORTED) {\n        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    } else {\n      if (mode == Mode.STRAIGHT) {\n        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.DEREF) {\n        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);\n      } else if (mode == Mode.SORTED) {\n        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);\n      }\n    }\n\n    throw new IllegalArgumentException(\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":[],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}