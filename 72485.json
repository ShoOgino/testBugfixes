{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#doTestSetArbitraryPropertySliceUnique(String).mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#doTestSetArbitraryPropertySliceUnique(String).mjava","pathOld":"/dev/null","sourceNew":"  // Insure that the property is set on only one replica per slice when changing a unique property on an individual\n  // replica.\n  private void doTestSetArbitraryPropertySliceUnique(String propIn) throws InterruptedException, KeeperException, IOException, SolrServerException {\n    final String prop = (random().nextBoolean()) ? propIn : propIn.toUpperCase(Locale.ROOT);\n    // First set the property in some replica in some slice\n    forceUpdateCollectionStatus();\n    DocCollection docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n\n    Slice[] slices = docCollection.getSlices().toArray(new Slice[0]);\n    Slice slice = slices[random().nextInt(slices.length)];\n\n    // Bounce around a bit setting this property and insure it's only set in one replica.\n    Replica[] reps = slice.getReplicas().toArray(new Replica[0]);\n    for (int idx = 0; idx < 4; ++idx) {\n      Replica rep = reps[random().nextInt(reps.length)];\n      // Set the property on a particular replica\n      setProp(slice, rep, prop);\n      TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n\n      long count = 0;\n      boolean rightRep = false;\n      Slice modSlice;\n      DocCollection modColl = null; // keeps IDE happy\n\n      // insure that no other replica in that slice has the property when we return.\n      while (timeout.hasTimedOut() == false) {\n        forceUpdateCollectionStatus();\n        modColl = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n        modSlice = modColl.getSlice(slice.getName());\n        rightRep = modSlice.getReplica(rep.getName()).getBool(\"property.\" + prop.toLowerCase(Locale.ROOT), false);\n        count = modSlice.getReplicas().stream().filter(thisRep -> thisRep.getBool(\"property.\" + prop.toLowerCase(Locale.ROOT), false)).count();\n\n        if (count == 1 && rightRep) {\n          break;\n        }\n\n        TimeUnit.MILLISECONDS.sleep(100);\n      }\n      if (count != 1 || rightRep == false) {\n        fail(\"The property \" + prop + \" was not uniquely distributed in slice \" + slice.getName()\n            + \" \" + modColl.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#doTestSetArbitraryPropertySliceUnique(String).mjava","pathOld":"/dev/null","sourceNew":"  // Insure that the property is set on only one replica per slice when changing a unique property on an individual\n  // replica.\n  private void doTestSetArbitraryPropertySliceUnique(String propIn) throws InterruptedException, KeeperException, IOException, SolrServerException {\n    final String prop = (random().nextBoolean()) ? propIn : propIn.toUpperCase(Locale.ROOT);\n    // First set the property in some replica in some slice\n    forceUpdateCollectionStatus();\n    DocCollection docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n\n    Slice[] slices = docCollection.getSlices().toArray(new Slice[0]);\n    Slice slice = slices[random().nextInt(slices.length)];\n\n    // Bounce around a bit setting this property and insure it's only set in one replica.\n    Replica[] reps = slice.getReplicas().toArray(new Replica[0]);\n    for (int idx = 0; idx < 4; ++idx) {\n      Replica rep = reps[random().nextInt(reps.length)];\n      // Set the property on a particular replica\n      setProp(slice, rep, prop);\n      TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n\n      long count = 0;\n      boolean rightRep = false;\n      Slice modSlice;\n      DocCollection modColl = null; // keeps IDE happy\n\n      // insure that no other replica in that slice has the property when we return.\n      while (timeout.hasTimedOut() == false) {\n        forceUpdateCollectionStatus();\n        modColl = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n        modSlice = modColl.getSlice(slice.getName());\n        rightRep = modSlice.getReplica(rep.getName()).getBool(\"property.\" + prop.toLowerCase(Locale.ROOT), false);\n        count = modSlice.getReplicas().stream().filter(thisRep -> thisRep.getBool(\"property.\" + prop.toLowerCase(Locale.ROOT), false)).count();\n\n        if (count == 1 && rightRep) {\n          break;\n        }\n\n        TimeUnit.MILLISECONDS.sleep(100);\n      }\n      if (count != 1 || rightRep == false) {\n        fail(\"The property \" + prop + \" was not uniquely distributed in slice \" + slice.getName()\n            + \" \" + modColl.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}