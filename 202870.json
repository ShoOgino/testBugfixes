{"path":"lucene/core/src/test/org/apache/lucene/store/TestLock#testObtainConcurrently().mjava","commits":[{"id":"7cd448926db19517b82cc7c775c62c57f7d2ee6a","date":1432845380,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLock#testObtainConcurrently().mjava","pathOld":"/dev/null","sourceNew":"  public void testObtainConcurrently() throws InterruptedException, IOException {\n    final Directory directory;\n    if (random().nextBoolean()) {\n      directory = newDirectory();\n    } else {\n      LockFactory lf = random().nextBoolean() ? SimpleFSLockFactory.INSTANCE : NativeFSLockFactory.INSTANCE;\n      directory = newFSDirectory(createTempDir(), lf);\n    }\n    final AtomicBoolean running = new AtomicBoolean(true);\n    final AtomicInteger atomicCounter = new AtomicInteger(0);\n    final ReentrantLock assertingLock = new ReentrantLock();\n    int numThreads = 2 + random().nextInt(10);\n    final int runs = 500 + random().nextInt(1000);\n    CyclicBarrier barrier = new CyclicBarrier(numThreads);\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            barrier.await();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n          while (running.get()) {\n            try (Lock lock = directory.makeLock(\"foo.lock\")) {\n              if (lock.isLocked() == false && lock.obtain()) {\n                assertTrue(lock.isLocked());\n                assertFalse(assertingLock.isLocked());\n                if (assertingLock.tryLock()) {\n                  assertingLock.unlock();\n                } else {\n                  fail();\n                }\n              }\n            } catch (IOException ex) {\n              //\n            }\n            if (atomicCounter.incrementAndGet() > runs) {\n              running.set(false);\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n    }\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testObtainConcurrently().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLock#testObtainConcurrently().mjava","sourceNew":"  public void testObtainConcurrently() throws InterruptedException, IOException {\n    final Directory directory = getDirectory(createTempDir());\n    final AtomicBoolean running = new AtomicBoolean(true);\n    final AtomicInteger atomicCounter = new AtomicInteger(0);\n    final ReentrantLock assertingLock = new ReentrantLock();\n    int numThreads = 2 + random().nextInt(10);\n    final int runs = atLeast(10000);\n    CyclicBarrier barrier = new CyclicBarrier(numThreads);\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            barrier.await();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n          while (running.get()) {\n            try (Lock lock = directory.obtainLock(\"foo.lock\")) {\n              assertFalse(assertingLock.isLocked());\n              if (assertingLock.tryLock()) {\n                assertingLock.unlock();\n              } else {\n                fail();\n              }\n              assert lock != null; // stupid compiler\n            } catch (IOException ex) {\n              //\n            }\n            if (atomicCounter.incrementAndGet() > runs) {\n              running.set(false);\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n    }\n    directory.close();\n  }\n\n","sourceOld":"  public void testObtainConcurrently() throws InterruptedException, IOException {\n    final Directory directory;\n    if (random().nextBoolean()) {\n      directory = newDirectory();\n    } else {\n      LockFactory lf = random().nextBoolean() ? SimpleFSLockFactory.INSTANCE : NativeFSLockFactory.INSTANCE;\n      directory = newFSDirectory(createTempDir(), lf);\n    }\n    final AtomicBoolean running = new AtomicBoolean(true);\n    final AtomicInteger atomicCounter = new AtomicInteger(0);\n    final ReentrantLock assertingLock = new ReentrantLock();\n    int numThreads = 2 + random().nextInt(10);\n    final int runs = 500 + random().nextInt(1000);\n    CyclicBarrier barrier = new CyclicBarrier(numThreads);\n    Thread[] threads = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            barrier.await();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n          while (running.get()) {\n            try (Lock lock = directory.makeLock(\"foo.lock\")) {\n              if (lock.isLocked() == false && lock.obtain()) {\n                assertTrue(lock.isLocked());\n                assertFalse(assertingLock.isLocked());\n                if (assertingLock.tryLock()) {\n                  assertingLock.unlock();\n                } else {\n                  fail();\n                }\n              }\n            } catch (IOException ex) {\n              //\n            }\n            if (atomicCounter.incrementAndGet() > runs) {\n              running.set(false);\n            }\n          }\n        }\n      };\n      threads[i].start();\n    }\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n    }\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}