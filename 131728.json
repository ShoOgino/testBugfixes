{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17bb09a766d49e4c0bb1049cebc1cf10236004f7","date":1463076873,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString;\n      {\n        Calendar preToStringCalClone = (Calendar) cal.clone();\n        calString = tree.toString(cal);\n        assert lastString == null || calString.length() < lastString.length();\n        assertEquals(preToStringCalClone, cal);//ensure toString doesn't modify cal state\n      }\n\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString;\n      {\n        Calendar preToStringCalClone = (Calendar) cal.clone();\n        calString = tree.toString(cal);\n        assert lastString == null || calString.length() < lastString.length();\n        assertEquals(preToStringCalClone, cal);//ensure toString doesn't modify cal state\n      }\n\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18d5909e20e4300fc5752d53c78ac5bb7d621da7","date":1463541567,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString;\n      {\n        Calendar preToStringCalClone = (Calendar) cal.clone();\n        calString = tree.toString(cal);\n        assertEquals(preToStringCalClone, cal);//ensure toString doesn't modify cal state\n      }\n\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString;\n      {\n        Calendar preToStringCalClone = (Calendar) cal.clone();\n        calString = tree.toString(cal);\n        assert lastString == null || calString.length() < lastString.length();\n        assertEquals(preToStringCalClone, cal);//ensure toString doesn't modify cal state\n      }\n\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef21c3e4f7685689c910b82c419b8a462e3cf212","date":1463569645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString;\n      {\n        Calendar preToStringCalClone = (Calendar) cal.clone();\n        calString = tree.toString(cal);\n        assertEquals(preToStringCalClone, cal);//ensure toString doesn't modify cal state\n      }\n\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString;\n      {\n        Calendar preToStringCalClone = (Calendar) cal.clone();\n        calString = tree.toString(cal);\n        assert lastString == null || calString.length() < lastString.length();\n        assertEquals(preToStringCalClone, cal);//ensure toString doesn't modify cal state\n      }\n\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString;\n      {\n        Calendar preToStringCalClone = (Calendar) cal.clone();\n        calString = tree.toString(cal);\n        assertEquals(preToStringCalClone, cal);//ensure toString doesn't modify cal state\n      }\n\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTreeTest#roundTrip(Calendar).mjava","sourceNew":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString;\n      {\n        Calendar preToStringCalClone = (Calendar) cal.clone();\n        calString = tree.toString(cal);\n        assertEquals(preToStringCalClone, cal);//ensure toString doesn't modify cal state\n      }\n\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","sourceOld":"  private void roundTrip(Calendar calOrig) throws ParseException {\n    Calendar cal = (Calendar) calOrig.clone();\n    String lastString = null;\n    while (true) {\n      String calString = tree.toString(cal);\n      assert lastString == null || calString.length() < lastString.length();\n      //test parseCalendar\n      assertEquals(cal, tree.parseCalendar(calString));\n\n      //to Shape and back to Cal\n      UnitNRShape shape = tree.toShape(cal);\n      Calendar cal2 = tree.toCalendar(shape);\n      assertEquals(calString, tree.toString(cal2));\n\n      if (!calString.equals(\"*\")) {//not world cell\n        //to Term and back to Cell\n        Cell cell = (Cell) shape;\n        BytesRef term = cell.getTokenBytesNoLeaf(null);\n        Cell cell2 = tree.readCell(BytesRef.deepCopyOf(term), null);\n        assertEquals(calString, cell, cell2);\n        Calendar cal3 = tree.toCalendar((UnitNRShape) cell2.getShape());\n        assertEquals(calString, tree.toString(cal3));\n\n        // setLeaf comparison\n        cell2.setLeaf();\n        BytesRef termLeaf = cell2.getTokenBytesWithLeaf(null);\n        assertTrue(term.compareTo(termLeaf) < 0);\n        assertEquals(termLeaf.length, term.length + 1);\n        assertEquals(0, termLeaf.bytes[termLeaf.offset + termLeaf.length - 1]);\n        assertTrue(cell.isPrefixOf(cell2));\n      }\n\n      //end of loop; decide if should loop again with lower precision\n      final int calPrecField = tree.getCalPrecisionField(cal);\n      if (calPrecField == -1)\n        break;\n      int fieldIdx = Arrays.binarySearch(CAL_FIELDS, calPrecField);\n      assert fieldIdx >= 0;\n      int prevPrecField = (fieldIdx == 0 ? -1 : CAL_FIELDS[--fieldIdx]);\n      try {\n        tree.clearFieldsAfter(cal, prevPrecField);\n      } catch (AssertionError e) {\n        if (e.getMessage().equals(\"Calendar underflow\"))\n          return;\n        throw e;\n      }\n      lastString = calString;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"ef21c3e4f7685689c910b82c419b8a462e3cf212":["0ad30c6a479e764150a3316e57263319775f1df2","18d5909e20e4300fc5752d53c78ac5bb7d621da7"],"18d5909e20e4300fc5752d53c78ac5bb7d621da7":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad30c6a479e764150a3316e57263319775f1df2":["af2638813028b254a88b418ebeafb541afb49653","17bb09a766d49e4c0bb1049cebc1cf10236004f7"],"17bb09a766d49e4c0bb1049cebc1cf10236004f7":["af2638813028b254a88b418ebeafb541afb49653"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["af2638813028b254a88b418ebeafb541afb49653","ef21c3e4f7685689c910b82c419b8a462e3cf212"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["0ad30c6a479e764150a3316e57263319775f1df2","17bb09a766d49e4c0bb1049cebc1cf10236004f7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ef21c3e4f7685689c910b82c419b8a462e3cf212":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"18d5909e20e4300fc5752d53c78ac5bb7d621da7":["ef21c3e4f7685689c910b82c419b8a462e3cf212"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"0ad30c6a479e764150a3316e57263319775f1df2":["ef21c3e4f7685689c910b82c419b8a462e3cf212","18d5909e20e4300fc5752d53c78ac5bb7d621da7"],"17bb09a766d49e4c0bb1049cebc1cf10236004f7":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}