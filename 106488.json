{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testTargetCollectionNotAvailable().mjava","commits":[{"id":"11f21773085db637873ba6e0bcd4265b2b4c7730","date":1534756753,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testTargetCollectionNotAvailable().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testTargetCollectionNotAvailable().mjava","sourceNew":"  @Test\n  public void testTargetCollectionNotAvailable() throws Exception {\n    createCollections();\n\n    // send start action to first shard\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n    assertNotSame(null, CdcrTestsUtil.waitForClusterToSync\n        (sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound(), targetSolrClient));\n\n    // sleep for a bit to ensure that replicator threads are started\n    Thread.sleep(3000);\n\n    target.deleteAllCollections();\n\n    CdcrTestsUtil.indexRandomDocs(6, sourceSolrClient);\n    assertEquals(6L, sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound());\n\n    // we need to wait until the replicator thread is triggered\n    int cnt = 15; // timeout after 15 seconds\n    AssertionError lastAssertionError = null;\n    while (cnt > 0) {\n      try {\n        QueryResponse rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.ERRORS);\n        NamedList collections = (NamedList) ((NamedList) rsp.getResponse().get(CdcrParams.ERRORS)).getVal(0);\n        NamedList errors = (NamedList) collections.get(TARGET_COLLECTION);\n        assertTrue(0 < (Long) errors.get(CdcrParams.CONSECUTIVE_ERRORS));\n        NamedList lastErrors = (NamedList) errors.get(CdcrParams.LAST);\n        assertNotNull(lastErrors);\n        assertTrue(0 < lastErrors.size());\n        deleteCollections();\n        return;\n      } catch (AssertionError e) {\n        lastAssertionError = e;\n        cnt--;\n        Thread.sleep(1000);\n      }\n    }\n\n    deleteCollections();\n    throw new AssertionError(\"Timeout while trying to assert replication errors\", lastAssertionError);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void testTargetCollectionNotAvailable() throws Exception {\n    // send start action to first shard\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    NamedList status = (NamedList) rsp.get(CdcrParams.CdcrAction.STATUS.toLower());\n    assertEquals(CdcrParams.ProcessState.STARTED.toLower(), status.get(CdcrParams.ProcessState.getParam()));\n\n    // check status\n    this.assertState(SOURCE_COLLECTION, CdcrParams.ProcessState.STARTED, CdcrParams.BufferState.ENABLED);\n\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // sleep for a bit to ensure that replicator threads are started\n    Thread.sleep(3000);\n\n    // Kill all the servers of the target\n    this.deleteCollection(TARGET_COLLECTION);\n\n    // Index a few documents to trigger the replication\n    index(SOURCE_COLLECTION, getDoc(id, \"a\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"b\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"c\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"d\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"e\"));\n    index(SOURCE_COLLECTION, getDoc(id, \"f\"));\n\n    assertNumDocs(6, SOURCE_COLLECTION);\n\n    // we need to wait until the replicator thread is triggered\n    int cnt = 15; // timeout after 15 seconds\n    AssertionError lastAssertionError = null;\n    while (cnt > 0) {\n      try {\n        rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.ERRORS);\n        NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.ERRORS)).getVal(0);\n        NamedList errors = (NamedList) collections.get(TARGET_COLLECTION);\n        assertTrue(0 < (Long) errors.get(CdcrParams.CONSECUTIVE_ERRORS));\n        NamedList lastErrors = (NamedList) errors.get(CdcrParams.LAST);\n        assertNotNull(lastErrors);\n        assertTrue(0 < lastErrors.size());\n        return;\n      }\n      catch (AssertionError e) {\n        lastAssertionError = e;\n        cnt--;\n        Thread.sleep(1000);\n      }\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert replication errors\", lastAssertionError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testTargetCollectionNotAvailable().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testTargetCollectionNotAvailable().mjava","sourceNew":"  @Test\n  public void testTargetCollectionNotAvailable() throws Exception {\n    createCollections();\n\n    // send start action to first shard\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n    assertNotSame(null, CdcrTestsUtil.waitForClusterToSync\n        (sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound(), targetSolrClient));\n\n    // sleep for a bit to ensure that replicator threads are started\n    Thread.sleep(3000);\n\n    target.deleteAllCollections();\n\n    CdcrTestsUtil.indexRandomDocs(6, sourceSolrClient);\n    assertEquals(6L, sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound());\n\n    // we need to wait until the replicator thread is triggered\n    int cnt = 15; // timeout after 15 seconds\n    AssertionError lastAssertionError = null;\n    while (cnt > 0) {\n      try {\n        QueryResponse rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.ERRORS);\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList collections = (NamedList) ((NamedList) rsp.getResponse().get(CdcrParams.ERRORS)).getVal(0);\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList errors = (NamedList) collections.get(TARGET_COLLECTION);\n        assertTrue(0 < (Long) errors.get(CdcrParams.CONSECUTIVE_ERRORS));\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList lastErrors = (NamedList) errors.get(CdcrParams.LAST);\n        assertNotNull(lastErrors);\n        assertTrue(0 < lastErrors.size());\n        deleteCollections();\n        return;\n      } catch (AssertionError e) {\n        lastAssertionError = e;\n        cnt--;\n        Thread.sleep(1000);\n      }\n    }\n\n    deleteCollections();\n    throw new AssertionError(\"Timeout while trying to assert replication errors\", lastAssertionError);\n  }\n\n","sourceOld":"  @Test\n  public void testTargetCollectionNotAvailable() throws Exception {\n    createCollections();\n\n    // send start action to first shard\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n    assertNotSame(null, CdcrTestsUtil.waitForClusterToSync\n        (sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound(), targetSolrClient));\n\n    // sleep for a bit to ensure that replicator threads are started\n    Thread.sleep(3000);\n\n    target.deleteAllCollections();\n\n    CdcrTestsUtil.indexRandomDocs(6, sourceSolrClient);\n    assertEquals(6L, sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound());\n\n    // we need to wait until the replicator thread is triggered\n    int cnt = 15; // timeout after 15 seconds\n    AssertionError lastAssertionError = null;\n    while (cnt > 0) {\n      try {\n        QueryResponse rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.ERRORS);\n        NamedList collections = (NamedList) ((NamedList) rsp.getResponse().get(CdcrParams.ERRORS)).getVal(0);\n        NamedList errors = (NamedList) collections.get(TARGET_COLLECTION);\n        assertTrue(0 < (Long) errors.get(CdcrParams.CONSECUTIVE_ERRORS));\n        NamedList lastErrors = (NamedList) errors.get(CdcrParams.LAST);\n        assertNotNull(lastErrors);\n        assertTrue(0 < lastErrors.size());\n        deleteCollections();\n        return;\n      } catch (AssertionError e) {\n        lastAssertionError = e;\n        cnt--;\n        Thread.sleep(1000);\n      }\n    }\n\n    deleteCollections();\n    throw new AssertionError(\"Timeout while trying to assert replication errors\", lastAssertionError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrOpsAndBoundariesTest#testTargetCollectionNotAvailable().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTargetCollectionNotAvailable() throws Exception {\n    createCollections();\n\n    // send start action to first shard\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n    assertNotSame(null, CdcrTestsUtil.waitForClusterToSync\n        (sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound(), targetSolrClient));\n\n    // sleep for a bit to ensure that replicator threads are started\n    Thread.sleep(3000);\n\n    target.deleteAllCollections();\n\n    CdcrTestsUtil.indexRandomDocs(6, sourceSolrClient);\n    assertEquals(6L, sourceSolrClient.query(new SolrQuery(ALL_Q)).getResults().getNumFound());\n\n    // we need to wait until the replicator thread is triggered\n    int cnt = 15; // timeout after 15 seconds\n    AssertionError lastAssertionError = null;\n    while (cnt > 0) {\n      try {\n        QueryResponse rsp = CdcrTestsUtil.invokeCdcrAction(sourceSolrClient, CdcrParams.CdcrAction.ERRORS);\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList collections = (NamedList) ((NamedList) rsp.getResponse().get(CdcrParams.ERRORS)).getVal(0);\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList errors = (NamedList) collections.get(TARGET_COLLECTION);\n        assertTrue(0 < (Long) errors.get(CdcrParams.CONSECUTIVE_ERRORS));\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList lastErrors = (NamedList) errors.get(CdcrParams.LAST);\n        assertNotNull(lastErrors);\n        assertTrue(0 < lastErrors.size());\n        deleteCollections();\n        return;\n      } catch (AssertionError e) {\n        lastAssertionError = e;\n        cnt--;\n        Thread.sleep(1000);\n      }\n    }\n\n    deleteCollections();\n    throw new AssertionError(\"Timeout while trying to assert replication errors\", lastAssertionError);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}