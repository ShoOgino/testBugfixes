{"path":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"6ba409fa7dec3437c7631ef2582c2ad91a8368b1","date":1570400397,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in executing commands\", errs);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8","date":1570799519,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(false);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in executing commands\", errs);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in executing commands\", errs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38d63171317f90b25910c2374de2e33c55c243f5","date":1570800220,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in executing commands\", errs);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(false);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in executing commands\", errs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4505d603fb135c5279b5c6b1fc375feeeff582f1","date":1570801145,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(false);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in executing commands\", errs);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in executing commands\", errs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c2c13adedecb2b2131001c8f0ee9d68206ee550","date":1570858508,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(false);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      log.error(ERR+ Utils.toJSONString(errs));\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, ERR , errs);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(false);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error in executing commands\", errs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(false);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      log.error(ERR+ Utils.toJSONString(errs));\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, ERR , errs);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"856d72a5f63c995cad4c6fd92b7c121aa140285c","date":1572845901,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      log.error(ERR + Utils.toJSONString(errs));\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, ERR, errs);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(false);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      log.error(ERR+ Utils.toJSONString(errs));\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, ERR , errs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      log.error(\"{}{}\", ERR, Utils.toJSONString(errs));\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, ERR, errs);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      log.error(ERR + Utils.toJSONString(errs));\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, ERR, errs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdbfc1e5714aafb41cabb055936a38ba4db5362","date":1587983533,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (singletonCommand != null) {\n      singletonCommand.invoke(req, rsp, null);\n      return;\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      log.error(\"{}{}\", ERR, Utils.toJSONString(errs));\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, ERR, errs);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (commands.size() == 1) {\n      Cmd cmd = commands.get(\"\");\n      if (cmd != null) {\n        cmd.invoke(req, rsp, null);\n        return;\n      }\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      log.error(\"{}{}\", ERR, Utils.toJSONString(errs));\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, ERR, errs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (singletonCommand != null) {\n      singletonCommand.invoke(req, rsp, null);\n      return;\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      log.error(\"{}{}\", ERR, Utils.toJSONString(errs));\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, ERR, errs);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n    if (singletonCommand != null) {\n      singletonCommand.invoke(req, rsp, null);\n      return;\n    }\n\n    List<CommandOperation> cmds = req.getCommands(true);\n    boolean allExists = true;\n    for (CommandOperation cmd : cmds) {\n      if (!commands.containsKey(cmd.name)) {\n        cmd.addError(\"No such command supported: \" + cmd.name);\n        allExists = false;\n      }\n    }\n    if (!allExists) {\n      if (fallback != null) {\n        fallback.call(req, rsp);\n        return;\n      } else {\n        throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, \"Error processing commands\",\n            CommandOperation.captureErrors(cmds));\n      }\n    }\n\n    for (CommandOperation cmd : cmds) {\n      commands.get(cmd.name).invoke(req, rsp, cmd);\n    }\n\n    List<Map> errs = CommandOperation.captureErrors(cmds);\n    if (!errs.isEmpty()) {\n      log.error(\"{}{}\", ERR, Utils.toJSONString(errs));\n      throw new ApiBag.ExceptionWithErrObject(SolrException.ErrorCode.BAD_REQUEST, ERR, errs);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38d63171317f90b25910c2374de2e33c55c243f5":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"856d72a5f63c995cad4c6fd92b7c121aa140285c":["2c2c13adedecb2b2131001c8f0ee9d68206ee550"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1"],"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["140be51d03394488536f4aacedace29f9b318347"],"140be51d03394488536f4aacedace29f9b318347":["856d72a5f63c995cad4c6fd92b7c121aa140285c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c2c13adedecb2b2131001c8f0ee9d68206ee550":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["38d63171317f90b25910c2374de2e33c55c243f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c2c13adedecb2b2131001c8f0ee9d68206ee550"]},"commit2Childs":{"38d63171317f90b25910c2374de2e33c55c243f5":["4505d603fb135c5279b5c6b1fc375feeeff582f1"],"8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8":["38d63171317f90b25910c2374de2e33c55c243f5"],"856d72a5f63c995cad4c6fd92b7c121aa140285c":["140be51d03394488536f4aacedace29f9b318347"],"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"140be51d03394488536f4aacedace29f9b318347":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1","b0b597c65628ca9e73913a07e81691f8229bae35"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["8257f3fa8a15874bc0ab76c6a2c732b9a0a725f8"],"2c2c13adedecb2b2131001c8f0ee9d68206ee550":["856d72a5f63c995cad4c6fd92b7c121aa140285c","b0b597c65628ca9e73913a07e81691f8229bae35"],"4505d603fb135c5279b5c6b1fc375feeeff582f1":["2c2c13adedecb2b2131001c8f0ee9d68206ee550"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}