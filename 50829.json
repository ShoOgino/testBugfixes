{"path":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","commits":[{"id":"c72f6f0907682b825869d7878ba72d8259dabc91","date":1480192617,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 100);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","0e7ddedf744427dad36befd57a11188002f735f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 100);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"931cb705e783c7f07cdb110a0cb03bad79fe1b2b","date":1480386986,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 100);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7ddedf744427dad36befd57a11188002f735f9","date":1481407395,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              //TODO remove me after SOLR-9843\n              log.error(\"(2) About to fail, response is: \" + rsp.toString());\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 100);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":["c72f6f0907682b825869d7878ba72d8259dabc91"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              //TODO remove me after SOLR-9843\n              log.error(\"(2) About to fail, response is: \" + rsp.toString());\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 100);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2b464eff6241d222eb99fab9a53115a1808840e","date":1483064079,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              //TODO remove me after SOLR-9843\n              log.error(\"(2) About to fail, response is: \" + rsp.toString());\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              //TODO remove me after SOLR-9843\n              log.error(\"(2) About to fail, response is: \" + rsp.toString());\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bab9eeea60eefbea2957be27b8d1923095df771","date":1525498218,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14076e7b40405aa1f08702d8df762d08b5d44f70","date":1537071979,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              if (!prop.getName().equals(\"intGSF\")) { // TODO: this can be 6 or 8 as well\n                fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size() + \" rsp: \" + rsp);\n              }\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size());\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":["c72f6f0907682b825869d7878ba72d8259dabc91"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"268f5a06c7ea42fbf9c9a25b7e9d33cf083d83e2","date":1544401888,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n      \n      // TODO: gsf fails this\n      if (prop.getName().endsWith(\"GSF\") ) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              if (!prop.getName().equals(\"intGSF\")) { // TODO: this can be 6 or 8 as well\n                fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size() + \" rsp: \" + rsp);\n              }\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              if (!prop.getName().equals(\"intGSF\")) { // TODO: this can be 6 or 8 as well\n                fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size() + \" rsp: \" + rsp);\n              }\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","date":1550862271,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    doGroupingDvOnly(fieldsToTestGroupSortFirst, \"boolGSF\");\n    doGroupingDvOnly(fieldsToTestGroupSortLast, \"boolGSL\");\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n      \n      // TODO: gsf fails this\n      if (prop.getName().endsWith(\"GSF\") ) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              if (!prop.getName().equals(\"intGSF\")) { // TODO: this can be 6 or 8 as well\n                fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size() + \" rsp: \" + rsp);\n              }\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    doGroupingDvOnly(fieldsToTestGroupSortFirst, \"boolGSF\");\n    doGroupingDvOnly(fieldsToTestGroupSortLast, \"boolGSL\");\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    List<SolrInputDocument> docs = new ArrayList<>(50);\n    for (int idx = 0; idx < 49; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      boolean doInc = ((idx % 7) == 0);\n      for (FieldProps prop : fieldsToTestGroupSortFirst) {\n        doc.addField(prop.getName(), prop.getValue(doInc));\n      }\n      docs.add(doc);\n      if ((idx % 5) == 0) {\n        doc = new SolrInputDocument();\n        doc.addField(\"id\", idx + 10_000);\n        docs.add(doc);\n      }\n    }\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    new UpdateRequest()\n        .add(docs)\n        .commit(client, COLLECTION);\n\n    // OK, we should have one group with 10 entries for null, a group with 1 entry and 7 groups with 7\n    for (FieldProps prop : fieldsToTestGroupSortFirst) {\n      // Special handling until SOLR-9802 is fixed\n      if (prop.getName().startsWith(\"date\")) continue;\n      // SOLR-9802 to here\n      \n      // TODO: gsf fails this\n      if (prop.getName().endsWith(\"GSF\") ) continue;\n\n      final SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\",\n          \"rows\", \"100\",\n          \"group\", \"true\",\n          \"group.field\", prop.getName(),\n          \"group.limit\", \"100\");\n\n      final QueryResponse rsp = client.query(COLLECTION, solrQuery);\n\n      GroupResponse groupResponse = rsp.getGroupResponse();\n      List<GroupCommand> commands = groupResponse.getValues();\n\n\n      int nullCount = 0;\n      int sevenCount = 0;\n      int boolCount = 0;\n      for (int idx = 0; idx < commands.size(); ++idx) {\n        GroupCommand fieldCommand = commands.get(idx);\n        for (Group grp : fieldCommand.getValues()) {\n          switch (grp.getResult().size()) {\n            case 7:\n              ++sevenCount;\n              assertNotNull(\"Every group with 7 entries should have a group value.\", grp.getGroupValue());\n              break;\n            case 10:\n              ++nullCount;\n              assertNull(\"This should be the null group\", grp.getGroupValue());\n              break;\n            case 25:\n            case 24:\n              ++boolCount;\n              assertEquals(\"We should have more counts for boolean fields!\", \"boolGSF\", prop.getName());\n              break;\n            \n            default:\n              if (!prop.getName().equals(\"intGSF\")) { // TODO: this can be 6 or 8 as well\n                fail(\"Unexpected number of elements in the group for \" + prop.getName() + \": \" + grp.getResult().size() + \" rsp: \" + rsp);\n              }\n          }\n        }\n      }\n      assertEquals(\"Should be exactly one group with 1 entry of 10 for null for field \" + prop.getName(), 1, nullCount);\n      if (prop.getName().startsWith(\"bool\")) {\n        assertEquals(\"Should be exactly 2 groups with non-null Boolean types \" + prop.getName(), 2, boolCount);\n        assertEquals(\"Should be no seven count groups for Boolean types \" + prop.getName(), 0, sevenCount);\n      } else {\n        assertEquals(\"Should be exactly 7 groups with seven entries for field \" + prop.getName(), 7, sevenCount);\n        assertEquals(\"Should be no gropus with 24 or 25 entries for field \" + prop.getName(), 0, boolCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c344401c324a00bc10cacfb90598738235a4decb","date":1556461561,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnlySortFirst().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest#testGroupingDVOnly().mjava","sourceNew":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  public void testGroupingDVOnlySortFirst() throws IOException, SolrServerException {\n    doGroupingDvOnly(fieldsToTestGroupSortFirst, \"boolGSF\");\n  }\n\n","sourceOld":"  @Test\n  // Verify that we actually form groups that are \"expected\". Most of the processing takes some care to \n  // make sure all the values for each field are unique. We need to have docs that have values that are _not_\n  // unique.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 04-May-2018\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testGroupingDVOnly() throws IOException, SolrServerException {\n    doGroupingDvOnly(fieldsToTestGroupSortFirst, \"boolGSF\");\n    doGroupingDvOnly(fieldsToTestGroupSortLast, \"boolGSL\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["9856095f7afb5a607bf5e65077615ed91273508c","e2b464eff6241d222eb99fab9a53115a1808840e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4bab9eeea60eefbea2957be27b8d1923095df771","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["268f5a06c7ea42fbf9c9a25b7e9d33cf083d83e2"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72f6f0907682b825869d7878ba72d8259dabc91"],"c72f6f0907682b825869d7878ba72d8259dabc91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4bab9eeea60eefbea2957be27b8d1923095df771":["e2b464eff6241d222eb99fab9a53115a1808840e"],"0e7ddedf744427dad36befd57a11188002f735f9":["931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"e2b464eff6241d222eb99fab9a53115a1808840e":["0e7ddedf744427dad36befd57a11188002f735f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["727bb765ff2542275f6d31f67be18d7104bae148","0e7ddedf744427dad36befd57a11188002f735f9"],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c72f6f0907682b825869d7878ba72d8259dabc91"],"c344401c324a00bc10cacfb90598738235a4decb":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"268f5a06c7ea42fbf9c9a25b7e9d33cf083d83e2":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["268f5a06c7ea42fbf9c9a25b7e9d33cf083d83e2","ab3edb4bdcf1695b3c43f8584d7473f9516a34e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c344401c324a00bc10cacfb90598738235a4decb"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["4bab9eeea60eefbea2957be27b8d1923095df771"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4bab9eeea60eefbea2957be27b8d1923095df771","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["268f5a06c7ea42fbf9c9a25b7e9d33cf083d83e2"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"727bb765ff2542275f6d31f67be18d7104bae148":["9856095f7afb5a607bf5e65077615ed91273508c"],"c72f6f0907682b825869d7878ba72d8259dabc91":["727bb765ff2542275f6d31f67be18d7104bae148","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"4bab9eeea60eefbea2957be27b8d1923095df771":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0e7ddedf744427dad36befd57a11188002f735f9":["e2b464eff6241d222eb99fab9a53115a1808840e","9856095f7afb5a607bf5e65077615ed91273508c"],"e2b464eff6241d222eb99fab9a53115a1808840e":["f03e4bed5023ec3ef93a771b8888cae991cf448d","4bab9eeea60eefbea2957be27b8d1923095df771"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","c72f6f0907682b825869d7878ba72d8259dabc91","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"9856095f7afb5a607bf5e65077615ed91273508c":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["0e7ddedf744427dad36befd57a11188002f735f9"],"268f5a06c7ea42fbf9c9a25b7e9d33cf083d83e2":["ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"c344401c324a00bc10cacfb90598738235a4decb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["c344401c324a00bc10cacfb90598738235a4decb"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}