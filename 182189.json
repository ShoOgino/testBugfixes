{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NO;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NO;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b07132423639577d6f68cebbec9c83599d5d5a3a","date":1419020622,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        termsOut.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99f06f5dd087b1829e7b4139e4d014c786b92572","date":1592312728,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n\n    boolean success = false;\n    try {\n      metaOut.writeVInt(fields.size());\n      for (ByteBuffersDataOutput fieldMeta : fields) {\n        fieldMeta.copyTo(metaOut);\n      }\n      CodecUtil.writeFooter(indexOut);\n      metaOut.writeLong(indexOut.getFilePointer());\n      CodecUtil.writeFooter(termsOut);\n      metaOut.writeLong(termsOut.getFilePointer());\n      CodecUtil.writeFooter(metaOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(metaOut, termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(metaOut, termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    \n    boolean success = false;\n    try {\n      \n      final long dirStart = termsOut.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      termsOut.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        termsOut.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        termsOut.writeVLong(field.numTerms);\n        termsOut.writeVInt(field.rootCode.length);\n        termsOut.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          termsOut.writeVLong(field.sumTotalTermFreq);\n        }\n        termsOut.writeVLong(field.sumDocFreq);\n        termsOut.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(termsOut, field.minTerm);\n        writeBytesRef(termsOut, field.maxTerm);\n      }\n      writeTrailer(termsOut, dirStart);\n      CodecUtil.writeFooter(termsOut);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(termsOut, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(termsOut, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b07132423639577d6f68cebbec9c83599d5d5a3a":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99f06f5dd087b1829e7b4139e4d014c786b92572":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["4d637064d608752565d4f9f41b2497dfdfdde50e","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99f06f5dd087b1829e7b4139e4d014c786b92572"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"b07132423639577d6f68cebbec9c83599d5d5a3a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"99f06f5dd087b1829e7b4139e4d014c786b92572":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad80176d91a6f70fe93880e43dfd697dc4e63ed","4d637064d608752565d4f9f41b2497dfdfdde50e"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["99f06f5dd087b1829e7b4139e4d014c786b92572"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}