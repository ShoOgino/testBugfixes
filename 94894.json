{"path":"lucene/core/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>int</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Integer>(\n      NumericRangeQuery.newIntRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>int</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Integer>(\n      NumericRangeQuery.newIntRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>int</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<>(\n      NumericRangeQuery.newIntRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>int</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Integer>(\n      NumericRangeQuery.newIntRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>int</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<>(\n      NumericRangeQuery.newIntRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>int</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<>(\n      NumericRangeQuery.newIntRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}