{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#getRangeQueryForFloatDoubleDocValues(SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97","date":1458507332,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#getRangeQueryForFloatDoubleDocValues(SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Query getRangeQueryForFloatDoubleDocValues(SchemaField sf, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query;\n    String fieldName = sf.getName();\n\n    Number minVal = min == null ? null : type == TrieTypes.FLOAT ? Float.parseFloat(min): Double.parseDouble(min);\n    Number maxVal = max == null ? null : type == TrieTypes.FLOAT ? Float.parseFloat(max): Double.parseDouble(max);\n    \n    Long minBits = \n        min == null ? null : type == TrieTypes.FLOAT ? (long) Float.floatToIntBits(minVal.floatValue()): Double.doubleToLongBits(minVal.doubleValue());\n    Long maxBits = \n        max == null ? null : type == TrieTypes.FLOAT ? (long) Float.floatToIntBits(maxVal.floatValue()): Double.doubleToLongBits(maxVal.doubleValue());\n    \n    long negativeInfinityBits = type == TrieTypes.FLOAT ? FLOAT_NEGATIVE_INFINITY_BITS : DOUBLE_NEGATIVE_INFINITY_BITS;\n    long positiveInfinityBits = type == TrieTypes.FLOAT ? FLOAT_POSITIVE_INFINITY_BITS : DOUBLE_POSITIVE_INFINITY_BITS;\n    long minusZeroBits = type == TrieTypes.FLOAT ? FLOAT_MINUS_ZERO_BITS : DOUBLE_MINUS_ZERO_BITS;\n    long zeroBits = type == TrieTypes.FLOAT ? FLOAT_ZERO_BITS : DOUBLE_ZERO_BITS;\n    \n    // If min is negative (or -0d) and max is positive (or +0d), then issue a FunctionRangeQuery\n    if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) && \n        (maxVal == null || (maxVal.doubleValue() > 0d || maxBits == zeroBits))) {\n\n      ValueSource vs = getValueSource(sf, null);\n      query = new FunctionRangeQuery(new ValueSourceRangeFilter(vs, min, max, minInclusive, maxInclusive));\n\n    } else { // If both max and min are negative (or -0d), then issue range query with max and min reversed\n      if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) &&\n          (maxVal != null && (maxVal.doubleValue() < 0d || maxBits == minusZeroBits))) {\n        query = DocValuesRangeQuery.newLongRange\n            (fieldName, maxBits, (min == null ? negativeInfinityBits : minBits), maxInclusive, minInclusive);\n      } else { // If both max and min are positive, then issue range query\n        query = DocValuesRangeQuery.newLongRange\n            (fieldName, minBits, (max == null ? positiveInfinityBits : maxBits), minInclusive, maxInclusive);\n      }\n    }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a412a7808b2815566cb17117ebe6638112b9a31","date":1484916151,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#getRangeQueryForFloatDoubleDocValues(SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#getRangeQueryForFloatDoubleDocValues(SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  private Query getRangeQueryForFloatDoubleDocValues(SchemaField sf, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query;\n    String fieldName = sf.getName();\n\n    Number minVal = min == null ? null : type == TrieTypes.FLOAT ? Float.parseFloat(min): Double.parseDouble(min);\n    Number maxVal = max == null ? null : type == TrieTypes.FLOAT ? Float.parseFloat(max): Double.parseDouble(max);\n    \n    Long minBits = \n        min == null ? null : type == TrieTypes.FLOAT ? (long) Float.floatToIntBits(minVal.floatValue()): Double.doubleToLongBits(minVal.doubleValue());\n    Long maxBits = \n        max == null ? null : type == TrieTypes.FLOAT ? (long) Float.floatToIntBits(maxVal.floatValue()): Double.doubleToLongBits(maxVal.doubleValue());\n    \n    long negativeInfinityBits = type == TrieTypes.FLOAT ? FLOAT_NEGATIVE_INFINITY_BITS : DOUBLE_NEGATIVE_INFINITY_BITS;\n    long positiveInfinityBits = type == TrieTypes.FLOAT ? FLOAT_POSITIVE_INFINITY_BITS : DOUBLE_POSITIVE_INFINITY_BITS;\n    long minusZeroBits = type == TrieTypes.FLOAT ? FLOAT_MINUS_ZERO_BITS : DOUBLE_MINUS_ZERO_BITS;\n    long zeroBits = type == TrieTypes.FLOAT ? FLOAT_ZERO_BITS : DOUBLE_ZERO_BITS;\n    \n    // If min is negative (or -0d) and max is positive (or +0d), then issue a FunctionRangeQuery\n    if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) && \n        (maxVal == null || (maxVal.doubleValue() > 0d || maxBits == zeroBits))) {\n\n      ValueSource vs = getValueSource(sf, null);\n      query = new FunctionRangeQuery(new ValueSourceRangeFilter(vs, min, max, minInclusive, maxInclusive));\n\n    } else { // If both max and min are negative (or -0d), then issue range query with max and min reversed\n      if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) &&\n          (maxVal != null && (maxVal.doubleValue() < 0d || maxBits == minusZeroBits))) {\n        query = numericDocValuesRangeQuery\n            (fieldName, maxBits, (min == null ? negativeInfinityBits : minBits), maxInclusive, minInclusive);\n      } else { // If both max and min are positive, then issue range query\n        query = numericDocValuesRangeQuery\n            (fieldName, minBits, (max == null ? positiveInfinityBits : maxBits), minInclusive, maxInclusive);\n      }\n    }\n    return query;\n  }\n\n","sourceOld":"  private Query getRangeQueryForFloatDoubleDocValues(SchemaField sf, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query;\n    String fieldName = sf.getName();\n\n    Number minVal = min == null ? null : type == TrieTypes.FLOAT ? Float.parseFloat(min): Double.parseDouble(min);\n    Number maxVal = max == null ? null : type == TrieTypes.FLOAT ? Float.parseFloat(max): Double.parseDouble(max);\n    \n    Long minBits = \n        min == null ? null : type == TrieTypes.FLOAT ? (long) Float.floatToIntBits(minVal.floatValue()): Double.doubleToLongBits(minVal.doubleValue());\n    Long maxBits = \n        max == null ? null : type == TrieTypes.FLOAT ? (long) Float.floatToIntBits(maxVal.floatValue()): Double.doubleToLongBits(maxVal.doubleValue());\n    \n    long negativeInfinityBits = type == TrieTypes.FLOAT ? FLOAT_NEGATIVE_INFINITY_BITS : DOUBLE_NEGATIVE_INFINITY_BITS;\n    long positiveInfinityBits = type == TrieTypes.FLOAT ? FLOAT_POSITIVE_INFINITY_BITS : DOUBLE_POSITIVE_INFINITY_BITS;\n    long minusZeroBits = type == TrieTypes.FLOAT ? FLOAT_MINUS_ZERO_BITS : DOUBLE_MINUS_ZERO_BITS;\n    long zeroBits = type == TrieTypes.FLOAT ? FLOAT_ZERO_BITS : DOUBLE_ZERO_BITS;\n    \n    // If min is negative (or -0d) and max is positive (or +0d), then issue a FunctionRangeQuery\n    if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) && \n        (maxVal == null || (maxVal.doubleValue() > 0d || maxBits == zeroBits))) {\n\n      ValueSource vs = getValueSource(sf, null);\n      query = new FunctionRangeQuery(new ValueSourceRangeFilter(vs, min, max, minInclusive, maxInclusive));\n\n    } else { // If both max and min are negative (or -0d), then issue range query with max and min reversed\n      if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) &&\n          (maxVal != null && (maxVal.doubleValue() < 0d || maxBits == minusZeroBits))) {\n        query = DocValuesRangeQuery.newLongRange\n            (fieldName, maxBits, (min == null ? negativeInfinityBits : minBits), maxInclusive, minInclusive);\n      } else { // If both max and min are positive, then issue range query\n        query = DocValuesRangeQuery.newLongRange\n            (fieldName, minBits, (max == null ? positiveInfinityBits : maxBits), minInclusive, maxInclusive);\n      }\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdd24a5b48ffd59f921ccc4f5199fc029f65797","date":1485039431,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getRangeQueryForFloatDoubleDocValues(SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#getRangeQueryForFloatDoubleDocValues(SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getRangeQueryForFloatDoubleDocValues(SchemaField sf, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query;\n    String fieldName = sf.getName();\n\n    Number minVal = min == null ? null : getType() == NumberType.FLOAT ? Float.parseFloat(min): Double.parseDouble(min);\n    Number maxVal = max == null ? null : getType() == NumberType.FLOAT ? Float.parseFloat(max): Double.parseDouble(max);\n    \n    Long minBits = \n        min == null ? null : getType() == NumberType.FLOAT ? (long) Float.floatToIntBits(minVal.floatValue()): Double.doubleToLongBits(minVal.doubleValue());\n    Long maxBits = \n        max == null ? null : getType() == NumberType.FLOAT ? (long) Float.floatToIntBits(maxVal.floatValue()): Double.doubleToLongBits(maxVal.doubleValue());\n    \n    long negativeInfinityBits = getType() == NumberType.FLOAT ? FLOAT_NEGATIVE_INFINITY_BITS : DOUBLE_NEGATIVE_INFINITY_BITS;\n    long positiveInfinityBits = getType() == NumberType.FLOAT ? FLOAT_POSITIVE_INFINITY_BITS : DOUBLE_POSITIVE_INFINITY_BITS;\n    long minusZeroBits = getType() == NumberType.FLOAT ? FLOAT_MINUS_ZERO_BITS : DOUBLE_MINUS_ZERO_BITS;\n    long zeroBits = getType() == NumberType.FLOAT ? FLOAT_ZERO_BITS : DOUBLE_ZERO_BITS;\n    \n    // If min is negative (or -0d) and max is positive (or +0d), then issue a FunctionRangeQuery\n    if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) && \n        (maxVal == null || (maxVal.doubleValue() > 0d || maxBits == zeroBits))) {\n\n      ValueSource vs = getValueSource(sf, null);\n      query = new FunctionRangeQuery(new ValueSourceRangeFilter(vs, min, max, minInclusive, maxInclusive));\n\n    } else { // If both max and min are negative (or -0d), then issue range query with max and min reversed\n      if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) &&\n          (maxVal != null && (maxVal.doubleValue() < 0d || maxBits == minusZeroBits))) {\n        query = numericDocValuesRangeQuery\n            (fieldName, maxBits, (min == null ? negativeInfinityBits : minBits), maxInclusive, minInclusive);\n      } else { // If both max and min are positive, then issue range query\n        query = numericDocValuesRangeQuery\n            (fieldName, minBits, (max == null ? positiveInfinityBits : maxBits), minInclusive, maxInclusive);\n      }\n    }\n    return query;\n  }\n\n","sourceOld":"  private Query getRangeQueryForFloatDoubleDocValues(SchemaField sf, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query;\n    String fieldName = sf.getName();\n\n    Number minVal = min == null ? null : type == TrieTypes.FLOAT ? Float.parseFloat(min): Double.parseDouble(min);\n    Number maxVal = max == null ? null : type == TrieTypes.FLOAT ? Float.parseFloat(max): Double.parseDouble(max);\n    \n    Long minBits = \n        min == null ? null : type == TrieTypes.FLOAT ? (long) Float.floatToIntBits(minVal.floatValue()): Double.doubleToLongBits(minVal.doubleValue());\n    Long maxBits = \n        max == null ? null : type == TrieTypes.FLOAT ? (long) Float.floatToIntBits(maxVal.floatValue()): Double.doubleToLongBits(maxVal.doubleValue());\n    \n    long negativeInfinityBits = type == TrieTypes.FLOAT ? FLOAT_NEGATIVE_INFINITY_BITS : DOUBLE_NEGATIVE_INFINITY_BITS;\n    long positiveInfinityBits = type == TrieTypes.FLOAT ? FLOAT_POSITIVE_INFINITY_BITS : DOUBLE_POSITIVE_INFINITY_BITS;\n    long minusZeroBits = type == TrieTypes.FLOAT ? FLOAT_MINUS_ZERO_BITS : DOUBLE_MINUS_ZERO_BITS;\n    long zeroBits = type == TrieTypes.FLOAT ? FLOAT_ZERO_BITS : DOUBLE_ZERO_BITS;\n    \n    // If min is negative (or -0d) and max is positive (or +0d), then issue a FunctionRangeQuery\n    if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) && \n        (maxVal == null || (maxVal.doubleValue() > 0d || maxBits == zeroBits))) {\n\n      ValueSource vs = getValueSource(sf, null);\n      query = new FunctionRangeQuery(new ValueSourceRangeFilter(vs, min, max, minInclusive, maxInclusive));\n\n    } else { // If both max and min are negative (or -0d), then issue range query with max and min reversed\n      if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) &&\n          (maxVal != null && (maxVal.doubleValue() < 0d || maxBits == minusZeroBits))) {\n        query = numericDocValuesRangeQuery\n            (fieldName, maxBits, (min == null ? negativeInfinityBits : minBits), maxInclusive, minInclusive);\n      } else { // If both max and min are positive, then issue range query\n        query = numericDocValuesRangeQuery\n            (fieldName, minBits, (max == null ? positiveInfinityBits : maxBits), minInclusive, maxInclusive);\n      }\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":["dfa8ee8a03218e801f864cf0ef8171a2fdd06f35","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getRangeQueryForFloatDoubleDocValues(SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#getRangeQueryForFloatDoubleDocValues(SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getRangeQueryForFloatDoubleDocValues(SchemaField sf, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query;\n    String fieldName = sf.getName();\n\n    Number minVal = min == null ? null : getType() == NumberType.FLOAT ? Float.parseFloat(min): Double.parseDouble(min);\n    Number maxVal = max == null ? null : getType() == NumberType.FLOAT ? Float.parseFloat(max): Double.parseDouble(max);\n    \n    Long minBits = \n        min == null ? null : getType() == NumberType.FLOAT ? (long) Float.floatToIntBits(minVal.floatValue()): Double.doubleToLongBits(minVal.doubleValue());\n    Long maxBits = \n        max == null ? null : getType() == NumberType.FLOAT ? (long) Float.floatToIntBits(maxVal.floatValue()): Double.doubleToLongBits(maxVal.doubleValue());\n    \n    long negativeInfinityBits = getType() == NumberType.FLOAT ? FLOAT_NEGATIVE_INFINITY_BITS : DOUBLE_NEGATIVE_INFINITY_BITS;\n    long positiveInfinityBits = getType() == NumberType.FLOAT ? FLOAT_POSITIVE_INFINITY_BITS : DOUBLE_POSITIVE_INFINITY_BITS;\n    long minusZeroBits = getType() == NumberType.FLOAT ? FLOAT_MINUS_ZERO_BITS : DOUBLE_MINUS_ZERO_BITS;\n    long zeroBits = getType() == NumberType.FLOAT ? FLOAT_ZERO_BITS : DOUBLE_ZERO_BITS;\n    \n    // If min is negative (or -0d) and max is positive (or +0d), then issue a FunctionRangeQuery\n    if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) && \n        (maxVal == null || (maxVal.doubleValue() > 0d || maxBits == zeroBits))) {\n\n      ValueSource vs = getValueSource(sf, null);\n      query = new FunctionRangeQuery(new ValueSourceRangeFilter(vs, min, max, minInclusive, maxInclusive));\n\n    } else { // If both max and min are negative (or -0d), then issue range query with max and min reversed\n      if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) &&\n          (maxVal != null && (maxVal.doubleValue() < 0d || maxBits == minusZeroBits))) {\n        query = numericDocValuesRangeQuery\n            (fieldName, maxBits, (min == null ? negativeInfinityBits : minBits), maxInclusive, minInclusive);\n      } else { // If both max and min are positive, then issue range query\n        query = numericDocValuesRangeQuery\n            (fieldName, minBits, (max == null ? positiveInfinityBits : maxBits), minInclusive, maxInclusive);\n      }\n    }\n    return query;\n  }\n\n","sourceOld":"  private Query getRangeQueryForFloatDoubleDocValues(SchemaField sf, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query;\n    String fieldName = sf.getName();\n\n    Number minVal = min == null ? null : type == TrieTypes.FLOAT ? Float.parseFloat(min): Double.parseDouble(min);\n    Number maxVal = max == null ? null : type == TrieTypes.FLOAT ? Float.parseFloat(max): Double.parseDouble(max);\n    \n    Long minBits = \n        min == null ? null : type == TrieTypes.FLOAT ? (long) Float.floatToIntBits(minVal.floatValue()): Double.doubleToLongBits(minVal.doubleValue());\n    Long maxBits = \n        max == null ? null : type == TrieTypes.FLOAT ? (long) Float.floatToIntBits(maxVal.floatValue()): Double.doubleToLongBits(maxVal.doubleValue());\n    \n    long negativeInfinityBits = type == TrieTypes.FLOAT ? FLOAT_NEGATIVE_INFINITY_BITS : DOUBLE_NEGATIVE_INFINITY_BITS;\n    long positiveInfinityBits = type == TrieTypes.FLOAT ? FLOAT_POSITIVE_INFINITY_BITS : DOUBLE_POSITIVE_INFINITY_BITS;\n    long minusZeroBits = type == TrieTypes.FLOAT ? FLOAT_MINUS_ZERO_BITS : DOUBLE_MINUS_ZERO_BITS;\n    long zeroBits = type == TrieTypes.FLOAT ? FLOAT_ZERO_BITS : DOUBLE_ZERO_BITS;\n    \n    // If min is negative (or -0d) and max is positive (or +0d), then issue a FunctionRangeQuery\n    if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) && \n        (maxVal == null || (maxVal.doubleValue() > 0d || maxBits == zeroBits))) {\n\n      ValueSource vs = getValueSource(sf, null);\n      query = new FunctionRangeQuery(new ValueSourceRangeFilter(vs, min, max, minInclusive, maxInclusive));\n\n    } else { // If both max and min are negative (or -0d), then issue range query with max and min reversed\n      if ((minVal == null || minVal.doubleValue() < 0d || minBits == minusZeroBits) &&\n          (maxVal != null && (maxVal.doubleValue() < 0d || maxBits == minusZeroBits))) {\n        query = DocValuesRangeQuery.newLongRange\n            (fieldName, maxBits, (min == null ? negativeInfinityBits : minBits), maxInclusive, minInclusive);\n      } else { // If both max and min are positive, then issue range query\n        query = DocValuesRangeQuery.newLongRange\n            (fieldName, minBits, (max == null ? positiveInfinityBits : maxBits), minInclusive, maxInclusive);\n      }\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["5a412a7808b2815566cb17117ebe6638112b9a31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a412a7808b2815566cb17117ebe6638112b9a31":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97"],"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97","3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797"]},"commit2Childs":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97"],"5a412a7808b2815566cb17117ebe6638112b9a31":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97":["5a412a7808b2815566cb17117ebe6638112b9a31","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}