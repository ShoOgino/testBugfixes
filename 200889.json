{"path":"lucene/classification/src/test/org/apache/lucene/classification/Test20NewsgroupsClassification#testClassifier(IndexReader,long,IndexReader,ExecutorService,List[Future[String]],Classifier[BytesRef]).mjava","commits":[{"id":"33bfee30277584028170135002def66f9d57732b","date":1547842233,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/Test20NewsgroupsClassification#testClassifier(IndexReader,long,IndexReader,ExecutorService,List[Future[String]],Classifier[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void testClassifier(final IndexReader ar, long startTime, IndexReader testReader, ExecutorService service, List<Future<String>> futures, Classifier<BytesRef> classifier) {\n    futures.add(service.submit(() -> {\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix;\n      if (split) {\n        confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(testReader, classifier, CATEGORY_FIELD, BODY_FIELD, 60000 * 30);\n      } else {\n        confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(ar, classifier, CATEGORY_FIELD, BODY_FIELD, 60000 * 30);\n      }\n\n      final long endTime = System.currentTimeMillis();\n      final int elapse = (int) (endTime - startTime) / 1000;\n\n      return \" * \" + classifier + \" \\n    * accuracy = \" + confusionMatrix.getAccuracy() +\n          \"\\n    * precision = \" + confusionMatrix.getPrecision() +\n          \"\\n    * recall = \" + confusionMatrix.getRecall() +\n          \"\\n    * f1-measure = \" + confusionMatrix.getF1Measure() +\n          \"\\n    * avgClassificationTime = \" + confusionMatrix.getAvgClassificationTime() +\n          \"\\n    * time = \" + elapse + \" (sec)\\n \";\n    }));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"887f38f1943e88ac7f468b18be6f5d42b4a70add","date":1547972665,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/Test20NewsgroupsClassification#testClassifier(IndexReader,IndexReader,ExecutorService,List[Future[String]],Classifier[BytesRef]).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/Test20NewsgroupsClassification#testClassifier(IndexReader,long,IndexReader,ExecutorService,List[Future[String]],Classifier[BytesRef]).mjava","sourceNew":"  private void testClassifier(final IndexReader ar, IndexReader testReader, ExecutorService service, List<Future<String>> futures, Classifier<BytesRef> classifier) {\n    futures.add(service.submit(() -> {\n      final long startTime = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix;\n      if (split) {\n        confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(testReader, classifier, CATEGORY_FIELD, BODY_FIELD, 60000 * 30);\n      } else {\n        confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(ar, classifier, CATEGORY_FIELD, BODY_FIELD, 60000 * 30);\n      }\n      final long endTime = System.currentTimeMillis();\n      final int elapse = (int) (endTime - startTime) / 1000;\n\n      return \" * \" + classifier + \" \\n    * accuracy = \" + confusionMatrix.getAccuracy() +\n          \"\\n    * precision = \" + confusionMatrix.getPrecision() +\n          \"\\n    * recall = \" + confusionMatrix.getRecall() +\n          \"\\n    * f1-measure = \" + confusionMatrix.getF1Measure() +\n          \"\\n    * avgClassificationTime = \" + confusionMatrix.getAvgClassificationTime() +\n          \"\\n    * time = \" + elapse + \" (sec)\\n \";\n    }));\n  }\n\n","sourceOld":"  private void testClassifier(final IndexReader ar, long startTime, IndexReader testReader, ExecutorService service, List<Future<String>> futures, Classifier<BytesRef> classifier) {\n    futures.add(service.submit(() -> {\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix;\n      if (split) {\n        confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(testReader, classifier, CATEGORY_FIELD, BODY_FIELD, 60000 * 30);\n      } else {\n        confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(ar, classifier, CATEGORY_FIELD, BODY_FIELD, 60000 * 30);\n      }\n\n      final long endTime = System.currentTimeMillis();\n      final int elapse = (int) (endTime - startTime) / 1000;\n\n      return \" * \" + classifier + \" \\n    * accuracy = \" + confusionMatrix.getAccuracy() +\n          \"\\n    * precision = \" + confusionMatrix.getPrecision() +\n          \"\\n    * recall = \" + confusionMatrix.getRecall() +\n          \"\\n    * f1-measure = \" + confusionMatrix.getF1Measure() +\n          \"\\n    * avgClassificationTime = \" + confusionMatrix.getAvgClassificationTime() +\n          \"\\n    * time = \" + elapse + \" (sec)\\n \";\n    }));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"887f38f1943e88ac7f468b18be6f5d42b4a70add":["33bfee30277584028170135002def66f9d57732b"],"33bfee30277584028170135002def66f9d57732b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33bfee30277584028170135002def66f9d57732b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"887f38f1943e88ac7f468b18be6f5d42b4a70add":[],"33bfee30277584028170135002def66f9d57732b":["887f38f1943e88ac7f468b18be6f5d42b4a70add"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["887f38f1943e88ac7f468b18be6f5d42b4a70add","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}