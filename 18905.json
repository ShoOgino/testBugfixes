{"path":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null if the term does not\n   *  exist. */\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null if the term does not\n   *  exist. */\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term, with control over whether freqs are required.\n   *  Some codecs may be able to optimize their\n   *  implementation when freqs are not required.  This will\n   *  return null if the field or term does not exist.  See {@link\n   *  TermsEnum#docs(Bits,DocsEnum,int)}.*/\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, flags);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null if the term does not\n   *  exist. */\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null if the term does not\n   *  exist. */\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getTermDocsEnum(IndexReader,Bits,String,BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null if the term does not\n   *  exist. */\n  public static DocsEnum getTermDocsEnum(IndexReader r, Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Terms terms = getTerms(r, field);\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term, true)) {\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"02331260bb246364779cb6f04919ca47900d01bb":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}