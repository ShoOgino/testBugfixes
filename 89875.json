{"path":"lucene/src/java/org/apache/lucene/search/cache/SimpleEntryKey#equals(Object).mjava","commits":[{"id":"eee9156bf08d7eaae5e8d8ab5f855ba61012e257","date":1285443157,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/SimpleEntryKey#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public boolean equals(Object obj) {\r\n    if( obj instanceof SimpleEntryKey ) {\r\n      SimpleEntryKey key = (SimpleEntryKey)obj;\r\n      if( key.hash != hash ||\r\n          key.clazz != clazz ||\r\n          key.args.length != args.length ) {\r\n        return false;\r\n      }\r\n\r\n      // In the off chance that the hash etc is all the same\r\n      // we should actually check the values\r\n      for( int i=0; i<args.length; i++ ) {\r\n        if( !args[i].equals( key.args[i] ) ) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5637938a7dc36e7ff09a5d9398957bd46b15129a","date":1285538458,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/SimpleEntryKey#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/cache/SimpleEntryKey#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if( obj instanceof SimpleEntryKey ) {\n      SimpleEntryKey key = (SimpleEntryKey)obj;\n      if( key.hash != hash ||\n          key.clazz != clazz ||\n          key.args.length != args.length ) {\n        return false;\n      }\n\n      // In the off chance that the hash etc is all the same\n      // we should actually check the values\n      for( int i=0; i<args.length; i++ ) {\n        if( !args[i].equals( key.args[i] ) ) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\r\n  public boolean equals(Object obj) {\r\n    if( obj instanceof SimpleEntryKey ) {\r\n      SimpleEntryKey key = (SimpleEntryKey)obj;\r\n      if( key.hash != hash ||\r\n          key.clazz != clazz ||\r\n          key.args.length != args.length ) {\r\n        return false;\r\n      }\r\n\r\n      // In the off chance that the hash etc is all the same\r\n      // we should actually check the values\r\n      for( int i=0; i<args.length; i++ ) {\r\n        if( !args[i].equals( key.args[i] ) ) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/cache/SimpleEntryKey#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if( obj instanceof SimpleEntryKey ) {\n      SimpleEntryKey key = (SimpleEntryKey)obj;\n      if( key.hash != hash ||\n          key.clazz != clazz ||\n          key.args.length != args.length ) {\n        return false;\n      }\n\n      // In the off chance that the hash etc is all the same\n      // we should actually check the values\n      for( int i=0; i<args.length; i++ ) {\n        if( !args[i].equals( key.args[i] ) ) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/cache/SimpleEntryKey#equals(Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if( obj instanceof SimpleEntryKey ) {\n      SimpleEntryKey key = (SimpleEntryKey)obj;\n      if( key.hash != hash ||\n          key.clazz != clazz ||\n          key.args.length != args.length ) {\n        return false;\n      }\n\n      // In the off chance that the hash etc is all the same\n      // we should actually check the values\n      for( int i=0; i<args.length; i++ ) {\n        if( !args[i].equals( key.args[i] ) ) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5637938a7dc36e7ff09a5d9398957bd46b15129a"],"382fe3a6ca9745891afebda9b9a57cc158305545":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"5637938a7dc36e7ff09a5d9398957bd46b15129a":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["5637938a7dc36e7ff09a5d9398957bd46b15129a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5637938a7dc36e7ff09a5d9398957bd46b15129a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","382fe3a6ca9745891afebda9b9a57cc158305545"],"382fe3a6ca9745891afebda9b9a57cc158305545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}