{"path":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","pathOld":"/dev/null","sourceNew":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  private static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n\n    int maxDoc = reader.maxDoc();\n    \n    switch(sortField.getType()) {\n\n    case STRING:\n      {\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[reader.maxDoc()];\n        Arrays.fill(ords, missingOrd);\n        SortedDocValues sorted = DocValues.getSorted(reader, sortField.getField());\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n        \n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n    case LONG:\n      {\n        long[] values = new long[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case INT:\n      {\n        int[] values = new int[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n        \n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case DOUBLE:\n      {\n        double[] values = new double[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n        \n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case FLOAT:\n      {\n        float[] values = new float[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    default:\n      throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","pathOld":"/dev/null","sourceNew":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  private static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n\n    int maxDoc = reader.maxDoc();\n    \n    switch(sortField.getType()) {\n\n    case STRING:\n      {\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[reader.maxDoc()];\n        Arrays.fill(ords, missingOrd);\n        SortedDocValues sorted = DocValues.getSorted(reader, sortField.getField());\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n        \n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n    case LONG:\n      {\n        long[] values = new long[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case INT:\n      {\n        int[] values = new int[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n        \n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case DOUBLE:\n      {\n        double[] values = new double[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n        \n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case FLOAT:\n      {\n        float[] values = new float[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    default:\n      throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","pathOld":"/dev/null","sourceNew":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  private static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n\n    int maxDoc = reader.maxDoc();\n    \n    switch(sortField.getType()) {\n\n    case STRING:\n      {\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[reader.maxDoc()];\n        Arrays.fill(ords, missingOrd);\n        SortedDocValues sorted = DocValues.getSorted(reader, sortField.getField());\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n        \n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n    case LONG:\n      {\n        long[] values = new long[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case INT:\n      {\n        int[] values = new int[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n        \n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case DOUBLE:\n      {\n        double[] values = new double[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n        \n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case FLOAT:\n      {\n        float[] values = new float[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    default:\n      throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","sourceNew":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  private static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n\n    final int maxDoc = reader.maxDoc();\n    final int reverseMul = sortField.getReverse() ? -1 : 1;\n    final SortField.Type sortType = getSortFieldType(sortField);\n\n    switch(sortType) {\n\n    case STRING:\n      {\n        final SortedDocValues sorted = getOrWrapSorted(reader, sortField);\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[reader.maxDoc()];\n        Arrays.fill(ords, missingOrd);\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n        \n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n    case LONG:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        long[] values = new long[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case INT:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        int[] values = new int[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case DOUBLE:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        double[] values = new double[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case FLOAT:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        float[] values = new float[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    default:\n      throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","sourceOld":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  private static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n\n    int maxDoc = reader.maxDoc();\n    \n    switch(sortField.getType()) {\n\n    case STRING:\n      {\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[reader.maxDoc()];\n        Arrays.fill(ords, missingOrd);\n        SortedDocValues sorted = DocValues.getSorted(reader, sortField.getField());\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n        \n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n    case LONG:\n      {\n        long[] values = new long[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case INT:\n      {\n        int[] values = new int[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n        \n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case DOUBLE:\n      {\n        double[] values = new double[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n        \n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case FLOAT:\n      {\n        float[] values = new float[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    default:\n      throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","bugFix":null,"bugIntro":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","sourceNew":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  private static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n\n    final int maxDoc = reader.maxDoc();\n    final int reverseMul = sortField.getReverse() ? -1 : 1;\n    final SortField.Type sortType = getSortFieldType(sortField);\n\n    switch(sortType) {\n\n    case STRING:\n      {\n        final SortedDocValues sorted = getOrWrapSorted(reader, sortField);\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[reader.maxDoc()];\n        Arrays.fill(ords, missingOrd);\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n        \n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n    case LONG:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        long[] values = new long[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case INT:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        int[] values = new int[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case DOUBLE:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        double[] values = new double[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case FLOAT:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        float[] values = new float[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    default:\n      throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","sourceOld":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  private static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n\n    int maxDoc = reader.maxDoc();\n    \n    switch(sortField.getType()) {\n\n    case STRING:\n      {\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[reader.maxDoc()];\n        Arrays.fill(ords, missingOrd);\n        SortedDocValues sorted = DocValues.getSorted(reader, sortField.getField());\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n        \n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n    case LONG:\n      {\n        long[] values = new long[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case INT:\n      {\n        int[] values = new int[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n        \n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case DOUBLE:\n      {\n        double[] values = new double[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n        \n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case FLOAT:\n      {\n        float[] values = new float[maxDoc];\n        NumericDocValues dvs = DocValues.getNumeric(reader, sortField.getField());\n\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        final int reverseMul;\n        if (sortField.getReverse()) {\n          reverseMul = -1;\n        } else {\n          reverseMul = 1;\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    default:\n      throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","sourceNew":"  static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n    return getDocComparator(reader.maxDoc(), sortField,\n        () -> getOrWrapSorted(reader, sortField),\n        () -> getOrWrapNumeric(reader, sortField));\n  }\n\n","sourceOld":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  private static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n\n    final int maxDoc = reader.maxDoc();\n    final int reverseMul = sortField.getReverse() ? -1 : 1;\n    final SortField.Type sortType = getSortFieldType(sortField);\n\n    switch(sortType) {\n\n    case STRING:\n      {\n        final SortedDocValues sorted = getOrWrapSorted(reader, sortField);\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[reader.maxDoc()];\n        Arrays.fill(ords, missingOrd);\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n        \n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n    case LONG:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        long[] values = new long[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case INT:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        int[] values = new int[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case DOUBLE:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        double[] values = new double[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case FLOAT:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        float[] values = new float[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    default:\n      throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","bugFix":["e065cebbdee472a02bde38052717a8cd7ee8ab3b","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","sourceNew":"  static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n    return getDocComparator(reader.maxDoc(), sortField,\n        () -> getOrWrapSorted(reader, sortField),\n        () -> getOrWrapNumeric(reader, sortField));\n  }\n\n","sourceOld":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  private static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n\n    final int maxDoc = reader.maxDoc();\n    final int reverseMul = sortField.getReverse() ? -1 : 1;\n    final SortField.Type sortType = getSortFieldType(sortField);\n\n    switch(sortType) {\n\n    case STRING:\n      {\n        final SortedDocValues sorted = getOrWrapSorted(reader, sortField);\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[reader.maxDoc()];\n        Arrays.fill(ords, missingOrd);\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n        \n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n    case LONG:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        long[] values = new long[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case INT:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        int[] values = new int[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case DOUBLE:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        double[] values = new double[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    case FLOAT:\n      {\n        final NumericDocValues dvs = getOrWrapNumeric(reader, sortField);\n        float[] values = new float[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n    default:\n      throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(LeafReader,SortField).mjava","sourceNew":null,"sourceOld":"  static DocComparator getDocComparator(LeafReader reader, SortField sortField) throws IOException {\n    return getDocComparator(reader.maxDoc(), sortField,\n        () -> getOrWrapSorted(reader, sortField),\n        () -> getOrWrapNumeric(reader, sortField));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"773bf150032d3ef6c95997a154fb914b82875cb8":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"]},"commit2Childs":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e065cebbdee472a02bde38052717a8cd7ee8ab3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","773bf150032d3ef6c95997a154fb914b82875cb8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}