{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b5e0eebe355b14693e24007d721da78a79d8170","date":1305898401,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    Norm norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7f1e9c48dcf5351850e841f712bf65196dcf74","date":1306914955,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // field does not store norms\n      throw new IllegalStateException(\"Cannot setNorm for field \" + field + \": norms were omitted\");\n    }\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37ff5956d30d0c66110ac0c84d8e32d46b67eff1","date":1306967829,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // field does not store norms\n      throw new IllegalStateException(\"Cannot setNorm for field \" + field + \": norms were omitted\");\n    }\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // field does not store norms\n      throw new IllegalStateException(\"Cannot setNorm for field \" + field + \": norms were omitted\");\n    }\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null)                             // not an indexed field\n      return;\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // field does not store norms\n      throw new IllegalStateException(\"Cannot setNorm for field \" + field + \": norms were omitted\");\n    }\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // field does not store norms\n      throw new IllegalStateException(\"Cannot setNorm for field \" + field + \": norms were omitted\");\n    }\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doSetNorm(int,String,byte).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doSetNorm(int doc, String field, byte value)\n          throws IOException {\n    SegmentNorms norm = norms.get(field);\n    if (norm == null) {\n      // field does not store norms\n      throw new IllegalStateException(\"Cannot setNorm for field \" + field + \": norms were omitted\");\n    }\n\n    normsDirty = true;\n    norm.copyOnWrite()[doc] = value;                    // set the value\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b5e0eebe355b14693e24007d721da78a79d8170":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b5e0eebe355b14693e24007d721da78a79d8170"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0e7f1e9c48dcf5351850e841f712bf65196dcf74","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"37ff5956d30d0c66110ac0c84d8e32d46b67eff1":["a3776dccca01c11e7046323cfad46a3b4a471233","0e7f1e9c48dcf5351850e841f712bf65196dcf74"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b5e0eebe355b14693e24007d721da78a79d8170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","0e7f1e9c48dcf5351850e841f712bf65196dcf74"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0e7f1e9c48dcf5351850e841f712bf65196dcf74","4122a26e1fd0457a340616673a3d3aada370f713"],"0e7f1e9c48dcf5351850e841f712bf65196dcf74":["8b5e0eebe355b14693e24007d721da78a79d8170"],"4122a26e1fd0457a340616673a3d3aada370f713":["0e7f1e9c48dcf5351850e841f712bf65196dcf74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8b5e0eebe355b14693e24007d721da78a79d8170":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233","0e7f1e9c48dcf5351850e841f712bf65196dcf74"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["c715a0f99152be7566591f323c6c5a25725a1bcb"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"37ff5956d30d0c66110ac0c84d8e32d46b67eff1":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["37ff5956d30d0c66110ac0c84d8e32d46b67eff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7f1e9c48dcf5351850e841f712bf65196dcf74":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","37ff5956d30d0c66110ac0c84d8e32d46b67eff1","c715a0f99152be7566591f323c6c5a25725a1bcb","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8b5e0eebe355b14693e24007d721da78a79d8170","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","37ff5956d30d0c66110ac0c84d8e32d46b67eff1","c715a0f99152be7566591f323c6c5a25725a1bcb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}