{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#[T]_pathAs(Class[T],String,Map[String,Object]).mjava","commits":[{"id":"6985d2d06f6096c93a00bb73a94e89ae28431be1","date":1411398680,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#[T]_pathAs(Class[T],String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static <T> T pathAs(Class<T> clazz, String jsonPath, Map<String,Object> json) {\n    T val = null;\n    Object obj = atPath(jsonPath, json);\n    if (obj != null) {\n      if (clazz.isAssignableFrom(obj.getClass())) {\n        val = (T) obj;\n      } else {\n        // no ok if it's not null and of a different type\n        throw new IllegalStateException(\"Expected a \" + clazz.getName() + \" at path \"+\n           jsonPath+\" but found \"+obj+\" instead! \"+json);\n      }\n    } // it's ok if it is null\n    return val;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#[T]_pathAs(Class[T],String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#[T]_pathAs(Class[T],String,Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static <T> T pathAs(Class<T> clazz, String jsonPath, Map<String,Object> json) {\n    T val = null;\n    Object obj = atPath(jsonPath, json);\n    if (obj != null) {\n      if (clazz.isAssignableFrom(obj.getClass())) {\n        val = (T) obj;\n      } else {\n        // no ok if it's not null and of a different type\n        throw new IllegalStateException(\"Expected a \" + clazz.getName() + \" at path \"+\n           jsonPath+\" but found \"+obj+\" instead! \"+json);\n      }\n    } // it's ok if it is null\n    return val;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static <T> T pathAs(Class<T> clazz, String jsonPath, Map<String,Object> json) {\n    T val = null;\n    Object obj = atPath(jsonPath, json);\n    if (obj != null) {\n      if (clazz.isAssignableFrom(obj.getClass())) {\n        val = (T) obj;\n      } else {\n        // no ok if it's not null and of a different type\n        throw new IllegalStateException(\"Expected a \" + clazz.getName() + \" at path \"+\n           jsonPath+\" but found \"+obj+\" instead! \"+json);\n      }\n    } // it's ok if it is null\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#[T]_pathAs(Class[T],String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#[T]_pathAs(Class[T],String,Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static <T> T pathAs(Class<T> clazz, String jsonPath, Map<String,Object> json) {\n    T val = null;\n    Object obj = atPath(jsonPath, json);\n    if (obj != null) {\n      if (clazz.isAssignableFrom(obj.getClass())) {\n        val = (T) obj;\n      } else {\n        // no ok if it's not null and of a different type\n        throw new IllegalStateException(\"Expected a \" + clazz.getName() + \" at path \"+\n           jsonPath+\" but found \"+obj+\" instead! \"+json);\n      }\n    } // it's ok if it is null\n    return val;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static <T> T pathAs(Class<T> clazz, String jsonPath, Map<String,Object> json) {\n    T val = null;\n    Object obj = atPath(jsonPath, json);\n    if (obj != null) {\n      if (clazz.isAssignableFrom(obj.getClass())) {\n        val = (T) obj;\n      } else {\n        // no ok if it's not null and of a different type\n        throw new IllegalStateException(\"Expected a \" + clazz.getName() + \" at path \"+\n           jsonPath+\" but found \"+obj+\" instead! \"+json);\n      }\n    } // it's ok if it is null\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#[T]_pathAs(Class[T],String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#[T]_pathAs(Class[T],String,Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static <T> T pathAs(Class<T> clazz, String jsonPath, Map<String,Object> json) {\n    T val = null;\n    Object obj = atPath(jsonPath, json);\n    if (obj != null) {\n      if (clazz.isAssignableFrom(obj.getClass())) {\n        val = (T) obj;\n      } else {\n        // no ok if it's not null and of a different type\n        throw new IllegalStateException(\"Expected a \" + clazz.getName() + \" at path \"+\n           jsonPath+\" but found \"+obj+\" instead! \"+json);\n      }\n    } // it's ok if it is null\n    return val;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static <T> T pathAs(Class<T> clazz, String jsonPath, Map<String,Object> json) {\n    T val = null;\n    Object obj = atPath(jsonPath, json);\n    if (obj != null) {\n      if (clazz.isAssignableFrom(obj.getClass())) {\n        val = (T) obj;\n      } else {\n        // no ok if it's not null and of a different type\n        throw new IllegalStateException(\"Expected a \" + clazz.getName() + \" at path \"+\n           jsonPath+\" but found \"+obj+\" instead! \"+json);\n      }\n    } // it's ok if it is null\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#[T]_pathAs(Class[T],String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#[T]_pathAs(Class[T],String,Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public static <T> T pathAs(Class<T> clazz, String jsonPath, Map<String,Object> json) {\n    T val = null;\n    Object obj = atPath(jsonPath, json);\n    if (obj != null) {\n      if (clazz.isAssignableFrom(obj.getClass())) {\n        val = (T) obj;\n      } else {\n        // no ok if it's not null and of a different type\n        throw new IllegalStateException(\"Expected a \" + clazz.getName() + \" at path \"+\n            jsonPath+\" but found \"+obj+\" instead! \"+json);\n      }\n    } // it's ok if it is null\n    return val;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public static <T> T pathAs(Class<T> clazz, String jsonPath, Map<String,Object> json) {\n    T val = null;\n    Object obj = atPath(jsonPath, json);\n    if (obj != null) {\n      if (clazz.isAssignableFrom(obj.getClass())) {\n        val = (T) obj;\n      } else {\n        // no ok if it's not null and of a different type\n        throw new IllegalStateException(\"Expected a \" + clazz.getName() + \" at path \"+\n           jsonPath+\" but found \"+obj+\" instead! \"+json);\n      }\n    } // it's ok if it is null\n    return val;\n  }\n\n","bugFix":["6985d2d06f6096c93a00bb73a94e89ae28431be1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6985d2d06f6096c93a00bb73a94e89ae28431be1","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"6985d2d06f6096c93a00bb73a94e89ae28431be1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["6985d2d06f6096c93a00bb73a94e89ae28431be1"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6985d2d06f6096c93a00bb73a94e89ae28431be1","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6985d2d06f6096c93a00bb73a94e89ae28431be1"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6985d2d06f6096c93a00bb73a94e89ae28431be1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ee8fbffa595c312bc0437f2c9bb6376a29c1b427","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}