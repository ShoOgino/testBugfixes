{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","commits":[{"id":"a982453fa5a954e86ce77b1be9daf749881c13b3","date":1400848395,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceAsInactive(String).mjava","sourceNew":"  protected void setSliceState(String slice, String state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n    propMap.put(slice, state);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(state)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceAsInactive(String slice) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n    propMap.put(slice, Slice.INACTIVE);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(Slice.INACTIVE)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as INACTIVE\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","sourceNew":"  protected void setSliceState(String slice, String state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(state)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, String state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n    propMap.put(slice, state);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(state)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","sourceNew":"  protected void setSliceState(String slice, String state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(state)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, String state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(state)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","sourceNew":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, String state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(state)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,State).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#setSliceState(String,String).mjava","sourceNew":"  protected void setSliceState(String slice, State state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state.toString());\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      State sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState == state) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","sourceOld":"  protected void setSliceState(String slice, String state) throws SolrServerException, IOException,\n      KeeperException, InterruptedException {\n    DistributedQueue inQueue = Overseer.getInQueue(cloudClient.getZkStateReader().getZkClient());\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n    propMap.put(slice, state);\n    propMap.put(ZkStateReader.COLLECTION_PROP, \"collection1\");\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    inQueue.offer(ZkStateReader.toJSON(m));\n    boolean transition = false;\n\n    for (int counter = 10; counter > 0; counter--) {\n      zkStateReader.updateClusterState(true);\n      ClusterState clusterState = zkStateReader.getClusterState();\n      String sliceState = clusterState.getSlice(\"collection1\", slice).getState();\n      if (sliceState.equals(state)) {\n        transition = true;\n        break;\n      }\n      Thread.sleep(1000);\n    }\n\n    if (!transition) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not set shard [\" + slice + \"] as \" + state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a982453fa5a954e86ce77b1be9daf749881c13b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["a982453fa5a954e86ce77b1be9daf749881c13b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"0c924d4069ef5a5bc479a493befe0121aada6896":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"]},"commit2Childs":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a982453fa5a954e86ce77b1be9daf749881c13b3"],"a982453fa5a954e86ce77b1be9daf749881c13b3":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}