{"path":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingTest().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    //Int Date\n    String intDateFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"date_dtd\");    \n    Collection<Long> intDate = (ArrayList<Long>)xmlToList(intDateFacet, \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(intDateTestMissing,intDate);\n    \n    //Int String\n    String intStringFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"string_sd\");      \n    Collection<Long> intString = (ArrayList<Long>)xmlToList(intStringFacet, \"long\", \"int\");\n    assertEquals(intStringTestMissing,intString);\n\n    //Long Date\n    String longDateFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"date_dtd\");      \n    Collection<Long> longDate = (ArrayList<Long>)xmlToList(longDateFacet, \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(longDateTestMissing,longDate);\n    \n    //Long String\n    String longStringFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> longString = (ArrayList<Long>)xmlToList(longStringFacet, \"long\", \"long\");\n    assertEquals(longStringTestMissing,longString);\n\n    //Float Date\n    String floatDateFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"date_dtd\");   \n    Collection<Long> floatDate = (ArrayList<Long>)xmlToList(floatDateFacet, \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(floatDateTestMissing,floatDate);\n    \n    //Float String\n    String floatStringFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> floatString = (ArrayList<Long>)xmlToList(floatStringFacet, \"long\", \"float\");\n    assertEquals(floatStringTestMissing,floatString);\n\n    //Double Date\n    String doubleDateFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"date_dtd\");   \n    Collection<Long> doubleDate = (ArrayList<Long>)xmlToList(doubleDateFacet, \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    String doubleStringFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> doubleString = (ArrayList<Long>)xmlToList(doubleStringFacet, \"long\", \"double\");\n    assertEquals(doubleStringTestMissing,doubleString);\n\n    //Date Int\n    String dateIntFacet = getFacetXML(response, \"missing\", \"fieldFacets\", \"int_id\");    \n    Collection<Long> dateInt = (ArrayList<Long>)xmlToList(dateIntFacet, \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(dateIntTestMissing,dateInt);\n    \n    //Date Long\n    String dateStringFacet = getFacetXML(response, \"missing\", \"fieldFacets\", \"long_ld\");     \n    Collection<Long> dateLong = (ArrayList<Long>)xmlToList(dateStringFacet, \"long\", \"date\");\n    assertEquals(dateLongTestMissing,dateLong);\n\n    //String Int\n    String stringIntFacet = getFacetXML(response, \"missing\", \"fieldFacets\", \"int_id\");   \n    Collection<Long> stringInt = (ArrayList<Long>)xmlToList(stringIntFacet, \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(stringIntTestMissing,stringInt);\n    \n    //String Long\n    String stringLongFacet = getFacetXML(response, \"missing\", \"fieldFacets\", \"long_ld\");    \n    Collection<Long> stringLong = (ArrayList<Long>)xmlToList(stringLongFacet, \"long\", \"str\");\n    assertEquals(stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c0586e0570de2261142e339891d57c0f36f45c6","date":1385565864,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    //Int Date\n    String intDateFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"date_dtd\");    \n    Collection<Long> intDate = (ArrayList<Long>)xmlToList(intDateFacet, \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(intDateTestMissing,intDate);\n    \n    //Int String\n    String intStringFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"string_sd\");      \n    Collection<Long> intString = (ArrayList<Long>)xmlToList(intStringFacet, \"long\", \"int\");\n    assertEquals(intStringTestMissing,intString);\n\n    //Long Date\n    String longDateFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"date_dtd\");      \n    Collection<Long> longDate = (ArrayList<Long>)xmlToList(longDateFacet, \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(longDateTestMissing,longDate);\n    \n    //Long String\n    String longStringFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> longString = (ArrayList<Long>)xmlToList(longStringFacet, \"long\", \"long\");\n    assertEquals(longStringTestMissing,longString);\n\n    //Float Date\n    String floatDateFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"date_dtd\");   \n    Collection<Long> floatDate = (ArrayList<Long>)xmlToList(floatDateFacet, \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(floatDateTestMissing,floatDate);\n    \n    //Float String\n    String floatStringFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> floatString = (ArrayList<Long>)xmlToList(floatStringFacet, \"long\", \"float\");\n    assertEquals(floatStringTestMissing,floatString);\n\n    //Double Date\n    String doubleDateFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"date_dtd\");   \n    Collection<Long> doubleDate = (ArrayList<Long>)xmlToList(doubleDateFacet, \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    String doubleStringFacet = getFacetXML(response, \"missingn\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> doubleString = (ArrayList<Long>)xmlToList(doubleStringFacet, \"long\", \"double\");\n    assertEquals(doubleStringTestMissing,doubleString);\n\n    //Date Int\n    String dateIntFacet = getFacetXML(response, \"missing\", \"fieldFacets\", \"int_id\");    \n    Collection<Long> dateInt = (ArrayList<Long>)xmlToList(dateIntFacet, \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(dateIntTestMissing,dateInt);\n    \n    //Date Long\n    String dateStringFacet = getFacetXML(response, \"missing\", \"fieldFacets\", \"long_ld\");     \n    Collection<Long> dateLong = (ArrayList<Long>)xmlToList(dateStringFacet, \"long\", \"date\");\n    assertEquals(dateLongTestMissing,dateLong);\n\n    //String Int\n    String stringIntFacet = getFacetXML(response, \"missing\", \"fieldFacets\", \"int_id\");   \n    Collection<Long> stringInt = (ArrayList<Long>)xmlToList(stringIntFacet, \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(stringIntTestMissing,stringInt);\n    \n    //String Long\n    String stringLongFacet = getFacetXML(response, \"missing\", \"fieldFacets\", \"long_ld\");    \n    Collection<Long> stringLong = (ArrayList<Long>)xmlToList(stringLongFacet, \"long\", \"str\");\n    assertEquals(stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    setLatestType(\"int\");\n    assertEquals(getRawResponse(),intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    assertEquals(getRawResponse(),intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    setLatestType(\"long\");\n    assertEquals(getRawResponse(),longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    assertEquals(getRawResponse(),longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    setLatestType(\"float\");\n    assertEquals(getRawResponse(),floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    assertEquals(getRawResponse(),floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    setLatestType(\"double\");\n    assertEquals(getRawResponse(),doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getLongList(\"missingn\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    assertEquals(getRawResponse(),doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    setLatestType(\"date\");\n    assertEquals(getRawResponse(),dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    assertEquals(getRawResponse(),dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"missing\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    setLatestType(\"string\");\n    assertEquals(getRawResponse(),stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getLongList(\"missing\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    assertEquals(getRawResponse(),stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c0586e0570de2261142e339891d57c0f36f45c6"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["1c0586e0570de2261142e339891d57c0f36f45c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"1c0586e0570de2261142e339891d57c0f36f45c6":["ff403346522eaa9de75403763e297e83a3ea585c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["1c0586e0570de2261142e339891d57c0f36f45c6"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c0586e0570de2261142e339891d57c0f36f45c6":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}