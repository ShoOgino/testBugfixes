{"path":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0a7f04b5a49a00149b867e7d51f632fb8a4664","date":1279497978,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89b9a8708efd952b72dcba0f462921d834e9e62c","date":1287360303,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb","date":1296811660,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final List<ContentStream> contentStreams = new ArrayList<ContentStream>(1);\n    contentStreams.add(new ContentStreamBase.StringStream(docsInput));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return contentStreams;\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/DocumentAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link DocumentAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n\n    String docsInput =\n            \"<docs>\" +\n                    \"<doc>\" +\n                    \"<field name=\\\"id\\\">1</field>\" +\n                    \"<field name=\\\"whitetok\\\">The Whitetok</field>\" +\n                    \"<field name=\\\"text\\\">The Text</field>\" +\n                    \"</doc>\" +\n                    \"</docs>\";\n\n    final ContentStream cs = new ContentStreamBase.StringStream(docsInput);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"analysis.query\", \"The Query String\");\n    params.add(\"analysis.showmatch\", \"true\");\n    SolrQueryRequest req = new SolrQueryRequestBase(h.getCore(), params) {\n      @Override\n      public Iterable<ContentStream> getContentStreams() {\n        return Collections.singleton(cs);\n      }\n    };\n\n    DocumentAnalysisRequest request = handler.resolveAnalysisRequest(req);\n\n    assertNotNull(request);\n    assertTrue(request.isShowMatch());\n    assertNotNull(request.getQuery());\n    assertEquals(\"The Query String\", request.getQuery());\n    List<SolrInputDocument> documents = request.getDocuments();\n    assertNotNull(documents);\n    assertEquals(1, documents.size());\n    SolrInputDocument document = documents.get(0);\n    SolrInputField field = document.getField(\"id\");\n    assertNotNull(field);\n    assertEquals(\"1\", field.getFirstValue());\n    field = document.getField(\"whitetok\");\n    assertNotNull(field);\n    assertEquals(\"The Whitetok\", field.getFirstValue());\n    field = document.getField(\"text\");\n    assertNotNull(field);\n    assertEquals(\"The Text\", field.getFirstValue());\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","89b9a8708efd952b72dcba0f462921d834e9e62c"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89b9a8708efd952b72dcba0f462921d834e9e62c":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664","89b9a8708efd952b72dcba0f462921d834e9e62c"],"2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb":["89b9a8708efd952b72dcba0f462921d834e9e62c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"89b9a8708efd952b72dcba0f462921d834e9e62c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"2c0694e904d3e6e42f2022a0c9a1376d40e7f5eb":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["5f4e87790277826a2aea119328600dfb07761f32","89b9a8708efd952b72dcba0f462921d834e9e62c","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}