{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c","date":1510261138,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":null,"sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["15ac2153c8e082a2a01cfc713bfa7cb1cf9d709c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}