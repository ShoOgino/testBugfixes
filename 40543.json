{"path":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","commits":[{"id":"a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0","date":1514294096,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setMinCompetitiveScore(float minScore) {\n    if (optIsRequired == false && minScore > reqMaxScore) {\n      optIsRequired = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c5054bf15748079a041f921a9178e8fe84f1806","date":1514554505,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","sourceNew":"  @Override\n  public void setMinCompetitiveScore(float minScore) {\n    // Potentially move to a conjunction\n    if (optIsRequired == false && minScore > reqMaxScore) {\n      optIsRequired = true;\n    }\n    // And also propagate to sub clauses.\n    maxScorePropagator.setMinCompetitiveScore(minScore);\n  }\n\n","sourceOld":"  @Override\n  public void setMinCompetitiveScore(float minScore) {\n    if (optIsRequired == false && minScore > reqMaxScore) {\n      optIsRequired = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","sourceNew":"  @Override\n  public void setMinCompetitiveScore(float minScore) {\n    // Potentially move to a conjunction\n    if (optIsRequired == false && minScore > reqMaxScore) {\n      optIsRequired = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setMinCompetitiveScore(float minScore) {\n    // Potentially move to a conjunction\n    if (optIsRequired == false && minScore > reqMaxScore) {\n      optIsRequired = true;\n    }\n    // And also propagate to sub clauses.\n    maxScorePropagator.setMinCompetitiveScore(minScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd80b885e3e9bdc61935e784f634562d13b81979","date":1533736198,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","sourceNew":"  @Override\n  public void setMinCompetitiveScore(float minScore) {\n    this.minScore = minScore;\n    // Potentially move to a conjunction\n    if (reqMaxScore < minScore) {\n      optIsRequired = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setMinCompetitiveScore(float minScore) {\n    // Potentially move to a conjunction\n    if (optIsRequired == false && minScore > reqMaxScore) {\n      optIsRequired = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12789a348ea3f09c9c3b71488cfa1c32da08b2a3","date":1534270167,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","sourceNew":"  @Override\n  public void setMinCompetitiveScore(float minScore) {\n    this.minScore = minScore;\n    // Potentially move to a conjunction\n    if (reqMaxScore < minScore) {\n      optIsRequired = true;\n    }\n    maxScorePropagator.setMinCompetitiveScore(minScore);\n  }\n\n","sourceOld":"  @Override\n  public void setMinCompetitiveScore(float minScore) {\n    this.minScore = minScore;\n    // Potentially move to a conjunction\n    if (reqMaxScore < minScore) {\n      optIsRequired = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dc52d2a83be9420989b1976a8e9d937160e1e5","date":1536062604,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#setMinCompetitiveScore(float).mjava","sourceNew":"  @Override\n  public void setMinCompetitiveScore(float minScore) throws IOException {\n    this.minScore = minScore;\n    // Potentially move to a conjunction\n    if (reqMaxScore < minScore) {\n      optIsRequired = true;\n    }\n    maxScorePropagator.setMinCompetitiveScore(minScore);\n  }\n\n","sourceOld":"  @Override\n  public void setMinCompetitiveScore(float minScore) {\n    this.minScore = minScore;\n    // Potentially move to a conjunction\n    if (reqMaxScore < minScore) {\n      optIsRequired = true;\n    }\n    maxScorePropagator.setMinCompetitiveScore(minScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d0dc52d2a83be9420989b1976a8e9d937160e1e5":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["fd80b885e3e9bdc61935e784f634562d13b81979"],"523cc6563c99a55527ef7993efc5413c6648852d":["3c5054bf15748079a041f921a9178e8fe84f1806"],"3c5054bf15748079a041f921a9178e8fe84f1806":["a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0"],"fd80b885e3e9bdc61935e784f634562d13b81979":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0dc52d2a83be9420989b1976a8e9d937160e1e5"],"a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d0dc52d2a83be9420989b1976a8e9d937160e1e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0"],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["d0dc52d2a83be9420989b1976a8e9d937160e1e5"],"523cc6563c99a55527ef7993efc5413c6648852d":["fd80b885e3e9bdc61935e784f634562d13b81979"],"3c5054bf15748079a041f921a9178e8fe84f1806":["523cc6563c99a55527ef7993efc5413c6648852d"],"fd80b885e3e9bdc61935e784f634562d13b81979":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0":["3c5054bf15748079a041f921a9178e8fe84f1806"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}