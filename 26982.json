{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (String s1 : ss) {\n        l.add(new Date(Long.valueOf(s1)).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (String s1 : ss) {\n        l.add(new Date(Long.parseLong(s1)).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (String s1 : ss) {\n        l.add(new Date(Long.valueOf(s1)).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (String s1 : ss) {\n        l.add(new Date(Long.parseLong(s1)).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (String s1 : ss) {\n        l.add(new Date(Long.valueOf(s1)).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (String s1 : ss) {\n        l.add(new Date(Long.parseLong(s1)).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (String s1 : ss) {\n        l.add(new Date(Long.valueOf(s1)).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    Object val = formatVal(key, props, clzz);\n    if (val != null) {\n      nl.add(key, val);\n    }\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (String s1 : ss) {\n        l.add(new Date(Long.parseLong(s1)).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    Object val = formatVal(key, props, clzz);\n    if (val != null) {\n      nl.add(key, val);\n    }\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<>();\n      for (String s1 : ss) {\n        l.add(new Date(Long.parseLong(s1)).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, @SuppressWarnings({\"rawtypes\"})Class clzz) {\n    Object val = formatVal(key, props, clzz);\n    if (val != null) {\n      nl.add(key, val);\n    }\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    Object val = formatVal(key, props, clzz);\n    if (val != null) {\n      nl.add(key, val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"816521ebaad5add9cb96bb88c577394e2938c40b":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["816521ebaad5add9cb96bb88c577394e2938c40b"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["dea8e36e8c36d610840396c282a5affe3f722f4e","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["816521ebaad5add9cb96bb88c577394e2938c40b"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"816521ebaad5add9cb96bb88c577394e2938c40b":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}