{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writePresenceBits(Builder[T],Builder.UnCompiledNode[T],long,int).mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writePresenceBits(Builder[T],Builder.UnCompiledNode[T],long,int).mjava","pathOld":"/dev/null","sourceNew":"  private void writePresenceBits(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn, long dest, int numPresenceBytes) {\n    long bytePos = dest;\n    byte presenceBits = 1; // The first arc is always present.\n    int presenceIndex = 0;\n    int previousLabel = nodeIn.arcs[0].label;\n    for (int arcIdx = 1; arcIdx < nodeIn.numArcs; arcIdx++) {\n      int label = nodeIn.arcs[arcIdx].label;\n      assert label > previousLabel;\n      presenceIndex += label - previousLabel;\n      while (presenceIndex >= Byte.SIZE) {\n        builder.bytes.writeByte(bytePos++, presenceBits);\n        presenceBits = 0;\n        presenceIndex -= Byte.SIZE;\n      }\n      // Set the bit at presenceIndex to flag that the corresponding arc is present.\n      presenceBits |= 1 << presenceIndex;\n      previousLabel = label;\n    }\n    assert presenceIndex == (nodeIn.arcs[nodeIn.numArcs - 1].label - nodeIn.arcs[0].label) % 8;\n    assert presenceBits != 0; // The last byte is not 0.\n    assert (presenceBits & (1 << presenceIndex)) != 0; // The last arc is always present.\n    builder.bytes.writeByte(bytePos++, presenceBits);\n    assert bytePos - dest == numPresenceBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writePresenceBits(FSTCompiler[T],FSTCompiler.UnCompiledNode[T],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writePresenceBits(Builder[T],Builder.UnCompiledNode[T],long,int).mjava","sourceNew":"  private void writePresenceBits(FSTCompiler<T> fstCompiler, FSTCompiler.UnCompiledNode<T> nodeIn, long dest, int numPresenceBytes) {\n    long bytePos = dest;\n    byte presenceBits = 1; // The first arc is always present.\n    int presenceIndex = 0;\n    int previousLabel = nodeIn.arcs[0].label;\n    for (int arcIdx = 1; arcIdx < nodeIn.numArcs; arcIdx++) {\n      int label = nodeIn.arcs[arcIdx].label;\n      assert label > previousLabel;\n      presenceIndex += label - previousLabel;\n      while (presenceIndex >= Byte.SIZE) {\n        fstCompiler.bytes.writeByte(bytePos++, presenceBits);\n        presenceBits = 0;\n        presenceIndex -= Byte.SIZE;\n      }\n      // Set the bit at presenceIndex to flag that the corresponding arc is present.\n      presenceBits |= 1 << presenceIndex;\n      previousLabel = label;\n    }\n    assert presenceIndex == (nodeIn.arcs[nodeIn.numArcs - 1].label - nodeIn.arcs[0].label) % 8;\n    assert presenceBits != 0; // The last byte is not 0.\n    assert (presenceBits & (1 << presenceIndex)) != 0; // The last arc is always present.\n    fstCompiler.bytes.writeByte(bytePos++, presenceBits);\n    assert bytePos - dest == numPresenceBytes;\n  }\n\n","sourceOld":"  private void writePresenceBits(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn, long dest, int numPresenceBytes) {\n    long bytePos = dest;\n    byte presenceBits = 1; // The first arc is always present.\n    int presenceIndex = 0;\n    int previousLabel = nodeIn.arcs[0].label;\n    for (int arcIdx = 1; arcIdx < nodeIn.numArcs; arcIdx++) {\n      int label = nodeIn.arcs[arcIdx].label;\n      assert label > previousLabel;\n      presenceIndex += label - previousLabel;\n      while (presenceIndex >= Byte.SIZE) {\n        builder.bytes.writeByte(bytePos++, presenceBits);\n        presenceBits = 0;\n        presenceIndex -= Byte.SIZE;\n      }\n      // Set the bit at presenceIndex to flag that the corresponding arc is present.\n      presenceBits |= 1 << presenceIndex;\n      previousLabel = label;\n    }\n    assert presenceIndex == (nodeIn.arcs[nodeIn.numArcs - 1].label - nodeIn.arcs[0].label) % 8;\n    assert presenceBits != 0; // The last byte is not 0.\n    assert (presenceBits & (1 << presenceIndex)) != 0; // The last arc is always present.\n    builder.bytes.writeByte(bytePos++, presenceBits);\n    assert bytePos - dest == numPresenceBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writePresenceBits(FSTCompiler[T],FSTCompiler.UnCompiledNode[T],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writePresenceBits(Builder[T],Builder.UnCompiledNode[T],long,int).mjava","sourceNew":"  private void writePresenceBits(FSTCompiler<T> fstCompiler, FSTCompiler.UnCompiledNode<T> nodeIn, long dest, int numPresenceBytes) {\n    long bytePos = dest;\n    byte presenceBits = 1; // The first arc is always present.\n    int presenceIndex = 0;\n    int previousLabel = nodeIn.arcs[0].label;\n    for (int arcIdx = 1; arcIdx < nodeIn.numArcs; arcIdx++) {\n      int label = nodeIn.arcs[arcIdx].label;\n      assert label > previousLabel;\n      presenceIndex += label - previousLabel;\n      while (presenceIndex >= Byte.SIZE) {\n        fstCompiler.bytes.writeByte(bytePos++, presenceBits);\n        presenceBits = 0;\n        presenceIndex -= Byte.SIZE;\n      }\n      // Set the bit at presenceIndex to flag that the corresponding arc is present.\n      presenceBits |= 1 << presenceIndex;\n      previousLabel = label;\n    }\n    assert presenceIndex == (nodeIn.arcs[nodeIn.numArcs - 1].label - nodeIn.arcs[0].label) % 8;\n    assert presenceBits != 0; // The last byte is not 0.\n    assert (presenceBits & (1 << presenceIndex)) != 0; // The last arc is always present.\n    fstCompiler.bytes.writeByte(bytePos++, presenceBits);\n    assert bytePos - dest == numPresenceBytes;\n  }\n\n","sourceOld":"  private void writePresenceBits(Builder<T> builder, Builder.UnCompiledNode<T> nodeIn, long dest, int numPresenceBytes) {\n    long bytePos = dest;\n    byte presenceBits = 1; // The first arc is always present.\n    int presenceIndex = 0;\n    int previousLabel = nodeIn.arcs[0].label;\n    for (int arcIdx = 1; arcIdx < nodeIn.numArcs; arcIdx++) {\n      int label = nodeIn.arcs[arcIdx].label;\n      assert label > previousLabel;\n      presenceIndex += label - previousLabel;\n      while (presenceIndex >= Byte.SIZE) {\n        builder.bytes.writeByte(bytePos++, presenceBits);\n        presenceBits = 0;\n        presenceIndex -= Byte.SIZE;\n      }\n      // Set the bit at presenceIndex to flag that the corresponding arc is present.\n      presenceBits |= 1 << presenceIndex;\n      previousLabel = label;\n    }\n    assert presenceIndex == (nodeIn.arcs[nodeIn.numArcs - 1].label - nodeIn.arcs[0].label) % 8;\n    assert presenceBits != 0; // The last byte is not 0.\n    assert (presenceBits & (1 << presenceIndex)) != 0; // The last arc is always present.\n    builder.bytes.writeByte(bytePos++, presenceBits);\n    assert bytePos - dest == numPresenceBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["71d31a7d5773508492505519bb5230b87c8937ad","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["71d31a7d5773508492505519bb5230b87c8937ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}