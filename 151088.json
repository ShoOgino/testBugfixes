{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","commits":[{"id":"f5c96ee46366b5feece8b0b328368c6237fc087a","date":1400184255,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","sourceNew":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n    this.versionAutoPrefix = ite.fr.parent.version >= BlockTreeTermsReader.VERSION_AUTO_PREFIX_TERMS;\n  }\n\n","sourceOld":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","sourceNew":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n    this.versionAutoPrefix = ite.fr.parent.version >= BlockTreeTermsReader.VERSION_AUTO_PREFIX_TERMS;\n  }\n\n","sourceOld":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59db5e5f780185e0155d296a323e440a6ecfd3b6","date":1435089559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","sourceNew":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n    this.versionAutoPrefix = ite.fr.parent.anyAutoPrefixTerms;\n  }\n\n","sourceOld":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n    this.versionAutoPrefix = ite.fr.parent.version >= BlockTreeTermsReader.VERSION_AUTO_PREFIX_TERMS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5","date":1488285484,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","sourceNew":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n  }\n\n","sourceOld":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n    this.versionAutoPrefix = ite.fr.parent.anyAutoPrefixTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","sourceNew":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n  }\n\n","sourceOld":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","sourceNew":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n  }\n\n","sourceOld":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","sourceNew":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n  }\n\n","sourceOld":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.longs = new long[ite.fr.longsSize];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#IntersectTermsEnumFrame(IntersectTermsEnum,int).mjava","sourceNew":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n    this.version = ite.fr.parent.version;\n    if (version >= BlockTreeTermsReader.VERSION_COMPRESSED_SUFFIXES) {\n      suffixLengthBytes = new byte[32];\n      suffixLengthsReader = new ByteArrayDataInput();\n    } else {\n      suffixLengthBytes = null;\n      suffixLengthsReader = suffixesReader;\n    }\n  }\n\n","sourceOld":"  public IntersectTermsEnumFrame(IntersectTermsEnum ite, int ord) throws IOException {\n    this.ite = ite;\n    this.ord = ord;\n    this.termState = ite.fr.parent.postingsReader.newTermState();\n    this.termState.totalTermFreq = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5c96ee46366b5feece8b0b328368c6237fc087a"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["4d637064d608752565d4f9f41b2497dfdfdde50e","3e8715d826e588419327562287d5d6a8040d63d6"],"9407318969e8504257b4c5764c65755a043e5404":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"3e8715d826e588419327562287d5d6a8040d63d6":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5":["59db5e5f780185e0155d296a323e440a6ecfd3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","f5c96ee46366b5feece8b0b328368c6237fc087a"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["9407318969e8504257b4c5764c65755a043e5404"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3e8715d826e588419327562287d5d6a8040d63d6":["59db5e5f780185e0155d296a323e440a6ecfd3b6","d2638f781be724518ff6c2263d14a48cf6e68017"],"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}