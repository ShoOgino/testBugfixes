{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFilePersistence().mjava","commits":[{"id":"e80dd699120179c1fafb4fae84acf82bc2c486d7","date":1501773404,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFilePersistence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFilePersistence() throws Exception {\n    // check whether models and features are empty\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n\n    // load models and features from files\n    loadFeatures(\"features-linear.json\");\n    loadModels(\"linear-model.json\");\n\n    // check loaded models and features\n    final String modelName = \"6029760550880411648\";\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='\"+modelName+\"'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[0]/name=='title'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[1]/name=='description'\");\n\n    // check persistence after reload\n    restTestHarness.reload();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='\"+modelName+\"'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[0]/name=='title'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[1]/name=='description'\");\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='\"+modelName+\"'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[0]/name=='title'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[1]/name=='description'\");\n\n    // delete loaded models and features\n    restTestHarness.delete(ManagedModelStore.REST_END_POINT + \"/\"+modelName);\n    restTestHarness.delete(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME);\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n\n    // check persistence after reload\n    restTestHarness.reload();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162","date":1501774011,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFilePersistence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFilePersistence() throws Exception {\n    // check whether models and features are empty\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n\n    // load models and features from files\n    loadFeatures(\"features-linear.json\");\n    loadModels(\"linear-model.json\");\n\n    // check loaded models and features\n    final String modelName = \"6029760550880411648\";\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='\"+modelName+\"'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[0]/name=='title'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[1]/name=='description'\");\n\n    // check persistence after reload\n    restTestHarness.reload();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='\"+modelName+\"'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[0]/name=='title'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[1]/name=='description'\");\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='\"+modelName+\"'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[0]/name=='title'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[1]/name=='description'\");\n\n    // delete loaded models and features\n    restTestHarness.delete(ManagedModelStore.REST_END_POINT + \"/\"+modelName);\n    restTestHarness.delete(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME);\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n\n    // check persistence after reload\n    restTestHarness.reload();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testFilePersistence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFilePersistence() throws Exception {\n    // check whether models and features are empty\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n\n    // load models and features from files\n    loadFeatures(\"features-linear.json\");\n    loadModels(\"linear-model.json\");\n\n    // check loaded models and features\n    final String modelName = \"6029760550880411648\";\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='\"+modelName+\"'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[0]/name=='title'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[1]/name=='description'\");\n\n    // check persistence after reload\n    restTestHarness.reload();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='\"+modelName+\"'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[0]/name=='title'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[1]/name=='description'\");\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/[0]/name=='\"+modelName+\"'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[0]/name=='title'\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/[1]/name=='description'\");\n\n    // delete loaded models and features\n    restTestHarness.delete(ManagedModelStore.REST_END_POINT + \"/\"+modelName);\n    restTestHarness.delete(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME);\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n\n    // check persistence after reload\n    restTestHarness.reload();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    assertJQ(ManagedModelStore.REST_END_POINT,\n        \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FeatureStore.DEFAULT_FEATURE_STORE_NAME,\n        \"/features/==[]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162"],"e80dd699120179c1fafb4fae84acf82bc2c486d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e80dd699120179c1fafb4fae84acf82bc2c486d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"e80dd699120179c1fafb4fae84acf82bc2c486d7":["b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","e80dd699120179c1fafb4fae84acf82bc2c486d7","b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162"],"b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}