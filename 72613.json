{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestPartition() {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDims, bytesPerDim, maxDoc);\n    int commonPrefixLength = TestUtil.nextInt(random(), 0, bytesPerDim);\n    final int splitDim =  random().nextInt(numDims);\n    for (int i = 1; i < points.length; ++i) {\n      int offset = splitDim * bytesPerDim;\n      System.arraycopy(points[0].packedValue, offset, points[i].packedValue, offset, commonPrefixLength);\n    }\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLength, reader, 0, points.length, pivot,\n        new byte[numDims * bytesPerDim], new byte[numDims * bytesPerDim]);\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      int cmp = StringHelper.compare(bytesPerDim, reader.points[i].packedValue, offset, reader.points[pivot].packedValue, offset);\n      if (cmp == 0) {\n        cmp = reader.points[i].doc - reader.points[pivot].doc;\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","sourceNew":"  private void doTestPartition() {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDims, bytesPerDim, maxDoc);\n    int commonPrefixLength = TestUtil.nextInt(random(), 0, bytesPerDim);\n    final int splitDim =  random().nextInt(numDims);\n    BytesRef firstValue = points[0].packedValue;\n    for (int i = 1; i < points.length; ++i) {\n      BytesRef packedValue = points[i].packedValue;\n      int offset = splitDim * bytesPerDim;\n      System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLength);\n    }\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLength, reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = StringHelper.compare(bytesPerDim,\n          value.bytes, value.offset + offset,\n          pivotValue.bytes, pivotValue.offset + offset);\n      if (cmp == 0) {\n        cmp = reader.points[i].doc - reader.points[pivot].doc;\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestPartition() {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDims, bytesPerDim, maxDoc);\n    int commonPrefixLength = TestUtil.nextInt(random(), 0, bytesPerDim);\n    final int splitDim =  random().nextInt(numDims);\n    for (int i = 1; i < points.length; ++i) {\n      int offset = splitDim * bytesPerDim;\n      System.arraycopy(points[0].packedValue, offset, points[i].packedValue, offset, commonPrefixLength);\n    }\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLength, reader, 0, points.length, pivot,\n        new byte[numDims * bytesPerDim], new byte[numDims * bytesPerDim]);\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      int cmp = StringHelper.compare(bytesPerDim, reader.points[i].packedValue, offset, reader.points[pivot].packedValue, offset);\n      if (cmp == 0) {\n        cmp = reader.points[i].doc - reader.points[pivot].doc;\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestPartition() {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDims, bytesPerDim, maxDoc);\n    int commonPrefixLength = TestUtil.nextInt(random(), 0, bytesPerDim);\n    final int splitDim =  random().nextInt(numDims);\n    BytesRef firstValue = points[0].packedValue;\n    for (int i = 1; i < points.length; ++i) {\n      BytesRef packedValue = points[i].packedValue;\n      int offset = splitDim * bytesPerDim;\n      System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLength);\n    }\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLength, reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = StringHelper.compare(bytesPerDim,\n          value.bytes, value.offset + offset,\n          pivotValue.bytes, pivotValue.offset + offset);\n      if (cmp == 0) {\n        cmp = reader.points[i].doc - reader.points[pivot].doc;\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestPartition() {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDims, bytesPerDim, maxDoc);\n    int commonPrefixLength = TestUtil.nextInt(random(), 0, bytesPerDim);\n    final int splitDim =  random().nextInt(numDims);\n    BytesRef firstValue = points[0].packedValue;\n    for (int i = 1; i < points.length; ++i) {\n      BytesRef packedValue = points[i].packedValue;\n      int offset = splitDim * bytesPerDim;\n      System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLength);\n    }\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLength, reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = StringHelper.compare(bytesPerDim,\n          value.bytes, value.offset + offset,\n          pivotValue.bytes, pivotValue.offset + offset);\n      if (cmp == 0) {\n        cmp = reader.points[i].doc - reader.points[pivot].doc;\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","sourceNew":"  private void doTestPartition() {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDims, bytesPerDim, maxDoc);\n    int commonPrefixLength = TestUtil.nextInt(random(), 0, bytesPerDim);\n    final int splitDim =  random().nextInt(numDims);\n    BytesRef firstValue = points[0].packedValue;\n    for (int i = 1; i < points.length; ++i) {\n      BytesRef packedValue = points[i].packedValue;\n      int offset = splitDim * bytesPerDim;\n      System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLength);\n    }\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLength, reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = FutureArrays.compareUnsigned(value.bytes, value.offset + offset, value.offset + offset + bytesPerDim, pivotValue.bytes, pivotValue.offset + offset, pivotValue.offset + offset + bytesPerDim);\n      if (cmp == 0) {\n        cmp = reader.points[i].doc - reader.points[pivot].doc;\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestPartition() {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDims, bytesPerDim, maxDoc);\n    int commonPrefixLength = TestUtil.nextInt(random(), 0, bytesPerDim);\n    final int splitDim =  random().nextInt(numDims);\n    BytesRef firstValue = points[0].packedValue;\n    for (int i = 1; i < points.length; ++i) {\n      BytesRef packedValue = points[i].packedValue;\n      int offset = splitDim * bytesPerDim;\n      System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLength);\n    }\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLength, reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = StringHelper.compare(bytesPerDim,\n          value.bytes, value.offset + offset,\n          pivotValue.bytes, pivotValue.offset + offset);\n      if (cmp == 0) {\n        cmp = reader.points[i].doc - reader.points[pivot].doc;\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","sourceNew":"  private void doTestPartition() {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDims, bytesPerDim, maxDoc);\n    int commonPrefixLength = TestUtil.nextInt(random(), 0, bytesPerDim);\n    final int splitDim =  random().nextInt(numDims);\n    BytesRef firstValue = points[0].packedValue;\n    for (int i = 1; i < points.length; ++i) {\n      BytesRef packedValue = points[i].packedValue;\n      int offset = splitDim * bytesPerDim;\n      System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLength);\n    }\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLength, reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = Arrays.compareUnsigned(value.bytes, value.offset + offset, value.offset + offset + bytesPerDim, pivotValue.bytes, pivotValue.offset + offset, pivotValue.offset + offset + bytesPerDim);\n      if (cmp == 0) {\n        cmp = reader.points[i].doc - reader.points[pivot].doc;\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestPartition() {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDims, bytesPerDim, maxDoc);\n    int commonPrefixLength = TestUtil.nextInt(random(), 0, bytesPerDim);\n    final int splitDim =  random().nextInt(numDims);\n    BytesRef firstValue = points[0].packedValue;\n    for (int i = 1; i < points.length; ++i) {\n      BytesRef packedValue = points[i].packedValue;\n      int offset = splitDim * bytesPerDim;\n      System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLength);\n    }\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLength, reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = FutureArrays.compareUnsigned(value.bytes, value.offset + offset, value.offset + offset + bytesPerDim, pivotValue.bytes, pivotValue.offset + offset, pivotValue.offset + offset + bytesPerDim);\n      if (cmp == 0) {\n        cmp = reader.points[i].doc - reader.points[pivot].doc;\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","sourceNew":"  private void doTestPartition() {\n    final int numIndexDims = TestUtil.nextInt(random(), 1, 8);\n    final int numDataDims = TestUtil.nextInt(random(), numIndexDims, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    int[] commonPrefixLengths  = new int[numDataDims];\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDataDims, numIndexDims, bytesPerDim, maxDoc, commonPrefixLengths);\n    final int splitDim =  random().nextInt(numIndexDims);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(numDataDims, numIndexDims, maxDoc, splitDim, bytesPerDim, commonPrefixLengths[splitDim], reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = Arrays.compareUnsigned(value.bytes, value.offset + offset, value.offset + offset + bytesPerDim,\n          pivotValue.bytes, pivotValue.offset + offset, pivotValue.offset + offset + bytesPerDim);\n      if (cmp == 0) {\n        int dataDimOffset = numIndexDims * bytesPerDim;\n        int dataDimsLength = (numDataDims - numIndexDims) * bytesPerDim;\n        cmp = Arrays.compareUnsigned(value.bytes, value.offset + dataDimOffset, value.offset + dataDimOffset + dataDimsLength,\n            pivotValue.bytes, pivotValue.offset + dataDimOffset, pivotValue.offset + dataDimOffset + dataDimsLength);\n        if (cmp == 0) {\n          cmp = reader.points[i].doc - reader.points[pivot].doc;\n        }\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestPartition() {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDims, bytesPerDim, maxDoc);\n    int commonPrefixLength = TestUtil.nextInt(random(), 0, bytesPerDim);\n    final int splitDim =  random().nextInt(numDims);\n    BytesRef firstValue = points[0].packedValue;\n    for (int i = 1; i < points.length; ++i) {\n      BytesRef packedValue = points[i].packedValue;\n      int offset = splitDim * bytesPerDim;\n      System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLength);\n    }\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(maxDoc, splitDim, bytesPerDim, commonPrefixLength, reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = Arrays.compareUnsigned(value.bytes, value.offset + offset, value.offset + offset + bytesPerDim, pivotValue.bytes, pivotValue.offset + offset, pivotValue.offset + offset + bytesPerDim);\n      if (cmp == 0) {\n        cmp = reader.points[i].doc - reader.points[pivot].doc;\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestPartition().mjava","sourceNew":"  private void doTestPartition() {\n    BKDConfig config = createRandomConfig();\n    int[] commonPrefixLengths  = new int[config.numDims];\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(config, maxDoc, commonPrefixLengths);\n    final int splitDim =  random().nextInt(config.numIndexDims);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(config, maxDoc, splitDim, commonPrefixLengths[splitDim], reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * config.bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = Arrays.compareUnsigned(value.bytes, value.offset + offset, value.offset + offset + config.bytesPerDim,\n          pivotValue.bytes, pivotValue.offset + offset, pivotValue.offset + offset + config.bytesPerDim);\n      if (cmp == 0) {\n        int dataDimOffset = config.packedIndexBytesLength;\n        int dataDimsLength = (config.numDims - config.numIndexDims) * config.bytesPerDim;\n        cmp = Arrays.compareUnsigned(value.bytes, value.offset + dataDimOffset, value.offset + dataDimOffset + dataDimsLength,\n            pivotValue.bytes, pivotValue.offset + dataDimOffset, pivotValue.offset + dataDimOffset + dataDimsLength);\n        if (cmp == 0) {\n          cmp = reader.points[i].doc - reader.points[pivot].doc;\n        }\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestPartition() {\n    final int numIndexDims = TestUtil.nextInt(random(), 1, 8);\n    final int numDataDims = TestUtil.nextInt(random(), numIndexDims, 8);\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    int[] commonPrefixLengths  = new int[numDataDims];\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(numDataDims, numIndexDims, bytesPerDim, maxDoc, commonPrefixLengths);\n    final int splitDim =  random().nextInt(numIndexDims);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    final int pivot = TestUtil.nextInt(random(), 0, points.length - 1);\n    MutablePointsReaderUtils.partition(numDataDims, numIndexDims, maxDoc, splitDim, bytesPerDim, commonPrefixLengths[splitDim], reader, 0, points.length, pivot,\n        new BytesRef(), new BytesRef());\n    BytesRef pivotValue = reader.points[pivot].packedValue;\n    int offset = splitDim * bytesPerDim;\n    for (int i = 0; i < points.length; ++i) {\n      BytesRef value = reader.points[i].packedValue;\n      int cmp = Arrays.compareUnsigned(value.bytes, value.offset + offset, value.offset + offset + bytesPerDim,\n          pivotValue.bytes, pivotValue.offset + offset, pivotValue.offset + offset + bytesPerDim);\n      if (cmp == 0) {\n        int dataDimOffset = numIndexDims * bytesPerDim;\n        int dataDimsLength = (numDataDims - numIndexDims) * bytesPerDim;\n        cmp = Arrays.compareUnsigned(value.bytes, value.offset + dataDimOffset, value.offset + dataDimOffset + dataDimsLength,\n            pivotValue.bytes, pivotValue.offset + dataDimOffset, pivotValue.offset + dataDimOffset + dataDimsLength);\n        if (cmp == 0) {\n          cmp = reader.points[i].doc - reader.points[pivot].doc;\n        }\n      }\n      if (i < pivot) {\n        assertTrue(cmp <= 0);\n      } else if (i > pivot) {\n        assertTrue(cmp >= 0);\n      } else {\n        assertEquals(0, cmp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"a20457919db052812998f60294d17daa883ff972":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["a20457919db052812998f60294d17daa883ff972"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["c7f06758793500ca773d0df1037290e6e404fb33"],"a20457919db052812998f60294d17daa883ff972":["41f60ea1802fda42d3c91d023406066d00ddb5f8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a20457919db052812998f60294d17daa883ff972"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}