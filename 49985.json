{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","commits":[{"id":"d642fe6577db47788146c0fc4fe14240ab1718b7","date":1376680349,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"/dev/null","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      // look for core props file\n      assertTrue(\"Could not find expected core.properties file\",\n          new File((String) core.getStatistics().get(\"instanceDir\"),\n              \"core.properties\").exists());\n      \n      assertEquals(\n          SolrResourceLoader.normalizeDir(jetty.getSolrHome() + File.separator\n              + core.getName()),\n          SolrResourceLoader.normalizeDir((String) core.getStatistics().get(\n              \"instanceDir\")));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"/dev/null","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      // look for core props file\n      assertTrue(\"Could not find expected core.properties file\",\n          new File((String) core.getStatistics().get(\"instanceDir\"),\n              \"core.properties\").exists());\n      \n      assertEquals(\n          SolrResourceLoader.normalizeDir(jetty.getSolrHome() + File.separator\n              + core.getName()),\n          SolrResourceLoader.normalizeDir((String) core.getStatistics().get(\n              \"instanceDir\")));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"/dev/null","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      // look for core props file\n      assertTrue(\"Could not find expected core.properties file\",\n          new File((String) core.getStatistics().get(\"instanceDir\"),\n              \"core.properties\").exists());\n      \n      assertEquals(\n          SolrResourceLoader.normalizeDir(jetty.getSolrHome() + File.separator\n              + core.getName()),\n          SolrResourceLoader.normalizeDir((String) core.getStatistics().get(\n              \"instanceDir\")));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcb5de84d260a8919bf0f2d4d180df543a2ad07a","date":1381378233,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      if (!oldStyleSolrXml) {\n        // look for core props file\n        assertTrue(\"Could not find expected core.properties file\",\n            new File((String) core.getStatistics().get(\"instanceDir\"),\n                \"core.properties\").exists());\n      }\n      \n      assertEquals(\n          SolrResourceLoader.normalizeDir(jetty.getSolrHome() + File.separator\n              + core.getName()),\n          SolrResourceLoader.normalizeDir((String) core.getStatistics().get(\n              \"instanceDir\")));\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      // look for core props file\n      assertTrue(\"Could not find expected core.properties file\",\n          new File((String) core.getStatistics().get(\"instanceDir\"),\n              \"core.properties\").exists());\n      \n      assertEquals(\n          SolrResourceLoader.normalizeDir(jetty.getSolrHome() + File.separator\n              + core.getName()),\n          SolrResourceLoader.normalizeDir((String) core.getStatistics().get(\n              \"instanceDir\")));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a661c91029ca76472ff48b0798919f1b11662432","date":1381415179,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      if (!oldStyleSolrXml) {\n        // look for core props file\n        assertTrue(\"Could not find expected core.properties file\",\n            new File((String) core.getStatistics().get(\"instanceDir\"),\n                \"core.properties\").exists());\n      }\n      \n      assertEquals(\n         new File(SolrResourceLoader.normalizeDir(jetty.getSolrHome() + File.separator\n              + core.getName())).getAbsolutePath(),\n          new File(SolrResourceLoader.normalizeDir((String) core.getStatistics().get(\n              \"instanceDir\"))).getAbsolutePath());\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      if (!oldStyleSolrXml) {\n        // look for core props file\n        assertTrue(\"Could not find expected core.properties file\",\n            new File((String) core.getStatistics().get(\"instanceDir\"),\n                \"core.properties\").exists());\n      }\n      \n      assertEquals(\n          SolrResourceLoader.normalizeDir(jetty.getSolrHome() + File.separator\n              + core.getName()),\n          SolrResourceLoader.normalizeDir((String) core.getStatistics().get(\n              \"instanceDir\")));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84898c2f58f13c1cc1618ab127b016f025e49a31","date":1418922910,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      if (!oldStyleSolrXml) {\n        // look for core props file\n        assertTrue(\"Could not find expected core.properties file\",\n            new File((String) core.getStatistics().get(\"instanceDir\"),\n                \"core.properties\").exists());\n      }\n\n      try {\n        assertEquals(\n           new File(SolrResourceLoader.normalizeDir(jetty.getSolrHome() + File.separator\n                + core.getName())).getCanonicalPath(),\n            new File(SolrResourceLoader.normalizeDir((String) core.getStatistics().get(\n                \"instanceDir\"))).getCanonicalPath());\n      } catch (IOException e) {\n        log.error(\"Failed to get canonical path\", e);\n        fail(\"Failed to get canonical path\");\n      }\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      if (!oldStyleSolrXml) {\n        // look for core props file\n        assertTrue(\"Could not find expected core.properties file\",\n            new File((String) core.getStatistics().get(\"instanceDir\"),\n                \"core.properties\").exists());\n      }\n      \n      assertEquals(\n         new File(SolrResourceLoader.normalizeDir(jetty.getSolrHome() + File.separator\n              + core.getName())).getAbsolutePath(),\n          new File(SolrResourceLoader.normalizeDir((String) core.getStatistics().get(\n              \"instanceDir\"))).getAbsolutePath());\n    }\n  }\n\n","bugFix":null,"bugIntro":["273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      assertTrue(\"Could not find expected core.properties file\",\n          new File((String) core.getStatistics().get(\"instanceDir\"),\n              \"core.properties\").exists());\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(\"cores\").resolve(core.getName());\n      Path reported = Paths.get((String) core.getStatistics().get(\"instanceDir\"));\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + reported, Files.isSameFile(expected, reported));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      if (!oldStyleSolrXml) {\n        // look for core props file\n        assertTrue(\"Could not find expected core.properties file\",\n            new File((String) core.getStatistics().get(\"instanceDir\"),\n                \"core.properties\").exists());\n      }\n\n      try {\n        assertEquals(\n           new File(SolrResourceLoader.normalizeDir(jetty.getSolrHome() + File.separator\n                + core.getName())).getCanonicalPath(),\n            new File(SolrResourceLoader.normalizeDir((String) core.getStatistics().get(\n                \"instanceDir\"))).getCanonicalPath());\n      } catch (IOException e) {\n        log.error(\"Failed to get canonical path\", e);\n        fail(\"Failed to get canonical path\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      assertTrue(\"Could not find expected core.properties file\",\n          new File((String) core.getStatistics().get(\"instanceDir\"),\n              \"core.properties\").exists());\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(\"cores\").resolve(core.getName());\n      Path reported = Paths.get((String) core.getStatistics().get(\"instanceDir\"));\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + reported, Files.isSameFile(expected, reported));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = ((SolrDispatchFilter) jetty.getDispatchFilter()\n        .getFilter()).getCores();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      assertTrue(\"Could not find expected core.properties file\",\n          new File((String) core.getStatistics().get(\"instanceDir\"),\n              \"core.properties\").exists());\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(\"cores\").resolve(core.getName());\n      Path reported = Paths.get((String) core.getStatistics().get(\"instanceDir\"));\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + reported, Files.isSameFile(expected, reported));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getStatistics().get(\"instanceDir\");\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(\"cores\").resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      assertTrue(\"Could not find expected core.properties file\",\n          new File((String) core.getStatistics().get(\"instanceDir\"),\n              \"core.properties\").exists());\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(\"cores\").resolve(core.getName());\n      Path reported = Paths.get((String) core.getStatistics().get(\"instanceDir\"));\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + reported, Files.isSameFile(expected, reported));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getStatistics().get(\"instanceDir\");\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getStatistics().get(\"instanceDir\");\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(\"cores\").resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getStatistics().get(\"instanceDir\");\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getStatistics().get(\"instanceDir\");\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(\"cores\").resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getStatistics().get(\"instanceDir\");\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["273ff2f5b0b365591fcbe91ea23b5e97027ca60d","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getStatistics().get(\"instanceDir\");\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"b94236357aaa22b76c10629851fe4e376e0cea82":["816521ebaad5add9cb96bb88c577394e2938c40b","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["a626ec4d1c92e59fe390724d6220081047b03ce7","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d642fe6577db47788146c0fc4fe14240ab1718b7"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d642fe6577db47788146c0fc4fe14240ab1718b7"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["84898c2f58f13c1cc1618ab127b016f025e49a31"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"d642fe6577db47788146c0fc4fe14240ab1718b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dcb5de84d260a8919bf0f2d4d180df543a2ad07a":["d642fe6577db47788146c0fc4fe14240ab1718b7"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"84898c2f58f13c1cc1618ab127b016f025e49a31":["a661c91029ca76472ff48b0798919f1b11662432"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a661c91029ca76472ff48b0798919f1b11662432":["dcb5de84d260a8919bf0f2d4d180df543a2ad07a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","816521ebaad5add9cb96bb88c577394e2938c40b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"816521ebaad5add9cb96bb88c577394e2938c40b":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"d642fe6577db47788146c0fc4fe14240ab1718b7":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","dcb5de84d260a8919bf0f2d4d180df543a2ad07a"],"dcb5de84d260a8919bf0f2d4d180df543a2ad07a":["a661c91029ca76472ff48b0798919f1b11662432"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"84898c2f58f13c1cc1618ab127b016f025e49a31":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","d642fe6577db47788146c0fc4fe14240ab1718b7"],"a661c91029ca76472ff48b0798919f1b11662432":["84898c2f58f13c1cc1618ab127b016f025e49a31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}