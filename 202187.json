{"path":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#collect(int).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#collect(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleFacetsCollector#collect(int).mjava","sourceNew":"  @Override\n  public final void collect(int doc) throws IOException {\n    bits.set(doc);\n    if (keepScores) {\n      if (totalHits >= scores.length) {\n        float[] newScores = new float[ArrayUtil.oversize(totalHits + 1, 4)];\n        System.arraycopy(scores, 0, newScores, 0, totalHits);\n        scores = newScores;\n      }\n      scores[totalHits] = scorer.score();\n    }\n    totalHits++;\n  }\n\n","sourceOld":"  @Override\n  public final void collect(int doc) throws IOException {\n    bits.set(doc);\n    if (keepScores) {\n      if (totalHits >= scores.length) {\n        float[] newScores = new float[ArrayUtil.oversize(totalHits + 1, 4)];\n        System.arraycopy(scores, 0, newScores, 0, totalHits);\n        scores = newScores;\n      }\n      scores[totalHits] = scorer.score();\n    }\n    totalHits++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final void collect(int doc) throws IOException {\n    bits.set(doc);\n    if (keepScores) {\n      if (totalHits >= scores.length) {\n        float[] newScores = new float[ArrayUtil.oversize(totalHits + 1, 4)];\n        System.arraycopy(scores, 0, newScores, 0, totalHits);\n        scores = newScores;\n      }\n      scores[totalHits] = scorer.score();\n    }\n    totalHits++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0732a1e488deedeceef7f601e066085e7ac655a","date":1391629546,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#collect(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#collect(int).mjava","sourceNew":"  @Override\n  public final void collect(int doc) throws IOException {\n    docs.addDoc(doc);\n    if (keepScores) {\n      if (totalHits >= scores.length) {\n        float[] newScores = new float[ArrayUtil.oversize(totalHits + 1, 4)];\n        System.arraycopy(scores, 0, newScores, 0, totalHits);\n        scores = newScores;\n      }\n      scores[totalHits] = scorer.score();\n    }\n    totalHits++;\n  }\n\n","sourceOld":"  @Override\n  public final void collect(int doc) throws IOException {\n    bits.set(doc);\n    if (keepScores) {\n      if (totalHits >= scores.length) {\n        float[] newScores = new float[ArrayUtil.oversize(totalHits + 1, 4)];\n        System.arraycopy(scores, 0, newScores, 0, totalHits);\n        scores = newScores;\n      }\n      scores[totalHits] = scorer.score();\n    }\n    totalHits++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cfd1df435f04d4287925cca73cf22120f723892","date":1493925365,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#collect(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#collect(int).mjava","sourceNew":"  @Override\n  public final void collect(int doc) throws IOException {\n    docsBuilder.grow(1).add(doc);\n    if (keepScores) {\n      if (totalHits >= scores.length) {\n        float[] newScores = new float[ArrayUtil.oversize(totalHits + 1, 4)];\n        System.arraycopy(scores, 0, newScores, 0, totalHits);\n        scores = newScores;\n      }\n      scores[totalHits] = scorer.score();\n    }\n    totalHits++;\n  }\n\n","sourceOld":"  @Override\n  public final void collect(int doc) throws IOException {\n    docs.addDoc(doc);\n    if (keepScores) {\n      if (totalHits >= scores.length) {\n        float[] newScores = new float[ArrayUtil.oversize(totalHits + 1, 4)];\n        System.arraycopy(scores, 0, newScores, 0, totalHits);\n        scores = newScores;\n      }\n      scores[totalHits] = scorer.score();\n    }\n    totalHits++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#collect(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsCollector#collect(int).mjava","sourceNew":"  @Override\n  public final void collect(int doc) throws IOException {\n    docsBuilder.grow(1).add(doc);\n    if (keepScores) {\n      if (totalHits >= scores.length) {\n        float[] newScores = new float[ArrayUtil.oversize(totalHits + 1, 4)];\n        System.arraycopy(scores, 0, newScores, 0, totalHits);\n        scores = newScores;\n      }\n      scores[totalHits] = scorer.score();\n    }\n    totalHits++;\n  }\n\n","sourceOld":"  @Override\n  public final void collect(int doc) throws IOException {\n    docs.addDoc(doc);\n    if (keepScores) {\n      if (totalHits >= scores.length) {\n        float[] newScores = new float[ArrayUtil.oversize(totalHits + 1, 4)];\n        System.arraycopy(scores, 0, newScores, 0, totalHits);\n        scores = newScores;\n      }\n      scores[totalHits] = scorer.score();\n    }\n    totalHits++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8cfd1df435f04d4287925cca73cf22120f723892":["a0732a1e488deedeceef7f601e066085e7ac655a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0732a1e488deedeceef7f601e066085e7ac655a","8cfd1df435f04d4287925cca73cf22120f723892"],"a0732a1e488deedeceef7f601e066085e7ac655a":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8cfd1df435f04d4287925cca73cf22120f723892"]},"commit2Childs":{"8cfd1df435f04d4287925cca73cf22120f723892":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0732a1e488deedeceef7f601e066085e7ac655a":["8cfd1df435f04d4287925cca73cf22120f723892","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0732a1e488deedeceef7f601e066085e7ac655a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}