{"path":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","commits":[{"id":"9001fdb834e467ef899e41c747c42b27b4d45099","date":1296775304,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropraite \n   * exception (including hte field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["79900e89f08cc17c4bcf49789dd61a2236ee7840","79900e89f08cc17c4bcf49789dd61a2236ee7840","79900e89f08cc17c4bcf49789dd61a2236ee7840","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropraite \n   * exception (including hte field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7e2c5596ef3fbb03572368a66afb40a500404ab","date":1297903084,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropraite \n   * exception (including hte field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":["9001fdb834e467ef899e41c747c42b27b4d45099"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropraite \n   * exception (including hte field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6139f55123615b15a28f15bf8bc1f1e9f389e0dc","date":1299127440,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"6139f55123615b15a28f15bf8bc1f1e9f389e0dc":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"c26f00b574427b55127e869b935845554afde1fa":["6139f55123615b15a28f15bf8bc1f1e9f389e0dc","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","6139f55123615b15a28f15bf8bc1f1e9f389e0dc"],"f7e2c5596ef3fbb03572368a66afb40a500404ab":["9001fdb834e467ef899e41c747c42b27b4d45099"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["6139f55123615b15a28f15bf8bc1f1e9f389e0dc"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","6139f55123615b15a28f15bf8bc1f1e9f389e0dc"],"9001fdb834e467ef899e41c747c42b27b4d45099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9001fdb834e467ef899e41c747c42b27b4d45099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["6139f55123615b15a28f15bf8bc1f1e9f389e0dc"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"6139f55123615b15a28f15bf8bc1f1e9f389e0dc":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"f7e2c5596ef3fbb03572368a66afb40a500404ab":["f1bdbf92da222965b46c0a942c3857ba56e5c638","6139f55123615b15a28f15bf8bc1f1e9f389e0dc","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"9001fdb834e467ef899e41c747c42b27b4d45099":["f7e2c5596ef3fbb03572368a66afb40a500404ab","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9001fdb834e467ef899e41c747c42b27b4d45099","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}