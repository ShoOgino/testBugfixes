{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void run() {\n    while (true) {\n      SimpleCopyJob topJob = getNextJob();\n      if (topJob == null) {\n        assert finish;\n        break;\n      }\n\n      this.setName(\"jobs o\" + topJob.ord);\n\n      assert topJob != null;\n\n      boolean result;\n      try {\n        result = topJob.visit();\n      } catch (Throwable t) {\n        if ((t instanceof AlreadyClosedException) == false) {\n          node.message(\"exception during job.visit job=\" + topJob + \"; now cancel\");\n          t.printStackTrace(System.out);\n        } else {\n          node.message(\"AlreadyClosedException during job.visit job=\" + topJob + \"; now cancel\");\n        }\n        topJob.cancel(\"unexpected exception in visit\", t);\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling OnceDone: \" + t2);\n        }\n        continue;\n      }\n\n      if (result == false) {\n        // Job isn't done yet; put it back:\n        synchronized (this) {\n          queue.offer(topJob);\n        }\n      } else {\n        // Job finished, now notify caller:\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n\n    node.message(\"top: jobs now exit run thread\");\n\n    synchronized(this) {\n      // Gracefully cancel any jobs we didn't finish:\n      while (queue.isEmpty() == false) {\n        SimpleCopyJob job = (SimpleCopyJob) queue.poll();\n        node.message(\"top: Jobs: now cancel job=\" + job);\n        job.cancel(\"jobs closing\", null);\n        try {\n          job.onceDone.run(job);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8ec0889b27701f0ad90a25c95b75454e898cf3","date":1454871481,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","sourceNew":"  @Override\n  public void run() {\n    while (true) {\n      SimpleCopyJob topJob = getNextJob();\n      if (topJob == null) {\n        assert finish;\n        break;\n      }\n\n      this.setName(\"jobs o\" + topJob.ord);\n\n      assert topJob != null;\n\n      boolean result;\n      try {\n        result = topJob.visit();\n      } catch (Throwable t) {\n        if ((t instanceof AlreadyClosedException) == false) {\n          node.message(\"exception during job.visit job=\" + topJob + \"; now cancel\");\n          t.printStackTrace(System.out);\n        } else {\n          node.message(\"AlreadyClosedException during job.visit job=\" + topJob + \"; now cancel\");\n        }\n        topJob.cancel(\"unexpected exception in visit\", t);\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling OnceDone: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        continue;\n      }\n\n      if (result == false) {\n        // Job isn't done yet; put it back:\n        synchronized (this) {\n          queue.offer(topJob);\n        }\n      } else {\n        // Job finished, now notify caller:\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n\n    node.message(\"top: jobs now exit run thread\");\n\n    synchronized(this) {\n      // Gracefully cancel any jobs we didn't finish:\n      while (queue.isEmpty() == false) {\n        SimpleCopyJob job = (SimpleCopyJob) queue.poll();\n        node.message(\"top: Jobs: now cancel job=\" + job);\n        job.cancel(\"jobs closing\", null);\n        try {\n          job.onceDone.run(job);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    while (true) {\n      SimpleCopyJob topJob = getNextJob();\n      if (topJob == null) {\n        assert finish;\n        break;\n      }\n\n      this.setName(\"jobs o\" + topJob.ord);\n\n      assert topJob != null;\n\n      boolean result;\n      try {\n        result = topJob.visit();\n      } catch (Throwable t) {\n        if ((t instanceof AlreadyClosedException) == false) {\n          node.message(\"exception during job.visit job=\" + topJob + \"; now cancel\");\n          t.printStackTrace(System.out);\n        } else {\n          node.message(\"AlreadyClosedException during job.visit job=\" + topJob + \"; now cancel\");\n        }\n        topJob.cancel(\"unexpected exception in visit\", t);\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling OnceDone: \" + t2);\n        }\n        continue;\n      }\n\n      if (result == false) {\n        // Job isn't done yet; put it back:\n        synchronized (this) {\n          queue.offer(topJob);\n        }\n      } else {\n        // Job finished, now notify caller:\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n\n    node.message(\"top: jobs now exit run thread\");\n\n    synchronized(this) {\n      // Gracefully cancel any jobs we didn't finish:\n      while (queue.isEmpty() == false) {\n        SimpleCopyJob job = (SimpleCopyJob) queue.poll();\n        node.message(\"top: Jobs: now cancel job=\" + job);\n        job.cancel(\"jobs closing\", null);\n        try {\n          job.onceDone.run(job);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13ea66b549e25413e4e3057bf3492ab828899110","date":1454958424,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","sourceNew":"  @Override\n  public void run() {\n    while (true) {\n      SimpleCopyJob topJob = getNextJob();\n      if (topJob == null) {\n        assert finish;\n        break;\n      }\n\n      this.setName(\"jobs o\" + topJob.ord);\n\n      assert topJob != null;\n\n      boolean result;\n      try {\n        result = topJob.visit();\n      } catch (Throwable t) {\n        if ((t instanceof AlreadyClosedException) == false) {\n          node.message(\"exception during job.visit job=\" + topJob + \"; now cancel\");\n          t.printStackTrace(System.out);\n        } else {\n          node.message(\"AlreadyClosedException during job.visit job=\" + topJob + \"; now cancel\");\n        }\n        try {\n          topJob.cancel(\"unexpected exception in visit\", t);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling cancel: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling OnceDone: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        continue;\n      }\n\n      if (result == false) {\n        // Job isn't done yet; put it back:\n        synchronized (this) {\n          queue.offer(topJob);\n        }\n      } else {\n        // Job finished, now notify caller:\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n          t.printStackTrace(System.out);\n        }\n      }\n    }\n\n    node.message(\"top: jobs now exit run thread\");\n\n    synchronized(this) {\n      // Gracefully cancel any jobs we didn't finish:\n      while (queue.isEmpty() == false) {\n        SimpleCopyJob job = (SimpleCopyJob) queue.poll();\n        node.message(\"top: Jobs: now cancel job=\" + job);\n        try {\n          job.cancel(\"jobs closing\", null);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling cancel\");\n          t.printStackTrace(System.out);\n        }\n        try {\n          job.onceDone.run(job);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone\");\n          t.printStackTrace(System.out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    while (true) {\n      SimpleCopyJob topJob = getNextJob();\n      if (topJob == null) {\n        assert finish;\n        break;\n      }\n\n      this.setName(\"jobs o\" + topJob.ord);\n\n      assert topJob != null;\n\n      boolean result;\n      try {\n        result = topJob.visit();\n      } catch (Throwable t) {\n        if ((t instanceof AlreadyClosedException) == false) {\n          node.message(\"exception during job.visit job=\" + topJob + \"; now cancel\");\n          t.printStackTrace(System.out);\n        } else {\n          node.message(\"AlreadyClosedException during job.visit job=\" + topJob + \"; now cancel\");\n        }\n        topJob.cancel(\"unexpected exception in visit\", t);\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling OnceDone: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        continue;\n      }\n\n      if (result == false) {\n        // Job isn't done yet; put it back:\n        synchronized (this) {\n          queue.offer(topJob);\n        }\n      } else {\n        // Job finished, now notify caller:\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n\n    node.message(\"top: jobs now exit run thread\");\n\n    synchronized(this) {\n      // Gracefully cancel any jobs we didn't finish:\n      while (queue.isEmpty() == false) {\n        SimpleCopyJob job = (SimpleCopyJob) queue.poll();\n        node.message(\"top: Jobs: now cancel job=\" + job);\n        job.cancel(\"jobs closing\", null);\n        try {\n          job.onceDone.run(job);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b965fd4797f153244f9f36ce2c435fcda189d87","date":1454958434,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","sourceNew":"  @Override\n  public void run() {\n    while (true) {\n      SimpleCopyJob topJob = getNextJob();\n      if (topJob == null) {\n        assert finish;\n        break;\n      }\n\n      this.setName(\"jobs o\" + topJob.ord);\n\n      assert topJob != null;\n\n      boolean result;\n      try {\n        result = topJob.visit();\n      } catch (Throwable t) {\n        if ((t instanceof AlreadyClosedException) == false) {\n          node.message(\"exception during job.visit job=\" + topJob + \"; now cancel\");\n          t.printStackTrace(System.out);\n        } else {\n          node.message(\"AlreadyClosedException during job.visit job=\" + topJob + \"; now cancel\");\n        }\n        try {\n          topJob.cancel(\"unexpected exception in visit\", t);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling cancel: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling OnceDone: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        continue;\n      }\n\n      if (result == false) {\n        // Job isn't done yet; put it back:\n        synchronized (this) {\n          queue.offer(topJob);\n        }\n      } else {\n        // Job finished, now notify caller:\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n\n    node.message(\"top: jobs now exit run thread\");\n\n    synchronized(this) {\n      // Gracefully cancel any jobs we didn't finish:\n      while (queue.isEmpty() == false) {\n        SimpleCopyJob job = (SimpleCopyJob) queue.poll();\n        node.message(\"top: Jobs: now cancel job=\" + job);\n        try {\n          job.cancel(\"jobs closing\", null);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling cancel: \" + t);\n        }\n        try {\n          job.onceDone.run(job);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    while (true) {\n      SimpleCopyJob topJob = getNextJob();\n      if (topJob == null) {\n        assert finish;\n        break;\n      }\n\n      this.setName(\"jobs o\" + topJob.ord);\n\n      assert topJob != null;\n\n      boolean result;\n      try {\n        result = topJob.visit();\n      } catch (Throwable t) {\n        if ((t instanceof AlreadyClosedException) == false) {\n          node.message(\"exception during job.visit job=\" + topJob + \"; now cancel\");\n          t.printStackTrace(System.out);\n        } else {\n          node.message(\"AlreadyClosedException during job.visit job=\" + topJob + \"; now cancel\");\n        }\n        topJob.cancel(\"unexpected exception in visit\", t);\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling OnceDone: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        continue;\n      }\n\n      if (result == false) {\n        // Job isn't done yet; put it back:\n        synchronized (this) {\n          queue.offer(topJob);\n        }\n      } else {\n        // Job finished, now notify caller:\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n\n    node.message(\"top: jobs now exit run thread\");\n\n    synchronized(this) {\n      // Gracefully cancel any jobs we didn't finish:\n      while (queue.isEmpty() == false) {\n        SimpleCopyJob job = (SimpleCopyJob) queue.poll();\n        node.message(\"top: Jobs: now cancel job=\" + job);\n        job.cancel(\"jobs closing\", null);\n        try {\n          job.onceDone.run(job);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b0febf62c2d9baeee7db38998d9197700ccbab9","date":1454958476,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","sourceNew":"  @Override\n  public void run() {\n    while (true) {\n      SimpleCopyJob topJob = getNextJob();\n      if (topJob == null) {\n        assert finish;\n        break;\n      }\n\n      this.setName(\"jobs o\" + topJob.ord);\n\n      assert topJob != null;\n\n      boolean result;\n      try {\n        result = topJob.visit();\n      } catch (Throwable t) {\n        if ((t instanceof AlreadyClosedException) == false) {\n          node.message(\"exception during job.visit job=\" + topJob + \"; now cancel\");\n          t.printStackTrace(System.out);\n        } else {\n          node.message(\"AlreadyClosedException during job.visit job=\" + topJob + \"; now cancel\");\n        }\n        try {\n          topJob.cancel(\"unexpected exception in visit\", t);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling cancel: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling OnceDone: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        continue;\n      }\n\n      if (result == false) {\n        // Job isn't done yet; put it back:\n        synchronized (this) {\n          queue.offer(topJob);\n        }\n      } else {\n        // Job finished, now notify caller:\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n          t.printStackTrace(System.out);\n        }\n      }\n    }\n\n    node.message(\"top: jobs now exit run thread\");\n\n    synchronized(this) {\n      // Gracefully cancel any jobs we didn't finish:\n      while (queue.isEmpty() == false) {\n        SimpleCopyJob job = (SimpleCopyJob) queue.poll();\n        node.message(\"top: Jobs: now cancel job=\" + job);\n        try {\n          job.cancel(\"jobs closing\", null);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling cancel\");\n          t.printStackTrace(System.out);\n        }\n        try {\n          job.onceDone.run(job);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone\");\n          t.printStackTrace(System.out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void run() {\n    while (true) {\n      SimpleCopyJob topJob = getNextJob();\n      if (topJob == null) {\n        assert finish;\n        break;\n      }\n\n      this.setName(\"jobs o\" + topJob.ord);\n\n      assert topJob != null;\n\n      boolean result;\n      try {\n        result = topJob.visit();\n      } catch (Throwable t) {\n        if ((t instanceof AlreadyClosedException) == false) {\n          node.message(\"exception during job.visit job=\" + topJob + \"; now cancel\");\n          t.printStackTrace(System.out);\n        } else {\n          node.message(\"AlreadyClosedException during job.visit job=\" + topJob + \"; now cancel\");\n        }\n        try {\n          topJob.cancel(\"unexpected exception in visit\", t);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling cancel: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling OnceDone: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        continue;\n      }\n\n      if (result == false) {\n        // Job isn't done yet; put it back:\n        synchronized (this) {\n          queue.offer(topJob);\n        }\n      } else {\n        // Job finished, now notify caller:\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n\n    node.message(\"top: jobs now exit run thread\");\n\n    synchronized(this) {\n      // Gracefully cancel any jobs we didn't finish:\n      while (queue.isEmpty() == false) {\n        SimpleCopyJob job = (SimpleCopyJob) queue.poll();\n        node.message(\"top: Jobs: now cancel job=\" + job);\n        try {\n          job.cancel(\"jobs closing\", null);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling cancel: \" + t);\n        }\n        try {\n          job.onceDone.run(job);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/Jobs#run().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void run() {\n    while (true) {\n      SimpleCopyJob topJob = getNextJob();\n      if (topJob == null) {\n        assert finish;\n        break;\n      }\n\n      this.setName(\"jobs o\" + topJob.ord);\n\n      assert topJob != null;\n\n      boolean result;\n      try {\n        result = topJob.visit();\n      } catch (Throwable t) {\n        if ((t instanceof AlreadyClosedException) == false) {\n          node.message(\"exception during job.visit job=\" + topJob + \"; now cancel\");\n          t.printStackTrace(System.out);\n        } else {\n          node.message(\"AlreadyClosedException during job.visit job=\" + topJob + \"; now cancel\");\n        }\n        try {\n          topJob.cancel(\"unexpected exception in visit\", t);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling cancel: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t2) {\n          node.message(\"ignore exception calling OnceDone: \" + t2);\n          t2.printStackTrace(System.out);\n        }\n        continue;\n      }\n\n      if (result == false) {\n        // Job isn't done yet; put it back:\n        synchronized (this) {\n          queue.offer(topJob);\n        }\n      } else {\n        // Job finished, now notify caller:\n        try {\n          topJob.onceDone.run(topJob);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone: \" + t);\n          t.printStackTrace(System.out);\n        }\n      }\n    }\n\n    node.message(\"top: jobs now exit run thread\");\n\n    synchronized(this) {\n      // Gracefully cancel any jobs we didn't finish:\n      while (queue.isEmpty() == false) {\n        SimpleCopyJob job = (SimpleCopyJob) queue.poll();\n        node.message(\"top: Jobs: now cancel job=\" + job);\n        try {\n          job.cancel(\"jobs closing\", null);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling cancel\");\n          t.printStackTrace(System.out);\n        }\n        try {\n          job.onceDone.run(job);\n        } catch (Throwable t) {\n          node.message(\"ignore exception calling OnceDone\");\n          t.printStackTrace(System.out);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8ec0889b27701f0ad90a25c95b75454e898cf3":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"1b0febf62c2d9baeee7db38998d9197700ccbab9":["9b965fd4797f153244f9f36ce2c435fcda189d87","13ea66b549e25413e4e3057bf3492ab828899110"],"9b965fd4797f153244f9f36ce2c435fcda189d87":["4a8ec0889b27701f0ad90a25c95b75454e898cf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","13ea66b549e25413e4e3057bf3492ab828899110"],"13ea66b549e25413e4e3057bf3492ab828899110":["4a8ec0889b27701f0ad90a25c95b75454e898cf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4a8ec0889b27701f0ad90a25c95b75454e898cf3":["9b965fd4797f153244f9f36ce2c435fcda189d87","13ea66b549e25413e4e3057bf3492ab828899110"],"1b0febf62c2d9baeee7db38998d9197700ccbab9":[],"9b965fd4797f153244f9f36ce2c435fcda189d87":["1b0febf62c2d9baeee7db38998d9197700ccbab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"13ea66b549e25413e4e3057bf3492ab828899110":["1b0febf62c2d9baeee7db38998d9197700ccbab9","68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["4a8ec0889b27701f0ad90a25c95b75454e898cf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1b0febf62c2d9baeee7db38998d9197700ccbab9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}