{"path":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","commits":[{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Object rect = randomQueryBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rectMinX(rect), rectMaxX(rect), rectMinY(rect), rectMaxY(rect));\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = ENCODER.quantizeXCeil(rectMinX(rect));\n        double qMaxLon = ENCODER.quantizeX(rectMaxX(rect));\n        double qMinLat = ENCODER.quantizeYCeil(rectMinY(rect));\n        double qMaxLat = ENCODER.quantizeY(rectMaxY(rect));\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rectCrossesDateline(rect) == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = ENCODER.quantizeX(rectMinX(rect));\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = ENCODER.quantizeY(rectMaxY(rect));\n          }\n          expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + ENCODER.quantizeYCeil(rectMinY(rect)) + \" TO \" + ENCODER.quantizeY(rectMaxY(rect)) + \" lon=\" + qMinLon + \" TO \" + ENCODER.quantizeX(rectMaxX(rect)) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = quantizeLonCeil(rect.minLon);\n        double qMaxLon = quantizeLon(rect.maxLon);\n        double qMinLat = quantizeLatCeil(rect.minLat);\n        double qMaxLat = quantizeLat(rect.maxLat);\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rect.crossesDateline() == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = quantizeLon(rect.minLon);\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = quantizeLat(rect.maxLat);\n          }\n          expected = getValidator(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + qMinLon + \" TO \" + quantizeLon(rect.maxLon) + \")\\n\");          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Object rect = randomQueryBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rectMinX(rect), rectMaxX(rect), rectMinY(rect), rectMaxY(rect));\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = ENCODER.quantizeXCeil(rectMinX(rect));\n        double qMaxLon = ENCODER.quantizeX(rectMaxX(rect));\n        double qMinLat = ENCODER.quantizeYCeil(rectMinY(rect));\n        double qMaxLat = ENCODER.quantizeY(rectMaxY(rect));\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          if (qMinLat > qMaxLat) {\n            qMinLat = ENCODER.quantizeY(rectMaxY(rect));\n          }\n          if (queryRelation == QueryRelation.CONTAINS && rectCrossesDateline(rect)) {\n            //For contains we need to call the validator for each section. It is only expected\n            //if both sides are contained.\n            expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, GeoUtils.MAX_LON_INCL, shapes[id]);\n            if (expected) {\n              expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, GeoUtils.MIN_LON_INCL, qMaxLon, shapes[id]);\n            }\n          } else {\n            // check quantized poly against quantized query\n            if (qMinLon > qMaxLon && rectCrossesDateline(rect) == false) {\n              // if the quantization creates a false dateline crossing (because of encodeCeil):\n              // then do not use encodeCeil\n              qMinLon = ENCODER.quantizeX(rectMinX(rect));\n            }\n            expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n          }\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + ENCODER.quantizeYCeil(rectMinY(rect)) + \" TO \" + ENCODER.quantizeY(rectMaxY(rect)) + \" lon=\" + qMinLon + \" TO \" + ENCODER.quantizeX(rectMaxX(rect)) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Object rect = randomQueryBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rectMinX(rect), rectMaxX(rect), rectMinY(rect), rectMaxY(rect));\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = ENCODER.quantizeXCeil(rectMinX(rect));\n        double qMaxLon = ENCODER.quantizeX(rectMaxX(rect));\n        double qMinLat = ENCODER.quantizeYCeil(rectMinY(rect));\n        double qMaxLat = ENCODER.quantizeY(rectMaxY(rect));\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rectCrossesDateline(rect) == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = ENCODER.quantizeX(rectMinX(rect));\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = ENCODER.quantizeY(rectMaxY(rect));\n          }\n          expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + ENCODER.quantizeYCeil(rectMinY(rect)) + \" TO \" + ENCODER.quantizeY(rectMaxY(rect)) + \" lon=\" + qMinLon + \" TO \" + ENCODER.quantizeX(rectMaxX(rect)) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Object rect = randomQueryBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rectMinX(rect), rectMaxX(rect), rectMinY(rect), rectMaxY(rect));\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = ENCODER.quantizeXCeil(rectMinX(rect));\n        double qMaxLon = ENCODER.quantizeX(rectMaxX(rect));\n        double qMinLat = ENCODER.quantizeYCeil(rectMinY(rect));\n        double qMaxLat = ENCODER.quantizeY(rectMaxY(rect));\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          if (qMinLat > qMaxLat) {\n            qMinLat = ENCODER.quantizeY(rectMaxY(rect));\n          }\n          if (queryRelation == QueryRelation.CONTAINS && rectCrossesDateline(rect)) {\n            //For contains we need to call the validator for each section. It is only expected\n            //if both sides are contained.\n            expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, GeoUtils.MAX_LON_INCL, shapes[id]);\n            if (expected) {\n              expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, GeoUtils.MIN_LON_INCL, qMaxLon, shapes[id]);\n            }\n          } else {\n            // check quantized poly against quantized query\n            if (qMinLon > qMaxLon && rectCrossesDateline(rect) == false) {\n              // if the quantization creates a false dateline crossing (because of encodeCeil):\n              // then do not use encodeCeil\n              qMinLon = ENCODER.quantizeX(rectMinX(rect));\n            }\n            expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n          }\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + ENCODER.quantizeYCeil(rectMinY(rect)) + \" TO \" + ENCODER.quantizeY(rectMaxY(rect)) + \" lon=\" + qMinLon + \" TO \" + ENCODER.quantizeX(rectMaxX(rect)) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Object rect = randomQueryBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rectMinX(rect), rectMaxX(rect), rectMinY(rect), rectMaxY(rect));\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = ENCODER.quantizeXCeil(rectMinX(rect));\n        double qMaxLon = ENCODER.quantizeX(rectMaxX(rect));\n        double qMinLat = ENCODER.quantizeYCeil(rectMinY(rect));\n        double qMaxLat = ENCODER.quantizeY(rectMaxY(rect));\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          if (qMinLon > qMaxLon && rectCrossesDateline(rect) == false) {\n            // if the quantization creates a false dateline crossing (because of encodeCeil):\n            // then do not use encodeCeil\n            qMinLon = ENCODER.quantizeX(rectMinX(rect));\n          }\n\n          if (qMinLat > qMaxLat) {\n            qMinLat = ENCODER.quantizeY(rectMaxY(rect));\n          }\n          expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + ENCODER.quantizeYCeil(rectMinY(rect)) + \" TO \" + ENCODER.quantizeY(rectMaxY(rect)) + \" lon=\" + qMinLon + \" TO \" + ENCODER.quantizeX(rectMaxX(rect)) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseShapeTestCase#verifyRandomBBoxQueries(IndexReader,Object...).mjava","sourceNew":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Object rect = randomQueryBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rectMinX(rect), rectMaxX(rect), rectMinY(rect), rectMaxY(rect));\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = ENCODER.quantizeXCeil(rectMinX(rect));\n        double qMaxLon = ENCODER.quantizeX(rectMaxX(rect));\n        double qMinLat = ENCODER.quantizeYCeil(rectMinY(rect));\n        double qMaxLat = ENCODER.quantizeY(rectMaxY(rect));\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          if (qMinLat > qMaxLat) {\n            qMinLat = ENCODER.quantizeY(rectMaxY(rect));\n          }\n          if (queryRelation == QueryRelation.CONTAINS && rectCrossesDateline(rect)) {\n            //For contains we need to call the validator for each section. It is only expected\n            //if both sides are contained.\n            expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, GeoUtils.MAX_LON_INCL, shapes[id]);\n            if (expected) {\n              expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, GeoUtils.MIN_LON_INCL, qMaxLon, shapes[id]);\n            }\n          } else {\n            // check quantized poly against quantized query\n            if (qMinLon > qMaxLon && rectCrossesDateline(rect) == false) {\n              // if the quantization creates a false dateline crossing (because of encodeCeil):\n              // then do not use encodeCeil\n              qMinLon = ENCODER.quantizeX(rectMinX(rect));\n            }\n            expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n          }\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + ENCODER.quantizeYCeil(rectMinY(rect)) + \" TO \" + ENCODER.quantizeY(rectMaxY(rect)) + \" lon=\" + qMinLon + \" TO \" + ENCODER.quantizeX(rectMaxX(rect)) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  /** test random generated bounding boxes */\n  protected void verifyRandomBBoxQueries(IndexReader reader, Object... shapes) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = scaledIterationCount(shapes.length);\n\n    Bits liveDocs = MultiBits.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Object rect = randomQueryBox();\n      QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n      Query query = newRectQuery(FIELD_NAME, queryRelation, rectMinX(rect), rectMaxX(rect), rectMinY(rect), rectMaxY(rect));\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query + \", relation=\" + queryRelation);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        double qMinLon = ENCODER.quantizeXCeil(rectMinX(rect));\n        double qMaxLon = ENCODER.quantizeX(rectMaxX(rect));\n        double qMinLat = ENCODER.quantizeYCeil(rectMinY(rect));\n        double qMaxLat = ENCODER.quantizeY(rectMaxY(rect));\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (shapes[id] == null) {\n          expected = false;\n        } else {\n          if (qMinLat > qMaxLat) {\n            qMinLat = ENCODER.quantizeY(rectMaxY(rect));\n          }\n          if (queryRelation == QueryRelation.CONTAINS && rectCrossesDateline(rect)) {\n            //For contains we need to call the validator for each section. It is only expected\n            //if both sides are contained.\n            expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, GeoUtils.MAX_LON_INCL, shapes[id]);\n            if (expected) {\n              expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, GeoUtils.MIN_LON_INCL, qMaxLon, shapes[id]);\n            }\n          } else {\n            // check quantized poly against quantized query\n            if (qMinLon > qMaxLon && rectCrossesDateline(rect) == false) {\n              // if the quantization creates a false dateline crossing (because of encodeCeil):\n              // then do not use encodeCeil\n              qMinLon = ENCODER.quantizeX(rectMinX(rect));\n            }\n            expected = VALIDATOR.setRelation(queryRelation).testBBoxQuery(qMinLat, qMaxLat, qMinLon, qMaxLon, shapes[id]);\n          }\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  relation=\" + queryRelation + \"\\n\");\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          if (shapes[id] instanceof Object[]) {\n            b.append(\"  shape=\" + Arrays.toString((Object[]) shapes[id]) + \"\\n\");\n          } else {\n            b.append(\"  shape=\" + shapes[id] + \"\\n\");\n          }\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(lat=\" + ENCODER.quantizeYCeil(rectMinY(rect)) + \" TO \" + ENCODER.quantizeY(rectMaxY(rect)) + \" lon=\" + qMinLon + \" TO \" + ENCODER.quantizeX(rectMaxX(rect)) + \")\\n\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["c286b0d8c507a88b289407e2fe161effa275c6b0","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}