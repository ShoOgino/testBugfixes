{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ZooKeeperInspector#readConfigName(SolrZkClient,String).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ZooKeeperInspector#readConfigName(SolrZkClient,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns config value given collection name\n   * Borrowed heavily from Solr's ZKController.\n   */\n  public String readConfigName(SolrZkClient zkClient, String collection)\n  throws KeeperException, InterruptedException {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    String configName = null;\n\n    // first check for alias\n    collection = checkForAlias(zkClient, collection);\n    \n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(ZkController.CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      LOG.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new IllegalArgumentException(\"Specified config does not exist in ZooKeeper:\"\n        + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#readConfigName(SolrZkClient,String).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ZooKeeperInspector#readConfigName(SolrZkClient,String).mjava","sourceNew":"  /**\n   * Returns config value given collection name\n   * Borrowed heavily from Solr's ZKController.\n   */\n  public String readConfigName(SolrZkClient zkClient, String collection)\n  throws KeeperException, InterruptedException {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    String configName = null;\n\n    // first check for alias\n    collection = checkForAlias(zkClient, collection);\n    \n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(ZkController.CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      LOG.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new IllegalArgumentException(\"Specified config does not exist in ZooKeeper:\"\n        + configName);\n    }\n\n    return configName;\n  }\n\n","sourceOld":"  /**\n   * Returns config value given collection name\n   * Borrowed heavily from Solr's ZKController.\n   */\n  public String readConfigName(SolrZkClient zkClient, String collection)\n  throws KeeperException, InterruptedException {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    String configName = null;\n\n    // first check for alias\n    collection = checkForAlias(zkClient, collection);\n    \n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (LOG.isInfoEnabled()) {\n      LOG.info(\"Load collection config from:\" + path);\n    }\n    byte[] data = zkClient.getData(path, null, null, true);\n    \n    if(data != null) {\n      ZkNodeProps props = ZkNodeProps.load(data);\n      configName = props.getStr(ZkController.CONFIGNAME_PROP);\n    }\n    \n    if (configName != null && !zkClient.exists(ZkController.CONFIGS_ZKNODE + \"/\" + configName, true)) {\n      LOG.error(\"Specified config does not exist in ZooKeeper:\" + configName);\n      throw new IllegalArgumentException(\"Specified config does not exist in ZooKeeper:\"\n        + configName);\n    }\n\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}