{"path":"src/test/org/apache/lucene/index/TestOmitTf#testOmitTf().mjava","commits":[{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testOmitTf().mjava","pathOld":"/dev/null","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTf bit in the FieldInfo\n  public void testOmitTf() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.TOKENIZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.TOKENIZED);\n    f2.setOmitTf(true);\n    d.add(f2);\n        \n    writer.addDocument(d);\n    writer.optimize();\n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTf(true);\n    d.add(f1);\n        \n    f2.setOmitTf(false);        \n    d.add(f2);\n        \n    writer.addDocument(d);\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f1\").omitTf);\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f2\").omitTf);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testOmitTf().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testOmitTf().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTf bit in the FieldInfo\n  public void testOmitTf() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTf(true);\n    d.add(f2);\n        \n    writer.addDocument(d);\n    writer.optimize();\n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTf(true);\n    d.add(f1);\n        \n    f2.setOmitTf(false);        \n    d.add(f2);\n        \n    writer.addDocument(d);\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f1\").omitTf);\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f2\").omitTf);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTf bit in the FieldInfo\n  public void testOmitTf() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.TOKENIZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.TOKENIZED);\n    f2.setOmitTf(true);\n    d.add(f2);\n        \n    writer.addDocument(d);\n    writer.optimize();\n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTf(true);\n    d.add(f1);\n        \n    f2.setOmitTf(false);        \n    d.add(f2);\n        \n    writer.addDocument(d);\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f1\").omitTf);\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f2\").omitTf);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testOmitTermFreqAndPositions().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testOmitTf().mjava","sourceNew":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTermFreqAndPositions bit in the FieldInfo\n  public void testOmitTermFreqAndPositions() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n        \n    writer.addDocument(d);\n    writer.optimize();\n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    writer.addDocument(d);\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether the DocumentWriter correctly enable the\n  // omitTf bit in the FieldInfo\n  public void testOmitTf() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTf(true);\n    d.add(f2);\n        \n    writer.addDocument(d);\n    writer.optimize();\n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTf(true);\n    d.add(f1);\n        \n    f2.setOmitTf(false);        \n    d.add(f2);\n        \n    writer.addDocument(d);\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f1\").omitTf);\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f2\").omitTf);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}