{"path":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testDatePointField().mjava","commits":[{"id":"09a152fdd1e91e2dc8949c867985ea649b2a0c37","date":1571422557,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testDatePointField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDatePointField() throws Exception {\n    String[] dates = new String[]{\"2015-01-03T14:30:00Z\", \"2014-03-15T12:00:00Z\"};\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\", Integer.toString(100000+i), \"foo_pdt\", dates[i % 2]) );\n      if (random().nextInt(10) == 0) assertU(commit());  // make multiple segments\n    }\n    assertU(commit());\n    assertU(adoc(\"id\", Integer.toString(100102), \"foo_pdt\", dates[1]));\n    assertU(commit());\n\n    try {\n      assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\", \"terms\",\"true\",\n          \"terms.fl\",\"foo_pdt\", \"terms.sort\",\"count\"),\n          \"count(//lst[@name='foo_pdt']/*)=2\",\n          \"//lst[@name='foo_pdt']/int[1][@name='\" + dates[1] + \"'][.='51']\",\n          \"//lst[@name='foo_pdt']/int[2][@name='\" + dates[0] + \"'][.='50']\"\n      );\n    } finally {\n      assertU(delQ(\"foo_pdt:[* TO *]\"));\n      assertU(commit());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb65c51348af9263e432c5a93cd98be0ca68ec3a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb65c51348af9263e432c5a93cd98be0ca68ec3a","date":1571891776,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testDatePointField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testDatePointField().mjava","sourceNew":"  @Test\n  public void testDatePointField() throws Exception {\n    String[] dates = new String[]{\"2015-01-03T14:30:00Z\", \"2014-03-15T12:00:00Z\"};\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\", Integer.toString(100000+i), \"foo_pdt\", dates[i % 2]) );\n      if (random().nextInt(10) == 0) assertU(commit());  // make multiple segments\n    }\n    assertU(commit());\n    assertU(adoc(\"id\", Integer.toString(100102), \"foo_pdt\", dates[1]));\n    assertU(commit());\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\", \"terms\",\"true\",\n        \"terms.fl\",\"foo_pdt\", \"terms.sort\",\"count\"),\n        \"count(//lst[@name='foo_pdt']/*)=2\",\n        \"//lst[@name='foo_pdt']/int[1][@name='\" + dates[1] + \"'][.='51']\",\n        \"//lst[@name='foo_pdt']/int[2][@name='\" + dates[0] + \"'][.='50']\"\n    );\n\n    // test on empty index\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\", \"terms\",\"true\",\n        \"terms.fl\",\"foo_pdt\", \"terms.sort\",\"count\"),\n        \"count(//lst[@name='foo_pdt']/*)=0\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testDatePointField() throws Exception {\n    String[] dates = new String[]{\"2015-01-03T14:30:00Z\", \"2014-03-15T12:00:00Z\"};\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\", Integer.toString(100000+i), \"foo_pdt\", dates[i % 2]) );\n      if (random().nextInt(10) == 0) assertU(commit());  // make multiple segments\n    }\n    assertU(commit());\n    assertU(adoc(\"id\", Integer.toString(100102), \"foo_pdt\", dates[1]));\n    assertU(commit());\n\n    try {\n      assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\", \"terms\",\"true\",\n          \"terms.fl\",\"foo_pdt\", \"terms.sort\",\"count\"),\n          \"count(//lst[@name='foo_pdt']/*)=2\",\n          \"//lst[@name='foo_pdt']/int[1][@name='\" + dates[1] + \"'][.='51']\",\n          \"//lst[@name='foo_pdt']/int[2][@name='\" + dates[0] + \"'][.='50']\"\n      );\n    } finally {\n      assertU(delQ(\"foo_pdt:[* TO *]\"));\n      assertU(commit());\n    }\n  }\n\n","bugFix":["09a152fdd1e91e2dc8949c867985ea649b2a0c37"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"213e062dd7cfdd10e8df198b43616cb99b0c4fdd","date":1600693537,"type":3,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testDatePointField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testDatePointField().mjava","sourceNew":"  @Test\n  public void testDatePointField() throws Exception {\n    String[] dates = new String[]{\"2015-01-03T14:30:00Z\", \"2014-03-15T12:00:00Z\"};\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\", Integer.toString(100000+i), \"foo_pdt\", dates[i % 2]) );\n      if (random().nextInt(10) == 0) assertU(commit());  // make multiple segments\n    }\n    assertU(commit());\n    assertU(adoc(\"id\", Integer.toString(100102), \"foo_pdt\", dates[1]));\n    assertU(commit());\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",\n        \"terms.fl\",\"foo_pdt\", \"terms.sort\",\"count\"),\n        \"count(//lst[@name='foo_pdt']/*)=2\",\n        \"//lst[@name='foo_pdt']/int[1][@name='\" + dates[1] + \"'][.='51']\",\n        \"//lst[@name='foo_pdt']/int[2][@name='\" + dates[0] + \"'][.='50']\"\n    );\n\n    // test on empty index\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",\n        \"terms.fl\",\"foo_pdt\", \"terms.sort\",\"count\"),\n        \"count(//lst[@name='foo_pdt']/*)=0\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testDatePointField() throws Exception {\n    String[] dates = new String[]{\"2015-01-03T14:30:00Z\", \"2014-03-15T12:00:00Z\"};\n    for (int i = 0; i < 100; i++) {\n      assertU(adoc(\"id\", Integer.toString(100000+i), \"foo_pdt\", dates[i % 2]) );\n      if (random().nextInt(10) == 0) assertU(commit());  // make multiple segments\n    }\n    assertU(commit());\n    assertU(adoc(\"id\", Integer.toString(100102), \"foo_pdt\", dates[1]));\n    assertU(commit());\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\", \"terms\",\"true\",\n        \"terms.fl\",\"foo_pdt\", \"terms.sort\",\"count\"),\n        \"count(//lst[@name='foo_pdt']/*)=2\",\n        \"//lst[@name='foo_pdt']/int[1][@name='\" + dates[1] + \"'][.='51']\",\n        \"//lst[@name='foo_pdt']/int[2][@name='\" + dates[0] + \"'][.='50']\"\n    );\n\n    // test on empty index\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\", \"terms\",\"true\",\n        \"terms.fl\",\"foo_pdt\", \"terms.sort\",\"count\"),\n        \"count(//lst[@name='foo_pdt']/*)=0\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"213e062dd7cfdd10e8df198b43616cb99b0c4fdd":["bb65c51348af9263e432c5a93cd98be0ca68ec3a"],"09a152fdd1e91e2dc8949c867985ea649b2a0c37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb65c51348af9263e432c5a93cd98be0ca68ec3a":["09a152fdd1e91e2dc8949c867985ea649b2a0c37"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["213e062dd7cfdd10e8df198b43616cb99b0c4fdd"]},"commit2Childs":{"213e062dd7cfdd10e8df198b43616cb99b0c4fdd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09a152fdd1e91e2dc8949c867985ea649b2a0c37":["bb65c51348af9263e432c5a93cd98be0ca68ec3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09a152fdd1e91e2dc8949c867985ea649b2a0c37"],"bb65c51348af9263e432c5a93cd98be0ca68ec3a":["213e062dd7cfdd10e8df198b43616cb99b0c4fdd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}