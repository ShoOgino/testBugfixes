{"path":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenterFactory#checkThereIsNoDupe(String,Map[Object,Object]).mjava","commits":[{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenterFactory#checkThereIsNoDupe(String,Map[Object,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void checkThereIsNoDupe(String field, Map<Object,Object> context) {\n    // find a map\n    final Map conflictMap;\n    final String conflictMapKey = getClass().getSimpleName();\n    if (context.containsKey(conflictMapKey)) {\n      conflictMap = (Map) context.get(conflictMapKey);\n    } else {\n      conflictMap = new HashMap<>();\n      context.put(conflictMapKey, conflictMap);\n    }\n    // check entry absence \n    if (conflictMap.containsKey(field)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"[subquery] name \"+field+\" is duplicated\");\n    } else {\n      conflictMap.put(field, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenterFactory#checkThereIsNoDupe(String,Map[Object,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void checkThereIsNoDupe(String field, Map<Object,Object> context) {\n    // find a map\n    final Map conflictMap;\n    final String conflictMapKey = getClass().getSimpleName();\n    if (context.containsKey(conflictMapKey)) {\n      conflictMap = (Map) context.get(conflictMapKey);\n    } else {\n      conflictMap = new HashMap<>();\n      context.put(conflictMapKey, conflictMap);\n    }\n    // check entry absence \n    if (conflictMap.containsKey(field)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"[subquery] name \"+field+\" is duplicated\");\n    } else {\n      conflictMap.put(field, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenterFactory#checkThereIsNoDupe(String,Map[Object,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void checkThereIsNoDupe(String field, Map<Object,Object> context) {\n    // find a map\n    final Map conflictMap;\n    final String conflictMapKey = getClass().getSimpleName();\n    if (context.containsKey(conflictMapKey)) {\n      conflictMap = (Map) context.get(conflictMapKey);\n    } else {\n      conflictMap = new HashMap<>();\n      context.put(conflictMapKey, conflictMap);\n    }\n    // check entry absence \n    if (conflictMap.containsKey(field)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"[subquery] name \"+field+\" is duplicated\");\n    } else {\n      conflictMap.put(field, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenterFactory#checkThereIsNoDupe(String,Map[Object,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void checkThereIsNoDupe(String field, Map<Object,Object> context) {\n    // find a map\n    final Map conflictMap;\n    final String conflictMapKey = getClass().getSimpleName();\n    if (context.containsKey(conflictMapKey)) {\n      conflictMap = (Map) context.get(conflictMapKey);\n    } else {\n      conflictMap = new HashMap<>();\n      context.put(conflictMapKey, conflictMap);\n    }\n    // check entry absence \n    if (conflictMap.containsKey(field)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"[subquery] name \"+field+\" is duplicated\");\n    } else {\n      conflictMap.put(field, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenterFactory#checkThereIsNoDupe(String,Map[Object,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenterFactory#checkThereIsNoDupe(String,Map[Object,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void checkThereIsNoDupe(String field, Map<Object,Object> context) {\n    // find a map\n    @SuppressWarnings({\"rawtypes\"})\n    final Map conflictMap;\n    final String conflictMapKey = getClass().getSimpleName();\n    if (context.containsKey(conflictMapKey)) {\n      conflictMap = (Map) context.get(conflictMapKey);\n    } else {\n      conflictMap = new HashMap<>();\n      context.put(conflictMapKey, conflictMap);\n    }\n    // check entry absence \n    if (conflictMap.containsKey(field)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"[subquery] name \"+field+\" is duplicated\");\n    } else {\n      conflictMap.put(field, true);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void checkThereIsNoDupe(String field, Map<Object,Object> context) {\n    // find a map\n    final Map conflictMap;\n    final String conflictMapKey = getClass().getSimpleName();\n    if (context.containsKey(conflictMapKey)) {\n      conflictMap = (Map) context.get(conflictMapKey);\n    } else {\n      conflictMap = new HashMap<>();\n      context.put(conflictMapKey, conflictMap);\n    }\n    // check entry absence \n    if (conflictMap.containsKey(field)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"[subquery] name \"+field+\" is duplicated\");\n    } else {\n      conflictMap.put(field, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"],"561c2351baf6dd64061addef891359954c1a7faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"561c2351baf6dd64061addef891359954c1a7faa":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["06a8891f085f71282bb3ece1b1732b68f07813a3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}