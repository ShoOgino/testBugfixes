{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","commits":[{"id":"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e","date":1478891880,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2459db523605752a3affcf444fb717d625904488","date":1478970978,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa1f8f009c5147b03311c7e6e6469fa7b677186","date":1482164570,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(params),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd","date":1503671644,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getOriginalQuery() == null) {\n        scoringQuery.setOriginalQuery(context.getQuery());\n      }\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e6c4eb6f169ee828eabd776ced7d900664e65a","date":1503675775,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getOriginalQuery() == null) {\n        scoringQuery.setOriginalQuery(context.getQuery());\n      }\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getOriginalQuery() == null) {\n        scoringQuery.setOriginalQuery(context.getQuery());\n      }\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n          // Local transformer efi if provided\n          scoringQuery.setOriginalQuery(context.getQuery());\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getOriginalQuery() == null) {\n        scoringQuery.setOriginalQuery(context.getQuery());\n      }\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, ScoreMode.COMPLETE, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getOriginalQuery() == null) {\n        scoringQuery.setOriginalQuery(context.getQuery());\n      }\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getOriginalQuery() == null) {\n        scoringQuery.setOriginalQuery(context.getQuery());\n      }\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, ScoreMode.COMPLETE, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getOriginalQuery() == null) {\n        scoringQuery.setOriginalQuery(context.getQuery());\n      }\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, true, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/response/transform/LTRFeatureLoggerTransformerFactory.FeatureTransformer#setContext(ResultContext).mjava","sourceNew":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n      if (threadManager != null) {\n        threadManager.setExecutor(context.getRequest().getCore().getCoreContainer().getUpdateShardHandler().getUpdateExecutor());\n      }\n      \n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getOriginalQuery() == null) {\n        scoringQuery.setOriginalQuery(context.getQuery());\n      }\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, ScoreMode.COMPLETE, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setContext(ResultContext context) {\n      super.setContext(context);\n      if (context == null) {\n        return;\n      }\n      if (context.getRequest() == null) {\n        return;\n      }\n\n      searcher = context.getSearcher();\n      if (searcher == null) {\n        throw new SolrException(\n            SolrException.ErrorCode.BAD_REQUEST,\n            \"searcher is null\");\n      }\n      leafContexts = searcher.getTopReaderContext().leaves();\n\n      // Setup LTRScoringQuery\n      scoringQuery = SolrQueryRequestContextUtils.getScoringQuery(req);\n      docsWereNotReranked = (scoringQuery == null);\n      String featureStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);\n      if (docsWereNotReranked || (featureStoreName != null && (!featureStoreName.equals(scoringQuery.getScoringModel().getFeatureStoreName())))) {\n        // if store is set in the transformer we should overwrite the logger\n\n        final ManagedFeatureStore fr = ManagedFeatureStore.getManagedFeatureStore(req.getCore());\n\n        final FeatureStore store = fr.getFeatureStore(featureStoreName);\n        featureStoreName = store.getName(); // if featureStoreName was null before this gets actual name\n\n        try {\n          final LoggingModel lm = new LoggingModel(loggingModelName,\n              featureStoreName, store.getFeatures());\n\n          scoringQuery = new LTRScoringQuery(lm,\n              LTRQParserPlugin.extractEFIParams(localparams),\n              true,\n              threadManager); // request feature weights to be created for all features\n\n        }catch (final Exception e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"retrieving the feature store \"+featureStoreName, e);\n        }\n      }\n\n      if (scoringQuery.getOriginalQuery() == null) {\n        scoringQuery.setOriginalQuery(context.getQuery());\n      }\n      if (scoringQuery.getFeatureLogger() == null){\n        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );\n      }\n      scoringQuery.setRequest(req);\n\n      featureLogger = scoringQuery.getFeatureLogger();\n\n      try {\n        modelWeight = scoringQuery.createWeight(searcher, ScoreMode.COMPLETE, 1f);\n      } catch (final IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e.getMessage(), e);\n      }\n      if (modelWeight == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"error logging the features, model weight is null\");\n      }\n    }\n\n","bugFix":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["eec520bd69db5e7976780e93a0dfc7c0f0e75c2e"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","60e6c4eb6f169ee828eabd776ced7d900664e65a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["2459db523605752a3affcf444fb717d625904488","8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["417142ff08fda9cf0b72d5133e63097a166c6458"],"3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd":["8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["60e6c4eb6f169ee828eabd776ced7d900664e65a"],"2459db523605752a3affcf444fb717d625904488":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eec520bd69db5e7976780e93a0dfc7c0f0e75c2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"60e6c4eb6f169ee828eabd776ced7d900664e65a":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd"],"417142ff08fda9cf0b72d5133e63097a166c6458":["60e6c4eb6f169ee828eabd776ced7d900664e65a","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd","60e6c4eb6f169ee828eabd776ced7d900664e65a"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3c8d3bfb0f69b530cbb72614ac4dc3461a79fbbd":["60e6c4eb6f169ee828eabd776ced7d900664e65a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eec520bd69db5e7976780e93a0dfc7c0f0e75c2e","2459db523605752a3affcf444fb717d625904488"],"eec520bd69db5e7976780e93a0dfc7c0f0e75c2e":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","2459db523605752a3affcf444fb717d625904488"],"2459db523605752a3affcf444fb717d625904488":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"60e6c4eb6f169ee828eabd776ced7d900664e65a":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}