{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest]#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest]#incrementToken().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n\n    if (currentRealToken == null) {\n      boolean next = realStream.incrementToken();\n      if (!next) {\n        return false;\n      }\n      //Token nextRealToken = new Token(, offsetAtt.startOffset(), offsetAtt.endOffset());\n      clearAttributes();\n      termAtt.copyBuffer(realTermAtt.buffer(), 0, realTermAtt.length());\n      offsetAtt.setOffset(realOffsetAtt.startOffset(), realOffsetAtt.endOffset());\n      posIncrAtt.setPositionIncrement(realPosIncrAtt.getPositionIncrement());\n\n      String expansions =  synonyms.get(realTermAtt.toString());\n      if (expansions == null) {\n        return true;\n      }\n      st = new StringTokenizer(expansions, \",\");\n      if (st.hasMoreTokens()) {\n        currentRealToken = new Token(realOffsetAtt.startOffset(), realOffsetAtt.endOffset());\n        currentRealToken.copyBuffer(realTermAtt.buffer(), 0, realTermAtt.length());\n      }\n      \n      return true;\n    } else {\n      String tok = st.nextToken();\n      clearAttributes();\n      termAtt.setEmpty().append(tok);\n      offsetAtt.setOffset(currentRealToken.startOffset(), currentRealToken.endOffset());\n      posIncrAtt.setPositionIncrement(0);\n      if (!st.hasMoreTokens()) {\n        currentRealToken = null;\n        st = null;\n      }\n      return true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n\n    if (currentRealToken == null) {\n      boolean next = realStream.incrementToken();\n      if (!next) {\n        return false;\n      }\n      //Token nextRealToken = new Token(, offsetAtt.startOffset(), offsetAtt.endOffset());\n      clearAttributes();\n      termAtt.copyBuffer(realTermAtt.buffer(), 0, realTermAtt.length());\n      offsetAtt.setOffset(realOffsetAtt.startOffset(), realOffsetAtt.endOffset());\n      posIncrAtt.setPositionIncrement(realPosIncrAtt.getPositionIncrement());\n\n      String expansions =  synonyms.get(realTermAtt.toString());\n      if (expansions == null) {\n        return true;\n      }\n      st = new StringTokenizer(expansions, \",\");\n      if (st.hasMoreTokens()) {\n        currentRealToken = new Token(realOffsetAtt.startOffset(), realOffsetAtt.endOffset());\n        currentRealToken.copyBuffer(realTermAtt.buffer(), 0, realTermAtt.length());\n      }\n      \n      return true;\n    } else {\n      String tok = st.nextToken();\n      clearAttributes();\n      termAtt.setEmpty().append(tok);\n      offsetAtt.setOffset(currentRealToken.startOffset(), currentRealToken.endOffset());\n      posIncrAtt.setPositionIncrement(0);\n      if (!st.hasMoreTokens()) {\n        currentRealToken = null;\n        st = null;\n      }\n      return true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest]#incrementToken().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/SynonymTokenizer[HighlighterTest]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n\n    if (currentRealToken == null) {\n      boolean next = realStream.incrementToken();\n      if (!next) {\n        return false;\n      }\n      //Token nextRealToken = new Token(, offsetAtt.startOffset(), offsetAtt.endOffset());\n      clearAttributes();\n      termAtt.copyBuffer(realTermAtt.buffer(), 0, realTermAtt.length());\n      offsetAtt.setOffset(realOffsetAtt.startOffset(), realOffsetAtt.endOffset());\n      posIncrAtt.setPositionIncrement(realPosIncrAtt.getPositionIncrement());\n\n      String expansions =  synonyms.get(realTermAtt.toString());\n      if (expansions == null) {\n        return true;\n      }\n      st = new StringTokenizer(expansions, \",\");\n      if (st.hasMoreTokens()) {\n        currentRealToken = new Token();\n        currentRealToken.setOffset(realOffsetAtt.startOffset(), realOffsetAtt.endOffset());\n        currentRealToken.copyBuffer(realTermAtt.buffer(), 0, realTermAtt.length());\n      }\n      \n      return true;\n    } else {\n      String tok = st.nextToken();\n      clearAttributes();\n      termAtt.setEmpty().append(tok);\n      offsetAtt.setOffset(currentRealToken.startOffset(), currentRealToken.endOffset());\n      posIncrAtt.setPositionIncrement(0);\n      if (!st.hasMoreTokens()) {\n        currentRealToken = null;\n        st = null;\n      }\n      return true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n\n    if (currentRealToken == null) {\n      boolean next = realStream.incrementToken();\n      if (!next) {\n        return false;\n      }\n      //Token nextRealToken = new Token(, offsetAtt.startOffset(), offsetAtt.endOffset());\n      clearAttributes();\n      termAtt.copyBuffer(realTermAtt.buffer(), 0, realTermAtt.length());\n      offsetAtt.setOffset(realOffsetAtt.startOffset(), realOffsetAtt.endOffset());\n      posIncrAtt.setPositionIncrement(realPosIncrAtt.getPositionIncrement());\n\n      String expansions =  synonyms.get(realTermAtt.toString());\n      if (expansions == null) {\n        return true;\n      }\n      st = new StringTokenizer(expansions, \",\");\n      if (st.hasMoreTokens()) {\n        currentRealToken = new Token(realOffsetAtt.startOffset(), realOffsetAtt.endOffset());\n        currentRealToken.copyBuffer(realTermAtt.buffer(), 0, realTermAtt.length());\n      }\n      \n      return true;\n    } else {\n      String tok = st.nextToken();\n      clearAttributes();\n      termAtt.setEmpty().append(tok);\n      offsetAtt.setOffset(currentRealToken.startOffset(), currentRealToken.endOffset());\n      posIncrAtt.setPositionIncrement(0);\n      if (!st.hasMoreTokens()) {\n        currentRealToken = null;\n        st = null;\n      }\n      return true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}