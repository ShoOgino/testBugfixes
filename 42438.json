{"path":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(ReaderContext,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      assert assertTopReaderContext(context);\n      final IndexReader reader = context.reader;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(),\n                                          term.field(),\n                                          term.bytes());\n\n      if (docs == null) {\n        return null;\n      }\n\n      return new TermScorer(this, docs, similarity, reader.norms(term.field()));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(ReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final IndexReader reader = context.reader;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(),\n                                          term.field(),\n                                          term.bytes());\n\n      if (docs == null) {\n        return null;\n      }\n\n      return new TermScorer(this, docs, similarity, reader.norms(term.field()));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert assertTopReaderContext(termStates, context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      assert assertTopReaderContext(context);\n      final IndexReader reader = context.reader;\n      DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(),\n                                          term.field(),\n                                          term.bytes());\n\n      if (docs == null) {\n        return null;\n      }\n\n      return new TermScorer(this, docs, similarity, reader.norms(term.field()));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert assertTopReaderContext(termStates, context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      final String field = term.field();\n      final IndexReader reader = context.reader;\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight is not the same as the current reader's top-reader\";\n      final TermState state = termStates\n          .get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(reader, field, term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final DocsEnum docs = reader.termDocsEnum(reader.getDeletedDocs(), field, term.bytes(), state);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity, context.reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c220849f876de24a79f756f65b3eb045db59f63f":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"]},"commit2Childs":{"c220849f876de24a79f756f65b3eb045db59f63f":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["c220849f876de24a79f756f65b3eb045db59f63f"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}