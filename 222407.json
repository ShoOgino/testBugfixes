{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","commits":[{"id":"5e71cbdfcf34d779dd7e7ba148dfff6022f2005a","date":1351228731,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"/dev/null","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(6);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(\"multiunload\" + freezeI);\n          createCmd.setCollection(\"multiunload\");\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + \"unloadcollection\" + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["82f063229e39b59c960866c1bc49285b95676491"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"/dev/null","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(6);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(\"multiunload\" + freezeI);\n          createCmd.setCollection(\"multiunload\");\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + \"unloadcollection\" + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82f063229e39b59c960866c1bc49285b95676491","date":1352733047,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(6);\n    \n    // create the 6 cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(6);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(\"multiunload\" + freezeI);\n          createCmd.setCollection(\"multiunload\");\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + \"unloadcollection\" + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","bugFix":["5e71cbdfcf34d779dd7e7ba148dfff6022f2005a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(6);\n    \n    // create the 6 cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(6);\n    for (int i = 0; i < cnt; i++) {\n      final int freezeI = i;\n      executor.execute(new Runnable() {\n        \n        @Override\n        public void run() {\n          Create createCmd = new Create();\n          createCmd.setCoreName(\"multiunload\" + freezeI);\n          createCmd.setCollection(\"multiunload\");\n          String core3dataDir = dataDir.getAbsolutePath() + File.separator\n              + System.currentTimeMillis() + \"unloadcollection\" + \"_3n\" + freezeI;\n          createCmd.setDataDir(core3dataDir);\n          try {\n            server.request(createCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n        \n      });\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(6);\n    \n    // create the 6 cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(6);\n    \n    // create the 6 cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0eff89b16ebd0046c839c5d02ee44500be5c7886","date":1355766557,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = random().nextInt(12) + 1;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(6);\n    \n    // create the 6 cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = random().nextInt(12) + 1;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    \n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(6);\n    \n    // create the 6 cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81a4a1810b619aea1d002a09c1878b498e20bf33","date":1361142322,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = random().nextInt(12) + 1;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/UnloadDistributedZkTest#testUnloadLotsOfCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#testUnloadLotsOfCores().mjava","sourceNew":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = atLeast(3);\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  private void testUnloadLotsOfCores() throws Exception {\n    SolrServer client = clients.get(2);\n    String url3 = getBaseUrl(client);\n    final HttpSolrServer server = new HttpSolrServer(url3);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        5, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    int cnt = random().nextInt(12) + 1;\n    \n    // create the cores\n    createCores(server, executor, \"multiunload\", 2, cnt);\n    \n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n    executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 5,\n        TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),\n        new DefaultSolrThreadFactory(\"testExecutor\"));\n    for (int j = 0; j < cnt; j++) {\n      final int freezeJ = j;\n      executor.execute(new Runnable() {\n        @Override\n        public void run() {\n          Unload unloadCmd = new Unload(true);\n          unloadCmd.setCoreName(\"multiunload\" + freezeJ);\n          try {\n            server.request(unloadCmd);\n          } catch (SolrServerException e) {\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n      Thread.sleep(random().nextInt(50));\n    }\n    executor.shutdown();\n    executor.awaitTermination(120, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["0eff89b16ebd0046c839c5d02ee44500be5c7886"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["a69439d0df009e0bb0038d1e427159f449dd670d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["5e71cbdfcf34d779dd7e7ba148dfff6022f2005a","82f063229e39b59c960866c1bc49285b95676491"],"a69439d0df009e0bb0038d1e427159f449dd670d":["82f063229e39b59c960866c1bc49285b95676491"],"82f063229e39b59c960866c1bc49285b95676491":["5e71cbdfcf34d779dd7e7ba148dfff6022f2005a"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e71cbdfcf34d779dd7e7ba148dfff6022f2005a"],"5e71cbdfcf34d779dd7e7ba148dfff6022f2005a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["0eff89b16ebd0046c839c5d02ee44500be5c7886","81a4a1810b619aea1d002a09c1878b498e20bf33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81a4a1810b619aea1d002a09c1878b498e20bf33"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"81a4a1810b619aea1d002a09c1878b498e20bf33":["09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","81a4a1810b619aea1d002a09c1878b498e20bf33","09c8567c25c02eeeb3e719841606a1269f3538ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2126b84bd093fa3d921582a109a0ee578c28126","5e71cbdfcf34d779dd7e7ba148dfff6022f2005a"],"a69439d0df009e0bb0038d1e427159f449dd670d":["0eff89b16ebd0046c839c5d02ee44500be5c7886"],"82f063229e39b59c960866c1bc49285b95676491":["407687e67faf6e1f02a211ca078d8e3eed631027","a69439d0df009e0bb0038d1e427159f449dd670d"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"5e71cbdfcf34d779dd7e7ba148dfff6022f2005a":["407687e67faf6e1f02a211ca078d8e3eed631027","82f063229e39b59c960866c1bc49285b95676491","f2126b84bd093fa3d921582a109a0ee578c28126"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}