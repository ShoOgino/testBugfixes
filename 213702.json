{"path":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final short[] arr = (parser == null) ?\n            cache.getShorts(reader, field) :\n            cache.getShorts(reader, field, parser);\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final short[] arr = (parser == null) ?\n            cache.getShorts(reader, field) :\n            cache.getShorts(reader, field, parser);\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final short[] arr = (parser == null) ?\n            cache.getShorts(reader, field) :\n            cache.getShorts(reader, field, parser);\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final short[] arr = (parser == null) ?\n            cache.getShorts(reader, field) :\n            cache.getShorts(reader, field, parser);\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final short[] arr = (parser == null) ?\n            cache.getShorts(reader, field) :\n            cache.getShorts(reader, field, parser);\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b967739c936b1616f0a7ed24fe5f046dfa7559ca","date":1285734295,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final ShortValues vals = cache.getShorts(reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final short[] arr = (parser == null) ?\n            cache.getShorts(reader, field) :\n            cache.getShorts(reader, field, parser);\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","date":1286157263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final ShortValues vals = cache.getShorts(reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final ShortValues vals = cache.getShorts(reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final ShortValues vals = cache.getShorts(reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final short[] arr = (parser == null) ?\n            cache.getShorts(reader, field) :\n            cache.getShorts(reader, field, parser);\n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return (short) arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final ShortValues vals = cache.getShorts(readerContext.reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final ShortValues vals = cache.getShorts(reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final ShortValues vals = cache.getShorts(reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/ShortFieldSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final ShortValues vals = cache.getShorts(reader, field, creator);\n    final short[] arr = vals.values;\n    \n    return new DocValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["b967739c936b1616f0a7ed24fe5f046dfa7559ca"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b967739c936b1616f0a7ed24fe5f046dfa7559ca":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c220849f876de24a79f756f65b3eb045db59f63f"]},"commit2Childs":{"3f7e3e91f914e6265ed09a3208cc60c9ba2a477d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"b967739c936b1616f0a7ed24fe5f046dfa7559ca":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"1da8d55113b689b06716246649de6f62430f15c0":["b967739c936b1616f0a7ed24fe5f046dfa7559ca","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c220849f876de24a79f756f65b3eb045db59f63f":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}