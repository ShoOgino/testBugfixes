{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testSortedNumericAroundBlockSize().mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testSortedNumericAroundBlockSize().mjava","pathOld":"/dev/null","sourceNew":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene80DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      RAMFile buffer = new RAMFile();\n      RAMOutputStream out = new RAMOutputStream(buffer, false);\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        out.writeVLong(Math.min(s1, s2));\n        out.writeVLong(Math.max(s1, s2));\n      }\n      out.close();\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      try (RAMInputStream in = new RAMInputStream(\"\", buffer)) {\n        for (int i = 0; i < maxDoc; ++i) {\n          assertEquals(i, values.nextDoc());\n          assertEquals(2, values.docValueCount());\n          assertEquals(in.readVLong(), values.nextValue());\n          assertEquals(in.readVLong(), values.nextValue());\n        }\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testSortedNumericAroundBlockSize().mjava","pathOld":"/dev/null","sourceNew":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene80DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      RAMFile buffer = new RAMFile();\n      RAMOutputStream out = new RAMOutputStream(buffer, false);\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        out.writeVLong(Math.min(s1, s2));\n        out.writeVLong(Math.max(s1, s2));\n      }\n      out.close();\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      try (RAMInputStream in = new RAMInputStream(\"\", buffer)) {\n        for (int i = 0; i < maxDoc; ++i) {\n          assertEquals(i, values.nextDoc());\n          assertEquals(2, values.docValueCount());\n          assertEquals(in.readVLong(), values.nextValue());\n          assertEquals(in.readVLong(), values.nextValue());\n        }\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testSortedNumericAroundBlockSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testSortedNumericAroundBlockSize().mjava","sourceNew":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene80DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      ByteBuffersDataOutput buffer = new ByteBuffersDataOutput();\n\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        buffer.writeVLong(Math.min(s1, s2));\n        buffer.writeVLong(Math.max(s1, s2));\n      }\n\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      ByteBuffersDataInput dataInput = buffer.toDataInput();\n      for (int i = 0; i < maxDoc; ++i) {\n        assertEquals(i, values.nextDoc());\n        assertEquals(2, values.docValueCount());\n        assertEquals(dataInput.readVLong(), values.nextValue());\n        assertEquals(dataInput.readVLong(), values.nextValue());\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene80DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      RAMFile buffer = new RAMFile();\n      RAMOutputStream out = new RAMOutputStream(buffer, false);\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        out.writeVLong(Math.min(s1, s2));\n        out.writeVLong(Math.max(s1, s2));\n      }\n      out.close();\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      try (RAMInputStream in = new RAMInputStream(\"\", buffer)) {\n        for (int i = 0; i < maxDoc; ++i) {\n          assertEquals(i, values.nextDoc());\n          assertEquals(2, values.docValueCount());\n          assertEquals(in.readVLong(), values.nextValue());\n          assertEquals(in.readVLong(), values.nextValue());\n        }\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testSortedNumericAroundBlockSize().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestLucene80DocValuesFormat#testSortedNumericAroundBlockSize().mjava","sourceNew":"  @Nightly\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene80DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      ByteBuffersDataOutput buffer = new ByteBuffersDataOutput();\n\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        buffer.writeVLong(Math.min(s1, s2));\n        buffer.writeVLong(Math.max(s1, s2));\n      }\n\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      ByteBuffersDataInput dataInput = buffer.toDataInput();\n      for (int i = 0; i < maxDoc; ++i) {\n        assertEquals(i, values.nextDoc());\n        assertEquals(2, values.docValueCount());\n        assertEquals(dataInput.readVLong(), values.nextValue());\n        assertEquals(dataInput.readVLong(), values.nextValue());\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Slow\n  public void testSortedNumericAroundBlockSize() throws IOException {\n    final int frontier = 1 << Lucene80DocValuesFormat.DIRECT_MONOTONIC_BLOCK_SHIFT;\n    for (int maxDoc = frontier - 1; maxDoc <= frontier + 1; ++maxDoc) {\n      final Directory dir = newDirectory();\n      IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(newLogMergePolicy()));\n      ByteBuffersDataOutput buffer = new ByteBuffersDataOutput();\n\n      Document doc = new Document();\n      SortedNumericDocValuesField field1 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field1);\n      SortedNumericDocValuesField field2 = new SortedNumericDocValuesField(\"snum\", 0L);\n      doc.add(field2);\n      for (int i = 0; i < maxDoc; ++i) {\n        long s1 = random().nextInt(100);\n        long s2 = random().nextInt(100);\n        field1.setLongValue(s1);\n        field2.setLongValue(s2);\n        w.addDocument(doc);\n        buffer.writeVLong(Math.min(s1, s2));\n        buffer.writeVLong(Math.max(s1, s2));\n      }\n\n      w.forceMerge(1);\n      DirectoryReader r = DirectoryReader.open(w);\n      w.close();\n      LeafReader sr = getOnlyLeafReader(r);\n      assertEquals(maxDoc, sr.maxDoc());\n      SortedNumericDocValues values = sr.getSortedNumericDocValues(\"snum\");\n      assertNotNull(values);\n      ByteBuffersDataInput dataInput = buffer.toDataInput();\n      for (int i = 0; i < maxDoc; ++i) {\n        assertEquals(i, values.nextDoc());\n        assertEquals(2, values.docValueCount());\n        assertEquals(dataInput.readVLong(), values.nextValue());\n        assertEquals(dataInput.readVLong(), values.nextValue());\n      }\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57c6c784f777a2cc8fa014507ea129526822714d":["d77dafd89756a5161d244985903e3487ca109182"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","d77dafd89756a5161d244985903e3487ca109182"],"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"d77dafd89756a5161d244985903e3487ca109182":["57c6c784f777a2cc8fa014507ea129526822714d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}