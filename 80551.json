{"path":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","commits":[{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testSplitLongRange().mjava","sourceNew":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitLongRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(\n      0x7fffffffffffec78L,0x7fffffffffffec7fL,\n      0x8000000000002510L,0x800000000000251cL,\n      0x7fffffffffffec8L, 0x7fffffffffffecfL,\n      0x800000000000250L, 0x800000000000250L,\n      0x7fffffffffffedL,  0x7fffffffffffefL,\n      0x80000000000020L,  0x80000000000024L,\n      0x7ffffffffffffL,   0x8000000000001L\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(\n      0x7fffffffffffec78L,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(\n      0x800000000000040L, 0x800000000000043L,\n      0x80000000000000L,  0x80000000000003L\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(\n      0x00L,0xffL\n    ), Arrays.asList(\n      56\n    ));\n\n    // the same with precisionStep=4\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(\n      0x0L,0xfL\n    ), Arrays.asList(\n      60\n    ));\n\n    // the same with precisionStep=2\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(\n      0x0L,0x3L\n    ), Arrays.asList(\n      62\n    ));\n\n    // the same with precisionStep=1\n    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(\n      0x0L,0x1L\n    ), Arrays.asList(\n      63\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.<Long>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itself\n    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(\n      0x800000000000251cL,0x800000000000251cL\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a178ac3dec643551e66363c457a9074f55545f86"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a178ac3dec643551e66363c457a9074f55545f86"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}