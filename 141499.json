{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testBuilderRandom().mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testBuilderRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testBuilderRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n\n      // Just get all transitions, shuffle, and build a new automaton with the same transitions:\n      List<LightAutomaton.Transition> allTrans = new ArrayList<>();\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int count = a.getNumTransitions(s);\n        for(int i=0;i<count;i++) {\n          LightAutomaton.Transition t = new LightAutomaton.Transition();\n          a.getTransition(s, i, t);\n          allTrans.add(t);\n        }\n      }\n\n      LightAutomaton.Builder builder = new LightAutomaton.Builder();\n      for(int i=0;i<numStates;i++) {\n        int s = builder.createState();\n        builder.setAccept(s, a.isAccept(s));\n      }\n\n      Collections.shuffle(allTrans, random());\n      for(LightAutomaton.Transition t : allTrans) {\n        builder.addTransition(t.source, t.dest, t.min, t.max);\n      }\n\n      assertTrue(BasicOperations.sameLanguage(\n                    BasicOperations.determinize(a),\n                    BasicOperations.determinize(builder.finish())));\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testBuilderRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testBuilderRandom().mjava","sourceNew":"  public void testBuilderRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n\n      // Just get all transitions, shuffle, and build a new automaton with the same transitions:\n      List<Transition> allTrans = new ArrayList<>();\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int count = a.getNumTransitions(s);\n        for(int i=0;i<count;i++) {\n          Transition t = new Transition();\n          a.getTransition(s, i, t);\n          allTrans.add(t);\n        }\n      }\n\n      LightAutomaton.Builder builder = new LightAutomaton.Builder();\n      for(int i=0;i<numStates;i++) {\n        int s = builder.createState();\n        builder.setAccept(s, a.isAccept(s));\n      }\n\n      Collections.shuffle(allTrans, random());\n      for(Transition t : allTrans) {\n        builder.addTransition(t.source, t.dest, t.min, t.max);\n      }\n\n      assertTrue(BasicOperations.sameLanguage(\n                    BasicOperations.determinize(a),\n                    BasicOperations.determinize(builder.finish())));\n      \n    }\n  }\n\n","sourceOld":"  public void testBuilderRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n\n      // Just get all transitions, shuffle, and build a new automaton with the same transitions:\n      List<LightAutomaton.Transition> allTrans = new ArrayList<>();\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int count = a.getNumTransitions(s);\n        for(int i=0;i<count;i++) {\n          LightAutomaton.Transition t = new LightAutomaton.Transition();\n          a.getTransition(s, i, t);\n          allTrans.add(t);\n        }\n      }\n\n      LightAutomaton.Builder builder = new LightAutomaton.Builder();\n      for(int i=0;i<numStates;i++) {\n        int s = builder.createState();\n        builder.setAccept(s, a.isAccept(s));\n      }\n\n      Collections.shuffle(allTrans, random());\n      for(LightAutomaton.Transition t : allTrans) {\n        builder.addTransition(t.source, t.dest, t.min, t.max);\n      }\n\n      assertTrue(BasicOperations.sameLanguage(\n                    BasicOperations.determinize(a),\n                    BasicOperations.determinize(builder.finish())));\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testBuilderRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testBuilderRandom().mjava","sourceNew":"  public void testBuilderRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n\n      // Just get all transitions, shuffle, and build a new automaton with the same transitions:\n      List<Transition> allTrans = new ArrayList<>();\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int count = a.getNumTransitions(s);\n        for(int i=0;i<count;i++) {\n          Transition t = new Transition();\n          a.getTransition(s, i, t);\n          allTrans.add(t);\n        }\n      }\n\n      LightAutomaton.Builder builder = new LightAutomaton.Builder();\n      for(int i=0;i<numStates;i++) {\n        int s = builder.createState();\n        builder.setAccept(s, a.isAccept(s));\n      }\n\n      Collections.shuffle(allTrans, random());\n      for(Transition t : allTrans) {\n        builder.addTransition(t.source, t.dest, t.min, t.max);\n      }\n\n      assertTrue(BasicOperations.sameLanguage(\n                    BasicOperations.determinize(BasicOperations.removeDeadStates(a)),\n                    BasicOperations.determinize(BasicOperations.removeDeadStates(builder.finish()))));\n      \n    }\n  }\n\n","sourceOld":"  public void testBuilderRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n\n      // Just get all transitions, shuffle, and build a new automaton with the same transitions:\n      List<Transition> allTrans = new ArrayList<>();\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int count = a.getNumTransitions(s);\n        for(int i=0;i<count;i++) {\n          Transition t = new Transition();\n          a.getTransition(s, i, t);\n          allTrans.add(t);\n        }\n      }\n\n      LightAutomaton.Builder builder = new LightAutomaton.Builder();\n      for(int i=0;i<numStates;i++) {\n        int s = builder.createState();\n        builder.setAccept(s, a.isAccept(s));\n      }\n\n      Collections.shuffle(allTrans, random());\n      for(Transition t : allTrans) {\n        builder.addTransition(t.source, t.dest, t.min, t.max);\n      }\n\n      assertTrue(BasicOperations.sameLanguage(\n                    BasicOperations.determinize(a),\n                    BasicOperations.determinize(builder.finish())));\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestAutomaton#testBuilderRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLightAutomaton#testBuilderRandom().mjava","sourceNew":"  public void testBuilderRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random());\n\n      // Just get all transitions, shuffle, and build a new automaton with the same transitions:\n      List<Transition> allTrans = new ArrayList<>();\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int count = a.getNumTransitions(s);\n        for(int i=0;i<count;i++) {\n          Transition t = new Transition();\n          a.getTransition(s, i, t);\n          allTrans.add(t);\n        }\n      }\n\n      Automaton.Builder builder = new Automaton.Builder();\n      for(int i=0;i<numStates;i++) {\n        int s = builder.createState();\n        builder.setAccept(s, a.isAccept(s));\n      }\n\n      Collections.shuffle(allTrans, random());\n      for(Transition t : allTrans) {\n        builder.addTransition(t.source, t.dest, t.min, t.max);\n      }\n\n      assertTrue(Operations.sameLanguage(\n                    Operations.determinize(Operations.removeDeadStates(a)),\n                    Operations.determinize(Operations.removeDeadStates(builder.finish()))));\n      \n    }\n  }\n\n","sourceOld":"  public void testBuilderRandom() throws Exception {\n    int ITERS = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      LightAutomaton a = AutomatonTestUtil.randomAutomaton(random());\n\n      // Just get all transitions, shuffle, and build a new automaton with the same transitions:\n      List<Transition> allTrans = new ArrayList<>();\n      int numStates = a.getNumStates();\n      for(int s=0;s<numStates;s++) {\n        int count = a.getNumTransitions(s);\n        for(int i=0;i<count;i++) {\n          Transition t = new Transition();\n          a.getTransition(s, i, t);\n          allTrans.add(t);\n        }\n      }\n\n      LightAutomaton.Builder builder = new LightAutomaton.Builder();\n      for(int i=0;i<numStates;i++) {\n        int s = builder.createState();\n        builder.setAccept(s, a.isAccept(s));\n      }\n\n      Collections.shuffle(allTrans, random());\n      for(Transition t : allTrans) {\n        builder.addTransition(t.source, t.dest, t.min, t.max);\n      }\n\n      assertTrue(BasicOperations.sameLanguage(\n                    BasicOperations.determinize(BasicOperations.removeDeadStates(a)),\n                    BasicOperations.determinize(BasicOperations.removeDeadStates(builder.finish()))));\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}