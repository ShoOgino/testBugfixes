{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconistent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        LOG.info(\"arow : \"+arow);\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconistent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        LOG.info(\"arow : \"+arow);\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconistent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        LOG.info(\"arow : \"+arow);\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconistent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        LOG.info(\"arow : \"+arow);\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ec0d5e9105277591879116e94248c4c5b9fb85d","date":1310462009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconistent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"arow : \" + arow);\n        }\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconistent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        LOG.info(\"arow : \"+arow);\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","bugFix":["65f4e997b946a4eadce22b758749046a63ba2eff"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b84e23a1c994ea309896dd9424563e0092f3607","date":1332774278,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ThreadedEntityProcessorWrapper#nextRow().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if (rowcache != null) {\n      return getFromRowCache();\n    }\n    while (true) {\n      Map<String, Object> arow = null;\n      synchronized (delegate) {\n        if(entityRunner.entityEnded.get()) return null;\n        try {\n          arow = delegate.nextRow();\n        } catch (Exception e) {\n          if (ABORT.equals(onError)) {\n            wrapAndThrow(SEVERE, e);\n          } else {\n            //SKIP is not really possible. If this calls the nextRow() again the Entityprocessor would be in an inconistent state\n            LOG.error(\"Exception in entity : \" + entityName, e);\n            return null;\n          }\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"arow : \" + arow);\n        }\n        if(arow == null) entityRunner.entityEnded.set(true);\n      }\n      if (arow == null) {\n        return null;\n      } else {\n        arow = applyTransformer(arow);\n        if (arow != null) {\n          delegate.postTransform(arow);\n          return arow;\n        }\n      }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b84e23a1c994ea309896dd9424563e0092f3607":["7ec0d5e9105277591879116e94248c4c5b9fb85d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ec0d5e9105277591879116e94248c4c5b9fb85d":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b84e23a1c994ea309896dd9424563e0092f3607"]},"commit2Childs":{"4b84e23a1c994ea309896dd9424563e0092f3607":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7ec0d5e9105277591879116e94248c4c5b9fb85d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"7ec0d5e9105277591879116e94248c4c5b9fb85d":["4b84e23a1c994ea309896dd9424563e0092f3607"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}