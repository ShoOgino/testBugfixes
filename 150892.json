{"path":"solr/src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d085fb336a7208eea2214e5ffcc803960819b60b","date":1270981894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.length() == 0) return true;\n\n    String value = termAtt.toString();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setEmpty().append(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setEmpty().append(phonetic);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.termLength()==0) return true;\n\n    String value = termAtt.term();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setTermBuffer(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setTermBuffer(phonetic);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45e349695223fccf7b1b9d08ba85a1c919b06f7c","date":1277292317,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.length() == 0) return true;\n\n    String value = termAtt.toString();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setEmpty().append(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setEmpty().append(phonetic);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.length() == 0) return true;\n\n    String value = termAtt.toString();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setEmpty().append(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setEmpty().append(phonetic);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PhoneticFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.length() == 0) return true;\n\n    String value = termAtt.toString();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setEmpty().append(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setEmpty().append(phonetic);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.length() == 0) return true;\n\n    String value = termAtt.toString();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setEmpty().append(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setEmpty().append(phonetic);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["d085fb336a7208eea2214e5ffcc803960819b60b"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["d085fb336a7208eea2214e5ffcc803960819b60b","45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d085fb336a7208eea2214e5ffcc803960819b60b":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45e349695223fccf7b1b9d08ba85a1c919b06f7c"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["d085fb336a7208eea2214e5ffcc803960819b60b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d085fb336a7208eea2214e5ffcc803960819b60b":["45e349695223fccf7b1b9d08ba85a1c919b06f7c","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}