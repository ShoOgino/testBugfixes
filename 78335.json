{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","commits":[{"id":"cb767289784b682dea51f9e6d7222add811edb77","date":1362902138,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    assumeTrue(\"default codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    SortedSetDocValues dv = reader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    BytesRef bytes = new BytesRef();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      dv.lookupOrd(dv.nextOrd(), bytes);\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      dv.lookupOrd(dv.nextOrd(), bytes);\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","sourceNew":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    assumeTrue(\"default codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    SortedSetDocValues dv = reader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      BytesRef bytes = dv.lookupOrd(dv.nextOrd());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      bytes = dv.lookupOrd(dv.nextOrd());\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    assumeTrue(\"default codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    SortedSetDocValues dv = reader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    BytesRef bytes = new BytesRef();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      dv.lookupOrd(dv.nextOrd(), bytes);\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      dv.lookupOrd(dv.nextOrd(), bytes);\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","sourceNew":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      BytesRef bytes = dv.lookupOrd(dv.nextOrd());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      bytes = dv.lookupOrd(dv.nextOrd());\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    assumeTrue(\"default codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    SortedSetDocValues dv = reader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      BytesRef bytes = dv.lookupOrd(dv.nextOrd());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      bytes = dv.lookupOrd(dv.nextOrd());\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","sourceNew":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      BytesRef bytes = dv.lookupOrd(dv.nextOrd());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      bytes = dv.lookupOrd(dv.nextOrd());\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    assumeTrue(\"default codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    SortedSetDocValues dv = reader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      BytesRef bytes = dv.lookupOrd(dv.nextOrd());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      bytes = dv.lookupOrd(dv.nextOrd());\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","bugFix":["cb767289784b682dea51f9e6d7222add811edb77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c17ec76fa103f80e80ed20ee425dbc357fb1356f","date":1414420673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","sourceNew":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    SortedSetDocValues dv = sortedReader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = sortedReader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      BytesRef bytes = dv.lookupOrd(dv.nextOrd());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      bytes = dv.lookupOrd(dv.nextOrd());\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = reader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      BytesRef bytes = dv.lookupOrd(dv.nextOrd());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      bytes = dv.lookupOrd(dv.nextOrd());\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testSortedSetDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testSortedSetDocValuesField().mjava","sourceNew":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    SortedSetDocValues dv = sortedReader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = sortedReader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      BytesRef bytes = dv.lookupOrd(dv.nextOrd());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      bytes = dv.lookupOrd(dv.nextOrd());\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSortedSetDocValuesField() throws Exception {\n    SortedSetDocValues dv = sortedReader.getSortedSetDocValues(SORTED_SET_DV_FIELD);\n    int maxDoc = sortedReader.maxDoc();\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      BytesRef bytes = dv.lookupOrd(dv.nextOrd());\n      int value = sortedValues[i].intValue();\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value).toString(), bytes.utf8ToString());\n      bytes = dv.lookupOrd(dv.nextOrd());\n      assertEquals(\"incorrect sorted-set DocValues for doc \" + i, Integer.valueOf(value + 1).toString(), bytes.utf8ToString());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, dv.nextOrd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["cb767289784b682dea51f9e6d7222add811edb77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"cb767289784b682dea51f9e6d7222add811edb77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad2a673349939e48652bf304cccf673c3412198f":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","ad2a673349939e48652bf304cccf673c3412198f"]},"commit2Childs":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ad2a673349939e48652bf304cccf673c3412198f","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb767289784b682dea51f9e6d7222add811edb77"],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cb767289784b682dea51f9e6d7222add811edb77":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}