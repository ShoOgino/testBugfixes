{"path":"lucene/src/java/org/apache/lucene/index/ParallelReader#norms(String,byte[],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#norms(String,byte[],int).mjava","sourceNew":"  @Override\n  public void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    if (reader!=null)\n      reader.norms(field, result, offset);\n  }\n\n","sourceOld":"  @Override\n  public void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    if (reader!=null)\n      reader.norms(field, result, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#norms(String,byte[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#norms(String,byte[],int).mjava","sourceNew":"  @Override\n  public synchronized void norms(String field, byte[] result, int offset)\n    throws IOException {\n    // TODO: maybe optimize\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    if (reader==null)\n      return;\n    \n    byte[] norms = norms(field);\n    if (norms == null) {\n      Arrays.fill(result, offset, result.length, Similarity.getDefault().encodeNormValue(1.0f));\n    } else {\n      System.arraycopy(norms, 0, result, offset, maxDoc());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    if (reader!=null)\n      reader.norms(field, result, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#norms(String,byte[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#norms(String,byte[],int).mjava","sourceNew":"  @Override\n  public synchronized void norms(String field, byte[] result, int offset)\n    throws IOException {\n    // TODO: maybe optimize\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    if (reader==null)\n      return;\n    \n    byte[] norms = norms(field);\n    if (norms == null) {\n      Arrays.fill(result, offset, result.length, Similarity.getDefault().encodeNormValue(1.0f));\n    } else {\n      System.arraycopy(norms, 0, result, offset, maxDoc());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    if (reader!=null)\n      reader.norms(field, result, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#norms(String,byte[],int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized void norms(String field, byte[] result, int offset)\n    throws IOException {\n    // TODO: maybe optimize\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    if (reader==null)\n      return;\n    \n    byte[] norms = norms(field);\n    if (norms == null) {\n      Arrays.fill(result, offset, result.length, Similarity.getDefault().encodeNormValue(1.0f));\n    } else {\n      System.arraycopy(norms, 0, result, offset, maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#norms(String,byte[],int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void norms(String field, byte[] result, int offset)\n    throws IOException {\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    if (reader!=null)\n      reader.norms(field, result, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#norms(String,byte[],int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized void norms(String field, byte[] result, int offset)\n    throws IOException {\n    // TODO: maybe optimize\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    if (reader==null)\n      return;\n    \n    byte[] norms = norms(field);\n    if (norms == null) {\n      Arrays.fill(result, offset, result.length, Similarity.getDefault().encodeNormValue(1.0f));\n    } else {\n      System.arraycopy(norms, 0, result, offset, maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["b0d06946f61921459f43309f86ed621ebe67eebe"],"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","b0d06946f61921459f43309f86ed621ebe67eebe"],"b0d06946f61921459f43309f86ed621ebe67eebe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b0d06946f61921459f43309f86ed621ebe67eebe":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","70ad682703b8585f5d0a637efec044d57ec05efb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","b0d06946f61921459f43309f86ed621ebe67eebe","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}