{"path":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping2().mjava","commits":[{"id":"a62060bf935e54f2cf73861fbc773508ab49aeb9","date":1333411307,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping2().mjava","pathOld":"/dev/null","sourceNew":"  public void testBackslashEscaping2() throws IOException {\n\n    // To avoid confusion over the need for escaping chars in java code,\n    // We will test with a forward slash as the escape char, and a single\n    // quote as the encapsulator.\n\n    String code = \"\"\n      + \" , , \\n\"           // 1)\n      + \" \\t ,  , \\n\"       // 2)\n      + \" // , /, , /,\\n\"   // 3)\n      + \"\";\n    String[][] res = {\n        { \" \", \" \", \" \" },         // 1\n        { \" \\t \", \"  \", \" \" },         // 2\n        { \" / \", \" , \", \" ,\" },         //3\n      };\n\n\n    CSVStrategy strategy = new CSVStrategy(',',CSVStrategy.ENCAPSULATOR_DISABLED,CSVStrategy.COMMENTS_DISABLED,'/',false,false,true,true);\n\n    CSVParser parser = new CSVParser(new StringReader(code), strategy);\n    String[][] tmp = parser.getAllValues();\n    assertTrue(tmp.length > 0);\n\n    if (!CSVPrinterTest.equals(res, tmp)) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df476dd588f9e2c99c43fd9d3d896fd30221938f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df476dd588f9e2c99c43fd9d3d896fd30221938f","date":1457020485,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping2().mjava","pathOld":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping2().mjava","sourceNew":"  public void testBackslashEscaping2() throws IOException {\n\n    // To avoid confusion over the need for escaping chars in java code,\n    // We will test with a forward slash as the escape char, and a single\n    // quote as the encapsulator.\n\n    String code = \"\"\n      + \" , , \\n\"           // 1)\n      + \" \\t ,  , \\n\"       // 2)\n      + \" // , /, , /,\\n\"   // 3)\n      + \"\";\n    String[][] res = {\n        { \" \", \" \", \" \" },         // 1\n        { \" \\t \", \"  \", \" \" },         // 2\n        { \" / \", \" , \", \" ,\" },         //3\n      };\n\n\n    CSVStrategy strategy = new CSVStrategy\n        (',', CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '/', false, false, true, true, \"\\n\");\n\n    CSVParser parser = new CSVParser(new StringReader(code), strategy);\n    String[][] tmp = parser.getAllValues();\n    assertTrue(tmp.length > 0);\n\n    if (!CSVPrinterTest.equals(res, tmp)) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void testBackslashEscaping2() throws IOException {\n\n    // To avoid confusion over the need for escaping chars in java code,\n    // We will test with a forward slash as the escape char, and a single\n    // quote as the encapsulator.\n\n    String code = \"\"\n      + \" , , \\n\"           // 1)\n      + \" \\t ,  , \\n\"       // 2)\n      + \" // , /, , /,\\n\"   // 3)\n      + \"\";\n    String[][] res = {\n        { \" \", \" \", \" \" },         // 1\n        { \" \\t \", \"  \", \" \" },         // 2\n        { \" / \", \" , \", \" ,\" },         //3\n      };\n\n\n    CSVStrategy strategy = new CSVStrategy(',',CSVStrategy.ENCAPSULATOR_DISABLED,CSVStrategy.COMMENTS_DISABLED,'/',false,false,true,true);\n\n    CSVParser parser = new CSVParser(new StringReader(code), strategy);\n    String[][] tmp = parser.getAllValues();\n    assertTrue(tmp.length > 0);\n\n    if (!CSVPrinterTest.equals(res, tmp)) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":["a62060bf935e54f2cf73861fbc773508ab49aeb9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping2().mjava","pathOld":"solr/core/src/test/org/apache/solr/internal/csv/CSVParserTest#testBackslashEscaping2().mjava","sourceNew":"  public void testBackslashEscaping2() throws IOException {\n\n    // To avoid confusion over the need for escaping chars in java code,\n    // We will test with a forward slash as the escape char, and a single\n    // quote as the encapsulator.\n\n    String code = \"\"\n      + \" , , \\n\"           // 1)\n      + \" \\t ,  , \\n\"       // 2)\n      + \" // , /, , /,\\n\"   // 3)\n      + \"\";\n    String[][] res = {\n        { \" \", \" \", \" \" },         // 1\n        { \" \\t \", \"  \", \" \" },         // 2\n        { \" / \", \" , \", \" ,\" },         //3\n      };\n\n\n    CSVStrategy strategy = new CSVStrategy\n        (',', CSVStrategy.ENCAPSULATOR_DISABLED, CSVStrategy.COMMENTS_DISABLED, '/', false, false, true, true, \"\\n\");\n\n    CSVParser parser = new CSVParser(new StringReader(code), strategy);\n    String[][] tmp = parser.getAllValues();\n    assertTrue(tmp.length > 0);\n\n    if (!CSVPrinterTest.equals(res, tmp)) {\n      assertTrue(false);\n    }\n\n  }\n\n","sourceOld":"  public void testBackslashEscaping2() throws IOException {\n\n    // To avoid confusion over the need for escaping chars in java code,\n    // We will test with a forward slash as the escape char, and a single\n    // quote as the encapsulator.\n\n    String code = \"\"\n      + \" , , \\n\"           // 1)\n      + \" \\t ,  , \\n\"       // 2)\n      + \" // , /, , /,\\n\"   // 3)\n      + \"\";\n    String[][] res = {\n        { \" \", \" \", \" \" },         // 1\n        { \" \\t \", \"  \", \" \" },         // 2\n        { \" / \", \" , \", \" ,\" },         //3\n      };\n\n\n    CSVStrategy strategy = new CSVStrategy(',',CSVStrategy.ENCAPSULATOR_DISABLED,CSVStrategy.COMMENTS_DISABLED,'/',false,false,true,true);\n\n    CSVParser parser = new CSVParser(new StringReader(code), strategy);\n    String[][] tmp = parser.getAllValues();\n    assertTrue(tmp.length > 0);\n\n    if (!CSVPrinterTest.equals(res, tmp)) {\n      assertTrue(false);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a62060bf935e54f2cf73861fbc773508ab49aeb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df476dd588f9e2c99c43fd9d3d896fd30221938f":["a62060bf935e54f2cf73861fbc773508ab49aeb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a62060bf935e54f2cf73861fbc773508ab49aeb9","df476dd588f9e2c99c43fd9d3d896fd30221938f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"a62060bf935e54f2cf73861fbc773508ab49aeb9":["df476dd588f9e2c99c43fd9d3d896fd30221938f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"df476dd588f9e2c99c43fd9d3d896fd30221938f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a62060bf935e54f2cf73861fbc773508ab49aeb9"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}