{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"/dev/null","sourceNew":"  public void testLexicon() {\n    for (int i = 0; i < 3; i++) {\n      assertLexicon();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() {\n    random = newRandom();\n    for (int i = 0; i < 3*_TestUtil.getRandomMultiplier(); i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() {\n    for (int i = 0; i < 3; i++) {\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd","date":1279789681,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    random = newRandom();\n    for (int i = 0; i < 3*_TestUtil.getRandomMultiplier(); i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() {\n    random = newRandom();\n    for (int i = 0; i < 3*_TestUtil.getRandomMultiplier(); i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    random = newRandom();\n    for (int i = 0; i < 3*_TestUtil.getRandomMultiplier(); i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() {\n    random = newRandom();\n    for (int i = 0; i < 3*_TestUtil.getRandomMultiplier(); i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    random = newRandom();\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    random = newRandom();\n    for (int i = 0; i < 3*_TestUtil.getRandomMultiplier(); i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    random = newRandom();\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    random = newRandom();\n    for (int i = 0; i < 3*_TestUtil.getRandomMultiplier(); i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    random = newRandom();\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    random = newRandom();\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    int num = 3 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminizeLexicon#testLexicon().mjava","sourceNew":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","sourceOld":"  public void testLexicon() throws Exception {\n    int num = atLeast(1);\n    for (int i = 0; i < num; i++) {\n      automata.clear();\n      terms.clear();\n      for (int j = 0; j < 5000; j++) {\n        String randomString = _TestUtil.randomUnicodeString(random);\n        terms.add(randomString);\n        automata.add(BasicAutomata.makeString(randomString));\n      }\n      assertLexicon();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["1f653cfcf159baeaafe5d01682a911e95bba4012","0762b640e0d0d12b6edb96db68986e13145c3484"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"0762b640e0d0d12b6edb96db68986e13145c3484":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0762b640e0d0d12b6edb96db68986e13145c3484"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd":["2aafd88401639311b0404e67c94e829e123a0e45"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["1f653cfcf159baeaafe5d01682a911e95bba4012","0762b640e0d0d12b6edb96db68986e13145c3484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"2aafd88401639311b0404e67c94e829e123a0e45":["5f4e87790277826a2aea119328600dfb07761f32","d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0762b640e0d0d12b6edb96db68986e13145c3484","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}