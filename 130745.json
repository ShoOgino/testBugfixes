{"path":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#build().mjava","commits":[{"id":"a2f37c70d502802371a3ac864572b2ffc7730ffc","date":1377155841,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    /** Build the {@link PForDeltaDocIdSet} instance. */\n    public PForDeltaDocIdSet build() {\n      assert bufferSize < BLOCK_SIZE;\n\n      if (cardinality == 0) {\n        assert previousDoc == -1;\n        return EMPTY;\n      }\n\n      encodeBlock();\n      final byte[] dataArr = Arrays.copyOf(data.bytes, data.length + MAX_BYTE_BLOCK_COUNT);\n\n      final int indexSize = (numBlocks - 1) / indexInterval + 1;\n      final MonotonicAppendingLongBuffer docIDs, offsets;\n      if (indexSize <= 1) {\n        docIDs = offsets = SINGLE_ZERO_BUFFER;\n      } else {\n        final int pageSize = 128;\n        final int initialPageCount = (indexSize + pageSize - 1) / pageSize;\n        docIDs = new MonotonicAppendingLongBuffer(initialPageCount, pageSize, PackedInts.COMPACT);\n        offsets = new MonotonicAppendingLongBuffer(initialPageCount, pageSize, PackedInts.COMPACT);\n        // Now build the index\n        final Iterator it = new Iterator(dataArr, cardinality, Integer.MAX_VALUE, SINGLE_ZERO_BUFFER, SINGLE_ZERO_BUFFER);\n        index:\n        for (int k = 0; k < indexSize; ++k) {\n          docIDs.add(it.docID() + 1);\n          offsets.add(it.offset);\n          for (int i = 0; i < indexInterval; ++i) {\n            it.skipBlock();\n            if (it.docID() == DocIdSetIterator.NO_MORE_DOCS) {\n              break index;\n            }\n          }\n        }\n        docIDs.freeze();\n        offsets.freeze();\n      }\n\n      return new PForDeltaDocIdSet(dataArr, cardinality, indexInterval, docIDs, offsets);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    /** Build the {@link PForDeltaDocIdSet} instance. */\n    public PForDeltaDocIdSet build() {\n      assert bufferSize < BLOCK_SIZE;\n\n      if (cardinality == 0) {\n        assert previousDoc == -1;\n        return EMPTY;\n      }\n\n      encodeBlock();\n      final byte[] dataArr = Arrays.copyOf(data.bytes, data.length + MAX_BYTE_BLOCK_COUNT);\n\n      final int indexSize = (numBlocks - 1) / indexInterval + 1;\n      final MonotonicAppendingLongBuffer docIDs, offsets;\n      if (indexSize <= 1) {\n        docIDs = offsets = SINGLE_ZERO_BUFFER;\n      } else {\n        final int pageSize = 128;\n        final int initialPageCount = (indexSize + pageSize - 1) / pageSize;\n        docIDs = new MonotonicAppendingLongBuffer(initialPageCount, pageSize, PackedInts.COMPACT);\n        offsets = new MonotonicAppendingLongBuffer(initialPageCount, pageSize, PackedInts.COMPACT);\n        // Now build the index\n        final Iterator it = new Iterator(dataArr, cardinality, Integer.MAX_VALUE, SINGLE_ZERO_BUFFER, SINGLE_ZERO_BUFFER);\n        index:\n        for (int k = 0; k < indexSize; ++k) {\n          docIDs.add(it.docID() + 1);\n          offsets.add(it.offset);\n          for (int i = 0; i < indexInterval; ++i) {\n            it.skipBlock();\n            if (it.docID() == DocIdSetIterator.NO_MORE_DOCS) {\n              break index;\n            }\n          }\n        }\n        docIDs.freeze();\n        offsets.freeze();\n      }\n\n      return new PForDeltaDocIdSet(dataArr, cardinality, indexInterval, docIDs, offsets);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#build().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#build().mjava","sourceNew":"    /** Build the {@link PForDeltaDocIdSet} instance. */\n    public PForDeltaDocIdSet build() {\n      assert bufferSize < BLOCK_SIZE;\n\n      if (cardinality == 0) {\n        assert previousDoc == -1;\n        return EMPTY;\n      }\n\n      encodeBlock();\n      final byte[] dataArr = Arrays.copyOf(data.bytes, data.length + MAX_BYTE_BLOCK_COUNT);\n\n      final int indexSize = (numBlocks - 1) / indexInterval + 1;\n      final PackedLongValues docIDs, offsets;\n      if (indexSize <= 1) {\n        docIDs = offsets = SINGLE_ZERO;\n      } else {\n        final int pageSize = 128;\n        final PackedLongValues.Builder docIDsBuilder = PackedLongValues.monotonicBuilder(pageSize, PackedInts.COMPACT);\n        final PackedLongValues.Builder offsetsBuilder = PackedLongValues.monotonicBuilder(pageSize, PackedInts.COMPACT);\n        // Now build the index\n        final Iterator it = new Iterator(dataArr, cardinality, Integer.MAX_VALUE, SINGLE_ZERO, SINGLE_ZERO);\n        index:\n        for (int k = 0; k < indexSize; ++k) {\n          docIDsBuilder.add(it.docID() + 1);\n          offsetsBuilder.add(it.offset);\n          for (int i = 0; i < indexInterval; ++i) {\n            it.skipBlock();\n            if (it.docID() == DocIdSetIterator.NO_MORE_DOCS) {\n              break index;\n            }\n          }\n        }\n        docIDs = docIDsBuilder.build();\n        offsets = offsetsBuilder.build();\n      }\n\n      return new PForDeltaDocIdSet(dataArr, cardinality, indexInterval, docIDs, offsets);\n    }\n\n","sourceOld":"    /** Build the {@link PForDeltaDocIdSet} instance. */\n    public PForDeltaDocIdSet build() {\n      assert bufferSize < BLOCK_SIZE;\n\n      if (cardinality == 0) {\n        assert previousDoc == -1;\n        return EMPTY;\n      }\n\n      encodeBlock();\n      final byte[] dataArr = Arrays.copyOf(data.bytes, data.length + MAX_BYTE_BLOCK_COUNT);\n\n      final int indexSize = (numBlocks - 1) / indexInterval + 1;\n      final MonotonicAppendingLongBuffer docIDs, offsets;\n      if (indexSize <= 1) {\n        docIDs = offsets = SINGLE_ZERO_BUFFER;\n      } else {\n        final int pageSize = 128;\n        final int initialPageCount = (indexSize + pageSize - 1) / pageSize;\n        docIDs = new MonotonicAppendingLongBuffer(initialPageCount, pageSize, PackedInts.COMPACT);\n        offsets = new MonotonicAppendingLongBuffer(initialPageCount, pageSize, PackedInts.COMPACT);\n        // Now build the index\n        final Iterator it = new Iterator(dataArr, cardinality, Integer.MAX_VALUE, SINGLE_ZERO_BUFFER, SINGLE_ZERO_BUFFER);\n        index:\n        for (int k = 0; k < indexSize; ++k) {\n          docIDs.add(it.docID() + 1);\n          offsets.add(it.offset);\n          for (int i = 0; i < indexInterval; ++i) {\n            it.skipBlock();\n            if (it.docID() == DocIdSetIterator.NO_MORE_DOCS) {\n              break index;\n            }\n          }\n        }\n        docIDs.freeze();\n        offsets.freeze();\n      }\n\n      return new PForDeltaDocIdSet(dataArr, cardinality, indexInterval, docIDs, offsets);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","date":1412674810,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#build().mjava","sourceNew":null,"sourceOld":"    /** Build the {@link PForDeltaDocIdSet} instance. */\n    public PForDeltaDocIdSet build() {\n      assert bufferSize < BLOCK_SIZE;\n\n      if (cardinality == 0) {\n        assert previousDoc == -1;\n        return EMPTY;\n      }\n\n      encodeBlock();\n      final byte[] dataArr = Arrays.copyOf(data.bytes, data.length + MAX_BYTE_BLOCK_COUNT);\n\n      final int indexSize = (numBlocks - 1) / indexInterval + 1;\n      final PackedLongValues docIDs, offsets;\n      if (indexSize <= 1) {\n        docIDs = offsets = SINGLE_ZERO;\n      } else {\n        final int pageSize = 128;\n        final PackedLongValues.Builder docIDsBuilder = PackedLongValues.monotonicBuilder(pageSize, PackedInts.COMPACT);\n        final PackedLongValues.Builder offsetsBuilder = PackedLongValues.monotonicBuilder(pageSize, PackedInts.COMPACT);\n        // Now build the index\n        final Iterator it = new Iterator(dataArr, cardinality, Integer.MAX_VALUE, SINGLE_ZERO, SINGLE_ZERO);\n        index:\n        for (int k = 0; k < indexSize; ++k) {\n          docIDsBuilder.add(it.docID() + 1);\n          offsetsBuilder.add(it.offset);\n          for (int i = 0; i < indexInterval; ++i) {\n            it.skipBlock();\n            if (it.docID() == DocIdSetIterator.NO_MORE_DOCS) {\n              break index;\n            }\n          }\n        }\n        docIDs = docIDsBuilder.build();\n        offsets = offsetsBuilder.build();\n      }\n\n      return new PForDeltaDocIdSet(dataArr, cardinality, indexInterval, docIDs, offsets);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/PForDeltaDocIdSet.Builder#build().mjava","sourceNew":null,"sourceOld":"    /** Build the {@link PForDeltaDocIdSet} instance. */\n    public PForDeltaDocIdSet build() {\n      assert bufferSize < BLOCK_SIZE;\n\n      if (cardinality == 0) {\n        assert previousDoc == -1;\n        return EMPTY;\n      }\n\n      encodeBlock();\n      final byte[] dataArr = Arrays.copyOf(data.bytes, data.length + MAX_BYTE_BLOCK_COUNT);\n\n      final int indexSize = (numBlocks - 1) / indexInterval + 1;\n      final PackedLongValues docIDs, offsets;\n      if (indexSize <= 1) {\n        docIDs = offsets = SINGLE_ZERO;\n      } else {\n        final int pageSize = 128;\n        final PackedLongValues.Builder docIDsBuilder = PackedLongValues.monotonicBuilder(pageSize, PackedInts.COMPACT);\n        final PackedLongValues.Builder offsetsBuilder = PackedLongValues.monotonicBuilder(pageSize, PackedInts.COMPACT);\n        // Now build the index\n        final Iterator it = new Iterator(dataArr, cardinality, Integer.MAX_VALUE, SINGLE_ZERO, SINGLE_ZERO);\n        index:\n        for (int k = 0; k < indexSize; ++k) {\n          docIDsBuilder.add(it.docID() + 1);\n          offsetsBuilder.add(it.offset);\n          for (int i = 0; i < indexInterval; ++i) {\n            it.skipBlock();\n            if (it.docID() == DocIdSetIterator.NO_MORE_DOCS) {\n              break index;\n            }\n          }\n        }\n        docIDs = docIDsBuilder.build();\n        offsets = offsetsBuilder.build();\n      }\n\n      return new PForDeltaDocIdSet(dataArr, cardinality, indexInterval, docIDs, offsets);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a2f37c70d502802371a3ac864572b2ffc7730ffc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a2f37c70d502802371a3ac864572b2ffc7730ffc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["a2f37c70d502802371a3ac864572b2ffc7730ffc"]},"commit2Childs":{"a2f37c70d502802371a3ac864572b2ffc7730ffc":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"55980207f1977bd1463465de1659b821347e2fa8":[],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a2f37c70d502802371a3ac864572b2ffc7730ffc","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["55980207f1977bd1463465de1659b821347e2fa8","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}