{"path":"solr/core/src/java/org/apache/solr/servlet/StartupLoggingUtils#changeLogLevel(String).mjava","commits":[{"id":"dc5d28253d71a72c17ec531a8e076eca3c74fe9c","date":1474571128,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/StartupLoggingUtils#changeLogLevel(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Dynamically change log4j log level through property solr.log.level\n   * @param logLevel String with level, should be one of the supported, e.g. TRACE, DEBUG, INFO, WARN, ERROR...\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      LogManager.getRootLogger().setLevel(Level.toLevel(logLevel, Level.INFO));\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/StartupLoggingUtils#changeLogLevel(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Dynamically change log4j log level through property solr.log.level\n   * @param logLevel String with level, should be one of the supported, e.g. TRACE, DEBUG, INFO, WARN, ERROR...\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      LogManager.getRootLogger().setLevel(Level.toLevel(logLevel, Level.INFO));\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/StartupLoggingUtils#changeLogLevel(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Dynamically change log4j log level through property solr.log.level\n   * @param logLevel String with level, should be one of the supported, e.g. TRACE, DEBUG, INFO, WARN, ERROR...\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      LogManager.getRootLogger().setLevel(Level.toLevel(logLevel, Level.INFO));\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","date":1503399053,"type":5,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#changeLogLevel(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/StartupLoggingUtils#changeLogLevel(String).mjava","sourceNew":"  /**\n   * Dynamically change log4j log level through property solr.log.level\n   * @param logLevel String with level, should be one of the supported, e.g. TRACE, DEBUG, INFO, WARN, ERROR...\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  public static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not change log level.\");\n        return false;\n      }\n      LogManager.getRootLogger().setLevel(Level.toLevel(logLevel, Level.INFO));\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Dynamically change log4j log level through property solr.log.level\n   * @param logLevel String with level, should be one of the supported, e.g. TRACE, DEBUG, INFO, WARN, ERROR...\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      LogManager.getRootLogger().setLevel(Level.toLevel(logLevel, Level.INFO));\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/StartupLoggingUtils#changeLogLevel(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/StartupLoggingUtils#changeLogLevel(String).mjava","sourceNew":"  /**\n   * Dynamically change log4j log level through property solr.log.level\n   * @param logLevel String with level, should be one of the supported, e.g. TRACE, DEBUG, INFO, WARN, ERROR...\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  public static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not change log level.\");\n        return false;\n      }\n      LogManager.getRootLogger().setLevel(Level.toLevel(logLevel, Level.INFO));\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Dynamically change log4j log level through property solr.log.level\n   * @param logLevel String with level, should be one of the supported, e.g. TRACE, DEBUG, INFO, WARN, ERROR...\n   * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath\n   */\n  @SuppressForbidden(reason = \"Legitimate log4j access\")\n  static boolean changeLogLevel(String logLevel) {\n    try {\n      if (!isLog4jActive()) {\n        logNotSupported(\"Could not mute logging to console.\");\n        return false;\n      }\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      LogManager.getRootLogger().setLevel(Level.toLevel(logLevel, Level.INFO));\n      return true;\n    } catch (Exception e) {\n      logNotSupported(\"Could not change log level.\");\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc5d28253d71a72c17ec531a8e076eca3c74fe9c"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"dc5d28253d71a72c17ec531a8e076eca3c74fe9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","dc5d28253d71a72c17ec531a8e076eca3c74fe9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc5d28253d71a72c17ec531a8e076eca3c74fe9c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}