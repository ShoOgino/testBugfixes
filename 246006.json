{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testConvexPolygonWithHole().mjava","commits":[{"id":"27c7ceb638c80da55603b74dda1d75ca0be762fb","date":1496231753,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testConvexPolygonWithHole().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConvexPolygonWithHole() {\n    ArrayList<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, -1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, -1));\n    ArrayList<GeoPoint> hole_points = new ArrayList<>();\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,hole_points);\n\n    GeoPolygon polygon = (GeoPolygon)((GeoCompositePolygon)GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points,Collections.singletonList(hole))).shapes.get(0);\n    GeoPolygon polygon2 = GeoPolygonFactory.makeGeoConvexPolygon(PlanetModel.SPHERE,points,Collections.singletonList(hole));\n    assertEquals(polygon,polygon2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44b289ba5434fa10782118c697fa706d6cf231df","date":1496249545,"type":0,"author":"Chris Hostetter","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testConvexPolygonWithHole().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConvexPolygonWithHole() {\n    ArrayList<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, -1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, -1));\n    ArrayList<GeoPoint> hole_points = new ArrayList<>();\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,hole_points);\n\n    GeoPolygon polygon = (GeoPolygon)((GeoCompositePolygon)GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points,Collections.singletonList(hole))).shapes.get(0);\n    GeoPolygon polygon2 = GeoPolygonFactory.makeGeoConvexPolygon(PlanetModel.SPHERE,points,Collections.singletonList(hole));\n    assertEquals(polygon,polygon2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testConvexPolygonWithHole().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConvexPolygonWithHole() {\n    ArrayList<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, -1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, -1));\n    ArrayList<GeoPoint> hole_points = new ArrayList<>();\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,hole_points);\n\n    GeoPolygon polygon = (GeoPolygon)((GeoCompositePolygon)GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points,Collections.singletonList(hole))).shapes.get(0);\n    GeoPolygon polygon2 = GeoPolygonFactory.makeGeoConvexPolygon(PlanetModel.SPHERE,points,Collections.singletonList(hole));\n    assertEquals(polygon,polygon2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testConvexPolygonWithHole().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConvexPolygonWithHole() {\n    ArrayList<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, -1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, -1));\n    ArrayList<GeoPoint> hole_points = new ArrayList<>();\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,hole_points);\n\n    GeoPolygon polygon = (GeoPolygon)((GeoCompositePolygon)GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points,Collections.singletonList(hole))).shapes.get(0);\n    GeoPolygon polygon2 = GeoPolygonFactory.makeGeoConvexPolygon(PlanetModel.SPHERE,points,Collections.singletonList(hole));\n    assertEquals(polygon,polygon2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3212aa8c471e908af7dc95808a8f77018d198dc2","date":1502103679,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testConvexPolygonWithHole().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testConvexPolygonWithHole().mjava","sourceNew":"  @Test\n  public void testConvexPolygonWithHole() {\n    ArrayList<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, -1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, -1));\n    ArrayList<GeoPoint> hole_points = new ArrayList<>();\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,hole_points);\n\n    GeoPolygon polygon = ((GeoCompositePolygon)GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points,Collections.singletonList(hole))).getShape(0);\n    GeoPolygon polygon2 = GeoPolygonFactory.makeGeoConvexPolygon(PlanetModel.SPHERE,points,Collections.singletonList(hole));\n    assertEquals(polygon,polygon2);\n  }\n\n","sourceOld":"  @Test\n  public void testConvexPolygonWithHole() {\n    ArrayList<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, -1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, -1));\n    ArrayList<GeoPoint> hole_points = new ArrayList<>();\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,hole_points);\n\n    GeoPolygon polygon = (GeoPolygon)((GeoCompositePolygon)GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points,Collections.singletonList(hole))).shapes.get(0);\n    GeoPolygon polygon2 = GeoPolygonFactory.makeGeoConvexPolygon(PlanetModel.SPHERE,points,Collections.singletonList(hole));\n    assertEquals(polygon,polygon2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testConvexPolygonWithHole().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoPolygonTest#testConvexPolygonWithHole().mjava","sourceNew":"  @Test\n  public void testConvexPolygonWithHole() {\n    ArrayList<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, -1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, -1));\n    ArrayList<GeoPoint> hole_points = new ArrayList<>();\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,hole_points);\n\n    GeoPolygon polygon = ((GeoCompositePolygon)GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points,Collections.singletonList(hole))).getShape(0);\n    GeoPolygon polygon2 = GeoPolygonFactory.makeGeoConvexPolygon(PlanetModel.SPHERE,points,Collections.singletonList(hole));\n    assertEquals(polygon,polygon2);\n  }\n\n","sourceOld":"  @Test\n  public void testConvexPolygonWithHole() {\n    ArrayList<GeoPoint> points = new ArrayList<>();\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, -1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, -1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, 1));\n    points.add(new GeoPoint(PlanetModel.SPHERE, 1, -1));\n    ArrayList<GeoPoint> hole_points = new ArrayList<>();\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, -0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.6));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.1, -0.5));\n    hole_points.add(new GeoPoint(PlanetModel.SPHERE, 0.0, -0.4));\n    GeoPolygon hole = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE,hole_points);\n\n    GeoPolygon polygon = (GeoPolygon)((GeoCompositePolygon)GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, points,Collections.singletonList(hole))).shapes.get(0);\n    GeoPolygon polygon2 = GeoPolygonFactory.makeGeoConvexPolygon(PlanetModel.SPHERE,points,Collections.singletonList(hole));\n    assertEquals(polygon,polygon2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e9017cf144952056066919f1ebc7897ff9bd71b1","3212aa8c471e908af7dc95808a8f77018d198dc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3212aa8c471e908af7dc95808a8f77018d198dc2":["27c7ceb638c80da55603b74dda1d75ca0be762fb"],"27c7ceb638c80da55603b74dda1d75ca0be762fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44b289ba5434fa10782118c697fa706d6cf231df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","27c7ceb638c80da55603b74dda1d75ca0be762fb"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","27c7ceb638c80da55603b74dda1d75ca0be762fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3212aa8c471e908af7dc95808a8f77018d198dc2"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","27c7ceb638c80da55603b74dda1d75ca0be762fb","44b289ba5434fa10782118c697fa706d6cf231df","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"3212aa8c471e908af7dc95808a8f77018d198dc2":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27c7ceb638c80da55603b74dda1d75ca0be762fb":["3212aa8c471e908af7dc95808a8f77018d198dc2","44b289ba5434fa10782118c697fa706d6cf231df","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"44b289ba5434fa10782118c697fa706d6cf231df":[],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","44b289ba5434fa10782118c697fa706d6cf231df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}