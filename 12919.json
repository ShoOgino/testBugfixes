{"path":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","commits":[{"id":"985161df9b1c14b4aa862d74d48cf51561579e62","date":1302636954,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      assertTrue(s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits > 0);\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(term));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["103857ec20f79f31c7a00310a91ed001b9a6ef17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      assertTrue(s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits > 0);\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(term));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2506f4a214732b20f56ab2fa8b975dc5d85c4d45","date":1302809898,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seek(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      assertTrue(s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits > 0);\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(term));\n    }\n  }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seek(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      assertTrue(s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits > 0);\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(term));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seek(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seek(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seek(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seek(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seek(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator();\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms#testSavedTerms(IndexReader,List[BytesRef]).mjava","sourceNew":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","sourceOld":"  private void testSavedTerms(IndexReader r, List<BytesRef> terms) throws IOException {\n    System.out.println(\"TEST: run \" + terms.size() + \" terms on reader=\" + r);\n    IndexSearcher s = new IndexSearcher(r);\n    Collections.shuffle(terms);\n    TermsEnum termsEnum = MultiFields.getTerms(r, \"field\").iterator(null);\n    boolean failed = false;\n    for(int iter=0;iter<10*terms.size();iter++) {\n      final BytesRef term = terms.get(random.nextInt(terms.size()));\n      System.out.println(\"TEST: search \" + term);\n      final long t0 = System.currentTimeMillis();\n      final int count = s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits;\n      if (count <= 0) {\n        System.out.println(\"  FAILED: count=\" + count);\n        failed = true;\n      }\n      final long t1 = System.currentTimeMillis();\n      System.out.println(\"  took \" + (t1-t0) + \" millis\");\n\n      TermsEnum.SeekStatus result = termsEnum.seekCeil(term);\n      if (result != TermsEnum.SeekStatus.FOUND) {\n        if (result == TermsEnum.SeekStatus.END) {\n          System.out.println(\"  FAILED: got END\");\n        } else {\n          System.out.println(\"  FAILED: wrong term: got \" + termsEnum.term());\n        }\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"3cc749c053615f5871f3b95715fe292f34e70a53":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","985161df9b1c14b4aa862d74d48cf51561579e62"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","fd9cc9d77712aba3662f24632df7539ab75e3667"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2506f4a214732b20f56ab2fa8b975dc5d85c4d45","fd9cc9d77712aba3662f24632df7539ab75e3667"],"1eb46686a27187e42311e77666a2c7026f461ebc":["962d04139994fce5193143ef35615499a9a96d78","2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2506f4a214732b20f56ab2fa8b975dc5d85c4d45":["985161df9b1c14b4aa862d74d48cf51561579e62"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"985161df9b1c14b4aa862d74d48cf51561579e62":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"962d04139994fce5193143ef35615499a9a96d78":["1eb46686a27187e42311e77666a2c7026f461ebc"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","985161df9b1c14b4aa862d74d48cf51561579e62"],"2506f4a214732b20f56ab2fa8b975dc5d85c4d45":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["3cc749c053615f5871f3b95715fe292f34e70a53","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"985161df9b1c14b4aa862d74d48cf51561579e62":["962d04139994fce5193143ef35615499a9a96d78","2506f4a214732b20f56ab2fa8b975dc5d85c4d45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","1eb46686a27187e42311e77666a2c7026f461ebc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}