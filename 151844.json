{"path":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","commits":[{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n       false,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n\n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean compressed, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      if (compressed) {\n        doc.add(new Field(fi.name, uncompress(b)));\n      } else {\n        doc.add(new Field(fi.name, b));\n      }\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      if (compressed) {\n        int toRead = fieldsStream.readVInt();\n\n        final byte[] b = new byte[toRead];\n        fieldsStream.readBytes(b, 0, b.length);\n        f = new Field(fi.name,      // field name\n                false,\n                new String(uncompress(b), \"UTF-8\"), // uncompress the value and add as string\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      } else {\n        f = new Field(fi.name,     // name\n         false,\n                fieldsStream.readString(), // read value\n                store,\n                index,\n                termVector);\n        f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n        f.setOmitNorms(fi.omitNorms);\n      }\n      \n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd8367c3d48e4b63dee1895a261d4986c716bbb","date":1279637747,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n       false,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n\n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n       false,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n       false,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n\n      doc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    //we have a binary stored field, and it may be compressed\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n       false,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        false,\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n       false,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","sourceNew":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize, int numeric) throws CorruptIndexException, IOException {\n    final AbstractField f;\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      f = new Field(fi.name, b);\n    } else if (numeric != 0) {\n      f = loadNumericField(fi, numeric);\n    } else {\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n      f = new Field(fi.name,     // name\n        false,\n        fieldsStream.readString(), // read value\n        Field.Store.YES,\n        index,\n        termVector);\n    }\n    \n    f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n    f.setOmitNorms(fi.omitNorms);\n    doc.add(f);\n  }\n\n","sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n       false,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addField(Document,FieldInfo,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  private void addField(Document doc, FieldInfo fi, boolean binary, boolean tokenize) throws CorruptIndexException, IOException {\n\n    if (binary) {\n      int toRead = fieldsStream.readVInt();\n      final byte[] b = new byte[toRead];\n      fieldsStream.readBytes(b, 0, b.length);\n      doc.add(new Field(fi.name, b));\n    } else {\n      Field.Store store = Field.Store.YES;\n      Field.Index index = Field.Index.toIndex(fi.isIndexed, tokenize);\n      Field.TermVector termVector = Field.TermVector.toTermVector(fi.storeTermVector, fi.storeOffsetWithTermVector, fi.storePositionWithTermVector);\n\n      AbstractField f;\n      f = new Field(fi.name,     // name\n       false,\n              fieldsStream.readString(), // read value\n              store,\n              index,\n              termVector);\n      f.setOmitTermFreqAndPositions(fi.omitTermFreqAndPositions);\n      f.setOmitNorms(fi.omitNorms);\n\n      doc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6267e1ce56c2eec111425690cd04e251b6f14952":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"]},"commit2Childs":{"6267e1ce56c2eec111425690cd04e251b6f14952":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","5f4e87790277826a2aea119328600dfb07761f32"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6267e1ce56c2eec111425690cd04e251b6f14952"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}