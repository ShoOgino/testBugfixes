{"path":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","commits":[{"id":"e7a005111928c661ab5d236ed6a3a079b438d2cf","date":1205411670,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","pathOld":"/dev/null","sourceNew":"  public Document document(int n) throws IOException {\n    if ((deletedDocumentNumbers != null\n        && deletedDocumentNumbers.contains(n))\n        ||\n        (getIndex().getDeletedDocuments() != null\n            && getIndex().getDeletedDocuments().contains(n))) {\n      return null;\n    }\n    return getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7","date":1214673815,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live canges of stored values,\n   * but be carful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","sourceOld":"  public Document document(int n) throws IOException {\n    if ((deletedDocumentNumbers != null\n        && deletedDocumentNumbers.contains(n))\n        ||\n        (getIndex().getDeletedDocuments() != null\n            && getIndex().getDeletedDocuments().contains(n))) {\n      return null;\n    }\n    return getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","bugFix":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live canges of stored values,\n   * but be carful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  @Override\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","pathOld":"contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  @Override\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>Warning!</b>\n   * The resulting document is the actual stored document instance\n   * and not a deserialized clone as retuned by an IndexReader\n   * over a {@link org.apache.lucene.store.Directory}.\n   * I.e., if you need to touch the document, clone it first!\n   * <p>\n   * This can also be seen as a feature for live changes of stored values,\n   * but be careful! Adding a field with an name unknown to the index\n   * or to a field with previously no stored values will make\n   * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)}\n   * out of sync, causing problems for instance when merging the\n   * instantiated index to another index.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n\n  @Override\n  public Document document(int n) throws IOException {\n    return isDeleted(n) ? null : getIndex().getDocumentsByNumber()[n].getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}