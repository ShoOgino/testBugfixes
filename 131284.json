{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#push().mjava","commits":[{"id":"3d53c3f769ca0f9e7434937b792877770271aecf","date":1294785129,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#push().mjava","pathOld":"/dev/null","sourceNew":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    //System.out.println(\"PW now push @ \" + pendingCount);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (!omitTF) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, 0);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bf28bc020449d67c52e06f23f52829af4934fd","date":1294868209,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#push().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#push().mjava","sourceNew":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    //System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (!omitTF) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          //System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        //System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, 0);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","sourceOld":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    //System.out.println(\"PW now push @ \" + pendingCount);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (!omitTF) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, 0);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#push().mjava","pathOld":"/dev/null","sourceNew":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    //System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (!omitTF) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          //System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        //System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, 0);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#push().mjava","pathOld":"/dev/null","sourceNew":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    //System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (!omitTF) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          //System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        //System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, 0);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#push().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#push().mjava","sourceNew":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    //System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          //System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        //System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, indexOptions == IndexOptions.DOCS_ONLY ? 0 : doc.termFreq);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","sourceOld":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    //System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (!omitTF) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          //System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        //System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, 0);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#push().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#push().mjava","sourceNew":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    if (DEBUG) System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          if (DEBUG) System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        if (DEBUG) System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, indexOptions == IndexOptions.DOCS_ONLY ? 0 : doc.termFreq);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","sourceOld":"  // Pushes pending positions to the wrapped codec\n  private void push() throws IOException {\n    //System.out.println(\"PW now push @ \" + pendingCount + \" wrapped=\" + wrappedPostingsWriter);\n    assert pendingCount == pending.length;\n      \n    wrappedPostingsWriter.startTerm();\n      \n    // Flush all buffered docs\n    if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      Position doc = null;\n      for(Position pos : pending) {\n        if (doc == null) {\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        } else if (doc.docID != pos.docID) {\n          assert pos.docID > doc.docID;\n          //System.out.println(\"PW: wrapped.finishDoc\");\n          wrappedPostingsWriter.finishDoc();\n          doc = pos;\n          //System.out.println(\"PW: wrapped.startDoc docID=\" + doc.docID + \" tf=\" + doc.termFreq);\n          wrappedPostingsWriter.startDoc(doc.docID, doc.termFreq);\n        }\n        //System.out.println(\"PW:   wrapped.addPos pos=\" + pos.pos);\n        wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n      }\n      //wrappedPostingsWriter.finishDoc();\n    } else {\n      for(Position doc : pending) {\n        wrappedPostingsWriter.startDoc(doc.docID, indexOptions == IndexOptions.DOCS_ONLY ? 0 : doc.termFreq);\n      }\n    }\n    pendingCount = -1;\n  }\n\n","bugFix":null,"bugIntro":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e7bf28bc020449d67c52e06f23f52829af4934fd"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bf28bc020449d67c52e06f23f52829af4934fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d53c3f769ca0f9e7434937b792877770271aecf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bf28bc020449d67c52e06f23f52829af4934fd"],"e7bf28bc020449d67c52e06f23f52829af4934fd":["3d53c3f769ca0f9e7434937b792877770271aecf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","3d53c3f769ca0f9e7434937b792877770271aecf","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3d53c3f769ca0f9e7434937b792877770271aecf":["e7bf28bc020449d67c52e06f23f52829af4934fd"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"e7bf28bc020449d67c52e06f23f52829af4934fd":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}