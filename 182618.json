{"path":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","date":1309197122,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits skipDocs = reader.getDeletedDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (skipDocs != null && skipDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          if (skipDocs != null && skipDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9111961f74f9b2246dc88c481eda8be7e7ff084f","date":1309287219,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits skipDocs = reader.getDeletedDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (skipDocs != null && skipDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits skipDocs = reader.getDeletedDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (skipDocs != null && skipDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          if (skipDocs != null && skipDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits skipDocs = reader.getDeletedDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (skipDocs != null && skipDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits liveDocs = reader.getLiveDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (liveDocs != null && !liveDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits skipDocs = reader.getDeletedDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (skipDocs != null && skipDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits liveDocs = reader.getLiveDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (liveDocs != null && !liveDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits skipDocs = reader.getDeletedDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (skipDocs != null && skipDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits liveDocs = reader.getLiveDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (liveDocs != null && !liveDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    if (queries==null) return null;\n    if (queries.size()==1) return getDocSet(queries.get(0));\n    DocSet answer=null;\n\n    boolean[] neg = new boolean[queries.size()];\n    DocSet[] sets = new DocSet[queries.size()];\n\n    int smallestIndex = -1;\n    int smallestCount = Integer.MAX_VALUE;\n    for (int i=0; i<sets.length; i++) {\n      Query q = queries.get(i);\n      Query posQuery = QueryUtils.getAbs(q);\n      sets[i] = getPositiveDocSet(posQuery);\n      // Negative query if absolute value different from original\n      if (q==posQuery) {\n        neg[i] = false;\n        // keep track of the smallest positive set.\n        // This optimization is only worth it if size() is cached, which it would\n        // be if we don't do any set operations.\n        int sz = sets[i].size();\n        if (sz<smallestCount) {\n          smallestCount=sz;\n          smallestIndex=i;\n          answer = sets[i];\n        }\n      } else {\n        neg[i] = true;\n      }\n    }\n\n    // if no positive queries, start off with all docs\n    if (answer==null) answer = getPositiveDocSet(matchAllDocsQuery);\n\n    // do negative queries first to shrink set size\n    for (int i=0; i<sets.length; i++) {\n      if (neg[i]) answer = answer.andNot(sets[i]);\n    }\n\n    for (int i=0; i<sets.length; i++) {\n      if (!neg[i] && i!=smallestIndex) answer = answer.intersection(sets[i]);\n    }\n\n    return answer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits liveDocs = reader.getLiveDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (liveDocs != null && !liveDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits liveDocs = reader.getLiveDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (liveDocs != null && !liveDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits liveDocs = reader.getLiveDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (liveDocs != null && !liveDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits liveDocs = reader.getLiveDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (liveDocs != null && !liveDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(List[Query]).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits liveDocs = reader.getLiveDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (liveDocs != null && !liveDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching all queries.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * This method can handle negative queries.\n   * <p>\n   * The DocSet returned should <b>not</b> be modified.\n   */\n  public DocSet getDocSet(List<Query> queries) throws IOException {\n    ProcessedFilter pf = getProcessedFilter(null, queries);\n    if (pf.answer != null) return pf.answer;\n\n\n    DocSetCollector setCollector = new DocSetCollector(maxDoc()>>6, maxDoc());\n    Collector collector = setCollector;\n    if (pf.postFilter != null) {\n      pf.postFilter.setLastDelegate(collector);\n      collector = pf.postFilter;\n    }\n\n    final AtomicReaderContext[] leaves = leafContexts;\n\n\n    for (int i=0; i<leaves.length; i++) {\n      final AtomicReaderContext leaf = leaves[i];\n      final IndexReader reader = leaf.reader;\n      DocIdSet idSet = null;\n      if (pf.filter != null) {\n        idSet = pf.filter.getDocIdSet(leaf);\n        if (idSet == null) continue;\n      }\n      DocIdSetIterator idIter = null;\n      if (idSet != null) {\n        idIter = idSet.iterator();\n        if (idIter == null) continue;\n      }\n\n      collector.setNextReader(leaf);\n      Bits liveDocs = reader.getLiveDocs();\n      int max = reader.maxDoc();\n\n      if (idIter == null) {\n        for (int docid = 0; docid<max; docid++) {\n          if (liveDocs != null && !liveDocs.get(docid)) continue;\n          collector.collect(docid);\n        }\n      } else {\n        for (int docid = -1; (docid = idIter.advance(docid+1)) < max; ) {\n          collector.collect(docid);\n        }\n      }\n    }\n\n    return setCollector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["9111961f74f9b2246dc88c481eda8be7e7ff084f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2553b00f699380c64959ccb27991289aae87be2e":["1da8d55113b689b06716246649de6f62430f15c0","9111961f74f9b2246dc88c481eda8be7e7ff084f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1da8d55113b689b06716246649de6f62430f15c0","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"9111961f74f9b2246dc88c481eda8be7e7ff084f":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9111961f74f9b2246dc88c481eda8be7e7ff084f":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"1da8d55113b689b06716246649de6f62430f15c0":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["9111961f74f9b2246dc88c481eda8be7e7ff084f"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}