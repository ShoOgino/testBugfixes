{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterTermIntervals#randomUnifiedHighlighter(IndexSearcher,Analyzer,EnumSet[HighlightFlag],Boolean).mjava","commits":[{"id":"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea","date":1574601528,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterTermIntervals#randomUnifiedHighlighter(IndexSearcher,Analyzer,EnumSet[HighlightFlag],Boolean).mjava","pathOld":"/dev/null","sourceNew":"  static UnifiedHighlighter randomUnifiedHighlighter(IndexSearcher searcher, Analyzer indexAnalyzer,\n                                                     EnumSet<HighlightFlag> mandatoryFlags, Boolean requireFieldMatch) {\n    final UnifiedHighlighter uh = new UnifiedHighlighter(searcher, indexAnalyzer) {\n      Set<HighlightFlag> flags; // consistently random set of flags for this test run\n      @Override\n      protected Set<HighlightFlag> getFlags(String field) {\n        if (flags != null) {\n          return flags;\n        }\n        final EnumSet<HighlightFlag> result = EnumSet.copyOf(mandatoryFlags);\n        int r = random().nextInt();\n        for (HighlightFlag highlightFlag : HighlightFlag.values()) {\n          if (((1 << highlightFlag.ordinal()) & r) == 0) {\n            result.add(highlightFlag);\n          }\n        }\n        if (result.contains(HighlightFlag.WEIGHT_MATCHES)) {\n          // these two are required for WEIGHT_MATCHES\n          result.add(HighlightFlag.MULTI_TERM_QUERY);\n          result.add(HighlightFlag.PHRASES);\n        }\n        return flags = result;\n      }\n    };\n    uh.setCacheFieldValCharsThreshold(random().nextInt(100));\n    if (requireFieldMatch == Boolean.FALSE || (requireFieldMatch == null && random().nextBoolean())) {\n      uh.setFieldMatcher(f -> true); // requireFieldMatch==false\n    }\n    return uh;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"]},"commit2Childs":{"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}