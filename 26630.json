{"path":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","sourceNew":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) throws IOException {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) throws IOException {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","sourceNew":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) throws IOException {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","bugFix":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","sourceNew":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) throws IOException {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa968010b9c6598d02666b7b879c12e3cb0db4ee","date":1359063766,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c024a3e8fec0a081cbf9539845db12f0dc84d029","date":1376654698,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ceca04c06658aeb20e0a319ade784ad9a0576dd","date":1376662287,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","sourceNew":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          addBlock(currentBlock);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          addBlock(currentBlock);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.PagedBytesDataOutput#writeBytes(byte[],int,int).mjava","sourceNew":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          addBlock(currentBlock);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          addBlock(currentBlock);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void writeBytes(byte[] b, int offset, int length) {\n      assert b.length >= offset + length;\n      if (length == 0) {\n        return;\n      }\n\n      if (upto == blockSize) {\n        if (currentBlock != null) {\n          blocks.add(currentBlock);\n          blockEnd.add(upto);\n        }\n        currentBlock = new byte[blockSize];\n        upto = 0;\n      }\n          \n      final int offsetEnd = offset + length;\n      while(true) {\n        final int left = offsetEnd - offset;\n        final int blockLeft = blockSize - upto;\n        if (blockLeft < left) {\n          System.arraycopy(b, offset, currentBlock, upto, blockLeft);\n          blocks.add(currentBlock);\n          blockEnd.add(blockSize);\n          currentBlock = new byte[blockSize];\n          upto = 0;\n          offset += blockLeft;\n        } else {\n          // Last block\n          System.arraycopy(b, offset, currentBlock, upto, left);\n          upto += left;\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","fa968010b9c6598d02666b7b879c12e3cb0db4ee"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["c024a3e8fec0a081cbf9539845db12f0dc84d029","d943163030bbd7a9caf93cb5fea92257390a2a99"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d943163030bbd7a9caf93cb5fea92257390a2a99":["c024a3e8fec0a081cbf9539845db12f0dc84d029"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c024a3e8fec0a081cbf9539845db12f0dc84d029":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"2ceca04c06658aeb20e0a319ade784ad9a0576dd":["d4d69c535930b5cce125cff868d40f6373dc27d4","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d943163030bbd7a9caf93cb5fea92257390a2a99"]},"commit2Childs":{"fa968010b9c6598d02666b7b879c12e3cb0db4ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c024a3e8fec0a081cbf9539845db12f0dc84d029","2ceca04c06658aeb20e0a319ade784ad9a0576dd"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fa968010b9c6598d02666b7b879c12e3cb0db4ee","d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c024a3e8fec0a081cbf9539845db12f0dc84d029":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","d943163030bbd7a9caf93cb5fea92257390a2a99","2ceca04c06658aeb20e0a319ade784ad9a0576dd"],"2ceca04c06658aeb20e0a319ade784ad9a0576dd":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","fe33227f6805edab2036cbb80645cc4e2d1fa424","2ceca04c06658aeb20e0a319ade784ad9a0576dd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}