{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","commits":[{"id":"cdc8313ba7bdaaa48ff54059d0eabff4436ab175","date":1386102048,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","pathOld":"/dev/null","sourceNew":"  public DocCollection getCollectionOrNull(String collection) {\n    return collectionStates.get(collection);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","pathOld":"/dev/null","sourceNew":"  public DocCollection getCollectionOrNull(String collection) {\n    return collectionStates.get(collection);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","sourceNew":"  public DocCollection getCollectionOrNull(String coll) {\n    DocCollection c = collectionStates.get(coll);\n    if (c != null) return c;\n    if (!stateReader.getAllCollections().contains(coll)) return null;\n    return loadExtDocCollection(coll);\n  }\n\n","sourceOld":"  public DocCollection getCollectionOrNull(String collection) {\n    return collectionStates.get(collection);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","sourceNew":"  public DocCollection getCollectionOrNull(String coll) {\n    return collectionStates.get(coll);\n  }\n\n","sourceOld":"  public DocCollection getCollectionOrNull(String coll) {\n    DocCollection c = collectionStates.get(coll);\n    if (c != null) return c;\n    if (!stateReader.getAllCollections().contains(coll)) return null;\n    return loadExtDocCollection(coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","sourceNew":"  public DocCollection getCollectionOrNull(String coll) {\n    DocCollection c = collectionStates.get(coll);\n    if (c != null) return c;\n    if (!stateReader.getAllCollections().contains(coll)) return null;\n    return stateReader.getCollection(coll);\n  }\n\n","sourceOld":"  public DocCollection getCollectionOrNull(String coll) {\n    return collectionStates.get(coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","sourceNew":"  public DocCollection getCollectionOrNull(String coll) {\n    return collectionStates.get(coll);\n  }\n\n","sourceOld":"  public DocCollection getCollectionOrNull(String coll) {\n    DocCollection c = collectionStates.get(coll);\n    if (c != null) return c;\n    if (!stateReader.getAllCollections().contains(coll)) return null;\n    return stateReader.getCollection(coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","sourceNew":"  public DocCollection getCollectionOrNull(String coll) {\n    CollectionRef ref = collectionStates.get(coll);\n    return ref == null? null:ref.get();\n  }\n\n","sourceOld":"  public DocCollection getCollectionOrNull(String coll) {\n    return collectionStates.get(coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","sourceNew":"  /**\n   * Returns the corresponding {@link DocCollection} object for the given collection name\n   * if such a collection exists. Returns null otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public DocCollection getCollectionOrNull(String collectionName) {\n    CollectionRef ref = collectionStates.get(collectionName);\n    return ref == null ? null : ref.get();\n  }\n\n","sourceOld":"  public DocCollection getCollectionOrNull(String coll) {\n    CollectionRef ref = collectionStates.get(coll);\n    return ref == null? null:ref.get();\n  }\n\n","bugFix":null,"bugIntro":["c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99faa7f89355072129ceffc9b82ec62902227735","date":1457614003,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","sourceNew":"  /**\n   * Returns the corresponding {@link DocCollection} object for the given collection name\n   * if such a collection exists. Returns null otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which may make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public DocCollection getCollectionOrNull(String collectionName) {\n    CollectionRef ref = collectionStates.get(collectionName);\n    return ref == null ? null : ref.get();\n  }\n\n","sourceOld":"  /**\n   * Returns the corresponding {@link DocCollection} object for the given collection name\n   * if such a collection exists. Returns null otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public DocCollection getCollectionOrNull(String collectionName) {\n    CollectionRef ref = collectionStates.get(collectionName);\n    return ref == null ? null : ref.get();\n  }\n\n","bugFix":null,"bugIntro":["c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413","date":1519539873,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionOrNull(String).mjava","sourceNew":"  /**\n   * Returns the corresponding {@link DocCollection} object for the given collection name\n   * if such a collection exists. Returns null otherwise.  Equivalent to getCollectionOrNull(collectionName, false)\n   */\n  public DocCollection getCollectionOrNull(String collectionName) {\n    return getCollectionOrNull(collectionName, false);\n  }\n\n","sourceOld":"  /**\n   * Returns the corresponding {@link DocCollection} object for the given collection name\n   * if such a collection exists. Returns null otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which may make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public DocCollection getCollectionOrNull(String collectionName) {\n    CollectionRef ref = collectionStates.get(collectionName);\n    return ref == null ? null : ref.get();\n  }\n\n","bugFix":["99faa7f89355072129ceffc9b82ec62902227735","8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413":["99faa7f89355072129ceffc9b82ec62902227735"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413"],"99faa7f89355072129ceffc9b82ec62902227735":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["99faa7f89355072129ceffc9b82ec62902227735"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"9279b175e5e66258442d2123a50f052219a9cc1b":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"99faa7f89355072129ceffc9b82ec62902227735":["c1d3b48c2588b3dcbb7f0c7d7682514f84e6e413"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}