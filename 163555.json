{"path":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","commits":[{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCaseJ4#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      try {\n        // try empty ctor\n        return clazz.newInstance();\n      } catch (Exception e) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        try {\n          Constructor<? extends Directory> ctor = clazz.getConstructor(File.class);\n          Directory d = ctor.newInstance(tmpFile);\n          // try not to enable this hack unless we must.\n          if (d instanceof MMapDirectory && Constants.WINDOWS && MMapDirectory.UNMAP_SUPPORTED)\n            ((MMapDirectory)d).setUseUnmap(true);\n          return d;\n        } catch (Exception e2) {\n          // try .open(File)\n          Method method = clazz.getMethod(\"open\", new Class[] { File.class });\n          return (Directory) method.invoke(null, tmpFile);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      try {\n        // try empty ctor\n        return clazz.newInstance();\n      } catch (Exception e) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        try {\n          Constructor<? extends Directory> ctor = clazz.getConstructor(File.class);\n          Directory d = ctor.newInstance(tmpFile);\n          // try not to enable this hack unless we must.\n          if (d instanceof MMapDirectory && Constants.WINDOWS && MMapDirectory.UNMAP_SUPPORTED)\n            ((MMapDirectory)d).setUseUnmap(true);\n          return d;\n        } catch (Exception e2) {\n          // try .open(File)\n          Method method = clazz.getMethod(\"open\", new Class[] { File.class });\n          return (Directory) method.invoke(null, tmpFile);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"304b0cf5f0d57c82882c9e69b0436c4f3b37cc10","date":1285076435,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      try {\n        // try empty ctor\n        return clazz.newInstance();\n      } catch (Exception e) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        try {\n          Constructor<? extends Directory> ctor = clazz.getConstructor(File.class);\n          return ctor.newInstance(tmpFile);\n        } catch (Exception e2) {\n          // try .open(File)\n          Method method = clazz.getMethod(\"open\", new Class[] { File.class });\n          return (Directory) method.invoke(null, tmpFile);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      try {\n        // try empty ctor\n        return clazz.newInstance();\n      } catch (Exception e) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        try {\n          Constructor<? extends Directory> ctor = clazz.getConstructor(File.class);\n          Directory d = ctor.newInstance(tmpFile);\n          // try not to enable this hack unless we must.\n          if (d instanceof MMapDirectory && Constants.WINDOWS && MMapDirectory.UNMAP_SUPPORTED)\n            ((MMapDirectory)d).setUseUnmap(true);\n          return d;\n        } catch (Exception e2) {\n          // try .open(File)\n          Method method = clazz.getMethod(\"open\", new Class[] { File.class });\n          return (Directory) method.invoke(null, tmpFile);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile, null);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      try {\n        // try empty ctor\n        return clazz.newInstance();\n      } catch (Exception e) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        try {\n          Constructor<? extends Directory> ctor = clazz.getConstructor(File.class);\n          return ctor.newInstance(tmpFile);\n        } catch (Exception e2) {\n          // try .open(File)\n          Method method = clazz.getMethod(\"open\", new Class[] { File.class });\n          return (Directory) method.invoke(null, tmpFile);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile, null);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      try {\n        // try empty ctor\n        return clazz.newInstance();\n      } catch (Exception e) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        try {\n          Constructor<? extends Directory> ctor = clazz.getConstructor(File.class);\n          return ctor.newInstance(tmpFile);\n        } catch (Exception e2) {\n          // try .open(File)\n          Method method = clazz.getMethod(\"open\", new Class[] { File.class });\n          return (Directory) method.invoke(null, tmpFile);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"/dev/null","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile, null);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile, null);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile, null);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile, null);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile, null);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newDirectoryImpl(Random,String).mjava","sourceNew":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile, null);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  static Directory newDirectoryImpl(Random random, String clazzName) {\n    if (clazzName.equals(\"random\"))\n      clazzName = randomDirectory(random);\n    if (clazzName.indexOf(\".\") == -1) // if not fully qualified, assume .store\n      clazzName = \"org.apache.lucene.store.\" + clazzName;\n    try {\n      final Class<? extends Directory> clazz = Class.forName(clazzName).asSubclass(Directory.class);\n      // If it is a FSDirectory type, try its ctor(File)\n      if (FSDirectory.class.isAssignableFrom(clazz)) {\n        final File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n        tmpFile.delete();\n        tmpFile.mkdir();\n        return newFSDirectoryImpl(clazz.asSubclass(FSDirectory.class), tmpFile, null);\n      }\n\n      // try empty ctor\n      return clazz.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["304b0cf5f0d57c82882c9e69b0436c4f3b37cc10"],"304b0cf5f0d57c82882c9e69b0436c4f3b37cc10":["43b04c27924fe393e38e9f0986e32c634f261859"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["304b0cf5f0d57c82882c9e69b0436c4f3b37cc10","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"43b04c27924fe393e38e9f0986e32c634f261859":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"304b0cf5f0d57c82882c9e69b0436c4f3b37cc10":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","43b04c27924fe393e38e9f0986e32c634f261859"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43b04c27924fe393e38e9f0986e32c634f261859":["304b0cf5f0d57c82882c9e69b0436c4f3b37cc10"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}