{"path":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"/dev/null","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":null,"sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"/dev/null","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrDeletionPolicy#updateCommits(List[IndexCommit]).mjava","sourceNew":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","sourceOld":"  private void updateCommits(List<IndexCommit> commits) {\n    // to be safe, we should only call delete on a commit point passed to us\n    // in this specific call (may be across diff IndexWriter instances).\n    // this will happen rarely, so just synchronize everything\n    // for safety and to avoid race conditions\n\n    synchronized (this) {\n      long maxCommitAgeTimeStamp = -1L;\n      IndexCommit newest = commits.get(commits.size() - 1);\n      log.info(\"newest commit = \" + newest.getVersion());\n\n      int optimizedKept = newest.isOptimized() ? 1 : 0;\n      int totalKept = 1;\n\n      // work our way from newest to oldest, skipping the first since we always want to keep it.\n      for (int i=commits.size()-2; i>=0; i--) {\n        IndexCommit commit = commits.get(i);\n\n        // delete anything too old, regardless of other policies\n        try {\n          if (maxCommitAge != null) {\n            if (maxCommitAgeTimeStamp==-1) {\n              DateMathParser dmp = new DateMathParser(DateField.UTC, Locale.US);\n              maxCommitAgeTimeStamp = dmp.parseMath(maxCommitAge).getTime();\n            }\n            if (commit.getTimestamp() < maxCommitAgeTimeStamp) {\n              commit.delete();\n              continue;\n            }\n          }\n        } catch (Exception e) {\n          log.warn(\"Exception while checking commit point's age for deletion\", e);\n        }\n\n        if (optimizedKept < maxOptimizedCommitsToKeep && commit.isOptimized()) {\n          totalKept++;\n          optimizedKept++;\n          continue;\n        }\n\n        if (totalKept < maxCommitsToKeep) {\n          totalKept++;\n          continue;\n        }\n                                                  \n        commit.delete();\n      }\n\n    } // end synchronized\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}