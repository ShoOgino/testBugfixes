{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#isEmpty(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(LightAutomaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ddee54b1c3df60fd6198e3aa64c78038a1be8df","date":1487008231,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","sourceNew":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    ArrayDeque<Integer> workList = new ArrayDeque<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","sourceNew":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    ArrayDeque<Integer> workList = new ArrayDeque<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","sourceNew":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    ArrayDeque<Integer> workList = new ArrayDeque<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#isEmpty(Automaton).mjava","sourceNew":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    ArrayDeque<Integer> workList = new ArrayDeque<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given automaton accepts no strings.\n   */\n  public static boolean isEmpty(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Common case: no states\n      return true;\n    }\n    if (a.isAccept(0) == false && a.getNumTransitions(0) == 0) {\n      // Common case: just one initial state\n      return true;\n    }\n    if (a.isAccept(0) == true) {\n      // Apparently common case: it accepts the damned empty string\n      return false;\n    }\n    \n    LinkedList<Integer> workList = new LinkedList<>();\n    BitSet seen = new BitSet(a.getNumStates());\n    workList.add(0);\n    seen.set(0);\n\n    Transition t = new Transition();\n    while (workList.isEmpty() == false) {\n      int state = workList.removeFirst();\n      if (a.isAccept(state)) {\n        return false;\n      }\n      int count = a.initTransition(state, t);\n      for(int i=0;i<count;i++) {\n        a.getNextTransition(t);\n        if (seen.get(t.dest) == false) {\n          workList.add(t.dest);\n          seen.set(t.dest);\n        }\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["5c84485629d80d203608e8975a1139de9933cc38","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["022a4de90e0479b604264ca9c2e134c996454ab3","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}