{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#TempPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#TempPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public TempPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            TempPostingsWriter.DOC_CODEC,\n                            TempPostingsWriter.VERSION_CURRENT,\n                            TempPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              TempPostingsWriter.POS_CODEC,\n                              TempPostingsWriter.VERSION_CURRENT,\n                              TempPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                TempPostingsWriter.PAY_CODEC,\n                                TempPostingsWriter.VERSION_CURRENT,\n                                TempPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#TempPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#TempPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public TempPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            TempPostingsWriter.DOC_CODEC,\n                            TempPostingsWriter.VERSION_CURRENT,\n                            TempPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              TempPostingsWriter.POS_CODEC,\n                              TempPostingsWriter.VERSION_CURRENT,\n                              TempPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                TempPostingsWriter.PAY_CODEC,\n                                TempPostingsWriter.VERSION_CURRENT,\n                                TempPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public TempPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            TempPostingsWriter.DOC_CODEC,\n                            TempPostingsWriter.VERSION_CURRENT,\n                            TempPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              TempPostingsWriter.POS_CODEC,\n                              TempPostingsWriter.VERSION_CURRENT,\n                              TempPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                TempPostingsWriter.PAY_CODEC,\n                                TempPostingsWriter.VERSION_CURRENT,\n                                TempPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#TempPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#TempPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":"  /** Sole constructor. */\n  public TempPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockTreePostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            TempPostingsWriter.DOC_CODEC,\n                            TempPostingsWriter.VERSION_CURRENT,\n                            TempPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockTreePostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              TempPostingsWriter.POS_CODEC,\n                              TempPostingsWriter.VERSION_CURRENT,\n                              TempPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockTreePostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                TempPostingsWriter.PAY_CODEC,\n                                TempPostingsWriter.VERSION_CURRENT,\n                                TempPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public TempPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockPostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            TempPostingsWriter.DOC_CODEC,\n                            TempPostingsWriter.VERSION_CURRENT,\n                            TempPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockPostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              TempPostingsWriter.POS_CODEC,\n                              TempPostingsWriter.VERSION_CURRENT,\n                              TempPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockPostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                TempPostingsWriter.PAY_CODEC,\n                                TempPostingsWriter.VERSION_CURRENT,\n                                TempPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempPostingsReader#TempPostingsReader(Directory,FieldInfos,SegmentInfo,IOContext,String).mjava","sourceNew":null,"sourceOld":"  /** Sole constructor. */\n  public TempPostingsReader(Directory dir, FieldInfos fieldInfos, SegmentInfo segmentInfo, IOContext ioContext, String segmentSuffix) throws IOException {\n    boolean success = false;\n    IndexInput docIn = null;\n    IndexInput posIn = null;\n    IndexInput payIn = null;\n    try {\n      docIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockTreePostingsFormat.DOC_EXTENSION),\n                            ioContext);\n      CodecUtil.checkHeader(docIn,\n                            TempPostingsWriter.DOC_CODEC,\n                            TempPostingsWriter.VERSION_CURRENT,\n                            TempPostingsWriter.VERSION_CURRENT);\n      forUtil = new ForUtil(docIn);\n\n      if (fieldInfos.hasProx()) {\n        posIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockTreePostingsFormat.POS_EXTENSION),\n                              ioContext);\n        CodecUtil.checkHeader(posIn,\n                              TempPostingsWriter.POS_CODEC,\n                              TempPostingsWriter.VERSION_CURRENT,\n                              TempPostingsWriter.VERSION_CURRENT);\n\n        if (fieldInfos.hasPayloads() || fieldInfos.hasOffsets()) {\n          payIn = dir.openInput(IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, TempBlockTreePostingsFormat.PAY_EXTENSION),\n                                ioContext);\n          CodecUtil.checkHeader(payIn,\n                                TempPostingsWriter.PAY_CODEC,\n                                TempPostingsWriter.VERSION_CURRENT,\n                                TempPostingsWriter.VERSION_CURRENT);\n        }\n      }\n\n      this.docIn = docIn;\n      this.posIn = posIn;\n      this.payIn = payIn;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docIn, posIn, payIn);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}