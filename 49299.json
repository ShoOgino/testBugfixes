{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","commits":[{"id":"db5a3aeba34624ea274f34df5691d40ca25f2b67","date":1358965297,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n        case VAR_INTS:\n          instance = loadVarIntsField(field);\n          break;\n        default: \n          throw new AssertionError(); // nocommit, implement the other types\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a549b1cf014471a1824fa0dfb77c82ed061ee1d","date":1358966558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n        case VAR_INTS:\n          instance = loadVarIntsField(field);\n          break;\n        case FIXED_INTS_8:\n          instance = loadByteField(field);\n          break;\n        case FIXED_INTS_16:\n          instance = loadShortField(field);\n          break;\n        case FIXED_INTS_32:\n          instance = loadIntField(field);\n          break;\n        case FIXED_INTS_64:\n          instance = loadLongField(field);\n          break;\n        case FLOAT_32:\n          instance = loadFloatField(field);\n          break;\n        case FLOAT_64:\n          instance = loadDoubleField(field);\n          break;\n        default: \n          throw new AssertionError(); // nocommit, implement the other types\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n        case VAR_INTS:\n          instance = loadVarIntsField(field);\n          break;\n        default: \n          throw new AssertionError(); // nocommit, implement the other types\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e67c2e7a5990eb850e9cebdfed78f88fd888b02a","date":1358968317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n        case VAR_INTS:\n          instance = loadVarIntsField(field);\n          break;\n        case FIXED_INTS_8:\n          instance = loadByteField(field);\n          break;\n        case FIXED_INTS_16:\n          instance = loadShortField(field);\n          break;\n        case FIXED_INTS_32:\n          instance = loadIntField(field);\n          break;\n        case FIXED_INTS_64:\n          instance = loadLongField(field);\n          break;\n        case FLOAT_32:\n          instance = loadFloatField(field);\n          break;\n        case FLOAT_64:\n          instance = loadDoubleField(field);\n          break;\n        default: \n          throw new AssertionError();\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n        case VAR_INTS:\n          instance = loadVarIntsField(field);\n          break;\n        case FIXED_INTS_8:\n          instance = loadByteField(field);\n          break;\n        case FIXED_INTS_16:\n          instance = loadShortField(field);\n          break;\n        case FIXED_INTS_32:\n          instance = loadIntField(field);\n          break;\n        case FIXED_INTS_64:\n          instance = loadLongField(field);\n          break;\n        case FLOAT_32:\n          instance = loadFloatField(field);\n          break;\n        case FLOAT_64:\n          instance = loadDoubleField(field);\n          break;\n        default: \n          throw new AssertionError(); // nocommit, implement the other types\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1982459c2ac4916bf3c0644b801f0cb3e4ee159f","date":1359034079,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default: \n            throw new AssertionError();\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n        case VAR_INTS:\n          instance = loadVarIntsField(field);\n          break;\n        case FIXED_INTS_8:\n          instance = loadByteField(field);\n          break;\n        case FIXED_INTS_16:\n          instance = loadShortField(field);\n          break;\n        case FIXED_INTS_32:\n          instance = loadIntField(field);\n          break;\n        case FIXED_INTS_64:\n          instance = loadLongField(field);\n          break;\n        case FLOAT_32:\n          instance = loadFloatField(field);\n          break;\n        case FLOAT_64:\n          instance = loadDoubleField(field);\n          break;\n        default: \n          throw new AssertionError();\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":["dac1db31006989ae24922811f00f909d30f1391d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10e89cbe24422ef92a37fc037a955728de2e12cf","date":1359053475,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default: \n            throw new AssertionError();\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, Integer.toString(field.number), \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default: \n            throw new AssertionError();\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4772ea9604873dc0b22ea724398008998afc8e41","date":1359133954,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default: \n            throw new AssertionError();\n        }\n        if (input.getFilePointer() != input.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default: \n            throw new AssertionError();\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default: \n            throw new AssertionError();\n        }\n        if (input.getFilePointer() != input.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (input.getFilePointer() != input.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default: \n            throw new AssertionError();\n        }\n        if (input.getFilePointer() != input.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(input);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (input.getFilePointer() != input.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(input);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (input.getFilePointer() != input.length()) {\n          throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(input);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(input);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(input);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","sourceOld":"  @Override\n  public synchronized NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericDocValues instance = numericInstances.get(field.number);\n    if (instance == null) {\n      String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      IndexInput input = dir.openInput(fileName, state.context);\n      boolean success = false;\n      try {\n        switch(LegacyDocValuesType.valueOf(field.getAttribute(legacyKey))) {\n          case VAR_INTS:\n            instance = loadVarIntsField(field, input);\n            break;\n          case FIXED_INTS_8:\n            instance = loadByteField(field, input);\n            break;\n          case FIXED_INTS_16:\n            instance = loadShortField(field, input);\n            break;\n          case FIXED_INTS_32:\n            instance = loadIntField(field, input);\n            break;\n          case FIXED_INTS_64:\n            instance = loadLongField(field, input);\n            break;\n          case FLOAT_32:\n            instance = loadFloatField(field, input);\n            break;\n          case FLOAT_64:\n            instance = loadDoubleField(field, input);\n            break;\n          default:\n            throw new AssertionError();\n        }\n        CodecUtil.checkEOF(input);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(input);\n        } else {\n          IOUtils.closeWhileHandlingException(input);\n        }\n      }\n      numericInstances.put(field.number, instance);\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db5a3aeba34624ea274f34df5691d40ca25f2b67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5eb2511ababf862ea11e10761c70ee560cd84510":["dac1db31006989ae24922811f00f909d30f1391d","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["dac1db31006989ae24922811f00f909d30f1391d"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["e67c2e7a5990eb850e9cebdfed78f88fd888b02a"],"6a549b1cf014471a1824fa0dfb77c82ed061ee1d":["db5a3aeba34624ea274f34df5691d40ca25f2b67"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["1f3b037cd083286b2af89f96e768f85dcd8072d6","4cc45c615dbb82bf79d5f9550286098367874fbf"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4772ea9604873dc0b22ea724398008998afc8e41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"dac1db31006989ae24922811f00f909d30f1391d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e67c2e7a5990eb850e9cebdfed78f88fd888b02a":["6a549b1cf014471a1824fa0dfb77c82ed061ee1d"],"4772ea9604873dc0b22ea724398008998afc8e41":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"db5a3aeba34624ea274f34df5691d40ca25f2b67":["6a549b1cf014471a1824fa0dfb77c82ed061ee1d"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"6a549b1cf014471a1824fa0dfb77c82ed061ee1d":["e67c2e7a5990eb850e9cebdfed78f88fd888b02a"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["4772ea9604873dc0b22ea724398008998afc8e41"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["dac1db31006989ae24922811f00f909d30f1391d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db5a3aeba34624ea274f34df5691d40ca25f2b67","d4d69c535930b5cce125cff868d40f6373dc27d4"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"dac1db31006989ae24922811f00f909d30f1391d":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"e67c2e7a5990eb850e9cebdfed78f88fd888b02a":["1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"4772ea9604873dc0b22ea724398008998afc8e41":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}