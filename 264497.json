{"path":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","commits":[{"id":"22455f5d09943428acbf15c1bd87ba2cad36c08d","date":1345569934,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \"field must exist in schema, using indexed=\\\"true\\\" stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not indexed\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not multiValued\");\n    }\n    \n    return sf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["841556cc1007b83c1c72ffce498c6b0e6f5e55be","07c5ddc27fe89a674786c6e061b12a39f20fa855"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \"field must exist in schema, using indexed=\\\"true\\\" stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not indexed\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not multiValued\");\n    }\n    \n    return sf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"841556cc1007b83c1c72ffce498c6b0e6f5e55be","date":1357568368,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","sourceNew":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \"field must exist in schema, using indexed=\\\"true\\\" stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not indexed\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","sourceOld":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \"field must exist in schema, using indexed=\\\"true\\\" stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not indexed\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not multiValued\");\n    }\n    \n    return sf;\n  }\n\n","bugFix":["22455f5d09943428acbf15c1bd87ba2cad36c08d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","sourceNew":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \"field must exist in schema, using indexed=\\\"true\\\" stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not indexed\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","sourceOld":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \"field must exist in schema, using indexed=\\\"true\\\" stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not indexed\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not multiValued\");\n    }\n    \n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c5ddc27fe89a674786c6e061b12a39f20fa855","date":1379949250,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","sourceNew":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema, using indexed=\\\"true\\\" stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not indexed\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","sourceOld":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \"field must exist in schema, using indexed=\\\"true\\\" stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not indexed\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","bugFix":["22455f5d09943428acbf15c1bd87ba2cad36c08d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9a4f7e19fcfd1c20f269110eec4ecb7c3228d3b","date":1390857443,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","sourceNew":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema, using indexed=\\\"true\\\" or docValues=\\\"true\\\", stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" must be either indexed or have docValues\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","sourceOld":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema, using indexed=\\\"true\\\" stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not indexed\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c388d280af701341487117f1ba42c38838ba9e91","date":1457723437,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","sourceNew":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema and be searchable (indexed or docValues) and retrievable(stored or docValues) and not multiValued\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not searchable\");\n    }\n    if ( !sf.stored() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not retrievable\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","sourceOld":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema, using indexed=\\\"true\\\" or docValues=\\\"true\\\", stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" must be either indexed or have docValues\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575856a9f007b9c35d0113c9e18151b554709ef2","date":1457776622,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","sourceNew":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema and be searchable (indexed or docValues) and retrievable(stored or docValues) and not multiValued\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not searchable\");\n    }\n    if ( !sf.stored() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not retrievable\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","sourceOld":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema, using indexed=\\\"true\\\" or docValues=\\\"true\\\", stored=\\\"true\\\" and multiValued=\\\"false\\\"\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" must be either indexed or have docValues\");\n    }\n    if ( !sf.stored() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is not stored\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","sourceNew":"  /**\n   * Gets and returns the {@link org.apache.solr.common.params.CommonParams#VERSION_FIELD} from the specified\n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema and be searchable (indexed or docValues) and retrievable(stored or docValues) and not multiValued\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not searchable\");\n    }\n    if ( !sf.stored() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not retrievable\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","sourceOld":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema and be searchable (indexed or docValues) and retrievable(stored or docValues) and not multiValued\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not searchable\");\n    }\n    if ( !sf.stored() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not retrievable\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/VersionInfo#getAndCheckVersionField(IndexSchema).mjava","sourceNew":"  /**\n   * Gets and returns the {@link org.apache.solr.common.params.CommonParams#VERSION_FIELD} from the specified\n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema and be searchable (indexed or docValues) and retrievable(stored or docValues) and not multiValued\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not searchable\");\n    }\n    if ( !sf.stored() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not retrievable\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","sourceOld":"  /**\n   * Gets and returns the {@link #VERSION_FIELD} from the specified \n   * schema, after verifying that it is indexed, stored, and single-valued.  \n   * If any of these pre-conditions are not met, it throws a SolrException \n   * with a user suitable message indicating the problem.\n   */\n  public static SchemaField getAndCheckVersionField(IndexSchema schema) \n    throws SolrException {\n    final String errPrefix = VERSION_FIELD + \" field must exist in schema and be searchable (indexed or docValues) and retrievable(stored or docValues) and not multiValued\";\n    SchemaField sf = schema.getFieldOrNull(VERSION_FIELD);\n\n    if (null == sf) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" does not exist)\");\n    }\n    if ( !sf.indexed() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not searchable\");\n    }\n    if ( !sf.stored() && !sf.hasDocValues()) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" not retrievable\");\n    }\n    if ( sf.multiValued() ) {\n      throw new SolrException\n        (SolrException.ErrorCode.SERVER_ERROR, \n         errPrefix + \" (\" + VERSION_FIELD + \" is multiValued\");\n    }\n    \n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["575856a9f007b9c35d0113c9e18151b554709ef2"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["22455f5d09943428acbf15c1bd87ba2cad36c08d","841556cc1007b83c1c72ffce498c6b0e6f5e55be"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","22455f5d09943428acbf15c1bd87ba2cad36c08d"],"841556cc1007b83c1c72ffce498c6b0e6f5e55be":["22455f5d09943428acbf15c1bd87ba2cad36c08d"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["575856a9f007b9c35d0113c9e18151b554709ef2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575856a9f007b9c35d0113c9e18151b554709ef2":["b9a4f7e19fcfd1c20f269110eec4ecb7c3228d3b","c388d280af701341487117f1ba42c38838ba9e91"],"07c5ddc27fe89a674786c6e061b12a39f20fa855":["841556cc1007b83c1c72ffce498c6b0e6f5e55be"],"22455f5d09943428acbf15c1bd87ba2cad36c08d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9a4f7e19fcfd1c20f269110eec4ecb7c3228d3b":["07c5ddc27fe89a674786c6e061b12a39f20fa855"],"c388d280af701341487117f1ba42c38838ba9e91":["b9a4f7e19fcfd1c20f269110eec4ecb7c3228d3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"001b25b42373b22a52f399dbf072f1224632e8e6":[],"841556cc1007b83c1c72ffce498c6b0e6f5e55be":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","07c5ddc27fe89a674786c6e061b12a39f20fa855"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","22455f5d09943428acbf15c1bd87ba2cad36c08d"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"575856a9f007b9c35d0113c9e18151b554709ef2":["e5fa6615014cd2288fe930f8c8bb726f9504961d","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"22455f5d09943428acbf15c1bd87ba2cad36c08d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","001b25b42373b22a52f399dbf072f1224632e8e6","841556cc1007b83c1c72ffce498c6b0e6f5e55be"],"07c5ddc27fe89a674786c6e061b12a39f20fa855":["b9a4f7e19fcfd1c20f269110eec4ecb7c3228d3b"],"b9a4f7e19fcfd1c20f269110eec4ecb7c3228d3b":["575856a9f007b9c35d0113c9e18151b554709ef2","c388d280af701341487117f1ba42c38838ba9e91"],"c388d280af701341487117f1ba42c38838ba9e91":["575856a9f007b9c35d0113c9e18151b554709ef2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}