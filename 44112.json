{"path":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef).mjava","commits":[{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef,boolean).mjava","sourceNew":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum.\n   */\n  private void bottomChanged(BytesRef lastTerm) throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // true if the last term encountered is lexicographically equal or after the bottom term in the PQ\n    boolean termAfter = bottomTerm == null || (lastTerm != null && lastTerm.compareTo(bottomTerm) >= 0);\n\n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0) {\n      float maxBoost = 1.0f - ((float) maxEdits / (float) termLength);\n      if (bottom < maxBoost || (bottom == maxBoost && termAfter == false)) {\n        break;\n      }\n      maxEdits--;\n    }\n\n    // TODO: this opto could be improved, e.g. if the worst term in the queue is zzzz with ed=2, then, really, on the next segment, we\n    // should only be looking for ed=1 terms up until zzzz, then ed=2.  Tricky :)\n    \n    if (oldMaxEdits != maxEdits || lastTerm == null) {\n      // This is a very powerful optimization: the maximum edit distance has changed.  This happens because we collect only the top scoring\n      // N (= 50, by default) terms, and if e.g. maxEdits=2, and the queue is now full of matching terms, and we notice that the worst entry\n      // in that queue is ed=1, then we can switch the automata here to ed=1 which is a big speedup.\n      actualEnum = getAutomatonEnum(maxEdits, lastTerm);\n    }\n  }\n\n","sourceOld":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum\n   */\n  private void bottomChanged(BytesRef lastTerm, boolean init)\n      throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // true if the last term encountered is lexicographically equal or after the bottom term in the PQ\n    boolean termAfter = bottomTerm == null || (lastTerm != null && lastTerm.compareTo(bottomTerm) >= 0);\n\n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0 && (termAfter ? bottom >= calculateMaxBoost(maxEdits) : bottom > calculateMaxBoost(maxEdits)))\n      maxEdits--;\n    \n    if (oldMaxEdits != maxEdits || init) { // the maximum n has changed\n      maxEditDistanceChanged(lastTerm, maxEdits, init);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef,boolean).mjava","sourceNew":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum.\n   */\n  private void bottomChanged(BytesRef lastTerm) throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // true if the last term encountered is lexicographically equal or after the bottom term in the PQ\n    boolean termAfter = bottomTerm == null || (lastTerm != null && lastTerm.compareTo(bottomTerm) >= 0);\n\n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0) {\n      float maxBoost = 1.0f - ((float) maxEdits / (float) termLength);\n      if (bottom < maxBoost || (bottom == maxBoost && termAfter == false)) {\n        break;\n      }\n      maxEdits--;\n    }\n\n    // TODO: this opto could be improved, e.g. if the worst term in the queue is zzzz with ed=2, then, really, on the next segment, we\n    // should only be looking for ed=1 terms up until zzzz, then ed=2.  Tricky :)\n    \n    if (oldMaxEdits != maxEdits || lastTerm == null) {\n      // This is a very powerful optimization: the maximum edit distance has changed.  This happens because we collect only the top scoring\n      // N (= 50, by default) terms, and if e.g. maxEdits=2, and the queue is now full of matching terms, and we notice that the worst entry\n      // in that queue is ed=1, then we can switch the automata here to ed=1 which is a big speedup.\n      actualEnum = getAutomatonEnum(maxEdits, lastTerm);\n    }\n  }\n\n","sourceOld":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum\n   */\n  private void bottomChanged(BytesRef lastTerm, boolean init)\n      throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // true if the last term encountered is lexicographically equal or after the bottom term in the PQ\n    boolean termAfter = bottomTerm == null || (lastTerm != null && lastTerm.compareTo(bottomTerm) >= 0);\n\n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0 && (termAfter ? bottom >= calculateMaxBoost(maxEdits) : bottom > calculateMaxBoost(maxEdits)))\n      maxEdits--;\n    \n    if (oldMaxEdits != maxEdits || init) { // the maximum n has changed\n      maxEditDistanceChanged(lastTerm, maxEdits, init);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d3dec8619cc5a67c810bd49ad697d0170a32637","date":1473965066,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef).mjava","sourceNew":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum.\n   */\n  private void bottomChanged(BytesRef lastTerm) throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // true if the last term encountered is lexicographically equal or after the bottom term in the PQ\n    boolean termAfter = bottomTerm == null || (lastTerm != null && lastTerm.compareTo(bottomTerm) >= 0);\n\n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0) {\n      float maxBoost = 1.0f - ((float) maxEdits / (float) termLength);\n      if (bottom < maxBoost || (bottom == maxBoost && termAfter == false)) {\n        break;\n      }\n      maxEdits--;\n    }\n\n    if (oldMaxEdits != maxEdits || lastTerm == null) {\n      // This is a very powerful optimization: the maximum edit distance has changed.  This happens because we collect only the top scoring\n      // N (= 50, by default) terms, and if e.g. maxEdits=2, and the queue is now full of matching terms, and we notice that the worst entry\n      // in that queue is ed=1, then we can switch the automata here to ed=1 which is a big speedup.\n      actualEnum = getAutomatonEnum(maxEdits, lastTerm);\n    }\n  }\n\n","sourceOld":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum.\n   */\n  private void bottomChanged(BytesRef lastTerm) throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // true if the last term encountered is lexicographically equal or after the bottom term in the PQ\n    boolean termAfter = bottomTerm == null || (lastTerm != null && lastTerm.compareTo(bottomTerm) >= 0);\n\n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0) {\n      float maxBoost = 1.0f - ((float) maxEdits / (float) termLength);\n      if (bottom < maxBoost || (bottom == maxBoost && termAfter == false)) {\n        break;\n      }\n      maxEdits--;\n    }\n\n    // TODO: this opto could be improved, e.g. if the worst term in the queue is zzzz with ed=2, then, really, on the next segment, we\n    // should only be looking for ed=1 terms up until zzzz, then ed=2.  Tricky :)\n    \n    if (oldMaxEdits != maxEdits || lastTerm == null) {\n      // This is a very powerful optimization: the maximum edit distance has changed.  This happens because we collect only the top scoring\n      // N (= 50, by default) terms, and if e.g. maxEdits=2, and the queue is now full of matching terms, and we notice that the worst entry\n      // in that queue is ed=1, then we can switch the automata here to ed=1 which is a big speedup.\n      actualEnum = getAutomatonEnum(maxEdits, lastTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum.\n   */\n  private void bottomChanged(BytesRef lastTerm) throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // true if the last term encountered is lexicographically equal or after the bottom term in the PQ\n    boolean termAfter = bottomTerm == null || (lastTerm != null && lastTerm.compareTo(bottomTerm) >= 0);\n\n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0) {\n      float maxBoost = 1.0f - ((float) maxEdits / (float) termLength);\n      if (bottom < maxBoost || (bottom == maxBoost && termAfter == false)) {\n        break;\n      }\n      maxEdits--;\n    }\n\n    if (oldMaxEdits != maxEdits || lastTerm == null) {\n      // This is a very powerful optimization: the maximum edit distance has changed.  This happens because we collect only the top scoring\n      // N (= 50, by default) terms, and if e.g. maxEdits=2, and the queue is now full of matching terms, and we notice that the worst entry\n      // in that queue is ed=1, then we can switch the automata here to ed=1 which is a big speedup.\n      actualEnum = getAutomatonEnum(maxEdits, lastTerm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#bottomChanged(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * fired when the max non-competitive boost has changed. this is the hook to\n   * swap in a smarter actualEnum.\n   */\n  private void bottomChanged(BytesRef lastTerm) throws IOException {\n    int oldMaxEdits = maxEdits;\n    \n    // true if the last term encountered is lexicographically equal or after the bottom term in the PQ\n    boolean termAfter = bottomTerm == null || (lastTerm != null && lastTerm.compareTo(bottomTerm) >= 0);\n\n    // as long as the max non-competitive boost is >= the max boost\n    // for some edit distance, keep dropping the max edit distance.\n    while (maxEdits > 0) {\n      float maxBoost = 1.0f - ((float) maxEdits / (float) termLength);\n      if (bottom < maxBoost || (bottom == maxBoost && termAfter == false)) {\n        break;\n      }\n      maxEdits--;\n    }\n\n    if (oldMaxEdits != maxEdits || lastTerm == null) {\n      // This is a very powerful optimization: the maximum edit distance has changed.  This happens because we collect only the top scoring\n      // N (= 50, by default) terms, and if e.g. maxEdits=2, and the queue is now full of matching terms, and we notice that the worst entry\n      // in that queue is ed=1, then we can switch the automata here to ed=1 which is a big speedup.\n      actualEnum = getAutomatonEnum(maxEdits, lastTerm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d3dec8619cc5a67c810bd49ad697d0170a32637":["89424def13674ea17829b41c5883c54ecc31a132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d3dec8619cc5a67c810bd49ad697d0170a32637"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"7d3dec8619cc5a67c810bd49ad697d0170a32637":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["7d3dec8619cc5a67c810bd49ad697d0170a32637"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}