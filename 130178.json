{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","commits":[{"id":"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","date":1498109521,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024c78dd4c15dee30a69bfc8093aef62ee9d49ce","date":1498193234,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    if(root == null) return null;\n    if(!isMapLike(root)) throw new RuntimeException(\"must be a Map or NamedList\");\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Map,boolean,String).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Map root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    if (hierarchy == null) return getObjectByPath(root, onlyPrimitive, singletonList(null));\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f90164e4baf99ca8e0d459a85e1c359ccad769","date":1558579809,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getObjectByPath(Object,boolean,String).mjava","sourceNew":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    if (hierarchy == null) return getObjectByPath(root, onlyPrimitive, singletonList(null));\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/', true);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","sourceOld":"  public static Object getObjectByPath(Object root, boolean onlyPrimitive, String hierarchy) {\n    if (hierarchy == null) return getObjectByPath(root, onlyPrimitive, singletonList(null));\n    List<String> parts = StrUtils.splitSmart(hierarchy, '/');\n    if (parts.get(0).isEmpty()) parts.remove(0);\n    return getObjectByPath(root, onlyPrimitive, parts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51f90164e4baf99ca8e0d459a85e1c359ccad769":["6428b274f6593f368c4f838379620e7f5d196d65"],"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6428b274f6593f368c4f838379620e7f5d196d65":["28288370235ed02234a64753cdbf0c6ec096304a"],"024c78dd4c15dee30a69bfc8093aef62ee9d49ce":["d4a9a892a743a560d17851cd4ce6cb0aaa2d8712"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","024c78dd4c15dee30a69bfc8093aef62ee9d49ce"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","024c78dd4c15dee30a69bfc8093aef62ee9d49ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f90164e4baf99ca8e0d459a85e1c359ccad769"]},"commit2Childs":{"51f90164e4baf99ca8e0d459a85e1c359ccad769":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4a9a892a743a560d17851cd4ce6cb0aaa2d8712":["024c78dd4c15dee30a69bfc8093aef62ee9d49ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4a9a892a743a560d17851cd4ce6cb0aaa2d8712","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"6428b274f6593f368c4f838379620e7f5d196d65":["51f90164e4baf99ca8e0d459a85e1c359ccad769"],"024c78dd4c15dee30a69bfc8093aef62ee9d49ce":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["6428b274f6593f368c4f838379620e7f5d196d65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}