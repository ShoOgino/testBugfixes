{"path":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#checkCoreProps(Properties,String...).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#checkCoreProps(Properties,String...).mjava","pathOld":"/dev/null","sourceNew":"  // Insure that the properties in the core passed in are exactly what's in the default core.properties below plus\n  // whatever extra is passed in.\n  void checkCoreProps(Properties orig, String... extraProps) throws Exception {\n    // Read the persisted file.\n    Properties props = new Properties();\n    File propParent = new File(solrHomeDirectory, orig.getProperty(CoreDescriptor.CORE_NAME));\n    props.load(new FileInputStream(new File(propParent, SolrProperties.CORE_PROP_FILE)));\n    Set<String> propSet = props.stringPropertyNames();\n\n    assertEquals(\"Persisted properties should NOT contain extra properties\", propSet.size(), orig.size());\n\n    for (String prop : orig.stringPropertyNames()) {\n      assertEquals(\"Original and new properties should be equal for \" + prop, props.getProperty(prop), orig.getProperty(prop));\n    }\n    for (String prop : extraProps) {\n      String[] pair = prop.split(\"=\");\n      assertNull(\"Modified parameters should not be present for \" + prop, props.getProperty(pair[0]));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f932f4f1026b6902f7a69ce428340678e26a6a0","date":1362349021,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#checkCoreProps(Properties,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#checkCoreProps(Properties,String...).mjava","sourceNew":"  // Insure that the properties in the core passed in are exactly what's in the default core.properties below plus\n  // whatever extra is passed in.\n  void checkCoreProps(Properties orig, String... extraProps) throws Exception {\n    // Read the persisted file.\n    Properties props = new Properties();\n    File propParent = new File(solrHomeDirectory, orig.getProperty(CoreDescriptor.CORE_NAME));\n    FileInputStream in = new FileInputStream(new File(propParent, SolrProperties.CORE_PROP_FILE));\n    try {\n      props.load(in);\n    } finally {\n      in.close();\n    }\n    Set<String> propSet = props.stringPropertyNames();\n\n    assertEquals(\"Persisted properties should NOT contain extra properties\", propSet.size(), orig.size());\n\n    for (String prop : orig.stringPropertyNames()) {\n      assertEquals(\"Original and new properties should be equal for \" + prop, props.getProperty(prop), orig.getProperty(prop));\n    }\n    for (String prop : extraProps) {\n      String[] pair = prop.split(\"=\");\n      assertNull(\"Modified parameters should not be present for \" + prop, props.getProperty(pair[0]));\n    }\n  }\n\n","sourceOld":"  // Insure that the properties in the core passed in are exactly what's in the default core.properties below plus\n  // whatever extra is passed in.\n  void checkCoreProps(Properties orig, String... extraProps) throws Exception {\n    // Read the persisted file.\n    Properties props = new Properties();\n    File propParent = new File(solrHomeDirectory, orig.getProperty(CoreDescriptor.CORE_NAME));\n    props.load(new FileInputStream(new File(propParent, SolrProperties.CORE_PROP_FILE)));\n    Set<String> propSet = props.stringPropertyNames();\n\n    assertEquals(\"Persisted properties should NOT contain extra properties\", propSet.size(), orig.size());\n\n    for (String prop : orig.stringPropertyNames()) {\n      assertEquals(\"Original and new properties should be equal for \" + prop, props.getProperty(prop), orig.getProperty(prop));\n    }\n    for (String prop : extraProps) {\n      String[] pair = prop.split(\"=\");\n      assertNull(\"Modified parameters should not be present for \" + prop, props.getProperty(pair[0]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#checkCoreProps(Properties,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrDiscoveryProperties#checkCoreProps(Properties,String...).mjava","sourceNew":"  // Insure that the properties in the core passed in are exactly what's in the default core.properties below plus\n  // whatever extra is passed in.\n  void checkCoreProps(Properties orig, String... extraProps) throws Exception {\n    // Read the persisted file.\n    Properties props = new Properties();\n    File propParent = new File(solrHomeDirectory, orig.getProperty(CoreDescriptor.CORE_NAME));\n    FileInputStream in = new FileInputStream(new File(propParent, ConfigSolr.CORE_PROP_FILE));\n    try {\n      props.load(in);\n    } finally {\n      in.close();\n    }\n    Set<String> propSet = props.stringPropertyNames();\n\n    assertEquals(\"Persisted properties should NOT contain extra properties\", propSet.size(), orig.size());\n\n    for (String prop : orig.stringPropertyNames()) {\n      assertEquals(\"Original and new properties should be equal for \" + prop, props.getProperty(prop), orig.getProperty(prop));\n    }\n    for (String prop : extraProps) {\n      String[] pair = prop.split(\"=\");\n      assertNull(\"Modified parameters should not be present for \" + prop, props.getProperty(pair[0]));\n    }\n  }\n\n","sourceOld":"  // Insure that the properties in the core passed in are exactly what's in the default core.properties below plus\n  // whatever extra is passed in.\n  void checkCoreProps(Properties orig, String... extraProps) throws Exception {\n    // Read the persisted file.\n    Properties props = new Properties();\n    File propParent = new File(solrHomeDirectory, orig.getProperty(CoreDescriptor.CORE_NAME));\n    FileInputStream in = new FileInputStream(new File(propParent, SolrProperties.CORE_PROP_FILE));\n    try {\n      props.load(in);\n    } finally {\n      in.close();\n    }\n    Set<String> propSet = props.stringPropertyNames();\n\n    assertEquals(\"Persisted properties should NOT contain extra properties\", propSet.size(), orig.size());\n\n    for (String prop : orig.stringPropertyNames()) {\n      assertEquals(\"Original and new properties should be equal for \" + prop, props.getProperty(prop), orig.getProperty(prop));\n    }\n    for (String prop : extraProps) {\n      String[] pair = prop.split(\"=\");\n      assertNull(\"Modified parameters should not be present for \" + prop, props.getProperty(pair[0]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["4f932f4f1026b6902f7a69ce428340678e26a6a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f932f4f1026b6902f7a69ce428340678e26a6a0":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"4f932f4f1026b6902f7a69ce428340678e26a6a0":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"a837c064b67fa63a9394136e31218b908cdcf783":["4f932f4f1026b6902f7a69ce428340678e26a6a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}