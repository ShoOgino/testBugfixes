{"path":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readCharacterDefinition(String,UnknownDictionaryWriter).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readCharacterDefinition(String,UnknownDictionaryWriter).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readCharacterDefinition(String,UnknownDictionaryWriter).mjava","sourceNew":"  public void readCharacterDefinition(String filename, UnknownDictionaryWriter dictionary) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, encoding);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = null;\n    \n    while ((line = lineReader.readLine()) != null) {\n      line = line.replaceAll(\"^\\\\s\", \"\");\n      line = line.replaceAll(\"\\\\s*#.*\", \"\");\n      line = line.replaceAll(\"\\\\s+\", \" \");\n      \n      // Skip empty line or comment line\n      if(line.length() == 0) {\n        continue;\n      }\n      \n      if(line.startsWith(\"0x\")) {\t// Category mapping\n        String[] values = line.split(\" \", 2);\t// Split only first space\n        \n        if(!values[0].contains(\"..\")) {\n          int cp = Integer.decode(values[0]).intValue();\n          dictionary.putCharacterCategory(cp, values[1]);\t\t\t\t\t\n        } else {\n          String[] codePoints = values[0].split(\"\\\\.\\\\.\");\n          int cpFrom = Integer.decode(codePoints[0]).intValue();\n          int cpTo = Integer.decode(codePoints[1]).intValue();\n          \n          for(int i = cpFrom; i <= cpTo; i++){\n            dictionary.putCharacterCategory(i, values[1]);\t\t\t\t\t\n          }\n        }\n      } else {\t// Invoke definition\n        String[] values = line.split(\" \"); // Consecutive space is merged above\n        String characterClassName = values[0];\n        int invoke = Integer.parseInt(values[1]);\n        int group = Integer.parseInt(values[2]);\n        int length = Integer.parseInt(values[3]);\n        dictionary.putInvokeDefinition(characterClassName, invoke, group, length);\n      }\n    }\n  }\n\n","sourceOld":"  public void readCharacterDefinition(String filename, UnknownDictionaryWriter dictionary) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, encoding);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = null;\n    \n    while ((line = lineReader.readLine()) != null) {\n      line = line.replaceAll(\"^\\\\s\", \"\");\n      line = line.replaceAll(\"\\\\s*#.*\", \"\");\n      line = line.replaceAll(\"\\\\s+\", \" \");\n      \n      // Skip empty line or comment line\n      if(line.length() == 0) {\n        continue;\n      }\n      \n      if(line.startsWith(\"0x\")) {\t// Category mapping\n        String[] values = line.split(\" \", 2);\t// Split only first space\n        \n        if(!values[0].contains(\"..\")) {\n          int cp = Integer.decode(values[0]).intValue();\n          dictionary.putCharacterCategory(cp, values[1]);\t\t\t\t\t\n        } else {\n          String[] codePoints = values[0].split(\"\\\\.\\\\.\");\n          int cpFrom = Integer.decode(codePoints[0]).intValue();\n          int cpTo = Integer.decode(codePoints[1]).intValue();\n          \n          for(int i = cpFrom; i <= cpTo; i++){\n            dictionary.putCharacterCategory(i, values[1]);\t\t\t\t\t\n          }\n        }\n      } else {\t// Invoke definition\n        String[] values = line.split(\" \"); // Consecutive space is merged above\n        String characterClassName = values[0];\n        int invoke = Integer.parseInt(values[1]);\n        int group = Integer.parseInt(values[2]);\n        int length = Integer.parseInt(values[3]);\n        dictionary.putInvokeDefinition(characterClassName, invoke, group, length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readCharacterDefinition(String,UnknownDictionaryWriter).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readCharacterDefinition(String,UnknownDictionaryWriter).mjava","sourceNew":"  public void readCharacterDefinition(String filename, UnknownDictionaryWriter dictionary) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, encoding);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = null;\n    \n    while ((line = lineReader.readLine()) != null) {\n      line = line.replaceAll(\"^\\\\s\", \"\");\n      line = line.replaceAll(\"\\\\s*#.*\", \"\");\n      line = line.replaceAll(\"\\\\s+\", \" \");\n      \n      // Skip empty line or comment line\n      if(line.length() == 0) {\n        continue;\n      }\n      \n      if(line.startsWith(\"0x\")) {  // Category mapping\n        String[] values = line.split(\" \", 2);  // Split only first space\n        \n        if(!values[0].contains(\"..\")) {\n          int cp = Integer.decode(values[0]).intValue();\n          dictionary.putCharacterCategory(cp, values[1]);\n        } else {\n          String[] codePoints = values[0].split(\"\\\\.\\\\.\");\n          int cpFrom = Integer.decode(codePoints[0]).intValue();\n          int cpTo = Integer.decode(codePoints[1]).intValue();\n          \n          for(int i = cpFrom; i <= cpTo; i++){\n            dictionary.putCharacterCategory(i, values[1]);\n          }\n        }\n      } else {  // Invoke definition\n        String[] values = line.split(\" \"); // Consecutive space is merged above\n        String characterClassName = values[0];\n        int invoke = Integer.parseInt(values[1]);\n        int group = Integer.parseInt(values[2]);\n        int length = Integer.parseInt(values[3]);\n        dictionary.putInvokeDefinition(characterClassName, invoke, group, length);\n      }\n    }\n  }\n\n","sourceOld":"  public void readCharacterDefinition(String filename, UnknownDictionaryWriter dictionary) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, encoding);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = null;\n    \n    while ((line = lineReader.readLine()) != null) {\n      line = line.replaceAll(\"^\\\\s\", \"\");\n      line = line.replaceAll(\"\\\\s*#.*\", \"\");\n      line = line.replaceAll(\"\\\\s+\", \" \");\n      \n      // Skip empty line or comment line\n      if(line.length() == 0) {\n        continue;\n      }\n      \n      if(line.startsWith(\"0x\")) {\t// Category mapping\n        String[] values = line.split(\" \", 2);\t// Split only first space\n        \n        if(!values[0].contains(\"..\")) {\n          int cp = Integer.decode(values[0]).intValue();\n          dictionary.putCharacterCategory(cp, values[1]);\t\t\t\t\t\n        } else {\n          String[] codePoints = values[0].split(\"\\\\.\\\\.\");\n          int cpFrom = Integer.decode(codePoints[0]).intValue();\n          int cpTo = Integer.decode(codePoints[1]).intValue();\n          \n          for(int i = cpFrom; i <= cpTo; i++){\n            dictionary.putCharacterCategory(i, values[1]);\t\t\t\t\t\n          }\n        }\n      } else {\t// Invoke definition\n        String[] values = line.split(\" \"); // Consecutive space is merged above\n        String characterClassName = values[0];\n        int invoke = Integer.parseInt(values[1]);\n        int group = Integer.parseInt(values[2]);\n        int length = Integer.parseInt(values[3]);\n        dictionary.putInvokeDefinition(characterClassName, invoke, group, length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05feb7eb5e91cb64742ce32b2ca3f02433530446","date":1561602840,"type":4,"author":"Michael Sokolov","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder#readCharacterDefinition(String,UnknownDictionaryWriter).mjava","sourceNew":null,"sourceOld":"  public void readCharacterDefinition(String filename, UnknownDictionaryWriter dictionary) throws IOException {\n    FileInputStream inputStream = new FileInputStream(filename);\n    InputStreamReader streamReader = new InputStreamReader(inputStream, encoding);\n    LineNumberReader lineReader = new LineNumberReader(streamReader);\n    \n    String line = null;\n    \n    while ((line = lineReader.readLine()) != null) {\n      line = line.replaceAll(\"^\\\\s\", \"\");\n      line = line.replaceAll(\"\\\\s*#.*\", \"\");\n      line = line.replaceAll(\"\\\\s+\", \" \");\n      \n      // Skip empty line or comment line\n      if(line.length() == 0) {\n        continue;\n      }\n      \n      if(line.startsWith(\"0x\")) {  // Category mapping\n        String[] values = line.split(\" \", 2);  // Split only first space\n        \n        if(!values[0].contains(\"..\")) {\n          int cp = Integer.decode(values[0]).intValue();\n          dictionary.putCharacterCategory(cp, values[1]);\n        } else {\n          String[] codePoints = values[0].split(\"\\\\.\\\\.\");\n          int cpFrom = Integer.decode(codePoints[0]).intValue();\n          int cpTo = Integer.decode(codePoints[1]).intValue();\n          \n          for(int i = cpFrom; i <= cpTo; i++){\n            dictionary.putCharacterCategory(i, values[1]);\n          }\n        }\n      } else {  // Invoke definition\n        String[] values = line.split(\" \"); // Consecutive space is merged above\n        String characterClassName = values[0];\n        int invoke = Integer.parseInt(values[1]);\n        int group = Integer.parseInt(values[2]);\n        int length = Integer.parseInt(values[3]);\n        dictionary.putInvokeDefinition(characterClassName, invoke, group, length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}