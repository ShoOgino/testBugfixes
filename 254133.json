{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","commits":[{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NumericDocValues getNorms(FieldInfo field) throws IOException {\n    final NormsEntry entry = norms.get(field.number);\n\n    if (entry.bytesPerValue == 0) {\n      final long value = entry.offset;\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return value;\n        }\n      };\n    }\n\n    RandomAccessInput slice;\n    synchronized (data) {\n      switch (entry.bytesPerValue) {\n        case 1: \n          slice = data.randomAccessSlice(entry.offset, maxDoc);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readByte(docID);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 2: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 2L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readShort(((long)docID) << 1L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 4: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 4L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readInt(((long)docID) << 2L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 8: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 8L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readLong(((long)docID) << 3L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNorms(FieldInfo field) throws IOException {\n    final NormsEntry entry = norms.get(field.number);\n\n    LegacyNumericDocValues norms;\n\n    if (entry.bytesPerValue == 0) {\n      final long value = entry.offset;\n      norms = new LegacyNumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return value;\n          }\n        };\n    } else {\n      RandomAccessInput slice;\n      synchronized (data) {\n        switch (entry.bytesPerValue) {\n        case 1: \n          slice = data.randomAccessSlice(entry.offset, maxDoc);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readByte(docID);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        case 2: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 2L);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readShort(((long)docID) << 1L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        case 4: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 4L);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readInt(((long)docID) << 2L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        case 8: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 8L);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readLong(((long)docID) << 3L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        default:\n          throw new AssertionError();\n        }\n      }\n    }\n\n    return new LegacyNumericDocValuesWrapper(new Bits.MatchAllBits(maxDoc), norms);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNorms(FieldInfo field) throws IOException {\n    final NormsEntry entry = norms.get(field.number);\n\n    if (entry.bytesPerValue == 0) {\n      final long value = entry.offset;\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return value;\n        }\n      };\n    }\n\n    RandomAccessInput slice;\n    synchronized (data) {\n      switch (entry.bytesPerValue) {\n        case 1: \n          slice = data.randomAccessSlice(entry.offset, maxDoc);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readByte(docID);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 2: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 2L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readShort(((long)docID) << 1L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 4: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 4L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readInt(((long)docID) << 2L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 8: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 8L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readLong(((long)docID) << 3L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNorms(FieldInfo field) throws IOException {\n    final NormsEntry entry = norms.get(field.number);\n\n    LegacyNumericDocValues norms;\n\n    if (entry.bytesPerValue == 0) {\n      final long value = entry.offset;\n      norms = new LegacyNumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return value;\n          }\n        };\n    } else {\n      RandomAccessInput slice;\n      synchronized (data) {\n        switch (entry.bytesPerValue) {\n        case 1: \n          slice = data.randomAccessSlice(entry.offset, maxDoc);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readByte(docID);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        case 2: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 2L);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readShort(((long)docID) << 1L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        case 4: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 4L);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readInt(((long)docID) << 2L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        case 8: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 8L);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readLong(((long)docID) << 3L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        default:\n          throw new AssertionError();\n        }\n      }\n    }\n\n    return new LegacyNumericDocValuesWrapper(new Bits.MatchAllBits(maxDoc), norms);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNorms(FieldInfo field) throws IOException {\n    final NormsEntry entry = norms.get(field.number);\n\n    if (entry.bytesPerValue == 0) {\n      final long value = entry.offset;\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return value;\n        }\n      };\n    }\n\n    RandomAccessInput slice;\n    synchronized (data) {\n      switch (entry.bytesPerValue) {\n        case 1: \n          slice = data.randomAccessSlice(entry.offset, maxDoc);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readByte(docID);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 2: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 2L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readShort(((long)docID) << 1L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 4: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 4L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readInt(((long)docID) << 2L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 8: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 8L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readLong(((long)docID) << 3L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d217880fb207e1a26143863d06cf461c7cabeec","date":1475691535,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNorms(FieldInfo field) throws IOException {\n    final NormsEntry entry = norms.get(field.number);\n\n    if (entry.bytesPerValue == 0) {\n      final long value = entry.offset;\n      return new NormsIterator(maxDoc) {\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    } else {\n      RandomAccessInput slice;\n      synchronized (data) {\n        switch (entry.bytesPerValue) {\n        case 1: \n          slice = data.randomAccessSlice(entry.offset, maxDoc);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readByte(docID);\n            }\n          };\n        case 2: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 2L);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readShort(((long)docID) << 1L);\n            }\n          };\n        case 4: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 4L);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readInt(((long)docID) << 2L);\n            }\n          };\n        case 8: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 8L);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readLong(((long)docID) << 3L);\n            }\n          };\n        default:\n          throw new AssertionError();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNorms(FieldInfo field) throws IOException {\n    final NormsEntry entry = norms.get(field.number);\n\n    LegacyNumericDocValues norms;\n\n    if (entry.bytesPerValue == 0) {\n      final long value = entry.offset;\n      norms = new LegacyNumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return value;\n          }\n        };\n    } else {\n      RandomAccessInput slice;\n      synchronized (data) {\n        switch (entry.bytesPerValue) {\n        case 1: \n          slice = data.randomAccessSlice(entry.offset, maxDoc);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readByte(docID);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        case 2: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 2L);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readShort(((long)docID) << 1L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        case 4: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 4L);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readInt(((long)docID) << 2L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        case 8: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 8L);\n          norms = new LegacyNumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readLong(((long)docID) << 3L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n          break;\n        default:\n          throw new AssertionError();\n        }\n      }\n    }\n\n    return new LegacyNumericDocValuesWrapper(new Bits.MatchAllBits(maxDoc), norms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNorms(FieldInfo field) throws IOException {\n    final NormsEntry entry = norms.get(field.number);\n\n    if (entry.bytesPerValue == 0) {\n      final long value = entry.offset;\n      return new NormsIterator(maxDoc) {\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    } else {\n      RandomAccessInput slice;\n      synchronized (data) {\n        switch (entry.bytesPerValue) {\n        case 1: \n          slice = data.randomAccessSlice(entry.offset, maxDoc);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readByte(docID);\n            }\n          };\n        case 2: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 2L);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readShort(((long)docID) << 1L);\n            }\n          };\n        case 4: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 4L);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readInt(((long)docID) << 2L);\n            }\n          };\n        case 8: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 8L);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readLong(((long)docID) << 3L);\n            }\n          };\n        default:\n          throw new AssertionError();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNorms(FieldInfo field) throws IOException {\n    final NormsEntry entry = norms.get(field.number);\n\n    if (entry.bytesPerValue == 0) {\n      final long value = entry.offset;\n      return new NormsIterator(maxDoc) {\n          @Override\n          public long longValue() {\n            return value;\n          }\n        };\n    } else {\n      RandomAccessInput slice;\n      synchronized (data) {\n        switch (entry.bytesPerValue) {\n        case 1: \n          slice = data.randomAccessSlice(entry.offset, maxDoc);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readByte(docID);\n            }\n          };\n        case 2: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 2L);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readShort(((long)docID) << 1L);\n            }\n          };\n        case 4: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 4L);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readInt(((long)docID) << 2L);\n            }\n          };\n        case 8: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 8L);\n          return new NormsIterator(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return slice.readLong(((long)docID) << 3L);\n            }\n          };\n        default:\n          throw new AssertionError();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsProducer#getNorms(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NumericDocValues getNorms(FieldInfo field) throws IOException {\n    final NormsEntry entry = norms.get(field.number);\n\n    if (entry.bytesPerValue == 0) {\n      final long value = entry.offset;\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return value;\n        }\n      };\n    }\n\n    RandomAccessInput slice;\n    synchronized (data) {\n      switch (entry.bytesPerValue) {\n        case 1: \n          slice = data.randomAccessSlice(entry.offset, maxDoc);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readByte(docID);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 2: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 2L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readShort(((long)docID) << 1L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 4: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 4L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readInt(((long)docID) << 2L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        case 8: \n          slice = data.randomAccessSlice(entry.offset, maxDoc * 8L);\n          return new NumericDocValues() {\n            @Override\n            public long get(int docID) {\n              try {\n                return slice.readLong(((long)docID) << 3L);\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          };\n        default:\n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["5d217880fb207e1a26143863d06cf461c7cabeec"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"5d217880fb207e1a26143863d06cf461c7cabeec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5d217880fb207e1a26143863d06cf461c7cabeec"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5d217880fb207e1a26143863d06cf461c7cabeec":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}