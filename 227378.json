{"path":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","commits":[{"id":"db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2","date":1081470871,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into \n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\t\tStringBuffer newText = new StringBuffer();\n\t\t\n\t\tTextFragment[] frag =getBestDocFragments(tokenStream,text, newText, maxNumFragments);\n\n\t\tmergeContiguousFragments(frag);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tint n = 0;\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(\n\t\t\t\t\tnewText.substring(\n\t\t\t\t\t\tfrag[i].textStartPos,\n\t\t\t\t\t\tfrag[i].textEndPos));\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071ff465fbf5c9c916ccaaf73bb8f2112a26de61","date":1092348577,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into \n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\t\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tint n = 0;\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into \n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\t\tStringBuffer newText = new StringBuffer();\n\t\t\n\t\tTextFragment[] frag =getBestDocFragments(tokenStream,text, newText, maxNumFragments);\n\n\t\tmergeContiguousFragments(frag);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tint n = 0;\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(\n\t\t\t\t\tnewText.substring(\n\t\t\t\t\t\tfrag[i].textStartPos,\n\t\t\t\t\t\tfrag[i].textEndPos));\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into \n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\t\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tint n = 0;\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into \n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\t\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\t\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList fragTexts = new ArrayList();\n\t\tint n = 0;\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn (String[]) fragTexts.toArray(new String[0]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["071ff465fbf5c9c916ccaaf73bb8f2112a26de61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"071ff465fbf5c9c916ccaaf73bb8f2112a26de61":["db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2"],"071ff465fbf5c9c916ccaaf73bb8f2112a26de61":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"db2e1c87dfa9ca908febe5b39f6dd3dee2fbe9e2":["071ff465fbf5c9c916ccaaf73bb8f2112a26de61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}