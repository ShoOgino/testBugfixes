{"path":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","commits":[{"id":"1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe","date":1184862468,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","pathOld":"/dev/null","sourceNew":"    byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = (byte[]) singleBuffers.get(new Integer(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(new Integer(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","pathOld":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","sourceNew":"    byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = (byte[]) singleBuffers.get(Integer.valueOf(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(Integer.valueOf(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","sourceOld":"    byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = (byte[]) singleBuffers.get(new Integer(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(new Integer(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","pathOld":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","sourceNew":"    @Override\n    byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = (byte[]) singleBuffers.get(Integer.valueOf(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(Integer.valueOf(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","sourceOld":"    byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = (byte[]) singleBuffers.get(Integer.valueOf(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(Integer.valueOf(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","pathOld":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","sourceNew":"    @Override\n    byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = singleBuffers.get(Integer.valueOf(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(Integer.valueOf(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","sourceOld":"    @Override\n    byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = (byte[]) singleBuffers.get(Integer.valueOf(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(Integer.valueOf(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d55ce084f816da26b3f2797175b2d96431111bcd","date":1267721178,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","pathOld":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","sourceNew":"    @Override\n    protected byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = singleBuffers.get(Integer.valueOf(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(Integer.valueOf(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","sourceOld":"    @Override\n    byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = singleBuffers.get(Integer.valueOf(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(Integer.valueOf(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","pathOld":"src/test/org/apache/lucene/store/TestHugeRamFile.DenseRAMFile#newBuffer(int).mjava","sourceNew":"    @Override\n    protected byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = singleBuffers.get(Integer.valueOf(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(Integer.valueOf(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","sourceOld":"    @Override\n    protected byte[] newBuffer(int size) {\n      capacity += size;\n      if (capacity <= MAX_VALUE) {\n        // below maxint we reuse buffers\n        byte buf[] = singleBuffers.get(Integer.valueOf(size));\n        if (buf==null) {\n          buf = new byte[size]; \n          //System.out.println(\"allocate: \"+size);\n          singleBuffers.put(Integer.valueOf(size),buf);\n        }\n        return buf;\n      }\n      //System.out.println(\"allocate: \"+size); System.out.flush();\n      return new byte[size];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["6bcde5e3f23911110baa101ed062b544162825b5"],"6bcde5e3f23911110baa101ed062b544162825b5":["1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe"],"d55ce084f816da26b3f2797175b2d96431111bcd":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d55ce084f816da26b3f2797175b2d96431111bcd"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"6bcde5e3f23911110baa101ed062b544162825b5":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"d55ce084f816da26b3f2797175b2d96431111bcd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe"],"1acc0d4d75fc7ad1dae131d00a9ffa438b257ebe":["6bcde5e3f23911110baa101ed062b544162825b5"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["d55ce084f816da26b3f2797175b2d96431111bcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}