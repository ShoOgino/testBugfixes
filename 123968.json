{"path":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedWordSetResource#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedWordSetResource#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invoked when loading data from storage to initialize the \n   * list of words managed by this instance. A load of the\n   * data can happen many times throughout the life cycle of this\n   * object.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  protected void onManagedDataLoadedFromStorage(NamedList<?> initArgs, Object data)\n      throws SolrException {\n\n    // the default behavior is to not ignore case,\n    boolean ignoreCase = getIgnoreCase(initArgs);\n    if (null == initArgs.get(IGNORE_CASE_INIT_ARG)) {\n      // Explicitly include the default value of ignoreCase\n      ((NamedList<Object>)initArgs).add(IGNORE_CASE_INIT_ARG, false);\n    }\n\n    managedWords = new TreeSet<>();\n    if (data != null) {\n      List<String> wordList = (List<String>)data;\n      if (ignoreCase) {\n        // if we're ignoring case, just lowercase all terms as we add them\n        for (String word : wordList) {\n          managedWords.add(word.toLowerCase(Locale.ROOT));\n        }\n      } else {\n        managedWords.addAll(wordList);        \n      }\n    }\n    \n    log.info(\"Loaded \"+managedWords.size()+\" words for \"+getResourceId());      \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637230d0125f5aa153298289322945139167ef76","date":1404226166,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedWordSetResource#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedWordSetResource#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"  /**\n   * Invoked when loading data from storage to initialize the \n   * list of words managed by this instance. A load of the\n   * data can happen many times throughout the life cycle of this\n   * object.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  protected void onManagedDataLoadedFromStorage(NamedList<?> initArgs, Object data)\n      throws SolrException {\n\n    // the default behavior is to not ignore case,\n    boolean ignoreCase = getIgnoreCase(initArgs);\n    if (null == initArgs.get(IGNORE_CASE_INIT_ARG)) {\n      // Explicitly include the default value of ignoreCase\n      ((NamedList<Object>)initArgs).add(IGNORE_CASE_INIT_ARG, false);\n    }\n\n    managedWords = new TreeSet<>();\n    if (data != null) {\n      List<String> wordList = (List<String>)data;\n      if (ignoreCase) {\n        // if we're ignoring case, just lowercase all terms as we add them\n        for (String word : wordList) {\n          managedWords.add(word.toLowerCase(Locale.ROOT));\n        }\n      } else {\n        managedWords.addAll(wordList);        \n      }\n    } else {\n      storeManagedData(new ArrayList<String>(0)); // stores an empty word set      \n    }\n    \n    log.info(\"Loaded \"+managedWords.size()+\" words for \"+getResourceId());      \n  }\n\n","sourceOld":"  /**\n   * Invoked when loading data from storage to initialize the \n   * list of words managed by this instance. A load of the\n   * data can happen many times throughout the life cycle of this\n   * object.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  protected void onManagedDataLoadedFromStorage(NamedList<?> initArgs, Object data)\n      throws SolrException {\n\n    // the default behavior is to not ignore case,\n    boolean ignoreCase = getIgnoreCase(initArgs);\n    if (null == initArgs.get(IGNORE_CASE_INIT_ARG)) {\n      // Explicitly include the default value of ignoreCase\n      ((NamedList<Object>)initArgs).add(IGNORE_CASE_INIT_ARG, false);\n    }\n\n    managedWords = new TreeSet<>();\n    if (data != null) {\n      List<String> wordList = (List<String>)data;\n      if (ignoreCase) {\n        // if we're ignoring case, just lowercase all terms as we add them\n        for (String word : wordList) {\n          managedWords.add(word.toLowerCase(Locale.ROOT));\n        }\n      } else {\n        managedWords.addAll(wordList);        \n      }\n    }\n    \n    log.info(\"Loaded \"+managedWords.size()+\" words for \"+getResourceId());      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedWordSetResource#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedWordSetResource#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"  /**\n   * Invoked when loading data from storage to initialize the \n   * list of words managed by this instance. A load of the\n   * data can happen many times throughout the life cycle of this\n   * object.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  protected void onManagedDataLoadedFromStorage(NamedList<?> initArgs, Object data)\n      throws SolrException {\n\n    // the default behavior is to not ignore case,\n    boolean ignoreCase = getIgnoreCase(initArgs);\n    if (null == initArgs.get(IGNORE_CASE_INIT_ARG)) {\n      // Explicitly include the default value of ignoreCase\n      ((NamedList<Object>)initArgs).add(IGNORE_CASE_INIT_ARG, false);\n    }\n\n    managedWords = new TreeSet<>();\n    if (data != null) {\n      List<String> wordList = (List<String>)data;\n      if (ignoreCase) {\n        // if we're ignoring case, just lowercase all terms as we add them\n        for (String word : wordList) {\n          managedWords.add(word.toLowerCase(Locale.ROOT));\n        }\n      } else {\n        managedWords.addAll(wordList);        \n      }\n    } else {\n      storeManagedData(new ArrayList<String>(0)); // stores an empty word set      \n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Loaded {} words for {}\", managedWords.size(), getResourceId());\n    }\n  }\n\n","sourceOld":"  /**\n   * Invoked when loading data from storage to initialize the \n   * list of words managed by this instance. A load of the\n   * data can happen many times throughout the life cycle of this\n   * object.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  protected void onManagedDataLoadedFromStorage(NamedList<?> initArgs, Object data)\n      throws SolrException {\n\n    // the default behavior is to not ignore case,\n    boolean ignoreCase = getIgnoreCase(initArgs);\n    if (null == initArgs.get(IGNORE_CASE_INIT_ARG)) {\n      // Explicitly include the default value of ignoreCase\n      ((NamedList<Object>)initArgs).add(IGNORE_CASE_INIT_ARG, false);\n    }\n\n    managedWords = new TreeSet<>();\n    if (data != null) {\n      List<String> wordList = (List<String>)data;\n      if (ignoreCase) {\n        // if we're ignoring case, just lowercase all terms as we add them\n        for (String word : wordList) {\n          managedWords.add(word.toLowerCase(Locale.ROOT));\n        }\n      } else {\n        managedWords.addAll(wordList);        \n      }\n    } else {\n      storeManagedData(new ArrayList<String>(0)); // stores an empty word set      \n    }\n    \n    log.info(\"Loaded \"+managedWords.size()+\" words for \"+getResourceId());      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"637230d0125f5aa153298289322945139167ef76":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["637230d0125f5aa153298289322945139167ef76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"637230d0125f5aa153298289322945139167ef76":["140be51d03394488536f4aacedace29f9b318347"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["637230d0125f5aa153298289322945139167ef76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}