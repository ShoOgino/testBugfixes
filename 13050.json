{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.reusableTokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, null);\n      TokenStream tokenStream = analyzer.reusableTokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.reusableTokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer;\n      TokenStream tokenStream;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, null);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.reusableTokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, null);\n      TokenStream tokenStream = analyzer.reusableTokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.reusableTokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(reader);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, null);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, null);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(reader);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, null);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(reader);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, null);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cf7efd82433f3f64684711c16edfd149db6af111":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cf7efd82433f3f64684711c16edfd149db6af111","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}