{"path":"lucene/monitor/src/java/org/apache/lucene/monitor/MonitorQuerySerializer#fromParser(Function[String,Query]).mjava","commits":[{"id":"7c529b189e09de25455d82ebd7260748cf11ee14","date":1560415257,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/MonitorQuerySerializer#fromParser(Function[String,Query]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Build a serializer from a query parser\n   *\n   * @param parser a parser to convert a String representation of a query into a lucene query object\n   */\n  static MonitorQuerySerializer fromParser(Function<String, Query> parser) {\n    return new MonitorQuerySerializer() {\n      @Override\n      public MonitorQuery deserialize(BytesRef binaryValue) {\n        ByteArrayInputStream is = new ByteArrayInputStream(binaryValue.bytes);\n        try (InputStreamDataInput data = new InputStreamDataInput(is)) {\n          String id = data.readString();\n          String query = data.readString();\n          Map<String, String> metadata = new HashMap<>();\n          for (int i = data.readInt(); i > 0; i--) {\n            metadata.put(data.readString(), data.readString());\n          }\n          return new MonitorQuery(id, parser.apply(query), query, metadata);\n        } catch (IOException e) {\n          throw new RuntimeException(e);  // shouldn't happen, we're reading from a bytearray!\n        }\n      }\n\n      @Override\n      public BytesRef serialize(MonitorQuery query) {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        try (OutputStreamDataOutput data = new OutputStreamDataOutput(os)) {\n          data.writeString(query.getId());\n          data.writeString(query.getQueryString());\n          data.writeInt(query.getMetadata().size());\n          for (Map.Entry<String, String> entry : query.getMetadata().entrySet()) {\n            data.writeString(entry.getKey());\n            data.writeString(entry.getValue());\n          }\n          return new BytesRef(os.toByteArray());\n        }\n        catch (IOException e) {\n          throw new RuntimeException(e);  // All in memory, so no IOException should be thrown\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e186ff2057510fdf24d25100475f2ce40feb7e8","date":1560440403,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/monitor/src/java/org/apache/lucene/monitor/MonitorQuerySerializer#fromParser(Function[String,Query]).mjava","pathOld":"lucene/monitor/src/java/org/apache/lucene/monitor/MonitorQuerySerializer#fromParser(Function[String,Query]).mjava","sourceNew":"  /**\n   * Build a serializer from a query parser\n   *\n   * @param parser a parser to convert a String representation of a query into a lucene query object\n   */\n  static MonitorQuerySerializer fromParser(Function<String, Query> parser) {\n    return new MonitorQuerySerializer() {\n      @Override\n      public MonitorQuery deserialize(BytesRef binaryValue) {\n        ByteArrayInputStream is = new ByteArrayInputStream(binaryValue.bytes, binaryValue.offset, binaryValue.length);\n        try (InputStreamDataInput data = new InputStreamDataInput(is)) {\n          String id = data.readString();\n          String query = data.readString();\n          Map<String, String> metadata = new HashMap<>();\n          for (int i = data.readInt(); i > 0; i--) {\n            metadata.put(data.readString(), data.readString());\n          }\n          return new MonitorQuery(id, parser.apply(query), query, metadata);\n        } catch (IOException e) {\n          throw new RuntimeException(e);  // shouldn't happen, we're reading from a bytearray!\n        }\n      }\n\n      @Override\n      public BytesRef serialize(MonitorQuery query) {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        try (OutputStreamDataOutput data = new OutputStreamDataOutput(os)) {\n          data.writeString(query.getId());\n          data.writeString(query.getQueryString());\n          data.writeInt(query.getMetadata().size());\n          for (Map.Entry<String, String> entry : query.getMetadata().entrySet()) {\n            data.writeString(entry.getKey());\n            data.writeString(entry.getValue());\n          }\n          return new BytesRef(os.toByteArray());\n        }\n        catch (IOException e) {\n          throw new RuntimeException(e);  // All in memory, so no IOException should be thrown\n        }\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build a serializer from a query parser\n   *\n   * @param parser a parser to convert a String representation of a query into a lucene query object\n   */\n  static MonitorQuerySerializer fromParser(Function<String, Query> parser) {\n    return new MonitorQuerySerializer() {\n      @Override\n      public MonitorQuery deserialize(BytesRef binaryValue) {\n        ByteArrayInputStream is = new ByteArrayInputStream(binaryValue.bytes);\n        try (InputStreamDataInput data = new InputStreamDataInput(is)) {\n          String id = data.readString();\n          String query = data.readString();\n          Map<String, String> metadata = new HashMap<>();\n          for (int i = data.readInt(); i > 0; i--) {\n            metadata.put(data.readString(), data.readString());\n          }\n          return new MonitorQuery(id, parser.apply(query), query, metadata);\n        } catch (IOException e) {\n          throw new RuntimeException(e);  // shouldn't happen, we're reading from a bytearray!\n        }\n      }\n\n      @Override\n      public BytesRef serialize(MonitorQuery query) {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        try (OutputStreamDataOutput data = new OutputStreamDataOutput(os)) {\n          data.writeString(query.getId());\n          data.writeString(query.getQueryString());\n          data.writeInt(query.getMetadata().size());\n          for (Map.Entry<String, String> entry : query.getMetadata().entrySet()) {\n            data.writeString(entry.getKey());\n            data.writeString(entry.getValue());\n          }\n          return new BytesRef(os.toByteArray());\n        }\n        catch (IOException e) {\n          throw new RuntimeException(e);  // All in memory, so no IOException should be thrown\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c529b189e09de25455d82ebd7260748cf11ee14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e186ff2057510fdf24d25100475f2ce40feb7e8":["7c529b189e09de25455d82ebd7260748cf11ee14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e186ff2057510fdf24d25100475f2ce40feb7e8"]},"commit2Childs":{"7c529b189e09de25455d82ebd7260748cf11ee14":["9e186ff2057510fdf24d25100475f2ce40feb7e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c529b189e09de25455d82ebd7260748cf11ee14"],"9e186ff2057510fdf24d25100475f2ce40feb7e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}