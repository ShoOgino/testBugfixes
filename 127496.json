{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#addPosition(int,BytesRef,int,int).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    if (position > IndexWriter.MAX_POSITION) {\n      throw new CorruptIndexException(\"position=\" + position + \" is too large (> IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION + \")\", docOut);\n    }\n    if (position < 0) {\n      throw new CorruptIndexException(\"position=\" + position + \" is < 0\", docOut);\n    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (writePayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (writeOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (writePayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (writeOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    if (position > IndexWriter.MAX_POSITION) {\n      throw new CorruptIndexException(\"position=\" + position + \" is too large (> IndexWriter.MAX_POSITION=\" + IndexWriter.MAX_POSITION + \")\", docOut);\n    }\n    if (position < 0) {\n      throw new CorruptIndexException(\"position=\" + position + \" is < 0\", docOut);\n    }\n    posDeltaBuffer[posBufferUpto] = position - lastPosition;\n    if (writePayloads) {\n      if (payload == null || payload.length == 0) {\n        // no payload\n        payloadLengthBuffer[posBufferUpto] = 0;\n      } else {\n        payloadLengthBuffer[posBufferUpto] = payload.length;\n        if (payloadByteUpto + payload.length > payloadBytes.length) {\n          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);\n        }\n        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);\n        payloadByteUpto += payload.length;\n      }\n    }\n\n    if (writeOffsets) {\n      assert startOffset >= lastStartOffset;\n      assert endOffset >= startOffset;\n      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastStartOffset;\n      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;\n      lastStartOffset = startOffset;\n    }\n    \n    posBufferUpto++;\n    lastPosition = position;\n    if (posBufferUpto == BLOCK_SIZE) {\n      forUtil.writeBlock(posDeltaBuffer, encoded, posOut);\n\n      if (writePayloads) {\n        forUtil.writeBlock(payloadLengthBuffer, encoded, payOut);\n        payOut.writeVInt(payloadByteUpto);\n        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);\n        payloadByteUpto = 0;\n      }\n      if (writeOffsets) {\n        forUtil.writeBlock(offsetStartDeltaBuffer, encoded, payOut);\n        forUtil.writeBlock(offsetLengthBuffer, encoded, payOut);\n      }\n      posBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}