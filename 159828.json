{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n    trimFields(state);\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    for(IndexValuesProcessor p : indexValues.values()) {\n      if (p != null) {\n        p.finish(state.numDocs);\n        p.files(state.flushedFiles);\n      }\n    }\n    indexValues.clear();\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    for(DocValuesConsumer p : docValues.values()) {\n      if (p != null) {\n        p.finish(state.numDocs);\n        p.files(state.flushedFiles);\n      }\n    }\n    docValues.clear();\n    if(fieldsConsumer != null) {\n      fieldsConsumer.close(); // nocommit this should go away\n      fieldsConsumer = null;\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    for(IndexValuesProcessor p : indexValues.values()) {\n      if (p != null) {\n        p.finish(state.numDocs);\n        p.files(state.flushedFiles);\n      }\n    }\n    indexValues.clear();\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    for(DocValuesConsumer p : docValues.values()) {\n      if (p != null) {\n        p.finish(state.numDocs);\n        p.files(state.flushedFiles);\n      }\n    }\n    docValues.clear();\n    if(fieldsConsumer != null) {\n      fieldsConsumer.close(); // TODO remove this once docvalues are fully supported by codecs\n      state.flushedFiles.addAll(docValuesConsumerState.flushedFiles);\n      docValuesConsumerState = null;\n      fieldsConsumer = null;\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    for(DocValuesConsumer p : docValues.values()) {\n      if (p != null) {\n        p.finish(state.numDocs);\n        p.files(state.flushedFiles);\n      }\n    }\n    docValues.clear();\n    if(fieldsConsumer != null) {\n      fieldsConsumer.close(); // nocommit this should go away\n      fieldsConsumer = null;\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe","date":1294227869,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    for(DocValuesConsumer p : docValues.values()) {\n      if (p != null) {\n        p.finish(state.numDocs);\n        p.files(state.flushedFiles);\n      }\n    }\n    docValues.clear();\n    if(fieldsConsumer != null) {\n      fieldsConsumer.close(); // TODO remove this once docvalues are fully supported by codecs\n      state.flushedFiles.addAll(docValuesConsumerState.flushedFiles);\n      docValuesConsumerState = null;\n      fieldsConsumer = null;\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    for(DocValuesConsumer p : docValues.values()) {\n      if (p != null) {\n        p.finish(state.numDocs);\n        p.files(state.flushedFiles);\n      }\n    }\n    docValues.clear();\n    if(fieldsConsumer != null) {\n      fieldsConsumer.close(); // TODO remove this once docvalues are fully supported by codecs\n      state.flushedFiles.addAll(docValuesConsumerState.flushedFiles);\n      docValuesConsumerState = null;\n      fieldsConsumer = null;\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n    state.flushedFiles.add(fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c726db5b9f421dbb9aa551ab5cb725044f8ef084","date":1298494959,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n\n    // If this segment only has docs that hit non-aborting exceptions,\n    // then no term vectors files will have been written; therefore we\n    // need to update the fieldInfos and clear the term vectors bits\n    if (!state.hasVectors) {\n      state.fieldInfos.clearVectors();\n    }\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n\n    // If this segment only has docs that hit non-aborting exceptions,\n    // then no term vectors files will have been written; therefore we\n    // need to update the fieldInfos and clear the term vectors bits\n    if (!state.hasVectors) {\n      state.fieldInfos.clearVectors();\n    }\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    for(DocValuesConsumer p : docValues.values()) {\n      if (p != null) {\n        p.finish(state.numDocs);\n      }\n    }\n    docValues.clear();\n    if(fieldsConsumer != null) {\n      fieldsConsumer.close(); // TODO remove this once docvalues are fully supported by codecs\n      docValuesConsumerState = null;\n      fieldsConsumer = null;\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n      perThread.trimFields(state);\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    for(DocValuesConsumer p : docValues.values()) {\n      if (p != null) {\n        p.finish(state.numDocs);\n        p.files(state.flushedFiles);\n      }\n    }\n    docValues.clear();\n    if(fieldsConsumer != null) {\n      fieldsConsumer.close(); // TODO remove this once docvalues are fully supported by codecs\n      state.flushedFiles.addAll(docValuesConsumerState.flushedFiles);\n      docValuesConsumerState = null;\n      fieldsConsumer = null;\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state) throws IOException {\n\n    Map<FieldInfo, DocFieldConsumerPerField> childFields = new HashMap<FieldInfo, DocFieldConsumerPerField>();\n    Collection<DocFieldConsumerPerField> fields = fields();\n    for (DocFieldConsumerPerField f : fields) {\n      childFields.put(f.getFieldInfo(), f);\n    }\n\n    fieldsWriter.flush(state);\n    consumer.flush(childFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    for(DocValuesConsumer p : docValues.values()) {\n      if (p != null) {\n        p.finish(state.numDocs);\n      }\n    }\n    docValues.clear();\n    if(fieldsConsumer != null) {\n      fieldsConsumer.close(); // TODO remove this once docvalues are fully supported by codecs\n      docValuesConsumerState = null;\n      fieldsConsumer = null;\n    }\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#flush(Collection[DocConsumerPerThread],SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flush(Collection<DocConsumerPerThread> threads, SegmentWriteState state) throws IOException {\n\n    Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>> childThreadsAndFields = new HashMap<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>();\n    for ( DocConsumerPerThread thread : threads) {\n      DocFieldProcessorPerThread perThread = (DocFieldProcessorPerThread) thread;\n      childThreadsAndFields.put(perThread.consumer, perThread.fields());\n    }\n    fieldsWriter.flush(state);\n    consumer.flush(childThreadsAndFields, state);\n\n    // Important to save after asking consumer to flush so\n    // consumer can alter the FieldInfo* if necessary.  EG,\n    // FreqProxTermsWriter does this with\n    // FieldInfo.storePayload.\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, \"\", IndexFileNames.FIELD_INFOS_EXTENSION);\n    state.fieldInfos.write(state.directory, fileName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["2d84736c4614acce6720851cbd2c823d7cd516e4","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"c726db5b9f421dbb9aa551ab5cb725044f8ef084":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["1224a4027481acce15495b03bce9b48b93b42722","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"14ec33385f6fbb6ce172882d14605790418a5d31":["c726db5b9f421dbb9aa551ab5cb725044f8ef084"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"c726db5b9f421dbb9aa551ab5cb725044f8ef084":["14ec33385f6fbb6ce172882d14605790418a5d31"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["6c18273ea5b3974d2f30117f46f1ae416c28f727","01f60198ece724a6e96cd0b45f289cf42ff83d4f","fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["70ad682703b8585f5d0a637efec044d57ec05efb"],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["c726db5b9f421dbb9aa551ab5cb725044f8ef084"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"fdc49cf4bbf2603a647b53ff5cfa6878743a3ffe":["70ad682703b8585f5d0a637efec044d57ec05efb","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"1224a4027481acce15495b03bce9b48b93b42722":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}