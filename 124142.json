{"path":"lucene/src/java/org/apache/lucene/util/PriorityQueue#downHeap().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PriorityQueue#downHeap().mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#downHeap().mjava","sourceNew":"  private final void downHeap() {\n    int i = 1;\n    T node = heap[i];\t\t\t  // save top node\n    int j = i << 1;\t\t\t\t  // find smaller child\n    int k = j + 1;\n    if (k <= size && lessThan(heap[k], heap[j])) {\n      j = k;\n    }\n    while (j <= size && lessThan(heap[j], node)) {\n      heap[i] = heap[j];\t\t\t  // shift up child\n      i = j;\n      j = i << 1;\n      k = j + 1;\n      if (k <= size && lessThan(heap[k], heap[j])) {\n        j = k;\n      }\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","sourceOld":"  private final void downHeap() {\n    int i = 1;\n    T node = heap[i];\t\t\t  // save top node\n    int j = i << 1;\t\t\t\t  // find smaller child\n    int k = j + 1;\n    if (k <= size && lessThan(heap[k], heap[j])) {\n      j = k;\n    }\n    while (j <= size && lessThan(heap[j], node)) {\n      heap[i] = heap[j];\t\t\t  // shift up child\n      i = j;\n      j = i << 1;\n      k = j + 1;\n      if (k <= size && lessThan(heap[k], heap[j])) {\n        j = k;\n      }\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PriorityQueue#downHeap().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PriorityQueue#downHeap().mjava","sourceNew":"  private final void downHeap() {\n    int i = 1;\n    T node = heap[i];\t\t\t  // save top node\n    int j = i << 1;\t\t\t\t  // find smaller child\n    int k = j + 1;\n    if (k <= size && lessThan(heap[k], heap[j])) {\n      j = k;\n    }\n    while (j <= size && lessThan(heap[j], node)) {\n      heap[i] = heap[j];\t\t\t  // shift up child\n      i = j;\n      j = i << 1;\n      k = j + 1;\n      if (k <= size && lessThan(heap[k], heap[j])) {\n        j = k;\n      }\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","sourceOld":"  private final void downHeap() {\n    int i = 1;\n    T node = heap[i];\t\t\t  // save top node\n    int j = i << 1;\t\t\t\t  // find smaller child\n    int k = j + 1;\n    if (k <= size && lessThan(heap[k], heap[j])) {\n      j = k;\n    }\n    while (j <= size && lessThan(heap[j], node)) {\n      heap[i] = heap[j];\t\t\t  // shift up child\n      i = j;\n      j = i << 1;\n      k = j + 1;\n      if (k <= size && lessThan(heap[k], heap[j])) {\n        j = k;\n      }\n    }\n    heap[i] = node;\t\t\t\t  // install saved node\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}