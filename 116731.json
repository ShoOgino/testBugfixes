{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n        RequestEntity request = new RequestEntity() {\n          // we don't know the length\n          public long getContentLength() { return -1; }\n          public String getContentType() { return ClientUtils.TEXT_XML; }\n          public boolean isRepeatable()  { return false; }\n  \n          public void writeRequest(OutputStream out) throws IOException {\n            try {\n              OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n              writer.append( \"<stream>\" ); // can be anything...\n              UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              while( req != null ) {\n                log.debug( \"sending: {}\" , req );\n                req.writeXML( writer ); \n                \n                // check for commit or optimize\n                SolrParams params = req.getParams();\n                if( params != null ) {\n                  String fmt = null;\n                  if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                    fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                    fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  if( fmt != null ) {\n                    log.info( fmt );\n                    writer.write( String.format( fmt, \n                        params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                        params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                  }\n                }\n                \n                writer.flush();\n                req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              }\n              writer.append( \"</stream>\" );\n              writer.flush();\n            }\n            catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        };\n        \n        method = new PostMethod(_baseURL+updateUrl );\n        method.setRequestEntity( request );\n        method.setFollowRedirects( false );\n        method.addRequestHeader( \"User-Agent\", AGENT );\n        \n        int statusCode = getHttpClient().executeMethod(method);\n        if (statusCode != HttpStatus.SC_OK) {\n          StringBuilder msg = new StringBuilder();\n          msg.append( method.getStatusLine().getReasonPhrase() );\n          msg.append( \"\\n\\n\" );\n          msg.append( method.getStatusText() );\n          msg.append( \"\\n\\n\" );\n          msg.append( \"request: \"+method.getURI() );\n          handleError( new Exception( msg.toString() ) );\n        }\n        }  while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        try {\n          // make sure to release the connection\n          if(method != null)\n          method.releaseConnection();\n        }\n        catch( Exception ex ){}\n        \n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":null,"sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n        RequestEntity request = new RequestEntity() {\n          // we don't know the length\n          public long getContentLength() { return -1; }\n          public String getContentType() { return ClientUtils.TEXT_XML; }\n          public boolean isRepeatable()  { return false; }\n  \n          public void writeRequest(OutputStream out) throws IOException {\n            try {\n              OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n              writer.append( \"<stream>\" ); // can be anything...\n              UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              while( req != null ) {\n                log.debug( \"sending: {}\" , req );\n                req.writeXML( writer ); \n                \n                // check for commit or optimize\n                SolrParams params = req.getParams();\n                if( params != null ) {\n                  String fmt = null;\n                  if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                    fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                    fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  if( fmt != null ) {\n                    log.info( fmt );\n                    writer.write( String.format( fmt, \n                        params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                        params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                  }\n                }\n                \n                writer.flush();\n                req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              }\n              writer.append( \"</stream>\" );\n              writer.flush();\n            }\n            catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        };\n        \n        method = new PostMethod(_baseURL+updateUrl );\n        method.setRequestEntity( request );\n        method.setFollowRedirects( false );\n        method.addRequestHeader( \"User-Agent\", AGENT );\n        \n        int statusCode = getHttpClient().executeMethod(method);\n        if (statusCode != HttpStatus.SC_OK) {\n          StringBuilder msg = new StringBuilder();\n          msg.append( method.getStatusLine().getReasonPhrase() );\n          msg.append( \"\\n\\n\" );\n          msg.append( method.getStatusText() );\n          msg.append( \"\\n\\n\" );\n          msg.append( \"request: \"+method.getURI() );\n          handleError( new Exception( msg.toString() ) );\n        }\n        }  while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        try {\n          // make sure to release the connection\n          if(method != null)\n          method.releaseConnection();\n        }\n        catch( Exception ex ){}\n        \n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n        RequestEntity request = new RequestEntity() {\n          // we don't know the length\n          public long getContentLength() { return -1; }\n          public String getContentType() { return ClientUtils.TEXT_XML; }\n          public boolean isRepeatable()  { return false; }\n  \n          public void writeRequest(OutputStream out) throws IOException {\n            try {\n              OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n              writer.append( \"<stream>\" ); // can be anything...\n              UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              while( req != null ) {\n                log.debug( \"sending: {}\" , req );\n                req.writeXML( writer ); \n                \n                // check for commit or optimize\n                SolrParams params = req.getParams();\n                if( params != null ) {\n                  String fmt = null;\n                  if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                    fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                    fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  if( fmt != null ) {\n                    log.info( fmt );\n                    writer.write( String.format( fmt, \n                        params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                        params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                  }\n                }\n                \n                writer.flush();\n                req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              }\n              writer.append( \"</stream>\" );\n              writer.flush();\n            }\n            catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        };\n        \n        method = new PostMethod(_baseURL+updateUrl );\n        method.setRequestEntity( request );\n        method.setFollowRedirects( false );\n        method.addRequestHeader( \"User-Agent\", AGENT );\n        \n        int statusCode = getHttpClient().executeMethod(method);\n        if (statusCode != HttpStatus.SC_OK) {\n          StringBuilder msg = new StringBuilder();\n          msg.append( method.getStatusLine().getReasonPhrase() );\n          msg.append( \"\\n\\n\" );\n          msg.append( method.getStatusText() );\n          msg.append( \"\\n\\n\" );\n          msg.append( \"request: \"+method.getURI() );\n          handleError( new Exception( msg.toString() ) );\n        }\n        }  while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        try {\n          // make sure to release the connection\n          if(method != null)\n          method.releaseConnection();\n        }\n        catch( Exception ex ){}\n        \n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n        RequestEntity request = new RequestEntity() {\n          // we don't know the length\n          public long getContentLength() { return -1; }\n          public String getContentType() { return ClientUtils.TEXT_XML; }\n          public boolean isRepeatable()  { return false; }\n  \n          public void writeRequest(OutputStream out) throws IOException {\n            try {\n              OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n              writer.append( \"<stream>\" ); // can be anything...\n              UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              while( req != null ) {\n                log.debug( \"sending: {}\" , req );\n                req.writeXML( writer ); \n                \n                // check for commit or optimize\n                SolrParams params = req.getParams();\n                if( params != null ) {\n                  String fmt = null;\n                  if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                    fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                    fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  if( fmt != null ) {\n                    log.info( fmt );\n                    writer.write( String.format( fmt, \n                        params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                        params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                  }\n                }\n                \n                writer.flush();\n                req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              }\n              writer.append( \"</stream>\" );\n              writer.flush();\n            }\n            catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        };\n        \n        method = new PostMethod(_baseURL+updateUrl );\n        method.setRequestEntity( request );\n        method.setFollowRedirects( false );\n        method.addRequestHeader( \"User-Agent\", AGENT );\n        \n        int statusCode = getHttpClient().executeMethod(method);\n        if (statusCode != HttpStatus.SC_OK) {\n          StringBuilder msg = new StringBuilder();\n          msg.append( method.getStatusLine().getReasonPhrase() );\n          msg.append( \"\\n\\n\" );\n          msg.append( method.getStatusText() );\n          msg.append( \"\\n\\n\" );\n          msg.append( \"request: \"+method.getURI() );\n          handleError( new Exception( msg.toString() ) );\n        }\n        }  while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        try {\n          // make sure to release the connection\n          if(method != null)\n          method.releaseConnection();\n        }\n        catch( Exception ex ){}\n        \n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n        RequestEntity request = new RequestEntity() {\n          // we don't know the length\n          public long getContentLength() { return -1; }\n          public String getContentType() { return ClientUtils.TEXT_XML; }\n          public boolean isRepeatable()  { return false; }\n  \n          public void writeRequest(OutputStream out) throws IOException {\n            try {\n              OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n              writer.append( \"<stream>\" ); // can be anything...\n              UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              while( req != null ) {\n                log.debug( \"sending: {}\" , req );\n                req.writeXML( writer ); \n                \n                // check for commit or optimize\n                SolrParams params = req.getParams();\n                if( params != null ) {\n                  String fmt = null;\n                  if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                    fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                    fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  if( fmt != null ) {\n                    log.info( fmt );\n                    writer.write( String.format( fmt, \n                        params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                        params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                  }\n                }\n                \n                writer.flush();\n                req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              }\n              writer.append( \"</stream>\" );\n              writer.flush();\n            }\n            catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        };\n        \n        method = new PostMethod(_baseURL+updateUrl );\n        method.setRequestEntity( request );\n        method.setFollowRedirects( false );\n        method.addRequestHeader( \"User-Agent\", AGENT );\n        \n        int statusCode = getHttpClient().executeMethod(method);\n        if (statusCode != HttpStatus.SC_OK) {\n          StringBuilder msg = new StringBuilder();\n          msg.append( method.getStatusLine().getReasonPhrase() );\n          msg.append( \"\\n\\n\" );\n          msg.append( method.getStatusText() );\n          msg.append( \"\\n\\n\" );\n          msg.append( \"request: \"+method.getURI() );\n          handleError( new Exception( msg.toString() ) );\n        }\n        }  while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        try {\n          // make sure to release the connection\n          if(method != null)\n          method.releaseConnection();\n        }\n        catch( Exception ex ){}\n        \n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"606f4b94e298603cb2c1fdeec1a729f2c960fc0f","date":1276743946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n        RequestEntity request = new RequestEntity() {\n          // we don't know the length\n          public long getContentLength() { return -1; }\n          public String getContentType() { return ClientUtils.TEXT_XML; }\n          public boolean isRepeatable()  { return false; }\n  \n          public void writeRequest(OutputStream out) throws IOException {\n            try {\n              OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n              writer.append( \"<stream>\" ); // can be anything...\n              UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              while( req != null ) {\n                log.debug( \"sending: {}\" , req );\n                req.writeXML( writer ); \n                \n                // check for commit or optimize\n                SolrParams params = req.getParams();\n                if( params != null ) {\n                  String fmt = null;\n                  if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                    fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                    fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  if( fmt != null ) {\n                    log.info( fmt );\n                    writer.write( String.format( fmt, \n                        params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                        params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                  }\n                }\n                \n                writer.flush();\n                req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              }\n              writer.append( \"</stream>\" );\n              writer.flush();\n            }\n            catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        };\n        \n        method = new PostMethod(_baseURL+updateUrl );\n        method.setRequestEntity( request );\n        method.setFollowRedirects( false );\n        method.addRequestHeader( \"User-Agent\", AGENT );\n        \n        int statusCode = getHttpClient().executeMethod(method);\n        if (statusCode != HttpStatus.SC_OK) {\n          StringBuilder msg = new StringBuilder();\n          msg.append( method.getStatusLine().getReasonPhrase() );\n          msg.append( \"\\n\\n\" );\n          msg.append( method.getStatusText() );\n          msg.append( \"\\n\\n\" );\n          msg.append( \"request: \"+method.getURI() );\n          handleError( new Exception( msg.toString() ) );\n        }\n        }  while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        try {\n          // make sure to release the connection\n          if(method != null)\n          method.releaseConnection();\n        }\n        catch( Exception ex ){}\n        \n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":["8cd2638c91e278a2831e83135b2c895d04defa90","f0234821f0874a57cda0a32ef52180de16fd0da4","0ff45996d42348636af43415c79240faa25bfc73","dbfc77560023f6ab3d02a9797e491cbeb9e1f0d0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n        RequestEntity request = new RequestEntity() {\n          // we don't know the length\n          public long getContentLength() { return -1; }\n          public String getContentType() { return ClientUtils.TEXT_XML; }\n          public boolean isRepeatable()  { return false; }\n  \n          public void writeRequest(OutputStream out) throws IOException {\n            try {\n              OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n              writer.append( \"<stream>\" ); // can be anything...\n              UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              while( req != null ) {\n                log.debug( \"sending: {}\" , req );\n                req.writeXML( writer ); \n                \n                // check for commit or optimize\n                SolrParams params = req.getParams();\n                if( params != null ) {\n                  String fmt = null;\n                  if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                    fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                    fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                  }\n                  if( fmt != null ) {\n                    log.info( fmt );\n                    writer.write( String.format( fmt, \n                        params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                        params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                  }\n                }\n                \n                writer.flush();\n                req = queue.poll( 250, TimeUnit.MILLISECONDS );\n              }\n              writer.append( \"</stream>\" );\n              writer.flush();\n            }\n            catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n          }\n        };\n        \n        method = new PostMethod(_baseURL+updateUrl );\n        method.setRequestEntity( request );\n        method.setFollowRedirects( false );\n        method.addRequestHeader( \"User-Agent\", AGENT );\n        \n        int statusCode = getHttpClient().executeMethod(method);\n        if (statusCode != HttpStatus.SC_OK) {\n          StringBuilder msg = new StringBuilder();\n          msg.append( method.getStatusLine().getReasonPhrase() );\n          msg.append( \"\\n\\n\" );\n          msg.append( method.getStatusText() );\n          msg.append( \"\\n\\n\" );\n          msg.append( \"request: \"+method.getURI() );\n          handleError( new Exception( msg.toString() ) );\n        }\n        }  while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        try {\n          // make sure to release the connection\n          if(method != null)\n          method.releaseConnection();\n        }\n        catch( Exception ex ){}\n        \n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"977d34a6bc0681279dcf43103c4a1bc02e8656b4","date":1296075425,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67ecb9d23ff772533efca1970925175ae7620dc4","date":1297805341,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      } \n      finally {\n        // remove it from the list of running things...\n        synchronized (runners) {\n          runners.remove( this );\n        }\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\",\n                            params.getBool( UpdateParams.WAIT_FLUSH, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.Runner#run().mjava","sourceNew":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","sourceOld":"    public void run() {\n      runnerLock.lock();\n\n      // info is ok since this should only happen once for each thread\n      log.info( \"starting runner: {}\" , this );\n      PostMethod method = null;\n      try {\n        do {\n          try {\n            RequestEntity request = new RequestEntity() {\n              // we don't know the length\n              public long getContentLength() { return -1; }\n              public String getContentType() { return ClientUtils.TEXT_XML; }\n              public boolean isRepeatable()  { return false; }\n      \n              public void writeRequest(OutputStream out) throws IOException {\n                try {\n                  OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n                  writer.append( \"<stream>\" ); // can be anything...\n                  UpdateRequest req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  while( req != null ) {\n                    log.debug( \"sending: {}\" , req );\n                    req.writeXML( writer ); \n                    \n                    // check for commit or optimize\n                    SolrParams params = req.getParams();\n                    if( params != null ) {\n                      String fmt = null;\n                      if( params.getBool( UpdateParams.OPTIMIZE, false ) ) {\n                        fmt = \"<optimize waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      else if( params.getBool( UpdateParams.COMMIT, false ) ) {\n                        fmt = \"<commit waitSearcher=\\\"%s\\\" waitFlush=\\\"%s\\\" />\";\n                      }\n                      if( fmt != null ) {\n                        log.info( fmt );\n                        writer.write( String.format( fmt, \n                            params.getBool( UpdateParams.WAIT_SEARCHER, false )+\"\") );\n                      }\n                    }\n                    \n                    writer.flush();\n                    req = queue.poll( 250, TimeUnit.MILLISECONDS );\n                  }\n                  writer.append( \"</stream>\" );\n                  writer.flush();\n                }\n                catch (InterruptedException e) {\n                  e.printStackTrace();\n                }\n              }\n            };\n          \n            method = new PostMethod(_baseURL+updateUrl );\n            method.setRequestEntity( request );\n            method.setFollowRedirects( false );\n            method.addRequestHeader( \"User-Agent\", AGENT );\n            \n            int statusCode = getHttpClient().executeMethod(method);\n            if (statusCode != HttpStatus.SC_OK) {\n              StringBuilder msg = new StringBuilder();\n              msg.append( method.getStatusLine().getReasonPhrase() );\n              msg.append( \"\\n\\n\" );\n              msg.append( method.getStatusText() );\n              msg.append( \"\\n\\n\" );\n              msg.append( \"request: \"+method.getURI() );\n              handleError( new Exception( msg.toString() ) );\n            }\n          } finally {\n            try {\n              // make sure to release the connection\n              if(method != null)\n                method.releaseConnection();\n            }\n            catch( Exception ex ){}\n          }\n        } while( ! queue.isEmpty());\n      }\n      catch (Throwable e) {\n        handleError( e );\n      }\n      finally {\n\n        // remove it from the list of running things unless we are the last runner and the queue is full...\n        // in which case, the next queue.put() would block and there would be no runners to handle it.\n        // This case has been further handled by using offer instead of put, and using a retry loop\n        // to avoid blocking forever (see request()).\n        synchronized (runners) {\n          if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n           // keep this runner alive\n           scheduler.execute(this);\n          } else {\n            runners.remove( this );\n          }\n        }\n\n        log.info( \"finished: {}\" , this );\n        runnerLock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"606f4b94e298603cb2c1fdeec1a729f2c960fc0f":["1da8d55113b689b06716246649de6f62430f15c0"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","67ecb9d23ff772533efca1970925175ae7620dc4"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","606f4b94e298603cb2c1fdeec1a729f2c960fc0f"],"67ecb9d23ff772533efca1970925175ae7620dc4":["977d34a6bc0681279dcf43103c4a1bc02e8656b4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["67ecb9d23ff772533efca1970925175ae7620dc4","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["67ecb9d23ff772533efca1970925175ae7620dc4","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["67ecb9d23ff772533efca1970925175ae7620dc4"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["606f4b94e298603cb2c1fdeec1a729f2c960fc0f","977d34a6bc0681279dcf43103c4a1bc02e8656b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"977d34a6bc0681279dcf43103c4a1bc02e8656b4":["606f4b94e298603cb2c1fdeec1a729f2c960fc0f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["5f4e87790277826a2aea119328600dfb07761f32","67ecb9d23ff772533efca1970925175ae7620dc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"606f4b94e298603cb2c1fdeec1a729f2c960fc0f":["5f4e87790277826a2aea119328600dfb07761f32","29ef99d61cda9641b6250bf9567329a6e65f901d","977d34a6bc0681279dcf43103c4a1bc02e8656b4"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"67ecb9d23ff772533efca1970925175ae7620dc4":["f1bdbf92da222965b46c0a942c3857ba56e5c638","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["606f4b94e298603cb2c1fdeec1a729f2c960fc0f","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"977d34a6bc0681279dcf43103c4a1bc02e8656b4":["67ecb9d23ff772533efca1970925175ae7620dc4","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}