{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVInt(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVInt(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVInt(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVInt(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVInt(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVInt(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVInt(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVInt(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n\n    if (count == 0) {\n      termsOut.writeByte((byte) 0);\n      return;\n    }\n\n    assert start <= pendingTerms.size();\n    assert count <= start;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    long lastDocStartFP = 0;\n    long lastPosStartFP = 0;\n    long lastPayStartFP = 0;\n    for(int idx=limit-count; idx<limit; idx++) {\n      PendingTerm term = pendingTerms.get(idx);\n\n      bytesWriter.writeVLong(term.docStartFP - lastDocStartFP);\n      lastDocStartFP = term.docStartFP;\n\n      if (fieldHasPositions) {\n        bytesWriter.writeVLong(term.posStartFP - lastPosStartFP);\n        lastPosStartFP = term.posStartFP;\n        if (term.lastPosBlockOffset != -1) {\n          bytesWriter.writeVInt(term.lastPosBlockOffset);\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && term.payStartFP != -1) {\n          bytesWriter.writeVLong(term.payStartFP - lastPayStartFP);\n          lastPayStartFP = term.payStartFP;\n        }\n      }\n\n      if (term.skipOffset != -1) {\n        bytesWriter.writeVInt(term.skipOffset);\n      }\n    }\n\n    termsOut.writeVInt((int) bytesWriter.getFilePointer());\n    bytesWriter.writeTo(termsOut);\n    bytesWriter.reset();\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(limit-count, limit).clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}