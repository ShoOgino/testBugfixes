{"path":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#ShardFieldSortedHitQueue(SortField[],int,IndexSearcher).mjava","commits":[{"id":"35d59689803f4ad27f96148bb7c7167e373c6770","date":1454297137,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#ShardFieldSortedHitQueue(SortField[],int,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int,IndexSearcher).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size, IndexSearcher searcher) {\n    super(size);\n    final int n = fields.length;\n    //noinspection unchecked\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fields[i], searcher);\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size, IndexSearcher searcher) {\n    super(size);\n    final int n = fields.length;\n    //noinspection unchecked\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fields[i], searcher);\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#ShardFieldSortedHitQueue(SortField[],int,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#ShardFieldSortedHitQueue(SortField[],int,IndexSearcher).mjava","sourceNew":"  public ShardFieldSortedHitQueue(SortField[] fields, int size, IndexSearcher searcher) {\n    super(size);\n    final int n = fields.length;\n    //noinspection unchecked\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fields[i], searcher);\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size, IndexSearcher searcher) {\n    super(size);\n    final int n = fields.length;\n    //noinspection unchecked\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fields[i], searcher);\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#ShardFieldSortedHitQueue(SortField[],int,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue#ShardFieldSortedHitQueue(SortField[],int,IndexSearcher).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public ShardFieldSortedHitQueue(SortField[] fields, int size, IndexSearcher searcher) {\n    super(size);\n    final int n = fields.length;\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fields[i], searcher);\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","sourceOld":"  public ShardFieldSortedHitQueue(SortField[] fields, int size, IndexSearcher searcher) {\n    super(size);\n    final int n = fields.length;\n    //noinspection unchecked\n    comparators = new Comparator[n];\n    this.fields = new SortField[n];\n    for (int i = 0; i < n; ++i) {\n\n      // keep track of the named fields\n      SortField.Type type = fields[i].getType();\n      if (type!=SortField.Type.SCORE && type!=SortField.Type.DOC) {\n        fieldNames.add(fields[i].getField());\n      }\n\n      String fieldname = fields[i].getField();\n      comparators[i] = getCachedComparator(fields[i], searcher);\n\n     if (fields[i].getType() == SortField.Type.STRING) {\n        this.fields[i] = new SortField(fieldname, SortField.Type.STRING,\n            fields[i].getReverse());\n      } else {\n        this.fields[i] = new SortField(fieldname, fields[i].getType(),\n            fields[i].getReverse());\n      }\n\n      //System.out.println(\"%%%%%%%%%%%%%%%%%% got \"+fields[i].getType() +\"   for \"+ fieldname +\"  fields[i].getReverse(): \"+fields[i].getReverse());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35d59689803f4ad27f96148bb7c7167e373c6770"],"35d59689803f4ad27f96148bb7c7167e373c6770":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["35d59689803f4ad27f96148bb7c7167e373c6770"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","35d59689803f4ad27f96148bb7c7167e373c6770"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"35d59689803f4ad27f96148bb7c7167e373c6770":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}