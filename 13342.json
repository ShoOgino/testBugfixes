{"path":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * \n   * @param slices\n   * @return\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * \n   * @param slices\n   * @return\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * \n   * @param slices\n   * @return\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97bf7e60e8b1531f7e992482be43dd563dde04e","date":1327594643,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * \n   * @param slices\n   * @return\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45fdedf2abdbdaadf855ce764379f18d0a4fb462","date":1327605607,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * \n   * @param slices\n   * @return\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * \n   * @param slices\n   * @return\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","45fdedf2abdbdaadf855ce764379f18d0a4fb462"],"45fdedf2abdbdaadf855ce764379f18d0a4fb462":["f97bf7e60e8b1531f7e992482be43dd563dde04e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f97bf7e60e8b1531f7e992482be43dd563dde04e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","45fdedf2abdbdaadf855ce764379f18d0a4fb462"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["45fdedf2abdbdaadf855ce764379f18d0a4fb462"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"45fdedf2abdbdaadf855ce764379f18d0a4fb462":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"f97bf7e60e8b1531f7e992482be43dd563dde04e":["45fdedf2abdbdaadf855ce764379f18d0a4fb462"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","f97bf7e60e8b1531f7e992482be43dd563dde04e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}