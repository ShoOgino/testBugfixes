{"path":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","sourceNew":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","sourceNew":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","sourceNew":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","sourceNew":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<String>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","sourceNew":"  public void testSimple() \n  {\n    Float fval = 10.01f;\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","sourceNew":"  public void testSimple() \n  {\n    Float fval = 10.01f;\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","sourceNew":"  public void testSimple() \n  {\n    Float fval = 10.01f;\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = new Float( 10.01f );\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testSimple().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testSimple()\n  {\n    Float fval = 10.01f;\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","sourceOld":"  public void testSimple() \n  {\n    Float fval = 10.01f;\n    Boolean bval = Boolean.TRUE;\n    String sval = \"12qwaszx\";\n    \n    // Set up a simple document\n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"f\", fval );\n    doc.addField( \"b\", bval );\n    doc.addField( \"s\", sval );\n    doc.addField( \"f\", 100 ); // again, but something else\n\n    // make sure we can pull values out of it\n    assertEquals( fval, doc.getFirstValue( \"f\" ) );\n    assertEquals( fval, doc.getFieldValues( \"f\" ).iterator().next() );\n    assertEquals( fval, ((Collection<Object>)doc.getFieldValue( \"f\" )).iterator().next() );\n    assertEquals( bval, doc.getFieldValue( \"b\" ) );\n    assertEquals( sval, doc.getFieldValue( \"s\" ) );\n    assertEquals( 2, doc.getFieldValues( \"f\" ).size() );\n    assertNull( doc.getFieldValue( \"xxxxx\" ) );\n    assertNull( doc.getFieldValues( \"xxxxx\" ) );\n    \n    List<String> keys = new ArrayList<>();\n    for( String s : doc.getFieldNames() ) {\n      keys.add( s );\n    }\n    Collections.sort( keys );\n    assertEquals( 3, keys.size() );\n    assertEquals( \"[b, f, s]\", keys.toString() );\n    \n    // set field replaced existing values:\n    doc.setField( \"f\", fval );\n    assertEquals( 1, doc.getFieldValues( \"f\" ).size() );\n    assertEquals( fval, doc.getFieldValue( \"f\" ) );\n    \n    doc.setField( \"n\", null );\n    assertEquals( null, doc.getFieldValue( \"n\" ) );\n    \n    // now remove some fields\n    assertEquals( true, doc.removeFields( \"f\" ) );\n    assertEquals( false, doc.removeFields( \"asdgsadgas\" ) );\n    assertNull( doc.getFieldValue( \"f\" ) );\n    assertNull( doc.getFieldValues( \"f\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["9ba1b632c041956c93c41aa1143d16a567014891","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}