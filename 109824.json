{"path":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#test10Docs().mjava","commits":[{"id":"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","date":1435150219,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#test10Docs().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test10Docs() throws IOException {\n    SolrDocumentList l = new SolrDocumentList();\n    for(int i=0;i<10; i++){\n      l.add(sampleDoc(random(), i));\n    }\n\n    SolrQueryResponse response = new SolrQueryResponse();\n    response.getValues().add(\"results\", l);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new SmileResponseWriter().write(baos, new LocalSolrQueryRequest(null, new ModifiableSolrParams()), response);\n\n    byte[] bytes = baos.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes, 0, bytes.length));\n    m = (Map) m.get(\"results\");\n    List lst = (List) m.get(\"docs\");\n    assertEquals(lst.size(),10);\n    for (int i = 0; i < lst.size(); i++) {\n      m = (Map) lst.get(i);\n      SolrDocument d = new SolrDocument();\n      d.putAll(m);\n      compareSolrDocument(l.get(i), d);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","date":1474893506,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#test10Docs().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test10Docs() throws IOException {\n    SolrDocumentList l = new SolrDocumentList();\n    for(int i=0;i<10; i++){\n      l.add(sampleDoc(random(), i));\n    }\n\n    SolrQueryResponse response = new SolrQueryResponse();\n    response.getValues().add(\"results\", l);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new SmileResponseWriter().write(baos, new LocalSolrQueryRequest(null, new ModifiableSolrParams()), response);\n\n    byte[] bytes = baos.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes, 0, bytes.length));\n    m = (Map) m.get(\"results\");\n    List lst = (List) m.get(\"docs\");\n    assertEquals(lst.size(),10);\n    for (int i = 0; i < lst.size(); i++) {\n      m = (Map) lst.get(i);\n      SolrDocument d = new SolrDocument();\n      d.putAll(m);\n      compareSolrDocument(l.get(i), d);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#test10Docs().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#test10Docs().mjava","sourceNew":"  @Test\n  public void test10Docs() throws IOException {\n    SolrDocumentList l = new SolrDocumentList();\n    for(int i=0;i<10; i++){\n      l.add(sampleDoc(random(), i));\n    }\n\n    SolrQueryResponse response = new SolrQueryResponse();\n    response.getValues().add(\"results\", l);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new SmileResponseWriter().write(baos, new LocalSolrQueryRequest(null, new ModifiableSolrParams()), response);\n\n    byte[] bytes = baos.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes, 0, bytes.length));\n    m = (Map) m.get(\"results\");\n    List lst = (List) m.get(\"docs\");\n    assertEquals(lst.size(),10);\n    for (int i = 0; i < lst.size(); i++) {\n      m = (Map) lst.get(i);\n      SolrDocument d = new SolrDocument();\n      d.putAll(m);\n      compareSolrDocument(l.get(i), d);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void test10Docs() throws IOException {\n    SolrDocumentList l = new SolrDocumentList();\n    for(int i=0;i<10; i++){\n      l.add(sampleDoc(random(), i));\n    }\n\n    SolrQueryResponse response = new SolrQueryResponse();\n    response.getValues().add(\"results\", l);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new SmileResponseWriter().write(baos, new LocalSolrQueryRequest(null, new ModifiableSolrParams()), response);\n\n    byte[] bytes = baos.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes, 0, bytes.length));\n    m = (Map) m.get(\"results\");\n    List lst = (List) m.get(\"docs\");\n    assertEquals(lst.size(),10);\n    for (int i = 0; i < lst.size(); i++) {\n      m = (Map) lst.get(i);\n      SolrDocument d = new SolrDocument();\n      d.putAll(m);\n      compareSolrDocument(l.get(i), d);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/SmileWriterTest#test10Docs().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SmileWriterTest#test10Docs().mjava","sourceNew":"  @Test\n  public void test10Docs() throws IOException {\n    SolrDocumentList l = new SolrDocumentList();\n    for(int i=0;i<10; i++){\n      l.add(sampleDoc(random(), i));\n    }\n\n    SolrQueryResponse response = new SolrQueryResponse();\n    response.getValues().add(\"results\", l);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new SmileResponseWriter().write(baos, new LocalSolrQueryRequest(null, new ModifiableSolrParams()), response);\n\n    byte[] bytes = baos.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes, 0, bytes.length));\n    m = (Map) m.get(\"results\");\n    List lst = (List) m.get(\"docs\");\n    assertEquals(lst.size(),10);\n    for (int i = 0; i < lst.size(); i++) {\n      m = (Map) lst.get(i);\n      SolrDocument d = new SolrDocument();\n      d.putAll(m);\n      compareSolrDocument(l.get(i), d);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void test10Docs() throws IOException {\n    SolrDocumentList l = new SolrDocumentList();\n    for(int i=0;i<10; i++){\n      l.add(sampleDoc(random(), i));\n    }\n\n    SolrQueryResponse response = new SolrQueryResponse();\n    response.getValues().add(\"results\", l);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new SmileResponseWriter().write(baos, new LocalSolrQueryRequest(null, new ModifiableSolrParams()), response);\n\n    byte[] bytes = baos.toByteArray();\n    Map m = (Map) decodeSmile(new ByteArrayInputStream(bytes, 0, bytes.length));\n    m = (Map) m.get(\"results\");\n    List lst = (List) m.get(\"docs\");\n    assertEquals(lst.size(),10);\n    for (int i = 0; i < lst.size(); i++) {\n      m = (Map) lst.get(i);\n      SolrDocument d = new SolrDocument();\n      d.putAll(m);\n      compareSolrDocument(l.get(i), d);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","b564b6c464f1c4b1f8e676b2b9b1558c34634b3a"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}