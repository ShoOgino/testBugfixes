{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","commits":[{"id":"9414d03a96422f6a92ced130e94f73f3fe1fc9a3","date":1538650105,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n        CloudTestUtils.clusterShape(5, 2, false, true));\n\n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    if (SPEED == 1) {\n      cluster.waitForActiveCollection(collectionName, 5, 10);\n    } else {\n      CloudTestUtils.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n          CloudTestUtils.clusterShape(5, 2, false, true));\n    }\n    \n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","sourceOld":"  @Test\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    CloudTestUtils.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n        CloudTestUtils.clusterShape(5, 2, false, true));\n\n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","bugFix":["9414d03a96422f6a92ced130e94f73f3fe1fc9a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    if (SPEED == 1) {\n      cluster.waitForActiveCollection(collectionName, 5, 10);\n    } else {\n      CloudTestUtils.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n          CloudTestUtils.clusterShape(5, 2, false, true));\n    }\n    \n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    if (SPEED == 1) {\n      cluster.waitForActiveCollection(collectionName, 5, 10);\n    } else {\n      CloudTestUtils.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n          CloudTestUtils.clusterShape(5, 2, false, true));\n    }\n    \n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    if (SPEED == 1) {\n      cluster.waitForActiveCollection(collectionName, 5, 10);\n    } else {\n      CloudUtil.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n          CloudUtil.clusterShape(5, 2, false, true));\n    }\n    \n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    if (SPEED == 1) {\n      cluster.waitForActiveCollection(collectionName, 5, 10);\n    } else {\n      CloudTestUtils.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n          CloudTestUtils.clusterShape(5, 2, false, true));\n    }\n    \n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d80c1ad9241ae005a167d7ee8ac473601b0e57c","date":1559036097,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","sourceNew":"  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    CloudUtil.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n        CloudUtil.clusterShape(5, 2, false, true));\n\n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    if (SPEED == 1) {\n      cluster.waitForActiveCollection(collectionName, 5, 10);\n    } else {\n      CloudUtil.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n          CloudUtil.clusterShape(5, 2, false, true));\n    }\n    \n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a97a72dc16d01fda8ca5c9e0264b3604e30ab539","date":1565639985,"type":3,"author":"Megan Carey","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","sourceNew":"  @Test\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    CloudUtil.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n        CloudUtil.clusterShape(5, 2, false, true));\n\n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","sourceOld":"  @Test\n  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    CloudUtil.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n        CloudUtil.clusterShape(5, 2, false, true));\n\n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    CloudUtil.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n        CloudUtil.clusterShape(5, 2, false, true));\n\n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","sourceOld":"  @Test\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    CloudUtil.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n        CloudUtil.clusterShape(5, 2, false, true));\n\n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2);\n    create.process(solrClient);\n    \n    CloudUtil.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n        CloudUtil.clusterShape(5, 2, false, true));\n\n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2).setMaxShardsPerNode(10);\n    create.process(solrClient);\n    \n    CloudUtil.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n        CloudUtil.clusterShape(5, 2, false, true));\n\n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/IndexSizeTriggerTest#testMaxOps().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testMaxOps() throws Exception {\n    String collectionName = \"testMaxOps_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\n        \"conf\", 5, 2);\n    create.process(solrClient);\n    \n    CloudUtil.waitForState(cloudManager, \"failed to create \" + collectionName, collectionName,\n        CloudUtil.clusterShape(5, 2, false, true));\n\n    long waitForSeconds = 3 + random().nextInt(5);\n    // add disabled trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'enabled' : false,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'capturing5',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED'],\" +\n        \"'beforeAction' : ['compute_plan'],\" +\n        \"'afterAction' : ['compute_plan'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'index_size_trigger5',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n\n    for (int i = 0; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument(\"id\", \"id-\" + i);\n      solrClient.add(collectionName, doc);\n    }\n    solrClient.commit(collectionName);\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    List<CapturedEvent> events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 5, ops.size());\n\n    listenerEvents.clear();\n    finished = new CountDownLatch(1);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'index_size_trigger5',\" +\n        \"'event' : 'indexSize',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'aboveDocs' : 10,\" +\n        \"'maxOps' : 3,\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name' : 'compute_plan', 'class' : 'solr.ComputePlanAction'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    await = finished.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"did not finish processing in time\", await);\n\n    // suspend the trigger\n    suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'index_size_trigger5'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(1, listenerEvents.size());\n    events = listenerEvents.get(\"capturing5\");\n    assertNotNull(\"'capturing5' events not found\", events);\n    assertEquals(\"events: \" + events, 4, events.size());\n    assertEquals(TriggerEventProcessorStage.STARTED, events.get(0).stage);\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, events.get(1).stage);\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, events.get(2).stage);\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, events.get(3).stage);\n    // check ops\n    ops = (List<TriggerEvent.Op>) events.get(2).event.getProperty(TriggerEvent.REQUESTED_OPS);\n    assertNotNull(\"should contain requestedOps\", ops);\n    assertEquals(\"number of ops: \" + ops, 3, ops.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["a97a72dc16d01fda8ca5c9e0264b3604e30ab539"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["9414d03a96422f6a92ced130e94f73f3fe1fc9a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9414d03a96422f6a92ced130e94f73f3fe1fc9a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d80c1ad9241ae005a167d7ee8ac473601b0e57c":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["89948af0461fead48f44ba8fb7866f107ce83f22"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a97a72dc16d01fda8ca5c9e0264b3604e30ab539":["2d80c1ad9241ae005a167d7ee8ac473601b0e57c"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9414d03a96422f6a92ced130e94f73f3fe1fc9a3"],"9414d03a96422f6a92ced130e94f73f3fe1fc9a3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"2d80c1ad9241ae005a167d7ee8ac473601b0e57c":["a97a72dc16d01fda8ca5c9e0264b3604e30ab539"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["2d80c1ad9241ae005a167d7ee8ac473601b0e57c"],"89948af0461fead48f44ba8fb7866f107ce83f22":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"a97a72dc16d01fda8ca5c9e0264b3604e30ab539":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}