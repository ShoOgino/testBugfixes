{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","commits":[{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*index);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*index);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private Bits getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*index);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","sourceNew":"  private Bits getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*index);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.byteAt(0) == (byte) 'T';\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*index);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.bytes[scratch.offset] == (byte) 'T';\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":["9faa42f41b6adb98daf009cf99a4ee239189e469"],"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","sourceNew":"  public Bits getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*index);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.byteAt(0) == (byte) 'T';\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*index);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.byteAt(0) == (byte) 'T';\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","sourceNew":"  private DocIdSetIterator getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new DocIdSetIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*i);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","sourceOld":"  public Bits getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*index);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.byteAt(0) == (byte) 'T';\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":["9faa42f41b6adb98daf009cf99a4ee239189e469","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","sourceNew":"  private DocIdSetIterator getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new DocIdSetIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*i);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","sourceOld":"  private Bits getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new Bits() {\n      @Override\n      public boolean get(int index) {\n        try {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*index);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          return scratch.byteAt(0) == (byte) 'T';\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public int length() {\n        return maxDoc;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","sourceNew":"  private DocValuesIterator getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new DocValuesIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*i);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      boolean advanceExact(int target) throws IOException {\n        this.doc = target;\n        in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*target);\n        SimpleTextUtil.readLine(in, scratch); // data\n        SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n        return scratch.byteAt(0) == (byte) 'T';\n      }\n    };\n  }\n\n","sourceOld":"  private DocIdSetIterator getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new DocIdSetIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*i);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","sourceNew":"  private DocValuesIterator getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new DocValuesIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*i);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      boolean advanceExact(int target) throws IOException {\n        this.doc = target;\n        in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*target);\n        SimpleTextUtil.readLine(in, scratch); // data\n        SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n        return scratch.byteAt(0) == (byte) 'T';\n      }\n    };\n  }\n\n","sourceOld":"  private DocIdSetIterator getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new DocIdSetIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*i);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumericDocsWithField(FieldInfo).mjava","sourceNew":"  private DocValuesIterator getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new DocValuesIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*i);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n\n      @Override\n      boolean advanceExact(int target) throws IOException {\n        this.doc = target;\n        in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*target);\n        SimpleTextUtil.readLine(in, scratch); // data\n        SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n        return scratch.byteAt(0) == (byte) 'T';\n      }\n    };\n  }\n\n","sourceOld":"  private DocIdSetIterator getNumericDocsWithField(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    return new DocIdSetIterator() {\n      \n      int doc = -1;\n      \n      @Override\n      public int nextDoc() throws IOException {\n        return advance(docID() + 1);\n      }\n      \n      @Override\n      public int docID() {\n        return doc;\n      }\n      \n      @Override\n      public long cost() {\n        return maxDoc;\n      }\n      \n      @Override\n      public int advance(int target) throws IOException {\n        for (int i = target; i < maxDoc; ++i) {\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*i);\n          SimpleTextUtil.readLine(in, scratch); // data\n          SimpleTextUtil.readLine(in, scratch); // 'T' or 'F'\n          if (scratch.byteAt(0) == (byte) 'T') {\n            return doc = i;\n          }\n        }\n        return doc = NO_MORE_DOCS;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"f7558b5077dd4abd457be151475f13b541f4f13e":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["f7558b5077dd4abd457be151475f13b541f4f13e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9faa42f41b6adb98daf009cf99a4ee239189e469"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["f7558b5077dd4abd457be151475f13b541f4f13e","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["f7558b5077dd4abd457be151475f13b541f4f13e"],"f7558b5077dd4abd457be151475f13b541f4f13e":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}