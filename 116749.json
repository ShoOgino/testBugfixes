{"path":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set<?> words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set<?> words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set<?> words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set<?> words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set<?> words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set<?> words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6042fc86aab3ca254c90a18f082f9569bdd89c5","date":1328470436,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set<?> words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set<?> words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","date":1328817590,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set<?> words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>(DEFAULT_VERSION_PARAM);\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92ed69fd02d759d98f62e869eaa64e64e22302bf","date":1336612003,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterFactoryTest[TestCommonGramsFilterFactory]#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsFilterFactory#testInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ResourceAsStreamResourceLoader(TestStopFilter.class);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":null,"sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsFilterFactoryTest#testInform().mjava","sourceNew":null,"sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsFilterFactory factory = new CommonGramsFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2,\n        words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4,\n        words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory\n        .isIgnoreCase() == true);\n\n    factory = new CommonGramsFilterFactory();\n    args.put(\"words\", \"stop-snowball.txt\");\n    args.put(\"format\", \"snowball\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getCommonWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["a6042fc86aab3ca254c90a18f082f9569bdd89c5"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a6042fc86aab3ca254c90a18f082f9569bdd89c5":["c26f00b574427b55127e869b935845554afde1fa"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","3241e06e642196396b80bb293acd9c0814d079e0"],"aba371508186796cc6151d8223a5b4e16d02e26e":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","5a1a22b1ad88b436661458df567f3fdb446392a4"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["92ed69fd02d759d98f62e869eaa64e64e22302bf","21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3241e06e642196396b80bb293acd9c0814d079e0":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","3241e06e642196396b80bb293acd9c0814d079e0"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c26f00b574427b55127e869b935845554afde1fa":["a6042fc86aab3ca254c90a18f082f9569bdd89c5"],"a6042fc86aab3ca254c90a18f082f9569bdd89c5":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}