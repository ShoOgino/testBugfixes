{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","sourceNew":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return TrieDateField.formatExternal((Date)value);\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","sourceOld":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return TrieDateField.formatExternal((Date)value);\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","sourceNew":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return DateFormatUtil.formatExternal((Date)value);\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","sourceOld":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return TrieDateField.formatExternal((Date)value);\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","sourceNew":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return ((Date)value).toInstant().toString();\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","sourceOld":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return DateFormatUtil.formatExternal((Date)value);\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return ((Date)value).toInstant().toString();\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return ((Date)value).toInstant().toString();\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#getResult(String,String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the value of an expression to use in a range or query facet.\n   * @param expressionName the name of the expression\n   * @param fieldFacet the facet field\n   * @param facetValue the facet value\n   * @return String String representation of pivot value\n   */\n  @SuppressWarnings({ \"deprecation\", \"rawtypes\" })\n  public String getResult(String expressionName, String fieldFacet, String facetValue) {\n    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {\n      try {\n        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());\n        if (pivotStr.length==1) {\n          facetValue = getResult(pivotStr[0]);\n        } else if (pivotStr.length==3) {\n          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n        } else {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" has an invalid amount of arguments.\");\n        }\n      } catch (IndexOutOfBoundsException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Result request \"+facetValue+\" is invalid. Lacks parentheses.\",e);\n      }\n    } \n    if (fieldFacetExpressions.get(fieldFacet)!=null) {\n      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);\n      for (int count = 0; count < expressionNames.length; count++) {\n        if (expressionName.equals(expressionNames[count])) {\n          Comparable value = facetExpressions[count].getValue();\n          if (value.getClass().equals(Date.class)) {\n            return ((Date)value).toInstant().toString();\n          } else {\n            return value.toString();\n          }\n        }\n      }\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"Field Facet Pivot expression \"+expressionName+\" not found.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["d3f6c7717a0f1decd1668144537943efcc70cd95","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["d3f6c7717a0f1decd1668144537943efcc70cd95","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}