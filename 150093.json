{"path":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(MultiFields,FieldsEnum[],ReaderUtil.Slice[]).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(MultiFields,FieldsEnum[],ReaderUtil.Slice[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(FieldsEnum[],ReaderUtil.Slice[]).mjava","sourceNew":"  /** The subs array must be newly initialized FieldsEnum\n   *  (ie, {@link FieldsEnum#next} has not been called. */\n  public MultiFieldsEnum(MultiFields fields, FieldsEnum[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.fields = fields;\n    terms = new MultiTermsEnum(subSlices);\n    queue = new FieldMergeQueue(subs.length);\n    docValues = new MultiIndexDocValues();\n    top = new FieldsEnumWithSlice[subs.length];\n    List<FieldsEnumWithSlice> enumWithSlices = new ArrayList<FieldsEnumWithSlice>();\n\n    // Init q\n    for(int i=0;i<subs.length;i++) {\n      assert subs[i] != null;\n      final String field = subs[i].next();\n      if (field != null) {\n        // this FieldsEnum has at least one field\n        final FieldsEnumWithSlice sub = new FieldsEnumWithSlice(subs[i], subSlices[i], i);\n        enumWithSlices.add(sub);\n        sub.current = field;\n        queue.add(sub);\n      }\n    }\n    this.enumWithSlices = enumWithSlices.toArray(FieldsEnumWithSlice.EMPTY_ARRAY);\n\n  }\n\n","sourceOld":"  /** The subs array must be newly initialized FieldsEnum\n   *  (ie, {@link FieldsEnum#next} has not been called. */\n  public MultiFieldsEnum(FieldsEnum[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    terms = new MultiTermsEnum(subSlices);\n    queue = new FieldMergeQueue(subs.length);\n    docValues = new MultiIndexDocValues();\n    top = new FieldsEnumWithSlice[subs.length];\n    List<FieldsEnumWithSlice> enumWithSlices = new ArrayList<FieldsEnumWithSlice>();\n\n    // Init q\n    for(int i=0;i<subs.length;i++) {\n      assert subs[i] != null;\n      final String field = subs[i].next();\n      if (field != null) {\n        // this FieldsEnum has at least one field\n        final FieldsEnumWithSlice sub = new FieldsEnumWithSlice(subs[i], subSlices[i], i);\n        enumWithSlices.add(sub);\n        sub.current = field;\n        queue.add(sub);\n      }\n    }\n    this.enumWithSlices = enumWithSlices.toArray(FieldsEnumWithSlice.EMPTY_ARRAY);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(MultiFields,FieldsEnum[],ReaderUtil.Slice[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(MultiFields,FieldsEnum[],ReaderUtil.Slice[]).mjava","sourceNew":"  /** The subs array must be newly initialized FieldsEnum\n   *  (ie, {@link FieldsEnum#next} has not been called. */\n  public MultiFieldsEnum(MultiFields fields, FieldsEnum[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.fields = fields;\n    terms = new MultiTermsEnum(subSlices);\n    queue = new FieldMergeQueue(subs.length);\n    docValues = new MultiDocValues();\n    top = new FieldsEnumWithSlice[subs.length];\n    List<FieldsEnumWithSlice> enumWithSlices = new ArrayList<FieldsEnumWithSlice>();\n\n    // Init q\n    for(int i=0;i<subs.length;i++) {\n      assert subs[i] != null;\n      final String field = subs[i].next();\n      if (field != null) {\n        // this FieldsEnum has at least one field\n        final FieldsEnumWithSlice sub = new FieldsEnumWithSlice(subs[i], subSlices[i], i);\n        enumWithSlices.add(sub);\n        sub.current = field;\n        queue.add(sub);\n      }\n    }\n    this.enumWithSlices = enumWithSlices.toArray(FieldsEnumWithSlice.EMPTY_ARRAY);\n\n  }\n\n","sourceOld":"  /** The subs array must be newly initialized FieldsEnum\n   *  (ie, {@link FieldsEnum#next} has not been called. */\n  public MultiFieldsEnum(MultiFields fields, FieldsEnum[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.fields = fields;\n    terms = new MultiTermsEnum(subSlices);\n    queue = new FieldMergeQueue(subs.length);\n    docValues = new MultiIndexDocValues();\n    top = new FieldsEnumWithSlice[subs.length];\n    List<FieldsEnumWithSlice> enumWithSlices = new ArrayList<FieldsEnumWithSlice>();\n\n    // Init q\n    for(int i=0;i<subs.length;i++) {\n      assert subs[i] != null;\n      final String field = subs[i].next();\n      if (field != null) {\n        // this FieldsEnum has at least one field\n        final FieldsEnumWithSlice sub = new FieldsEnumWithSlice(subs[i], subSlices[i], i);\n        enumWithSlices.add(sub);\n        sub.current = field;\n        queue.add(sub);\n      }\n    }\n    this.enumWithSlices = enumWithSlices.toArray(FieldsEnumWithSlice.EMPTY_ARRAY);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c6389b3c56f9422ee15ca442f56f4f819156bf6","date":1323535854,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(MultiFields,FieldsEnum[],ReaderUtil.Slice[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(MultiFields,FieldsEnum[],ReaderUtil.Slice[]).mjava","sourceNew":"  /** The subs array must be newly initialized FieldsEnum\n   *  (ie, {@link FieldsEnum#next} has not been called. */\n  public MultiFieldsEnum(MultiFields fields, FieldsEnum[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.fields = fields;\n    queue = new FieldMergeQueue(subs.length);\n    top = new FieldsEnumWithSlice[subs.length];\n    List<FieldsEnumWithSlice> enumWithSlices = new ArrayList<FieldsEnumWithSlice>();\n\n    // Init q\n    for(int i=0;i<subs.length;i++) {\n      assert subs[i] != null;\n      final String field = subs[i].next();\n      if (field != null) {\n        // this FieldsEnum has at least one field\n        final FieldsEnumWithSlice sub = new FieldsEnumWithSlice(subs[i], subSlices[i], i);\n        enumWithSlices.add(sub);\n        sub.current = field;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":"  /** The subs array must be newly initialized FieldsEnum\n   *  (ie, {@link FieldsEnum#next} has not been called. */\n  public MultiFieldsEnum(MultiFields fields, FieldsEnum[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.fields = fields;\n    terms = new MultiTermsEnum(subSlices);\n    queue = new FieldMergeQueue(subs.length);\n    docValues = new MultiIndexDocValues();\n    top = new FieldsEnumWithSlice[subs.length];\n    List<FieldsEnumWithSlice> enumWithSlices = new ArrayList<FieldsEnumWithSlice>();\n\n    // Init q\n    for(int i=0;i<subs.length;i++) {\n      assert subs[i] != null;\n      final String field = subs[i].next();\n      if (field != null) {\n        // this FieldsEnum has at least one field\n        final FieldsEnumWithSlice sub = new FieldsEnumWithSlice(subs[i], subSlices[i], i);\n        enumWithSlices.add(sub);\n        sub.current = field;\n        queue.add(sub);\n      }\n    }\n    this.enumWithSlices = enumWithSlices.toArray(FieldsEnumWithSlice.EMPTY_ARRAY);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cac4d5fa6c305b94f6232a70bda07f096ad0348c","date":1323538980,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(MultiFields,FieldsEnum[],ReaderUtil.Slice[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(MultiFields,FieldsEnum[],ReaderUtil.Slice[]).mjava","sourceNew":"  /** The subs array must be newly initialized FieldsEnum\n   *  (ie, {@link FieldsEnum#next} has not been called. */\n  public MultiFieldsEnum(MultiFields fields, FieldsEnum[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.fields = fields;\n    queue = new FieldMergeQueue(subs.length);\n    top = new FieldsEnumWithSlice[subs.length];\n    List<FieldsEnumWithSlice> enumWithSlices = new ArrayList<FieldsEnumWithSlice>();\n\n    // Init q\n    for(int i=0;i<subs.length;i++) {\n      assert subs[i] != null;\n      final String field = subs[i].next();\n      if (field != null) {\n        // this FieldsEnum has at least one field\n        final FieldsEnumWithSlice sub = new FieldsEnumWithSlice(subs[i], subSlices[i], i);\n        enumWithSlices.add(sub);\n        sub.current = field;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":"  /** The subs array must be newly initialized FieldsEnum\n   *  (ie, {@link FieldsEnum#next} has not been called. */\n  public MultiFieldsEnum(MultiFields fields, FieldsEnum[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.fields = fields;\n    terms = new MultiTermsEnum(subSlices);\n    queue = new FieldMergeQueue(subs.length);\n    docValues = new MultiDocValues();\n    top = new FieldsEnumWithSlice[subs.length];\n    List<FieldsEnumWithSlice> enumWithSlices = new ArrayList<FieldsEnumWithSlice>();\n\n    // Init q\n    for(int i=0;i<subs.length;i++) {\n      assert subs[i] != null;\n      final String field = subs[i].next();\n      if (field != null) {\n        // this FieldsEnum has at least one field\n        final FieldsEnumWithSlice sub = new FieldsEnumWithSlice(subs[i], subSlices[i], i);\n        enumWithSlices.add(sub);\n        sub.current = field;\n        queue.add(sub);\n      }\n    }\n    this.enumWithSlices = enumWithSlices.toArray(FieldsEnumWithSlice.EMPTY_ARRAY);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(MultiFields,FieldsEnum[],ReaderUtil.Slice[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#MultiFieldsEnum(MultiFields,FieldsEnum[],ReaderUtil.Slice[]).mjava","sourceNew":"  /** The subs array must be newly initialized FieldsEnum\n   *  (ie, {@link FieldsEnum#next} has not been called. */\n  public MultiFieldsEnum(MultiFields fields, FieldsEnum[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.fields = fields;\n    queue = new FieldMergeQueue(subs.length);\n    top = new FieldsEnumWithSlice[subs.length];\n    List<FieldsEnumWithSlice> enumWithSlices = new ArrayList<FieldsEnumWithSlice>();\n\n    // Init q\n    for(int i=0;i<subs.length;i++) {\n      assert subs[i] != null;\n      final String field = subs[i].next();\n      if (field != null) {\n        // this FieldsEnum has at least one field\n        final FieldsEnumWithSlice sub = new FieldsEnumWithSlice(subs[i], subSlices[i], i);\n        enumWithSlices.add(sub);\n        sub.current = field;\n        queue.add(sub);\n      }\n    }\n  }\n\n","sourceOld":"  /** The subs array must be newly initialized FieldsEnum\n   *  (ie, {@link FieldsEnum#next} has not been called. */\n  public MultiFieldsEnum(MultiFields fields, FieldsEnum[] subs, ReaderUtil.Slice[] subSlices) throws IOException {\n    this.fields = fields;\n    queue = new FieldMergeQueue(subs.length);\n    top = new FieldsEnumWithSlice[subs.length];\n    List<FieldsEnumWithSlice> enumWithSlices = new ArrayList<FieldsEnumWithSlice>();\n\n    // Init q\n    for(int i=0;i<subs.length;i++) {\n      assert subs[i] != null;\n      final String field = subs[i].next();\n      if (field != null) {\n        // this FieldsEnum has at least one field\n        final FieldsEnumWithSlice sub = new FieldsEnumWithSlice(subs[i], subSlices[i], i);\n        enumWithSlices.add(sub);\n        sub.current = field;\n        queue.add(sub);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"0c6389b3c56f9422ee15ca442f56f4f819156bf6":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0c6389b3c56f9422ee15ca442f56f4f819156bf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"cac4d5fa6c305b94f6232a70bda07f096ad0348c":[],"0c6389b3c56f9422ee15ca442f56f4f819156bf6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"3cc749c053615f5871f3b95715fe292f34e70a53":["0c6389b3c56f9422ee15ca442f56f4f819156bf6","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cac4d5fa6c305b94f6232a70bda07f096ad0348c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}