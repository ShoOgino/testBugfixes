{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","commits":[{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'policies': {\" +\n        \"    'default': {\" +\n        \"      'conditions': [\" +\n        \"        {  replica:'#ANY' , 'nodeRole': '!overseer'},\" +\n        \"        { 'replica': '<2', 'shard': '#EACH', node:'#ANY'}\" +\n        \"      ],\" +\n        \"      'preferences':[\" +\n        \"        {'maximize': 'freedisk', 'precision':50},\" +\n        \"      {'minimize': 'replica', 'precision':50}]\" +\n        \"    },\" +\n        \"    'policy1': {\" +\n        \"      'conditions': [\" +\n        \"        { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"        { 'replica': '<2', 'shard': '#ANY' , node: '#ANY'},\" +\n        \"        { 'replica': '<2', 'shard':'#EACH', 'rack': 'rack1' }\" +\n        \"      ], preferences: [{maximize:freedisk, precision:75}]} } }\");\n    map = (Map) map.get(\"policies\");\n    map = Policy.mergePolicies(\"mycoll\", (Map<String, Object>) map.get(\"policy1\"), (Map<String, Object>) map.get(\"default\"));\n    assertEquals(((List) map.get(\"conditions\")).size(), 4);\n    assertEquals(((List) map.get(\"preferences\")).size(), 2);\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[0]/replica\")), \"1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/replica\")), \"<2\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/shard\")), \"#ANY\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[2]/rack\")), \"rack1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[3]/nodeRole\")), \"!overseer\");\n\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/maximize\")), \"freedisk\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/precision\")), \"75\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[1]/precision\")), \"50\");\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'policies': {\" +\n        \"    'default': {\" +\n        \"      'conditions': [\" +\n        \"        {  replica:'#ANY' , 'nodeRole': '!overseer'},\" +\n        \"        { 'replica': '<2', 'shard': '#EACH', node:'#ANY'}\" +\n        \"      ],\" +\n        \"      'preferences':[\" +\n        \"        {'maximize': 'freedisk', 'precision':50},\" +\n        \"      {'minimize': 'replica', 'precision':50}]\" +\n        \"    },\" +\n        \"    'policy1': {\" +\n        \"      'conditions': [\" +\n        \"        { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"        { 'replica': '<2', 'shard': '#ANY' , node: '#ANY'},\" +\n        \"        { 'replica': '<2', 'shard':'#EACH', 'rack': 'rack1' }\" +\n        \"      ], preferences: [{maximize:freedisk, precision:75}]} } }\");\n    map = (Map) map.get(\"policies\");\n    map = Policy.mergePolicies(\"mycoll\", (Map<String, Object>) map.get(\"policy1\"), (Map<String, Object>) map.get(\"default\"));\n    assertEquals(((List) map.get(\"conditions\")).size(), 4);\n    assertEquals(((List) map.get(\"preferences\")).size(), 2);\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[0]/replica\")), \"1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/replica\")), \"<2\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/shard\")), \"#ANY\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[2]/rack\")), \"rack1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[3]/nodeRole\")), \"!overseer\");\n\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/maximize\")), \"freedisk\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/precision\")), \"75\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[1]/precision\")), \"50\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#ANY', 'nodeRole': '!overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"<2\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\",clauses.get(1).original.get(\"rack\"));\n    assertEquals(\"!overseer\", clauses.get(2).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'policies': {\" +\n        \"    'default': {\" +\n        \"      'conditions': [\" +\n        \"        {  replica:'#ANY' , 'nodeRole': '!overseer'},\" +\n        \"        { 'replica': '<2', 'shard': '#EACH', node:'#ANY'}\" +\n        \"      ],\" +\n        \"      'preferences':[\" +\n        \"        {'maximize': 'freedisk', 'precision':50},\" +\n        \"      {'minimize': 'replica', 'precision':50}]\" +\n        \"    },\" +\n        \"    'policy1': {\" +\n        \"      'conditions': [\" +\n        \"        { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"        { 'replica': '<2', 'shard': '#ANY' , node: '#ANY'},\" +\n        \"        { 'replica': '<2', 'shard':'#EACH', 'rack': 'rack1' }\" +\n        \"      ], preferences: [{maximize:freedisk, precision:75}]} } }\");\n    map = (Map) map.get(\"policies\");\n    map = Policy.mergePolicies(\"mycoll\", (Map<String, Object>) map.get(\"policy1\"), (Map<String, Object>) map.get(\"default\"));\n    assertEquals(((List) map.get(\"conditions\")).size(), 4);\n    assertEquals(((List) map.get(\"preferences\")).size(), 2);\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[0]/replica\")), \"1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/replica\")), \"<2\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[1]/shard\")), \"#ANY\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[2]/rack\")), \"rack1\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"conditions[3]/nodeRole\")), \"!overseer\");\n\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/maximize\")), \"freedisk\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[0]/precision\")), \"75\");\n    assertEquals(String.valueOf(getObjectByPath(map, true, \"preferences[1]/precision\")), \"50\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\",clauses.get(2).original.get(\"rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': '#ANY', 'nodeRole': '!overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"<2\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\",clauses.get(1).original.get(\"rack\"));\n    assertEquals(\"!overseer\", clauses.get(2).original.get(\"nodeRole\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\",clauses.get(2).original.get(\"rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"/dev/null","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","date":1496411842,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"/dev/null","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.getPolicies().get(\"policy1\"), policy.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.getPolicies().get(\"policy1\"), policy.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.policies.get(\"policy1\"), policy.clusterPolicy);\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.getPolicies().get(\"policy1\"), policy.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.getPolicies().get(\"policy1\"), policy.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMerge().mjava","sourceNew":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.getPolicies().get(\"policy1\"), policy.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","sourceOld":"  public void testMerge() {\n\n    Map map = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\");\n    Policy policy = new Policy(map);\n    List<Clause> clauses = Policy.mergePolicies(\"mycoll\", policy.getPolicies().get(\"policy1\"), policy.getClusterPolicy());\n    Collections.sort(clauses);\n    assertEquals(clauses.size(), 4);\n    assertEquals(\"1\", String.valueOf(clauses.get(0).original.get(\"replica\")));\n    assertEquals(\"0\", String.valueOf(clauses.get(1).original.get(\"replica\")));\n    assertEquals(\"#ANY\", clauses.get(3).original.get(\"shard\"));\n    assertEquals(\"rack1\", clauses.get(2).original.get(\"sysprop.rack\"));\n    assertEquals(\"overseer\", clauses.get(1).original.get(\"nodeRole\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["98f11c416d30e556e0004a9a84960702d12d35b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["86fff6c123a5a1d38adb665dd045347219798da9"],"86fff6c123a5a1d38adb665dd045347219798da9":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"e4848fb683db0790f2847173af06e2ad2d03328e":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["e4848fb683db0790f2847173af06e2ad2d03328e","98f11c416d30e556e0004a9a84960702d12d35b1"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"86fff6c123a5a1d38adb665dd045347219798da9":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["86fff6c123a5a1d38adb665dd045347219798da9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}