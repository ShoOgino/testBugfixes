{"path":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","commits":[{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","sourceNew":"  private void validateIndexSortDVType(Sort indexSort, String fieldToValidate, DocValuesType dvType) throws IOException {\n    for (SortField sortField : indexSort.getSort()) {\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new IllegalStateException(\"Cannot sort index with sort order \" + sortField);\n      }\n      sorter.getDocComparator(new DocValuesLeafReader() {\n        @Override\n        public NumericDocValues getNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyNumeric();\n        }\n\n        @Override\n        public BinaryDocValues getBinaryDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.BINARY) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be BINARY but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyBinary();\n        }\n\n        @Override\n        public SortedDocValues getSortedDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySorted();\n        }\n\n        @Override\n        public SortedNumericDocValues getSortedNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedNumeric();\n        }\n\n        @Override\n        public SortedSetDocValues getSortedSetDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_SET) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_SET but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedSet();\n        }\n\n        @Override\n        public FieldInfos getFieldInfos() {\n          throw new UnsupportedOperationException();\n        }\n      }, 0);\n    }\n  }\n\n","sourceOld":"  private void validateIndexSortDVType(Sort indexSort, String fieldToValidate, DocValuesType dvType) throws IOException {\n    for (SortField sortField : indexSort.getSort()) {\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new IllegalStateException(\"Cannot sort index with sort order \" + sortField);\n      }\n      sorter.getDocComparator(new DocValuesLeafReader() {\n        @Override\n        public NumericDocValues getNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyNumeric();\n        }\n\n        @Override\n        public BinaryDocValues getBinaryDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.BINARY) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be BINARY but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyBinary();\n        }\n\n        @Override\n        public SortedDocValues getSortedDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySorted();\n        }\n\n        @Override\n        public SortedNumericDocValues getSortedNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedNumeric();\n        }\n\n        @Override\n        public SortedSetDocValues getSortedSetDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_SET) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_SET but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedSet();\n        }\n\n        @Override\n        public FieldInfos getFieldInfos() {\n          throw new UnsupportedOperationException();\n        }\n      }, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":1,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#validateIndexSortDVType(Sort,String,DocValuesType).mjava","sourceNew":"  private void validateIndexSortDVType(Sort indexSort, String fieldToValidate, DocValuesType dvType) throws IOException {\n    for (SortField sortField : indexSort.getSort()) {\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new IllegalStateException(\"Cannot sort index with sort order \" + sortField);\n      }\n      sorter.getDocComparator(new DocValuesLeafReader() {\n        @Override\n        public NumericDocValues getNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyNumeric();\n        }\n\n        @Override\n        public BinaryDocValues getBinaryDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.BINARY) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be BINARY but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyBinary();\n        }\n\n        @Override\n        public SortedDocValues getSortedDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySorted();\n        }\n\n        @Override\n        public SortedNumericDocValues getSortedNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedNumeric();\n        }\n\n        @Override\n        public SortedSetDocValues getSortedSetDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_SET) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_SET but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedSet();\n        }\n\n        @Override\n        public FieldInfos getFieldInfos() {\n          throw new UnsupportedOperationException();\n        }\n      }, 0);\n    }\n  }\n\n","sourceOld":"  private void validateIndexSortDVType(Sort indexSort, String fieldToValidate, DocValuesType dvType) throws IOException {\n    for (SortField sortField : indexSort.getSort()) {\n      IndexSorter sorter = sortField.getIndexSorter();\n      if (sorter == null) {\n        throw new IllegalStateException(\"Cannot sort index with sort order \" + sortField);\n      }\n      sorter.getDocComparator(new DocValuesLeafReader() {\n        @Override\n        public NumericDocValues getNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyNumeric();\n        }\n\n        @Override\n        public BinaryDocValues getBinaryDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.BINARY) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be BINARY but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptyBinary();\n        }\n\n        @Override\n        public SortedDocValues getSortedDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySorted();\n        }\n\n        @Override\n        public SortedNumericDocValues getSortedNumericDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_NUMERIC) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_NUMERIC but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedNumeric();\n        }\n\n        @Override\n        public SortedSetDocValues getSortedSetDocValues(String field) {\n          if (Objects.equals(field, fieldToValidate) && dvType != DocValuesType.SORTED_SET) {\n            throw new IllegalArgumentException(\"SortField \" + sortField + \" expected field [\" + field + \"] to be SORTED_SET but it is [\" + dvType + \"]\");\n          }\n          return DocValues.emptySortedSet();\n        }\n\n        @Override\n        public FieldInfos getFieldInfos() {\n          throw new UnsupportedOperationException();\n        }\n      }, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["680b6449f09827f58fe987aff279e014c311d966","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}