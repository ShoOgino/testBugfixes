{"path":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#deleteLogs().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#deleteLogs().mjava","pathOld":"/dev/null","sourceNew":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n    FileSystem fs;\n    try {\n      URI uri = new URI(hdfsUri);\n      fs = FileSystem.newInstance(uri, conf);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } catch (URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n    h.close();\n\n    try {\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      for (String file : files) {\n        //new File(logDir, file).delete();\n        fs.delete(new Path(logDir, file), false);\n      }\n\n      assertEquals(0, HdfsUpdateLog.getLogList(fs, new Path(logDir)).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c51d60d4f34c66a3ee711805d96a5fbe0a83740","date":1372986050,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#deleteLogs().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#deleteLogs().mjava","sourceNew":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n    h.close();\n\n    try {\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      for (String file : files) {\n        //new File(logDir, file).delete();\n        fs.delete(new Path(logDir, file), false);\n      }\n\n      assertEquals(0, HdfsUpdateLog.getLogList(fs, new Path(logDir)).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","sourceOld":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n    Configuration conf = new Configuration();\n    conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n    FileSystem fs;\n    try {\n      URI uri = new URI(hdfsUri);\n      fs = FileSystem.newInstance(uri, conf);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } catch (URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n    h.close();\n\n    try {\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      for (String file : files) {\n        //new File(logDir, file).delete();\n        fs.delete(new Path(logDir, file), false);\n      }\n\n      assertEquals(0, HdfsUpdateLog.getLogList(fs, new Path(logDir)).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#deleteLogs().mjava","pathOld":"/dev/null","sourceNew":"  // stops the core, removes the transaction logs, restarts the core.\n  void deleteLogs() throws Exception {\n    String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n    h.close();\n\n    try {\n      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));\n      for (String file : files) {\n        //new File(logDir, file).delete();\n        fs.delete(new Path(logDir, file), false);\n      }\n\n      assertEquals(0, HdfsUpdateLog.getLogList(fs, new Path(logDir)).length);\n    } finally {\n      // make sure we create the core again, even if the assert fails so it won't mess\n      // up the next test.\n      createCore();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==\");   // ensure it works\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c51d60d4f34c66a3ee711805d96a5fbe0a83740":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c51d60d4f34c66a3ee711805d96a5fbe0a83740"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c51d60d4f34c66a3ee711805d96a5fbe0a83740"]},"commit2Childs":{"7c51d60d4f34c66a3ee711805d96a5fbe0a83740":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["7c51d60d4f34c66a3ee711805d96a5fbe0a83740"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}