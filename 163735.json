{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7a2fb72910dc110efb34c773de307e5cbe4305a","date":1312025755,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (ParseException e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      addException(\"Exception during facet counts\", e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (ParseException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (ParseException e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during facet counts\", e);\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a2ba67a463f52915e77a5fd8714aa7d36faf59c","date":1348538193,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (ParseException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determing if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (ParseException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (ParseException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (ParseException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<Object>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see #getFacetIntervalCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n      facetResponse.add(\"facet_intervals\", getFacetIntervalCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59d82b0be40ecfcc2c94c776b324e0903a62b844","date":1423535462,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see #getFacetIntervalCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n      facetResponse.add(\"facet_intervals\", getFacetIntervalCounts());\n      facetResponse.add(SpatialHeatmapFacets.RESPONSE_KEY, getHeatmapCounts());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see #getFacetIntervalCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n      facetResponse.add(\"facet_intervals\", getFacetIntervalCounts());\n\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa62c79a7afa4d7f22e1f71b883659f3213d7db1","date":1435334422,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see #getFacetIntervalCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!global.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n      facetResponse.add(\"facet_intervals\", getFacetIntervalCounts());\n      facetResponse.add(SpatialHeatmapFacets.RESPONSE_KEY, getHeatmapCounts());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see #getFacetIntervalCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!params.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n      facetResponse.add(\"facet_intervals\", getFacetIntervalCounts());\n      facetResponse.add(SpatialHeatmapFacets.RESPONSE_KEY, getHeatmapCounts());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":["c4fe52b26cfcf59d6b3f30b128e9f5985f2fa4ef"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @return a NamedList of Facet Count info or null\n   * @deprecated use {@link org.apache.solr.handler.component.FacetComponent#getFacetCounts(SimpleFacets)} instead\n   */\n  @Deprecated\n  public NamedList<Object> getFacetCounts() {\n    return FacetComponent.getFacetCounts(this);\n  }\n\n","sourceOld":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @see #getFacetQueryCounts\n   * @see #getFacetFieldCounts\n   * @see #getFacetDateCounts\n   * @see #getFacetRangeCounts\n   * @see #getFacetIntervalCounts\n   * @see FacetParams#FACET\n   * @return a NamedList of Facet Count info or null\n   */\n  public NamedList<Object> getFacetCounts() {\n\n    // if someone called this method, benefit of the doubt: assume true\n    if (!global.getBool(FacetParams.FACET,true))\n      return null;\n\n    facetResponse = new SimpleOrderedMap<>();\n    try {\n      facetResponse.add(\"facet_queries\", getFacetQueryCounts());\n      facetResponse.add(\"facet_fields\", getFacetFieldCounts());\n      facetResponse.add(\"facet_dates\", getFacetDateCounts());\n      facetResponse.add(\"facet_ranges\", getFacetRangeCounts());\n      facetResponse.add(\"facet_intervals\", getFacetIntervalCounts());\n      facetResponse.add(SpatialHeatmapFacets.RESPONSE_KEY, getHeatmapCounts());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (SyntaxError e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, e);\n    }\n    return facetResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cb24c5fa70ba12290e43b3aa0feab5582863ee","date":1457033685,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":null,"sourceOld":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @return a NamedList of Facet Count info or null\n   * @deprecated use {@link org.apache.solr.handler.component.FacetComponent#getFacetCounts(SimpleFacets)} instead\n   */\n  @Deprecated\n  public NamedList<Object> getFacetCounts() {\n    return FacetComponent.getFacetCounts(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetCounts().mjava","sourceNew":null,"sourceOld":"  /**\n   * Looks at various Params to determining if any simple Facet Constraint count\n   * computations are desired.\n   *\n   * @return a NamedList of Facet Count info or null\n   * @deprecated use {@link org.apache.solr.handler.component.FacetComponent#getFacetCounts(SimpleFacets)} instead\n   */\n  @Deprecated\n  public NamedList<Object> getFacetCounts() {\n    return FacetComponent.getFacetCounts(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d82b0be40ecfcc2c94c776b324e0903a62b844":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c","3cdb67100dc016748799a77218aa409478372d79"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a2ba67a463f52915e77a5fd8714aa7d36faf59c":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["d7a2fb72910dc110efb34c773de307e5cbe4305a"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["22d0a81a05eba47d5e18976f17d88306b218cc22","15cb24c5fa70ba12290e43b3aa0feab5582863ee"],"d7a2fb72910dc110efb34c773de307e5cbe4305a":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"59d82b0be40ecfcc2c94c776b324e0903a62b844":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"3cdb67100dc016748799a77218aa409478372d79":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"c26f00b574427b55127e869b935845554afde1fa":["d7a2fb72910dc110efb34c773de307e5cbe4305a"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"aa62c79a7afa4d7f22e1f71b883659f3213d7db1":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"7a2ba67a463f52915e77a5fd8714aa7d36faf59c":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["15cb24c5fa70ba12290e43b3aa0feab5582863ee","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["7a2ba67a463f52915e77a5fd8714aa7d36faf59c"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7a2fb72910dc110efb34c773de307e5cbe4305a":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}