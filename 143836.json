{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"273ff2f5b0b365591fcbe91ea23b5e97027ca60d","date":1551111277,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      // look for core props file\n      Path instancedir = core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","bugFix":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","816521ebaad5add9cb96bb88c577394e2938c40b","84898c2f58f13c1cc1618ab127b016f025e49a31"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91f7dccce9b0ec051304926da532b96944956895","date":1551188806,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      // look for core props file\n      Path instancedir = core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n\n      // look for core props file\n      Path instancedir = (Path) core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#checkInstanceDirs(JettySolrRunner).mjava","sourceNew":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      // look for core props file\n      Path instancedir = core.getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n    }\n  }\n\n","sourceOld":"  private void checkInstanceDirs(JettySolrRunner jetty) throws IOException {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      // look for core props file\n      Path instancedir = core.getResourceLoader().getInstancePath();\n      assertTrue(\"Could not find expected core.properties file\", Files.exists(instancedir.resolve(\"core.properties\")));\n\n      Path expected = Paths.get(jetty.getSolrHome()).toAbsolutePath().resolve(core.getName());\n\n      assertTrue(\"Expected: \" + expected + \"\\nFrom core stats: \" + instancedir, Files.isSameFile(expected, instancedir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["91f7dccce9b0ec051304926da532b96944956895"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"91f7dccce9b0ec051304926da532b96944956895":["b94236357aaa22b76c10629851fe4e376e0cea82","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"273ff2f5b0b365591fcbe91ea23b5e97027ca60d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["91f7dccce9b0ec051304926da532b96944956895","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"91f7dccce9b0ec051304926da532b96944956895":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"273ff2f5b0b365591fcbe91ea23b5e97027ca60d":["91f7dccce9b0ec051304926da532b96944956895"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}