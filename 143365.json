{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"No such core exists '\"+cname+\"'\");\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          for (File file : dataDir.listFiles()) {\n            if (!file.delete()) {\n              log.error(file.getAbsolutePath() + \" could not be deleted on core unload\");\n            }\n          }\n          if (!dataDir.delete()) log.error(dataDir.getAbsolutePath() + \" could not be deleted on core unload\");\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"No such core exists '\"+cname+\"'\");\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          for (File file : dataDir.listFiles()) {\n            if (!file.delete()) {\n              log.error(file.getAbsolutePath() + \" could not be deleted on core unload\");\n            }\n          }\n          if (!dataDir.delete()) log.error(dataDir.getAbsolutePath() + \" could not be deleted on core unload\");\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"No such core exists '\"+cname+\"'\");\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          for (File file : dataDir.listFiles()) {\n            if (!file.delete()) {\n              log.error(file.getAbsolutePath() + \" could not be deleted on core unload\");\n            }\n          }\n          if (!dataDir.delete()) log.error(dataDir.getAbsolutePath() + \" could not be deleted on core unload\");\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"No such core exists '\"+cname+\"'\");\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          for (File file : dataDir.listFiles()) {\n            if (!file.delete()) {\n              log.error(file.getAbsolutePath() + \" could not be deleted on core unload\");\n            }\n          }\n          if (!dataDir.delete()) log.error(dataDir.getAbsolutePath() + \" could not be deleted on core unload\");\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"No such core exists '\"+cname+\"'\");\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          for (File file : dataDir.listFiles()) {\n            if (!file.delete()) {\n              log.error(file.getAbsolutePath() + \" could not be deleted on core unload\");\n            }\n          }\n          if (!dataDir.delete()) log.error(dataDir.getAbsolutePath() + \" could not be deleted on core unload\");\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"No such core exists '\"+cname+\"'\");\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          for (File file : dataDir.listFiles()) {\n            if (!file.delete()) {\n              log.error(file.getAbsolutePath() + \" could not be deleted on core unload\");\n            }\n          }\n          if (!dataDir.delete()) log.error(dataDir.getAbsolutePath() + \" could not be deleted on core unload\");\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc11c2802e4a0412024f1d4826630f2dac775f2","date":1312987743,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"No such core exists '\"+cname+\"'\");\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          File[] files = dataDir.listFiles();\n          if (files != null) {\n            for (File file : files) {\n              if (!file.delete()) {\n                log.error(file.getAbsolutePath()\n                    + \" could not be deleted on core unload\");\n              }\n            }\n            if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          } else {\n            log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          }\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"No such core exists '\"+cname+\"'\");\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          for (File file : dataDir.listFiles()) {\n            if (!file.delete()) {\n              log.error(file.getAbsolutePath() + \" could not be deleted on core unload\");\n            }\n          }\n          if (!dataDir.delete()) log.error(dataDir.getAbsolutePath() + \" could not be deleted on core unload\");\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No such core exists '\" + cname + \"'\");\n    } else {\n      if (coreContainer.getZkController() != null) {\n        log.info(\"Unregistering core \" + cname + \" from cloudstate.\");\n        try {\n          coreContainer.getZkController().unregister(cname, core.getCoreDescriptor().getCloudDescriptor());\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not unregister core \" + cname + \" from cloudstate: \"\n                  + e.getMessage(), e);\n        } catch (KeeperException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not unregister core \" + cname + \" from cloudstate: \"\n                  + e.getMessage(), e);\n        }\n      }\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          File[] files = dataDir.listFiles();\n          if (files != null) {\n            for (File file : files) {\n              if (!file.delete()) {\n                log.error(file.getAbsolutePath()\n                    + \" could not be deleted on core unload\");\n              }\n            }\n            if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          } else {\n            log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          }\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"No such core exists '\"+cname+\"'\");\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          File[] files = dataDir.listFiles();\n          if (files != null) {\n            for (File file : files) {\n              if (!file.delete()) {\n                log.error(file.getAbsolutePath()\n                    + \" could not be deleted on core unload\");\n              }\n            }\n            if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          } else {\n            log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          }\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No such core exists '\" + cname + \"'\");\n    } else {\n      if (coreContainer.getZkController() != null) {\n        log.info(\"Unregistering core \" + cname + \" from cloudstate.\");\n        try {\n          coreContainer.getZkController().unregister(cname, core.getCoreDescriptor().getCloudDescriptor());\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not unregister core \" + cname + \" from cloudstate: \"\n                  + e.getMessage(), e);\n        } catch (KeeperException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not unregister core \" + cname + \" from cloudstate: \"\n                  + e.getMessage(), e);\n        }\n      }\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          File[] files = dataDir.listFiles();\n          if (files != null) {\n            for (File file : files) {\n              if (!file.delete()) {\n                log.error(file.getAbsolutePath()\n                    + \" could not be deleted on core unload\");\n              }\n            }\n            if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          } else {\n            log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          }\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"No such core exists '\"+cname+\"'\");\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          File[] files = dataDir.listFiles();\n          if (files != null) {\n            for (File file : files) {\n              if (!file.delete()) {\n                log.error(file.getAbsolutePath()\n                    + \" could not be deleted on core unload\");\n              }\n            }\n            if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          } else {\n            log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          }\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getIndexDir());\n            File[] files = dataDir.listFiles();\n            if (files != null) {\n              for (File file : files) {\n                if (!file.delete()) {\n                  log.error(file.getAbsolutePath()\n                      + \" could not be deleted on core unload\");\n                }\n              }\n              if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            } else {\n              log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      if (core != null) core.close();\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No such core exists '\" + cname + \"'\");\n    } else {\n      if (coreContainer.getZkController() != null) {\n        log.info(\"Unregistering core \" + cname + \" from cloudstate.\");\n        try {\n          coreContainer.getZkController().unregister(cname, core.getCoreDescriptor().getCloudDescriptor());\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not unregister core \" + cname + \" from cloudstate: \"\n                  + e.getMessage(), e);\n        } catch (KeeperException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not unregister core \" + cname + \" from cloudstate: \"\n                  + e.getMessage(), e);\n        }\n      }\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          File[] files = dataDir.listFiles();\n          if (files != null) {\n            for (File file : files) {\n              if (!file.delete()) {\n                log.error(file.getAbsolutePath()\n                    + \" could not be deleted on core unload\");\n              }\n            }\n            if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          } else {\n            log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          }\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","bugFix":null,"bugIntro":["882410878160f2dadf6bede08bda2593b87c4b82","d0ce568448269aad19a317e537eefc0993934c9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getIndexDir());\n            File[] files = dataDir.listFiles();\n            if (files != null) {\n              for (File file : files) {\n                if (!file.delete()) {\n                  log.error(file.getAbsolutePath()\n                      + \" could not be deleted on core unload\");\n                }\n              }\n              if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            } else {\n              log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      if (core != null) core.close();\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    if(core == null){\n       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"No such core exists '\" + cname + \"'\");\n    } else {\n      if (coreContainer.getZkController() != null) {\n        log.info(\"Unregistering core \" + cname + \" from cloudstate.\");\n        try {\n          coreContainer.getZkController().unregister(cname, core.getCoreDescriptor().getCloudDescriptor());\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not unregister core \" + cname + \" from cloudstate: \"\n                  + e.getMessage(), e);\n        } catch (KeeperException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not unregister core \" + cname + \" from cloudstate: \"\n                  + e.getMessage(), e);\n        }\n      }\n    }\n    if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {}\n\n        @Override\n        public void postClose(SolrCore core) {\n          File dataDir = new File(core.getIndexDir());\n          File[] files = dataDir.listFiles();\n          if (files != null) {\n            for (File file : files) {\n              if (!file.delete()) {\n                log.error(file.getAbsolutePath()\n                    + \" could not be deleted on core unload\");\n              }\n            }\n            if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          } else {\n            log.error(dataDir.getAbsolutePath()\n                + \" could not be deleted on core unload\");\n          }\n        }\n      });\n    }\n    core.close();\n    return coreContainer.isPersistent();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getIndexDir());\n            File[] files = dataDir.listFiles();\n            if (files != null) {\n              for (File file : files) {\n                if (!file.delete()) {\n                  log.error(file.getAbsolutePath()\n                      + \" could not be deleted on core unload\");\n                }\n              }\n              if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            } else {\n              log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      if (core != null) core.close();\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getIndexDir());\n            File[] files = dataDir.listFiles();\n            if (files != null) {\n              for (File file : files) {\n                if (!file.delete()) {\n                  log.error(file.getAbsolutePath()\n                      + \" could not be deleted on core unload\");\n                }\n              }\n              if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            } else {\n              log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      if (core != null) core.close();\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e71cbdfcf34d779dd7e7ba148dfff6022f2005a","date":1351228731,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getIndexDir());\n            File[] files = dataDir.listFiles();\n            if (files != null) {\n              for (File file : files) {\n                if (!file.delete()) {\n                  log.error(file.getAbsolutePath()\n                      + \" could not be deleted on core unload\");\n                }\n              }\n              if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            } else {\n              log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getIndexDir());\n            File[] files = dataDir.listFiles();\n            if (files != null) {\n              for (File file : files) {\n                if (!file.delete()) {\n                  log.error(file.getAbsolutePath()\n                      + \" could not be deleted on core unload\");\n                }\n              }\n              if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            } else {\n              log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      if (core != null) core.close();\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":["4bf7f9f53612fef6f228670ddd031bbdfaa1218b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            Directory dir = null;\n            try {\n              dir = core.getDirectoryFactory().get(core.getIndexDir(), null);\n              core.getDirectoryFactory().remove(dir);\n              core.getDirectoryFactory().doneWithDirectory(dir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } finally {\n              if (dir != null) {\n                try {\n                  core.getDirectoryFactory().release(dir);\n                } catch (IOException e) {\n                  log.error(\"IOException trying to release directory\", e);\n                }\n              }\n            }\n            try {\n              core.getDirectoryFactory().remove(dir);\n            } catch (IOException e) {\n              log.error(\"IOException trying to remove directory\", e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getIndexDir());\n            File[] files = dataDir.listFiles();\n            if (files != null) {\n              for (File file : files) {\n                if (!file.delete()) {\n                  log.error(file.getAbsolutePath()\n                      + \" could not be deleted on core unload\");\n                }\n              }\n              if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            } else {\n              log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":["882410878160f2dadf6bede08bda2593b87c4b82","718607d99d02778db3280e64975663762c94170d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            Directory dir = null;\n            try {\n              dir = core.getDirectoryFactory().get(core.getIndexDir(), null);\n              core.getDirectoryFactory().remove(dir);\n              core.getDirectoryFactory().doneWithDirectory(dir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } finally {\n              if (dir != null) {\n                try {\n                  core.getDirectoryFactory().release(dir);\n                } catch (IOException e) {\n                  log.error(\"IOException trying to release directory\", e);\n                }\n              }\n            }\n            try {\n              core.getDirectoryFactory().remove(dir);\n            } catch (IOException e) {\n              log.error(\"IOException trying to remove directory\", e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getIndexDir());\n            File[] files = dataDir.listFiles();\n            if (files != null) {\n              for (File file : files) {\n                if (!file.delete()) {\n                  log.error(file.getAbsolutePath()\n                      + \" could not be deleted on core unload\");\n                }\n              }\n              if (!dataDir.delete()) log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            } else {\n              log.error(dataDir.getAbsolutePath()\n                  + \" could not be deleted on core unload\");\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      if (core != null) core.close();\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718607d99d02778db3280e64975663762c94170d","date":1354986964,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            Directory dir = null;\n            try {\n              dir = core.getDirectoryFactory().get(core.getIndexDir(), core.getSolrConfig().indexConfig.lockType);\n              core.getDirectoryFactory().remove(dir);\n              core.getDirectoryFactory().doneWithDirectory(dir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } finally {\n              if (dir != null) {\n                try {\n                  core.getDirectoryFactory().release(dir);\n                } catch (IOException e) {\n                  log.error(\"IOException trying to release directory\", e);\n                }\n              }\n            }\n            try {\n              core.getDirectoryFactory().remove(dir);\n            } catch (IOException e) {\n              log.error(\"IOException trying to remove directory\", e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            Directory dir = null;\n            try {\n              dir = core.getDirectoryFactory().get(core.getIndexDir(), null);\n              core.getDirectoryFactory().remove(dir);\n              core.getDirectoryFactory().doneWithDirectory(dir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } finally {\n              if (dir != null) {\n                try {\n                  core.getDirectoryFactory().release(dir);\n                } catch (IOException e) {\n                  log.error(\"IOException trying to release directory\", e);\n                }\n              }\n            }\n            try {\n              core.getDirectoryFactory().remove(dir);\n            } catch (IOException e) {\n              log.error(\"IOException trying to remove directory\", e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":["882410878160f2dadf6bede08bda2593b87c4b82"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            Directory dir = null;\n            try {\n              dir = core.getDirectoryFactory().get(core.getIndexDir(), core.getSolrConfig().indexConfig.lockType);\n              core.getDirectoryFactory().remove(dir);\n              core.getDirectoryFactory().doneWithDirectory(dir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } finally {\n              if (dir != null) {\n                try {\n                  core.getDirectoryFactory().release(dir);\n                } catch (IOException e) {\n                  log.error(\"IOException trying to release directory\", e);\n                }\n              }\n            }\n            try {\n              core.getDirectoryFactory().remove(dir);\n            } catch (IOException e) {\n              log.error(\"IOException trying to remove directory\", e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            Directory dir = null;\n            try {\n              dir = core.getDirectoryFactory().get(core.getIndexDir(), null);\n              core.getDirectoryFactory().remove(dir);\n              core.getDirectoryFactory().doneWithDirectory(dir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } finally {\n              if (dir != null) {\n                try {\n                  core.getDirectoryFactory().release(dir);\n                } catch (IOException e) {\n                  log.error(\"IOException trying to release directory\", e);\n                }\n              }\n            }\n            try {\n              core.getDirectoryFactory().remove(dir);\n            } catch (IOException e) {\n              log.error(\"IOException trying to remove directory\", e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"882410878160f2dadf6bede08bda2593b87c4b82","date":1355338140,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            try {\n              core.getDirectoryFactory().remove(core.getIndexDir());\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            Directory dir = null;\n            try {\n              dir = core.getDirectoryFactory().get(core.getIndexDir(), core.getSolrConfig().indexConfig.lockType);\n              core.getDirectoryFactory().remove(dir);\n              core.getDirectoryFactory().doneWithDirectory(dir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } finally {\n              if (dir != null) {\n                try {\n                  core.getDirectoryFactory().release(dir);\n                } catch (IOException e) {\n                  log.error(\"IOException trying to release directory\", e);\n                }\n              }\n            }\n            try {\n              core.getDirectoryFactory().remove(dir);\n            } catch (IOException e) {\n              log.error(\"IOException trying to remove directory\", e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":["33d0ed80b7b47e34ad3ff033a77544563aba3085","d9405f486872f1e416304dfe389741f4ee2f8a4d","718607d99d02778db3280e64975663762c94170d"],"bugIntro":["d0ce568448269aad19a317e537eefc0993934c9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            try {\n              core.getDirectoryFactory().remove(core.getIndexDir());\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            Directory dir = null;\n            try {\n              dir = core.getDirectoryFactory().get(core.getIndexDir(), core.getSolrConfig().indexConfig.lockType);\n              core.getDirectoryFactory().remove(dir);\n              core.getDirectoryFactory().doneWithDirectory(dir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            } finally {\n              if (dir != null) {\n                try {\n                  core.getDirectoryFactory().release(dir);\n                } catch (IOException e) {\n                  log.error(\"IOException trying to release directory\", e);\n                }\n              }\n            }\n            try {\n              core.getDirectoryFactory().remove(dir);\n            } catch (IOException e) {\n              log.error(\"IOException trying to remove directory\", e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ce568448269aad19a317e537eefc0993934c9d","date":1361139215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          private String indexDir;\n          \n          @Override\n          public void preClose(SolrCore core) {\n            indexDir = core.getIndexDir();\n          }\n          \n          @Override\n          public void postClose(SolrCore core) {\n            try {\n              core.getDirectoryFactory().remove(indexDir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            try {\n              core.getDirectoryFactory().remove(core.getIndexDir());\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":["33d0ed80b7b47e34ad3ff033a77544563aba3085","882410878160f2dadf6bede08bda2593b87c4b82"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          private String indexDir;\n          \n          @Override\n          public void preClose(SolrCore core) {\n            indexDir = core.getIndexDir();\n          }\n          \n          @Override\n          public void postClose(SolrCore core) {\n            try {\n              core.getDirectoryFactory().remove(indexDir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            try {\n              core.getDirectoryFactory().remove(core.getIndexDir());\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          private String indexDir;\n          \n          @Override\n          public void preClose(SolrCore core) {\n            indexDir = core.getIndexDir();\n          }\n          \n          @Override\n          public void postClose(SolrCore core) {\n            try {\n              core.getDirectoryFactory().remove(indexDir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor().getCloudDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          private String indexDir;\n          \n          @Override\n          public void preClose(SolrCore core) {\n            indexDir = core.getIndexDir();\n          }\n          \n          @Override\n          public void postClose(SolrCore core) {\n            try {\n              core.getDirectoryFactory().remove(indexDir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4dcfb92697fbd03e488cf9e5155514e3270d0fc3","date":1363541819,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n      if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n        core.addCloseHook(new CloseHook() {\n          private String indexDir;\n          \n          @Override\n          public void preClose(SolrCore core) {\n            indexDir = core.getIndexDir();\n          }\n          \n          @Override\n          public void postClose(SolrCore core) {\n            try {\n              core.getDirectoryFactory().remove(indexDir);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2295e2775c39b05b81f566701b1e7e9475128f2","date":1363552877,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir());\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      \n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            File dataDir = new File(core.getDataDir());\n            try {\n              FileUtils.deleteDirectory(dataDir);\n            } catch (IOException e) {\n              SolrException.log(log, \"Failed to delete data dir for core:\"\n                  + core.getName() + \" dir:\" + dataDir.getAbsolutePath());\n            }\n          }\n        });\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a4780bc0c0c5d86e6998d8e9ae0928ec3016205","date":1363621000,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir());\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    return coreContainer.isPersistent();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bf7f9f53612fef6f228670ddd031bbdfaa1218b","date":1383842832,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    Boolean closeCore = true;\n    if (!coreContainer.isLoadedNotPendingClose(cname)) {\n      closeCore = false;\n    }\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        if (closeCore) {\n          core.close();\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        core.close();\n      }\n    }\n    \n  }\n\n","bugFix":["5e71cbdfcf34d779dd7e7ba148dfff6022f2005a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd548b14f1051e707393e77329f80c5e89f69919","date":1385226862,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    Boolean closeCore = true;\n    if (!coreContainer.isLoadedNotPendingClose(cname)) {\n      closeCore = false;\n    }\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          // we are unloading, cancel any ongoing recovery\n          // so there are no races to publish state\n          // we will try to cancel again later before close\n          if (core != null) {\n            if (coreContainer.getZkController() != null) {\n              core.getSolrCoreState().cancelRecovery();\n            }\n          }\n          \n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        if (closeCore) {\n          core.close();\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    Boolean closeCore = true;\n    if (!coreContainer.isLoadedNotPendingClose(cname)) {\n      closeCore = false;\n    }\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        if (closeCore) {\n          core.close();\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    Boolean closeCore = true;\n    if (!coreContainer.isLoadedNotPendingClose(cname)) {\n      closeCore = false;\n    }\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          // we are unloading, cancel any ongoing recovery\n          // so there are no races to publish state\n          // we will try to cancel again later before close\n          if (core != null) {\n            if (coreContainer.getZkController() != null) {\n              core.getSolrCoreState().cancelRecovery();\n            }\n          }\n          \n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        if (closeCore) {\n          core.close();\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    Boolean closeCore = true;\n    if (!coreContainer.isLoadedNotPendingClose(cname)) {\n      closeCore = false;\n    }\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        if (closeCore) {\n          core.close();\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4549684d134fc66062df3e183cd18bb7d1db1403","date":1388988915,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    Boolean closeCore = true;\n    if (!coreContainer.isLoadedNotPendingClose(cname)) {\n      closeCore = false;\n    }\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          // we are unloading, cancel any ongoing recovery\n          if (core != null) {\n            if (coreContainer.getZkController() != null) {\n              core.getSolrCoreState().cancelRecovery();\n            }\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        if (closeCore) {\n          core.close();\n        }\n        \n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    Boolean closeCore = true;\n    if (!coreContainer.isLoadedNotPendingClose(cname)) {\n      closeCore = false;\n    }\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          // we are unloading, cancel any ongoing recovery\n          // so there are no races to publish state\n          // we will try to cancel again later before close\n          if (core != null) {\n            if (coreContainer.getZkController() != null) {\n              core.getSolrCoreState().cancelRecovery();\n            }\n          }\n          \n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        if (closeCore) {\n          core.close();\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean deleteIndexDir = params.getBool(CoreAdminParams.DELETE_INDEX, false);\n    boolean deleteDataDir = params.getBool(CoreAdminParams.DELETE_DATA_DIR, false);\n    boolean deleteInstanceDir = params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false);\n\n    coreContainer.unload(cname, deleteIndexDir, deleteDataDir, deleteInstanceDir);\n\n  }\n\n","sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws SolrException {\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    Boolean closeCore = true;\n    if (!coreContainer.isLoadedNotPendingClose(cname)) {\n      closeCore = false;\n    }\n    SolrCore core = coreContainer.remove(cname);\n    try {\n      if (core == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"No such core exists '\" + cname + \"'\");\n      } else {\n        if (coreContainer.getZkController() != null) {\n          // we are unloading, cancel any ongoing recovery\n          if (core != null) {\n            if (coreContainer.getZkController() != null) {\n              core.getSolrCoreState().cancelRecovery();\n            }\n          }\n        }\n        \n        if (params.getBool(CoreAdminParams.DELETE_INDEX, false)) {\n          try {\n            core.getDirectoryFactory().remove(core.getIndexDir());\n          } catch (Exception e) {\n            SolrException.log(log, \"Failed to flag index dir for removal for core:\"\n                    + core.getName() + \" dir:\" + core.getIndexDir());\n          }\n        }\n      }\n\n      if (params.getBool(CoreAdminParams.DELETE_DATA_DIR, false)) {\n        try {\n          core.getDirectoryFactory().remove(core.getDataDir(), true);\n        } catch (Exception e) {\n          SolrException.log(log, \"Failed to flag data dir for removal for core:\"\n                  + core.getName() + \" dir:\" + core.getDataDir());\n        }\n      }\n      \n      if (params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false)) {\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {}\n          \n          @Override\n          public void postClose(SolrCore core) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              File instanceDir = new File(cd.getInstanceDir());\n              try {\n                FileUtils.deleteDirectory(instanceDir);\n              } catch (IOException e) {\n                SolrException.log(log, \"Failed to delete instance dir for core:\"\n                    + core.getName() + \" dir:\" + instanceDir.getAbsolutePath());\n              }\n            }\n          }\n        });\n      }\n    } finally {\n      // it's important that we try and cancel recovery\n      // before we close here - else we might close the\n      // core *in* recovery and end up locked in recovery\n      // waiting to for recovery to be cancelled\n      if (core != null) {\n        if (coreContainer.getZkController() != null) {\n          core.getSolrCoreState().cancelRecovery();\n        }\n        if (closeCore) {\n          core.close();\n        }\n        \n        if (coreContainer.getZkController() != null) {\n          log.info(\"Unregistering core \" + core.getName() + \" from cloudstate.\");\n          try {\n            coreContainer.getZkController().unregister(cname,\n                core.getCoreDescriptor());\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          } catch (KeeperException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Could not unregister core \" + cname + \" from cloudstate: \"\n                    + e.getMessage(), e);\n          }\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0876236f0bd8be403747120d248bdd42b75a96","date":1451844229,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleUnloadAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Handle \"UNLOAD\" Action\n   */\n  protected void handleUnloadAction(SolrQueryRequest req, SolrQueryResponse rsp) throws SolrException {\n\n    SolrParams params = req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean deleteIndexDir = params.getBool(CoreAdminParams.DELETE_INDEX, false);\n    boolean deleteDataDir = params.getBool(CoreAdminParams.DELETE_DATA_DIR, false);\n    boolean deleteInstanceDir = params.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, false);\n\n    coreContainer.unload(cname, deleteIndexDir, deleteDataDir, deleteInstanceDir);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","882410878160f2dadf6bede08bda2593b87c4b82"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3a4780bc0c0c5d86e6998d8e9ae0928ec3016205","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["4cc11c2802e4a0412024f1d4826630f2dac775f2","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["5e71cbdfcf34d779dd7e7ba148dfff6022f2005a"],"5e71cbdfcf34d779dd7e7ba148dfff6022f2005a":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["882410878160f2dadf6bede08bda2593b87c4b82","d0ce568448269aad19a317e537eefc0993934c9d"],"4cc11c2802e4a0412024f1d4826630f2dac775f2":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4bf7f9f53612fef6f228670ddd031bbdfaa1218b":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["3a4780bc0c0c5d86e6998d8e9ae0928ec3016205"],"882410878160f2dadf6bede08bda2593b87c4b82":["718607d99d02778db3280e64975663762c94170d"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd548b14f1051e707393e77329f80c5e89f69919":["4bf7f9f53612fef6f228670ddd031bbdfaa1218b"],"d0ce568448269aad19a317e537eefc0993934c9d":["882410878160f2dadf6bede08bda2593b87c4b82"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","718607d99d02778db3280e64975663762c94170d"],"fa0876236f0bd8be403747120d248bdd42b75a96":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"4dcfb92697fbd03e488cf9e5155514e3270d0fc3":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["4cc11c2802e4a0412024f1d4826630f2dac775f2"],"3a4780bc0c0c5d86e6998d8e9ae0928ec3016205":["e2295e2775c39b05b81f566701b1e7e9475128f2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c51a2dcb8b4e1820a44f35f11961110201e06cdb","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["4549684d134fc66062df3e183cd18bb7d1db1403"],"e2295e2775c39b05b81f566701b1e7e9475128f2":["4dcfb92697fbd03e488cf9e5155514e3270d0fc3"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["4bf7f9f53612fef6f228670ddd031bbdfaa1218b","cd548b14f1051e707393e77329f80c5e89f69919"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"718607d99d02778db3280e64975663762c94170d":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"4549684d134fc66062df3e183cd18bb7d1db1403":["cd548b14f1051e707393e77329f80c5e89f69919"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["d0ce568448269aad19a317e537eefc0993934c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0876236f0bd8be403747120d248bdd42b75a96"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["4cc11c2802e4a0412024f1d4826630f2dac775f2"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","407687e67faf6e1f02a211ca078d8e3eed631027","718607d99d02778db3280e64975663762c94170d"],"5e71cbdfcf34d779dd7e7ba148dfff6022f2005a":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"4cc11c2802e4a0412024f1d4826630f2dac775f2":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4bf7f9f53612fef6f228670ddd031bbdfaa1218b":["cd548b14f1051e707393e77329f80c5e89f69919","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"882410878160f2dadf6bede08bda2593b87c4b82":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","09c8567c25c02eeeb3e719841606a1269f3538ca","d0ce568448269aad19a317e537eefc0993934c9d"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4bf7f9f53612fef6f228670ddd031bbdfaa1218b"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd548b14f1051e707393e77329f80c5e89f69919":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","4549684d134fc66062df3e183cd18bb7d1db1403"],"d0ce568448269aad19a317e537eefc0993934c9d":["09c8567c25c02eeeb3e719841606a1269f3538ca","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["5e71cbdfcf34d779dd7e7ba148dfff6022f2005a","f2126b84bd093fa3d921582a109a0ee578c28126"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"fa0876236f0bd8be403747120d248bdd42b75a96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4dcfb92697fbd03e488cf9e5155514e3270d0fc3":["e2295e2775c39b05b81f566701b1e7e9475128f2"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a4780bc0c0c5d86e6998d8e9ae0928ec3016205":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"2d629ca62e3b8ab6e29a127aebe213163d490413":["fa0876236f0bd8be403747120d248bdd42b75a96"],"e2295e2775c39b05b81f566701b1e7e9475128f2":["3a4780bc0c0c5d86e6998d8e9ae0928ec3016205"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"718607d99d02778db3280e64975663762c94170d":["882410878160f2dadf6bede08bda2593b87c4b82","407687e67faf6e1f02a211ca078d8e3eed631027"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["4dcfb92697fbd03e488cf9e5155514e3270d0fc3"],"4549684d134fc66062df3e183cd18bb7d1db1403":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","09c8567c25c02eeeb3e719841606a1269f3538ca","f2126b84bd093fa3d921582a109a0ee578c28126","fe33227f6805edab2036cbb80645cc4e2d1fa424","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}