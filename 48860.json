{"path":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","commits":[{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentInfo info : infos) {\n      final Boolean isOriginal = segmentsToOptimize.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isOptimized(eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentInfo info : infos) {\n      final Boolean isOriginal = segmentsToOptimize.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isOptimized(eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    for(SegmentInfo info : infos) {\n      if (segmentsToOptimize.contains(info)) {\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && isOptimized(eligible.get(0)))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TieredMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge) throws IOException {\n    if (verbose()) {\n      message(\"findForcedMerges maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToMerge=\" + segmentsToMerge);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean forceMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentInfo info : infos) {\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          forceMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isMerged(eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already merged\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"forceMergeRunning=\" + forceMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !forceMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    if (verbose()) {\n      message(\"findMergesForOptimize maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToOptimize=\" + segmentsToOptimize);\n    }\n\n    List<SegmentInfo> eligible = new ArrayList<SegmentInfo>();\n    boolean optimizeMergeRunning = false;\n    final Collection<SegmentInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentInfo info : infos) {\n      final Boolean isOriginal = segmentsToOptimize.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          optimizeMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isOptimized(eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already optimized\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, segmentByteSizeDescending);\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"optimizeMergeRunning=\" + optimizeMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !optimizeMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":["67bcec391f8e94564afde5a0f0e6538d07a96255","67bcec391f8e94564afde5a0f0e6538d07a96255"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}