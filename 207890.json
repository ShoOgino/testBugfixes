{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","sourceNew":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) {\n              return !path.getName().startsWith(\".\"); // ignore \"hidden\" files and dirs\n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","sourceOld":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) {\n              return !path.getName().startsWith(\".\"); // ignore \"hidden\" files and dirs\n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","pathOld":"/dev/null","sourceNew":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) {\n              return !path.getName().startsWith(\".\"); // ignore \"hidden\" files and dirs\n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c74a1d30fa4439a3687ae194fa516accc89d4f35","date":1395251530,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","sourceNew":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) { // ignore \"hidden\" files and dirs\n              return !(path.getName().startsWith(\".\") || path.getName().startsWith(\"_\")); \n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","sourceOld":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) {\n              return !path.getName().startsWith(\".\"); // ignore \"hidden\" files and dirs\n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","sourceNew":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) { // ignore \"hidden\" files and dirs\n              return !(path.getName().startsWith(\".\") || path.getName().startsWith(\"_\")); \n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","sourceOld":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) { // ignore \"hidden\" files and dirs\n              return !(path.getName().startsWith(\".\") || path.getName().startsWith(\"_\")); \n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","sourceNew":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) { // ignore \"hidden\" files and dirs\n              return !(path.getName().startsWith(\".\") || path.getName().startsWith(\"_\")); \n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","sourceOld":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) { // ignore \"hidden\" files and dirs\n              return !(path.getName().startsWith(\".\") || path.getName().startsWith(\"_\")); \n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","sourceNew":null,"sourceOld":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) { // ignore \"hidden\" files and dirs\n              return !(path.getName().startsWith(\".\") || path.getName().startsWith(\"_\")); \n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#addInputFiles(List[Path],List[Path],Path,Configuration).mjava","sourceNew":null,"sourceOld":"  private long addInputFiles(List<Path> inputFiles, List<Path> inputLists, Path fullInputList, Configuration conf) \n      throws IOException {\n    \n    long numFiles = 0;\n    FileSystem fs = fullInputList.getFileSystem(conf);\n    FSDataOutputStream out = fs.create(fullInputList);\n    try {\n      Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n      \n      for (Path inputFile : inputFiles) {\n        FileSystem inputFileFs = inputFile.getFileSystem(conf);\n        if (inputFileFs.exists(inputFile)) {\n          PathFilter pathFilter = new PathFilter() {      \n            @Override\n            public boolean accept(Path path) { // ignore \"hidden\" files and dirs\n              return !(path.getName().startsWith(\".\") || path.getName().startsWith(\"_\")); \n            }\n          };\n          numFiles += addInputFilesRecursively(inputFile, writer, inputFileFs, pathFilter);\n        }\n      }\n\n      for (Path inputList : inputLists) {\n        InputStream in;\n        if (inputList.toString().equals(\"-\")) {\n          in = System.in;\n        } else if (inputList.isAbsoluteAndSchemeAuthorityNull()) {\n          in = new BufferedInputStream(new FileInputStream(inputList.toString()));\n        } else {\n          in = inputList.getFileSystem(conf).open(inputList);\n        }\n        try {\n          BufferedReader reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n          String line;\n          while ((line = reader.readLine()) != null) {\n            writer.write(line + \"\\n\");\n            numFiles++;\n          }\n          reader.close();\n        } finally {\n          in.close();\n        }\n      }\n      \n      writer.close();\n    } finally {\n      out.close();\n    }    \n    return numFiles;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5eb2511ababf862ea11e10761c70ee560cd84510":["c74a1d30fa4439a3687ae194fa516accc89d4f35","9d3d365762604952e436b51980101dfc84cc1b3e"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["c74a1d30fa4439a3687ae194fa516accc89d4f35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"c74a1d30fa4439a3687ae194fa516accc89d4f35":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","c74a1d30fa4439a3687ae194fa516accc89d4f35"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"c74a1d30fa4439a3687ae194fa516accc89d4f35":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}