{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","sourceNew":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","sourceNew":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","sourceNew":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [{}].\", collectionName);\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [\" + collectionName + \"].\" );\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","sourceNew":"  void cleanupCollection(String collectionName, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [{}].\", collectionName);\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  void cleanupCollection(String collectionName, NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [{}].\", collectionName);\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(CloudConfig,String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","sourceNew":"  void cleanupCollection(CloudConfig cloudConfig, String collectionName, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [{}].\", collectionName);\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), cloudConfig, new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  void cleanupCollection(String collectionName, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [{}].\", collectionName);\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#cleanupCollection(CloudConfig,String,NamedList).mjava","sourceNew":"  void cleanupCollection(String collectionName, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [{}].\", collectionName);\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n  }\n\n","sourceOld":"  void cleanupCollection(CloudConfig cloudConfig, String collectionName, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    log.error(\"Cleaning up collection [{}].\", collectionName);\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, DELETE.toLower(),\n        NAME, collectionName);\n    commandMap.get(DELETE).call(zkStateReader.getClusterState(), cloudConfig, new ZkNodeProps(props), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"4abf821a41a2fdca2a1dea148999931d22e20529":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c526352db87264a72a7a9ad68c1b769b81e54305":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["4abf821a41a2fdca2a1dea148999931d22e20529"],"4abf821a41a2fdca2a1dea148999931d22e20529":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["c526352db87264a72a7a9ad68c1b769b81e54305"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}