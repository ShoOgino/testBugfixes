{"path":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","commits":[{"id":"719f4efa5dfc2bc5476a646af6ab142e8d67f7a3","date":1276292818,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler#arrayToSet(Object[]).mjava","sourceNew":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","sourceOld":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      r.add(o.toString());\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","sourceNew":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","sourceOld":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","sourceNew":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","sourceOld":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","sourceNew":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","sourceOld":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"719f4efa5dfc2bc5476a646af6ab142e8d67f7a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["719f4efa5dfc2bc5476a646af6ab142e8d67f7a3"],"c26f00b574427b55127e869b935845554afde1fa":["719f4efa5dfc2bc5476a646af6ab142e8d67f7a3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["719f4efa5dfc2bc5476a646af6ab142e8d67f7a3"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","719f4efa5dfc2bc5476a646af6ab142e8d67f7a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"719f4efa5dfc2bc5476a646af6ab142e8d67f7a3":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["719f4efa5dfc2bc5476a646af6ab142e8d67f7a3","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}