{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","commits":[{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testSameFieldAddedMultipleTimes().mjava","sourceNew":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","sourceOld":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testSameFieldAddedMultipleTimes().mjava","sourceNew":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","sourceOld":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","date":1420550360,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","sourceNew":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","sourceOld":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb04834a792874aacf8d8b111a39603c23fbd777","date":1428406678,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","sourceNew":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    TestUtil.checkReader(reader);\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n    TestUtil.checkReader(mindex.createSearcher().getIndexReader());\n  }\n\n","sourceOld":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","sourceNew":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    TestUtil.checkReader(reader);\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery(\"field\", \"fox\", \"jumps\");\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query = new PhraseQuery(10, \"field\", \"fox\", \"jumps\");\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n    TestUtil.checkReader(mindex.createSearcher().getIndexReader());\n  }\n\n","sourceOld":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    TestUtil.checkReader(reader);\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n    TestUtil.checkReader(mindex.createSearcher().getIndexReader());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testSameFieldAddedMultipleTimes().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","sourceNew":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    TestUtil.checkReader(reader);\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery(\"field\", \"fox\", \"jumps\");\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query = new PhraseQuery(10, \"field\", \"fox\", \"jumps\");\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n    TestUtil.checkReader(mindex.createSearcher().getIndexReader());\n  }\n\n","sourceOld":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = randomMemoryIndex();\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    TestUtil.checkReader(reader);\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery(\"field\", \"fox\", \"jumps\");\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query = new PhraseQuery(10, \"field\", \"fox\", \"jumps\");\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n    TestUtil.checkReader(mindex.createSearcher().getIndexReader());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9e1499c5d26c936238506df90a3c02c76707722":["bb04834a792874aacf8d8b111a39603c23fbd777"],"bb04834a792874aacf8d8b111a39603c23fbd777":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["e9e1499c5d26c936238506df90a3c02c76707722"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["761333d77c7f29123c00c93b107b743f32f012e6"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"e9e1499c5d26c936238506df90a3c02c76707722":["d77dafd89756a5161d244985903e3487ca109182"],"bb04834a792874aacf8d8b111a39603c23fbd777":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["bb04834a792874aacf8d8b111a39603c23fbd777"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"761333d77c7f29123c00c93b107b743f32f012e6":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}