{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxoWithLargeTaxonomy().mjava","commits":[{"id":"9ac613dcda1585b43f4c357e90f3b65bec470383","date":1380032447,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxoWithLargeTaxonomy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReplaceTaxoWithLargeTaxonomy() throws Exception {\n    Directory srcTaxoDir = newDirectory(), targetTaxoDir = newDirectory();\n    \n    // build source, large, taxonomy\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(srcTaxoDir);\n    int ord = taxoWriter.addCategory(new CategoryPath(\"A/1/1/1/1/1/1\", '/'));\n    taxoWriter.close();\n    \n    taxoWriter = new DirectoryTaxonomyWriter(targetTaxoDir);\n    int ordinal = taxoWriter.addCategory(new CategoryPath(\"B/1\", '/'));\n    assertEquals(1, taxoWriter.getParent(ordinal)); // call getParent to initialize taxoArrays\n    taxoWriter.commit();\n    \n    taxoWriter.replaceTaxonomy(srcTaxoDir);\n    assertEquals(ord - 1, taxoWriter.getParent(ord));\n    taxoWriter.close();\n    \n    srcTaxoDir.close();\n    targetTaxoDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxoWithLargeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxoWithLargeTaxonomy().mjava","sourceNew":"  @Test\n  public void testReplaceTaxoWithLargeTaxonomy() throws Exception {\n    Directory srcTaxoDir = newDirectory(), targetTaxoDir = newDirectory();\n    \n    // build source, large, taxonomy\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(srcTaxoDir);\n    int ord = taxoWriter.addCategory(new FacetLabel(\"A/1/1/1/1/1/1\", '/'));\n    taxoWriter.close();\n    \n    taxoWriter = new DirectoryTaxonomyWriter(targetTaxoDir);\n    int ordinal = taxoWriter.addCategory(new FacetLabel(\"B/1\", '/'));\n    assertEquals(1, taxoWriter.getParent(ordinal)); // call getParent to initialize taxoArrays\n    taxoWriter.commit();\n    \n    taxoWriter.replaceTaxonomy(srcTaxoDir);\n    assertEquals(ord - 1, taxoWriter.getParent(ord));\n    taxoWriter.close();\n    \n    srcTaxoDir.close();\n    targetTaxoDir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceTaxoWithLargeTaxonomy() throws Exception {\n    Directory srcTaxoDir = newDirectory(), targetTaxoDir = newDirectory();\n    \n    // build source, large, taxonomy\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(srcTaxoDir);\n    int ord = taxoWriter.addCategory(new CategoryPath(\"A/1/1/1/1/1/1\", '/'));\n    taxoWriter.close();\n    \n    taxoWriter = new DirectoryTaxonomyWriter(targetTaxoDir);\n    int ordinal = taxoWriter.addCategory(new CategoryPath(\"B/1\", '/'));\n    assertEquals(1, taxoWriter.getParent(ordinal)); // call getParent to initialize taxoArrays\n    taxoWriter.commit();\n    \n    taxoWriter.replaceTaxonomy(srcTaxoDir);\n    assertEquals(ord - 1, taxoWriter.getParent(ord));\n    taxoWriter.close();\n    \n    srcTaxoDir.close();\n    targetTaxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxoWithLargeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxoWithLargeTaxonomy().mjava","sourceNew":"  @Test\n  public void testReplaceTaxoWithLargeTaxonomy() throws Exception {\n    Directory srcTaxoDir = newDirectory(), targetTaxoDir = newDirectory();\n    \n    // build source, large, taxonomy\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(srcTaxoDir);\n    int ord = taxoWriter.addCategory(new FacetLabel(\"A\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"));\n    taxoWriter.close();\n    \n    taxoWriter = new DirectoryTaxonomyWriter(targetTaxoDir);\n    int ordinal = taxoWriter.addCategory(new FacetLabel(\"B\", \"1\"));\n    assertEquals(1, taxoWriter.getParent(ordinal)); // call getParent to initialize taxoArrays\n    taxoWriter.commit();\n    \n    taxoWriter.replaceTaxonomy(srcTaxoDir);\n    assertEquals(ord - 1, taxoWriter.getParent(ord));\n    taxoWriter.close();\n    \n    srcTaxoDir.close();\n    targetTaxoDir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceTaxoWithLargeTaxonomy() throws Exception {\n    Directory srcTaxoDir = newDirectory(), targetTaxoDir = newDirectory();\n    \n    // build source, large, taxonomy\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(srcTaxoDir);\n    int ord = taxoWriter.addCategory(new FacetLabel(\"A/1/1/1/1/1/1\", '/'));\n    taxoWriter.close();\n    \n    taxoWriter = new DirectoryTaxonomyWriter(targetTaxoDir);\n    int ordinal = taxoWriter.addCategory(new FacetLabel(\"B/1\", '/'));\n    assertEquals(1, taxoWriter.getParent(ordinal)); // call getParent to initialize taxoArrays\n    taxoWriter.commit();\n    \n    taxoWriter.replaceTaxonomy(srcTaxoDir);\n    assertEquals(ord - 1, taxoWriter.getParent(ord));\n    taxoWriter.close();\n    \n    srcTaxoDir.close();\n    targetTaxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxoWithLargeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyWriter#testReplaceTaxoWithLargeTaxonomy().mjava","sourceNew":"  @Test\n  public void testReplaceTaxoWithLargeTaxonomy() throws Exception {\n    Directory srcTaxoDir = newDirectory(), targetTaxoDir = newDirectory();\n    \n    // build source, large, taxonomy\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(srcTaxoDir);\n    int ord = taxoWriter.addCategory(new FacetLabel(\"A\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"));\n    taxoWriter.close();\n    \n    taxoWriter = new DirectoryTaxonomyWriter(targetTaxoDir);\n    int ordinal = taxoWriter.addCategory(new FacetLabel(\"B\", \"1\"));\n    assertEquals(1, taxoWriter.getParent(ordinal)); // call getParent to initialize taxoArrays\n    taxoWriter.commit();\n    \n    taxoWriter.replaceTaxonomy(srcTaxoDir);\n    assertEquals(ord - 1, taxoWriter.getParent(ord));\n    taxoWriter.close();\n    \n    srcTaxoDir.close();\n    targetTaxoDir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceTaxoWithLargeTaxonomy() throws Exception {\n    Directory srcTaxoDir = newDirectory(), targetTaxoDir = newDirectory();\n    \n    // build source, large, taxonomy\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(srcTaxoDir);\n    int ord = taxoWriter.addCategory(new CategoryPath(\"A/1/1/1/1/1/1\", '/'));\n    taxoWriter.close();\n    \n    taxoWriter = new DirectoryTaxonomyWriter(targetTaxoDir);\n    int ordinal = taxoWriter.addCategory(new CategoryPath(\"B/1\", '/'));\n    assertEquals(1, taxoWriter.getParent(ordinal)); // call getParent to initialize taxoArrays\n    taxoWriter.commit();\n    \n    taxoWriter.replaceTaxonomy(srcTaxoDir);\n    assertEquals(ord - 1, taxoWriter.getParent(ord));\n    taxoWriter.close();\n    \n    srcTaxoDir.close();\n    targetTaxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ac613dcda1585b43f4c357e90f3b65bec470383":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["9ac613dcda1585b43f4c357e90f3b65bec470383","bbe9946d3cd818d329255e4c325597ac3480503e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"bbe9946d3cd818d329255e4c325597ac3480503e":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["9ac613dcda1585b43f4c357e90f3b65bec470383"]},"commit2Childs":{"9ac613dcda1585b43f4c357e90f3b65bec470383":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ac613dcda1585b43f4c357e90f3b65bec470383"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bbe9946d3cd818d329255e4c325597ac3480503e":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["bbe9946d3cd818d329255e4c325597ac3480503e"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}