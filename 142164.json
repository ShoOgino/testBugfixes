{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48a7c50923b50bdd0d393d42e7f907481ff910e2","date":1520878059,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      this.printLayout();\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jetty.start();\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#startServers(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates and starts a given number of servers.\n   */\n  protected List<String> startServers(int nServer) throws Exception {\n    String temporaryCollection = \"tmp_collection\";\n\n    for (int i = 1; i <= nServer; i++) {\n      // give everyone there own solrhome\n      File jettyDir = createTempDir(\"jetty\").toFile();\n      jettyDir.mkdirs();\n      setupJettySolrHome(jettyDir);\n      JettySolrRunner jetty = createJetty(jettyDir, null, \"shard\" + i);\n      jetty.start();\n      jettys.add(jetty);\n    }\n\n    try (SolrClient client = createCloudClient(temporaryCollection)) {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(temporaryCollection, \"conf1\", shardCount, 1)\n          .setCreateNodeSet(\"\")\n          .process(client).getStatus());\n      for (int i = 0; i < jettys.size(); i++) {\n        assertTrue(CollectionAdminRequest\n            .addReplicaToShard(temporaryCollection, \"shard\"+((i % shardCount) + 1))\n            .setNode(jettys.get(i).getNodeName())\n            .process(client).isSuccess());\n      }\n    }\n\n    ZkStateReader zkStateReader = jettys.get(0).getCoreContainer().getZkController().getZkStateReader();\n\n    // now wait till we see the leader for each shard\n    for (int i = 1; i <= shardCount; i++) {\n      zkStateReader.getLeaderRetry(temporaryCollection, \"shard\" + i, 15000);\n    }\n\n    // store the node names\n    List<String> nodeNames = new ArrayList<>();\n    for (Slice shard : zkStateReader.getClusterState().getCollection(temporaryCollection).getSlices()) {\n      for (Replica replica : shard.getReplicas()) {\n        nodeNames.add(replica.getNodeName());\n      }\n    }\n\n    this.waitForRecoveriesToFinish(temporaryCollection,zkStateReader, true);\n    // delete the temporary collection - we will create our own collections later\n    this.deleteCollection(temporaryCollection);\n    this.waitForCollectionToDisappear(temporaryCollection);\n    System.clearProperty(\"collection\");\n\n    return nodeNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48a7c50923b50bdd0d393d42e7f907481ff910e2":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["48a7c50923b50bdd0d393d42e7f907481ff910e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"48a7c50923b50bdd0d393d42e7f907481ff910e2":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["48a7c50923b50bdd0d393d42e7f907481ff910e2"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}