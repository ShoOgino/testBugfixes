{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter.EscapingTokenStreamToAutomaton#changeToken(BytesRef).mjava","commits":[{"id":"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","date":1528168051,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter.EscapingTokenStreamToAutomaton#changeToken(BytesRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream.EscapingTokenStreamToAutomaton#changeToken(BytesRef).mjava","sourceNew":"    @Override\n    protected BytesRef changeToken(BytesRef in) {\n      int upto = 0;\n      for (int i = 0; i < in.length; i++) {\n        byte b = in.bytes[in.offset + i];\n        if (b == sepLabel) {\n          spare.grow(upto + 2);\n          spare.setByteAt(upto++, sepLabel);\n          spare.setByteAt(upto++, b);\n        } else {\n          spare.grow(upto + 1);\n          spare.setByteAt(upto++, b);\n        }\n      }\n      spare.setLength(upto);\n      return spare.get();\n    }\n\n","sourceOld":"    @Override\n    protected BytesRef changeToken(BytesRef in) {\n      int upto = 0;\n      for (int i = 0; i < in.length; i++) {\n        byte b = in.bytes[in.offset + i];\n        if (b == (byte) sepLabel) {\n          spare.grow(upto + 2);\n          spare.setByteAt(upto++, (byte) sepLabel);\n          spare.setByteAt(upto++, b);\n        } else {\n          spare.grow(upto + 1);\n          spare.setByteAt(upto++, b);\n        }\n      }\n      spare.setLength(upto);\n      return spare.get();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":1,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter.EscapingTokenStreamToAutomaton#changeToken(BytesRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream.EscapingTokenStreamToAutomaton#changeToken(BytesRef).mjava","sourceNew":"    @Override\n    protected BytesRef changeToken(BytesRef in) {\n      int upto = 0;\n      for (int i = 0; i < in.length; i++) {\n        byte b = in.bytes[in.offset + i];\n        if (b == sepLabel) {\n          spare.grow(upto + 2);\n          spare.setByteAt(upto++, sepLabel);\n          spare.setByteAt(upto++, b);\n        } else {\n          spare.grow(upto + 1);\n          spare.setByteAt(upto++, b);\n        }\n      }\n      spare.setLength(upto);\n      return spare.get();\n    }\n\n","sourceOld":"    @Override\n    protected BytesRef changeToken(BytesRef in) {\n      int upto = 0;\n      for (int i = 0; i < in.length; i++) {\n        byte b = in.bytes[in.offset + i];\n        if (b == (byte) sepLabel) {\n          spare.grow(upto + 2);\n          spare.setByteAt(upto++, (byte) sepLabel);\n          spare.setByteAt(upto++, b);\n        } else {\n          spare.grow(upto + 1);\n          spare.setByteAt(upto++, b);\n        }\n      }\n      spare.setLength(upto);\n      return spare.get();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":1,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConcatenateGraphFilter.EscapingTokenStreamToAutomaton#changeToken(BytesRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream.EscapingTokenStreamToAutomaton#changeToken(BytesRef).mjava","sourceNew":"    @Override\n    protected BytesRef changeToken(BytesRef in) {\n      int upto = 0;\n      for (int i = 0; i < in.length; i++) {\n        byte b = in.bytes[in.offset + i];\n        if (b == sepLabel) {\n          spare.grow(upto + 2);\n          spare.setByteAt(upto++, sepLabel);\n          spare.setByteAt(upto++, b);\n        } else {\n          spare.grow(upto + 1);\n          spare.setByteAt(upto++, b);\n        }\n      }\n      spare.setLength(upto);\n      return spare.get();\n    }\n\n","sourceOld":"    @Override\n    protected BytesRef changeToken(BytesRef in) {\n      int upto = 0;\n      for (int i = 0; i < in.length; i++) {\n        byte b = in.bytes[in.offset + i];\n        if (b == (byte) sepLabel) {\n          spare.grow(upto + 2);\n          spare.setByteAt(upto++, (byte) sepLabel);\n          spare.setByteAt(upto++, b);\n        } else {\n          spare.grow(upto + 1);\n          spare.setByteAt(upto++, b);\n        }\n      }\n      spare.setLength(upto);\n      return spare.get();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","f592209545c71895260367152601e9200399776d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}