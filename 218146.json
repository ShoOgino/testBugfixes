{"path":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"/dev/null","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = newFSDirectory(new File(fullPath));\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seek(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seek(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seek(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator();\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(terms.docs(null, null)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for(int i=0;i<oldNames.length;i++) {\n      File oldIndexDir = _TestUtil.getTempDir(oldNames[i]);\n    \t_TestUtil.unzip(getDataFile(\"index.\" + oldNames[i] + \".zip\"), oldIndexDir);\n      Directory dir = newFSDirectory(oldIndexDir);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n      dir.close();\n      _TestUtil.rmDir(oldIndexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testNextIntoWrongField().mjava","sourceNew":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","sourceOld":"  // flex: test basics of TermsEnum api on non-flex index\n  public void testNextIntoWrongField() throws Exception {\n    for (String name : oldNames) {\n      Directory dir = oldIndexDirs.get(name);\n      IndexReader r = IndexReader.open(dir);\n      TermsEnum terms = MultiFields.getFields(r).terms(\"content\").iterator(null);\n      BytesRef t = terms.next();\n      assertNotNull(t);\n\n      // content field only has term aaa:\n      assertEquals(\"aaa\", t.utf8ToString());\n      assertNull(terms.next());\n\n      BytesRef aaaTerm = new BytesRef(\"aaa\");\n\n      // should be found exactly\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      // should hit end of field\n      assertEquals(TermsEnum.SeekStatus.END,\n                   terms.seekCeil(new BytesRef(\"bbb\")));\n      assertNull(terms.next());\n\n      // should seek to aaa\n      assertEquals(TermsEnum.SeekStatus.NOT_FOUND,\n                   terms.seekCeil(new BytesRef(\"a\")));\n      assertTrue(terms.term().bytesEquals(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms, null, null, false)));\n      assertNull(terms.next());\n\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   terms.seekCeil(aaaTerm));\n      assertEquals(35, countDocs(_TestUtil.docs(random, terms,null, null, false)));\n      assertNull(terms.next());\n\n      r.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"3cc749c053615f5871f3b95715fe292f34e70a53":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"2553b00f699380c64959ccb27991289aae87be2e":["3cdad2c6b6234338031bcc1f24c001a5ad66f714","fd9cc9d77712aba3662f24632df7539ab75e3667"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["3cdad2c6b6234338031bcc1f24c001a5ad66f714","fd9cc9d77712aba3662f24632df7539ab75e3667"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["3cdad2c6b6234338031bcc1f24c001a5ad66f714","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","fd9cc9d77712aba3662f24632df7539ab75e3667","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3cc749c053615f5871f3b95715fe292f34e70a53":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["8be580b58bcc650d428f3f22de81cadcf51d650a","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["3cc749c053615f5871f3b95715fe292f34e70a53","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","b65b350ca9588f9fc76ce7d6804160d06c45ff42","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}