{"path":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","commits":[{"id":"74be754ec3ab6906922b673bf951696c442123b2","date":1135778260,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"q.[aeiou]c.*\"));\n    SpanTermQuery stq = new SpanTermQuery(new Term(\"field\",\"dog\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(query);\n    assertEquals(1, hits.length());\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"q.[aeiou]c.*\"));\n    SpanTermQuery stq = new SpanTermQuery(new Term(\"field\",\"dog\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    QueryUtils.check(srq);\n    QueryUtils.checkUnequal(srq,stq);\n    QueryUtils.checkUnequal(srq,query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7031463096567f9fc189ec67a65e550a1c2d3215","date":1140968310,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n//    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.TOKENIZED));\n//    writer.addDocument(doc);\n//    doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n//    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(sfq);\n    assertEquals(1, hits.length());\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"q.[aeiou]c.*\"));\n    SpanTermQuery stq = new SpanTermQuery(new Term(\"field\",\"dog\"));\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(query);\n    assertEquals(1, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n//    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.ANALYZED));\n//    writer.addDocument(doc);\n//    doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n//    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(sfq);\n    assertEquals(1, hits.length());\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n//    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.TOKENIZED));\n//    writer.addDocument(doc);\n//    doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n//    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(sfq);\n    assertEquals(1, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f423d7b5d458f5b84738366550efaaabc21dfd8","date":1246814176,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    Hits hits = searcher.search(sfq);\n    assertEquals(1, hits.length());\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n//    doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\", Field.Store.NO, Field.Index.ANALYZED));\n//    writer.addDocument(doc);\n//    doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n//    SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6, true);\n    Hits hits = searcher.search(sfq);\n    assertEquals(1, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    Hits hits = searcher.search(sfq);\n    assertEquals(1, hits.length());\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    Hits hits = searcher.search(sfq);\n    assertEquals(1, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    Hits hits = searcher.search(sfq);\n    assertEquals(1, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"contrib/regex/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    // doc.add(new Field(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(new Field(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanRegexQuery srq = new SpanRegexQuery(new Term(\"field\", \"aut.*\"));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74be754ec3ab6906922b673bf951696c442123b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["7031463096567f9fc189ec67a65e550a1c2d3215"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0f423d7b5d458f5b84738366550efaaabc21dfd8":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["87c966e9308847938a7c905c2e46a56d8df788b8"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f423d7b5d458f5b84738366550efaaabc21dfd8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87c966e9308847938a7c905c2e46a56d8df788b8":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"7031463096567f9fc189ec67a65e550a1c2d3215":["74be754ec3ab6906922b673bf951696c442123b2"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"74be754ec3ab6906922b673bf951696c442123b2":["7031463096567f9fc189ec67a65e550a1c2d3215"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0f423d7b5d458f5b84738366550efaaabc21dfd8"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0f423d7b5d458f5b84738366550efaaabc21dfd8":["4256bc1b3c94786287ccdfc751230374521843cf"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74be754ec3ab6906922b673bf951696c442123b2"],"7031463096567f9fc189ec67a65e550a1c2d3215":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"87c966e9308847938a7c905c2e46a56d8df788b8":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}