{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#assertFieldSimilarity(String,Class[#-extends-Similarity]).mjava","commits":[{"id":"20eb14adcb76cac6b8ae297eb37caec72e3a2140","date":1447952616,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#assertFieldSimilarity(String,Class[#-extends-Similarity]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   */\n  private static void assertFieldSimilarity(String fieldname, Class<? extends Similarity> expected) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64396eddf11b3a487fb2668a9be8fa573dd73f89","date":1489809659,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#[T-extends-Similarity]_assertFieldSimilarity(String,Class[T],Consumer[T]...).mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#assertFieldSimilarity(String,Class[#-extends-Similarity]).mjava","sourceNew":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   * \n   * Executes each of the specified Similarity-accepting validators.\n   */\n  @SafeVarargs\n  private static <T extends Similarity> void assertFieldSimilarity(String fieldname, Class<T> expected, Consumer<T>... validators) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      Arrays.asList(validators).forEach(v -> v.accept((T)fieldSim));\n    }\n  }\n\n","sourceOld":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   */\n  private static void assertFieldSimilarity(String fieldname, Class<? extends Similarity> expected) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad771c8c8bc422816c3459d9d0776c2f54a4de80","date":1490280011,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#[T-extends-Similarity]_assertFieldSimilarity(String,Class[T],Consumer[T]...).mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#assertFieldSimilarity(String,Class[#-extends-Similarity]).mjava","sourceNew":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   * \n   * Executes each of the specified Similarity-accepting validators.\n   */\n  @SafeVarargs\n  private static <T extends Similarity> void assertFieldSimilarity(String fieldname, Class<T> expected, Consumer<T>... validators) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      Arrays.asList(validators).forEach(v -> v.accept((T)fieldSim));\n    }\n  }\n\n","sourceOld":"  /**\n   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}\n   */\n  private static void assertFieldSimilarity(String fieldname, Class<? extends Similarity> expected) {\n    CoreContainer cc = jetty.getCoreContainer();\n    try (SolrCore core = cc.getCore(\"collection1\")) {\n      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();\n      assertNotNull(simfac);\n      assertTrue(\"test only works with SchemaSimilarityFactory\",\n                 simfac instanceof SchemaSimilarityFactory);\n      \n      Similarity mainSim = core.getLatestSchema().getSimilarity();\n      assertNotNull(mainSim);\n      \n      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception\n      assertEquals(mainSim, simfac.getSimilarity());\n      \n      assertTrue(\"test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?\",\n                 mainSim instanceof PerFieldSimilarityWrapper);\n      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);\n      assertEquals(\"wrong sim for field=\" + fieldname, expected, fieldSim.getClass());\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64396eddf11b3a487fb2668a9be8fa573dd73f89":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"20eb14adcb76cac6b8ae297eb37caec72e3a2140":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad771c8c8bc422816c3459d9d0776c2f54a4de80":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64396eddf11b3a487fb2668a9be8fa573dd73f89"]},"commit2Childs":{"64396eddf11b3a487fb2668a9be8fa573dd73f89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20eb14adcb76cac6b8ae297eb37caec72e3a2140":["64396eddf11b3a487fb2668a9be8fa573dd73f89","ad771c8c8bc422816c3459d9d0776c2f54a4de80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"ad771c8c8bc422816c3459d9d0776c2f54a4de80":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad771c8c8bc422816c3459d9d0776c2f54a4de80","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}