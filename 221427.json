{"path":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","commits":[{"id":"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39","date":1161023282,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void release() {\n    try {\n      if (isLocked()) {\n        try {\n          lock.release();\n        } finally {\n          lock = null;\n          try {\n            channel.close();\n          } finally {\n            channel = null;\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n        path.delete();\n      }\n    } catch (IOException e) {\n      // Not sure how to better message/handle this without\n      // changing API?\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"282779d3160a8f7f09d2a07b06add736f93ac50b","date":1161291802,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  public synchronized void release() {\n    try {\n      if (isLocked()) {\n        try {\n          lock.release();\n        } finally {\n          lock = null;\n          try {\n            channel.close();\n          } finally {\n            channel = null;\n            try {\n              f.close();\n            } finally {\n              f = null;\n              synchronized(LOCK_HELD) {\n                LOCK_HELD.remove(path.getCanonicalPath());\n              }\n            }\n          }\n        }\n        path.delete();\n      }\n    } catch (IOException e) {\n      // Not sure how to better message/handle this without\n      // changing API?\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public synchronized void release() {\n    try {\n      if (isLocked()) {\n        try {\n          lock.release();\n        } finally {\n          lock = null;\n          try {\n            channel.close();\n          } finally {\n            channel = null;\n            try {\n              f.close();\n            } finally {\n              f = null;\n            }\n          }\n        }\n        path.delete();\n      }\n    } catch (IOException e) {\n      // Not sure how to better message/handle this without\n      // changing API?\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2cf040795587947011604327cf9538e12d298d8b","date":1195159374,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  public synchronized void release() throws IOException {\n    if (isLocked()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    }\n  }\n\n","sourceOld":"  public synchronized void release() {\n    try {\n      if (isLocked()) {\n        try {\n          lock.release();\n        } finally {\n          lock = null;\n          try {\n            channel.close();\n          } finally {\n            channel = null;\n            try {\n              f.close();\n            } finally {\n              f = null;\n              synchronized(LOCK_HELD) {\n                LOCK_HELD.remove(path.getCanonicalPath());\n              }\n            }\n          }\n        }\n        path.delete();\n      }\n    } catch (IOException e) {\n      // Not sure how to better message/handle this without\n      // changing API?\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b","8fa71d5bc6be53f5f21420ccbcaecad4dd879728","245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","date":1252016251,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    }\n  }\n\n","sourceOld":"  public synchronized void release() throws IOException {\n    if (isLocked()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    }\n  }\n\n","bugFix":["2cf040795587947011604327cf9538e12d298d8b"],"bugIntro":["ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    }\n  }\n\n","sourceOld":"  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e34c62b11034ddc6f3799b5c9a38cbe6de4042","date":1260964905,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ac6772b4ba3c5fe1e4aae992238c5f7cdce74f0b","8fa71d5bc6be53f5f21420ccbcaecad4dd879728"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["2cf040795587947011604327cf9538e12d298d8b"],"60e34c62b11034ddc6f3799b5c9a38cbe6de4042":["8a9e385641d717e641408d8fbbc62be8fc766357"],"2cf040795587947011604327cf9538e12d298d8b":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"8a9e385641d717e641408d8fbbc62be8fc766357":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60e34c62b11034ddc6f3799b5c9a38cbe6de4042"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"]},"commit2Childs":{"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["8a9e385641d717e641408d8fbbc62be8fc766357"],"2cf040795587947011604327cf9538e12d298d8b":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"60e34c62b11034ddc6f3799b5c9a38cbe6de4042":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8a9e385641d717e641408d8fbbc62be8fc766357":["60e34c62b11034ddc6f3799b5c9a38cbe6de4042"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["2cf040795587947011604327cf9538e12d298d8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}