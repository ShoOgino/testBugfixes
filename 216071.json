{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#assertVersionAndHits(NodeProcess,long,int).mjava","commits":[{"id":"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","date":1454767455,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#assertVersionAndHits(NodeProcess,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Verifies this node is currently searching the specified version with the specified total hit count, or that it eventually does when\n   *  keepTrying is true. */\n  private void assertVersionAndHits(NodeProcess node, long expectedVersion, int expectedHitCount) throws Exception {\n    try (Connection c = new Connection(node.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);\n      c.flush();\n      long version = c.in.readVLong();\n      int hitCount = c.in.readVInt();\n      if (expectedVersion != -1) {\n        assertEquals(\"hitCount=\" + hitCount, expectedVersion, version);\n      }\n      assertEquals(expectedHitCount, hitCount);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#assertVersionAndHits(NodeProcess,long,int).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#assertVersionAndHits(NodeProcess,long,int).mjava","sourceNew":"  /** Verifies this node is currently searching the specified version with the specified total hit count, or that it eventually does when\n   *  keepTrying is true. */\n  private void assertVersionAndHits(NodeProcess node, long expectedVersion, int expectedHitCount) throws Exception {\n    try (Connection c = new Connection(node.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);\n      c.flush();\n      long version = c.in.readVLong();\n      int hitCount = c.in.readVInt();\n      if (expectedVersion != -1) {\n        assertEquals(\"wrong searcher version, with hitCount=\" + hitCount, expectedVersion, version);\n      }\n      assertEquals(expectedHitCount, hitCount);\n    }\n  }\n\n","sourceOld":"  /** Verifies this node is currently searching the specified version with the specified total hit count, or that it eventually does when\n   *  keepTrying is true. */\n  private void assertVersionAndHits(NodeProcess node, long expectedVersion, int expectedHitCount) throws Exception {\n    try (Connection c = new Connection(node.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);\n      c.flush();\n      long version = c.in.readVLong();\n      int hitCount = c.in.readVInt();\n      if (expectedVersion != -1) {\n        assertEquals(\"hitCount=\" + hitCount, expectedVersion, version);\n      }\n      assertEquals(expectedHitCount, hitCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/TestNRTReplication#assertVersionAndHits(NodeProcess,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Verifies this node is currently searching the specified version with the specified total hit count, or that it eventually does when\n   *  keepTrying is true. */\n  private void assertVersionAndHits(NodeProcess node, long expectedVersion, int expectedHitCount) throws Exception {\n    try (Connection c = new Connection(node.tcpPort)) {\n      c.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);\n      c.flush();\n      long version = c.in.readVLong();\n      int hitCount = c.in.readVInt();\n      if (expectedVersion != -1) {\n        assertEquals(\"wrong searcher version, with hitCount=\" + hitCount, expectedVersion, version);\n      }\n      assertEquals(expectedHitCount, hitCount);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","68496c2200e559fb7802f7575427b7a482659afb","38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["68496c2200e559fb7802f7575427b7a482659afb"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}