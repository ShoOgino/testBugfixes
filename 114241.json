{"path":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiTermRangeQuery(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, BytesRef firstBeg,\n      BytesRef firstEnd, BytesRef secondBeg, BytesRef secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex);\n    IndexSearcher search = newSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7b91922b55d15444d554721b352861d028eb8278","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7b91922b55d15444d554721b352861d028eb8278","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0e7c2454a6a8237bfd0e953f5b940838408c9055","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}