{"path":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#scanToFloorFrame(BytesRef).mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#scanToFloorFrame(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#scanToFloorFrame(BytesRef).mjava","sourceNew":"  // TODO: make this array'd so we can do bin search?\n  // likely not worth it?  need to measure how many\n  // floor blocks we \"typically\" get\n  public void scanToFloorFrame(BytesRef target) {\n\n    if (!isFloor || target.length <= prefix) {\n      // if (DEBUG) {\n      //    System.out.println(\"    scanToFloorFrame skip: isFloor=\" + isFloor + \" target.length=\" + target.length + \" vs prefix=\" + prefix);\n      //  }\n      return;\n    }\n\n    final int targetLabel = target.bytes[target.offset + prefix] & 0xFF;\n\n    // if (DEBUG) {\n    //    System.out.println(\"    scanToFloorFrame fpOrig=\" + fpOrig + \" targetLabel=\" + ((char) targetLabel) + \" vs nextFloorLabel=\" + ((char) nextFloorLabel) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n    //  }\n\n    if (targetLabel < nextFloorLabel) {\n      // if (DEBUG) {\n      //    System.out.println(\"      already on correct block\");\n      //  }\n      return;\n    }\n\n    assert numFollowFloorBlocks != 0;\n\n    long newFP = fpOrig;\n    while (true) {\n      final long code = floorDataReader.readVLong();\n      newFP = fpOrig + (code >>> 1);\n      hasTerms = (code & 1) != 0;\n      // if (DEBUG) {\n      //    System.out.println(\"      label=\" + ((char) nextFloorLabel) + \" fp=\" + newFP + \" hasTerms?=\" + hasTerms + \" numFollowFloor=\" + numFollowFloorBlocks);\n      //  }\n            \n      isLastInFloor = numFollowFloorBlocks == 1;\n      numFollowFloorBlocks--;\n\n      if (isLastInFloor) {\n        nextFloorLabel = 256;\n        // if (DEBUG) {\n        //    System.out.println(\"        stop!  last block nextFloorLabel=\" + ((char) nextFloorLabel));\n        //  }\n        break;\n      } else {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        if (targetLabel < nextFloorLabel) {\n          // if (DEBUG) {\n          //    System.out.println(\"        stop!  nextFloorLabel=\" + ((char) nextFloorLabel));\n          //  }\n          break;\n        }\n      }\n    }\n\n    if (newFP != fp) {\n      // Force re-load of the block:\n      // if (DEBUG) {\n      //    System.out.println(\"      force switch to fp=\" + newFP + \" oldFP=\" + fp);\n      //  }\n      nextEnt = -1;\n      fp = newFP;\n    } else {\n      // if (DEBUG) {\n      //    System.out.println(\"      stay on same fp=\" + newFP);\n      //  }\n    }\n  }\n\n","sourceOld":"  // TODO: make this array'd so we can do bin search?\n  // likely not worth it?  need to measure how many\n  // floor blocks we \"typically\" get\n  public void scanToFloorFrame(BytesRef target) {\n\n    if (!isFloor || target.length <= prefix) {\n      // if (DEBUG) {\n      //    System.out.println(\"    scanToFloorFrame skip: isFloor=\" + isFloor + \" target.length=\" + target.length + \" vs prefix=\" + prefix);\n      //  }\n      return;\n    }\n\n    final int targetLabel = target.bytes[target.offset + prefix] & 0xFF;\n\n    // if (DEBUG) {\n    //    System.out.println(\"    scanToFloorFrame fpOrig=\" + fpOrig + \" targetLabel=\" + ((char) targetLabel) + \" vs nextFloorLabel=\" + ((char) nextFloorLabel) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n    //  }\n\n    if (targetLabel < nextFloorLabel) {\n      // if (DEBUG) {\n      //    System.out.println(\"      already on correct block\");\n      //  }\n      return;\n    }\n\n    assert numFollowFloorBlocks != 0;\n\n    long newFP = fpOrig;\n    while (true) {\n      final long code = floorDataReader.readVLong();\n      newFP = fpOrig + (code >>> 1);\n      hasTerms = (code & 1) != 0;\n      // if (DEBUG) {\n      //    System.out.println(\"      label=\" + ((char) nextFloorLabel) + \" fp=\" + newFP + \" hasTerms?=\" + hasTerms + \" numFollowFloor=\" + numFollowFloorBlocks);\n      //  }\n            \n      isLastInFloor = numFollowFloorBlocks == 1;\n      numFollowFloorBlocks--;\n\n      if (isLastInFloor) {\n        nextFloorLabel = 256;\n        // if (DEBUG) {\n        //    System.out.println(\"        stop!  last block nextFloorLabel=\" + ((char) nextFloorLabel));\n        //  }\n        break;\n      } else {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        if (targetLabel < nextFloorLabel) {\n          // if (DEBUG) {\n          //    System.out.println(\"        stop!  nextFloorLabel=\" + ((char) nextFloorLabel));\n          //  }\n          break;\n        }\n      }\n    }\n\n    if (newFP != fp) {\n      // Force re-load of the block:\n      // if (DEBUG) {\n      //    System.out.println(\"      force switch to fp=\" + newFP + \" oldFP=\" + fp);\n      //  }\n      nextEnt = -1;\n      fp = newFP;\n    } else {\n      // if (DEBUG) {\n      //    System.out.println(\"      stay on same fp=\" + newFP);\n      //  }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#scanToFloorFrame(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: make this array'd so we can do bin search?\n  // likely not worth it?  need to measure how many\n  // floor blocks we \"typically\" get\n  public void scanToFloorFrame(BytesRef target) {\n\n    if (!isFloor || target.length <= prefix) {\n      // if (DEBUG) {\n      //    System.out.println(\"    scanToFloorFrame skip: isFloor=\" + isFloor + \" target.length=\" + target.length + \" vs prefix=\" + prefix);\n      //  }\n      return;\n    }\n\n    final int targetLabel = target.bytes[target.offset + prefix] & 0xFF;\n\n    // if (DEBUG) {\n    //    System.out.println(\"    scanToFloorFrame fpOrig=\" + fpOrig + \" targetLabel=\" + ((char) targetLabel) + \" vs nextFloorLabel=\" + ((char) nextFloorLabel) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n    //  }\n\n    if (targetLabel < nextFloorLabel) {\n      // if (DEBUG) {\n      //    System.out.println(\"      already on correct block\");\n      //  }\n      return;\n    }\n\n    assert numFollowFloorBlocks != 0;\n\n    long newFP = fpOrig;\n    while (true) {\n      final long code = floorDataReader.readVLong();\n      newFP = fpOrig + (code >>> 1);\n      hasTerms = (code & 1) != 0;\n      // if (DEBUG) {\n      //    System.out.println(\"      label=\" + ((char) nextFloorLabel) + \" fp=\" + newFP + \" hasTerms?=\" + hasTerms + \" numFollowFloor=\" + numFollowFloorBlocks);\n      //  }\n            \n      isLastInFloor = numFollowFloorBlocks == 1;\n      numFollowFloorBlocks--;\n\n      if (isLastInFloor) {\n        nextFloorLabel = 256;\n        // if (DEBUG) {\n        //    System.out.println(\"        stop!  last block nextFloorLabel=\" + ((char) nextFloorLabel));\n        //  }\n        break;\n      } else {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        if (targetLabel < nextFloorLabel) {\n          // if (DEBUG) {\n          //    System.out.println(\"        stop!  nextFloorLabel=\" + ((char) nextFloorLabel));\n          //  }\n          break;\n        }\n      }\n    }\n\n    if (newFP != fp) {\n      // Force re-load of the block:\n      // if (DEBUG) {\n      //    System.out.println(\"      force switch to fp=\" + newFP + \" oldFP=\" + fp);\n      //  }\n      nextEnt = -1;\n      fp = newFP;\n    } else {\n      // if (DEBUG) {\n      //    System.out.println(\"      stay on same fp=\" + newFP);\n      //  }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}