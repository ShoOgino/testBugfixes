{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(LinkedList[TermInfo],QueryPhraseMap,LinkedList[TermInfo],int).mjava","commits":[{"id":"47d6c59c2165ec476da09e8ececaaf1776aaca46","date":1374512348,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(LinkedList[TermInfo],QueryPhraseMap,LinkedList[TermInfo],int).mjava","pathOld":"/dev/null","sourceNew":"  void extractPhrases(LinkedList<TermInfo> terms, QueryPhraseMap currMap, LinkedList<TermInfo> phraseCandidate, int longest) {\n    if (terms.isEmpty()) {\n      if (longest > 0) {\n        addIfNoOverlap( new WeightedPhraseInfo( phraseCandidate.subList(0, longest), currMap.getBoost(), currMap.getTermOrPhraseNumber() ) );\n      }\n      return;\n    }\n    ArrayList<TermInfo> samePositionTerms = new ArrayList<TermInfo>();\n    do {\n      samePositionTerms.add(terms.pop());\n    } while (!terms.isEmpty() && terms.get(0).getPosition() == samePositionTerms.get(0).getPosition());\n\n    // try all next terms at the same position\n    for (TermInfo nextTerm : samePositionTerms) {\n      QueryPhraseMap nextMap = currMap.getTermMap(nextTerm.getText());\n      if (nextMap != null) {\n        phraseCandidate.add(nextTerm);\n        int l = longest;\n        if(nextMap.isValidTermOrPhrase( phraseCandidate ) ){\n          l = phraseCandidate.size();\n        }\n        extractPhrases(terms, nextMap, phraseCandidate, l);\n        phraseCandidate.removeLast();\n      }\n    }\n\n    // ignore the next term\n    extractPhrases(terms, currMap, phraseCandidate, longest);\n\n    // add terms back\n    for (TermInfo nextTerm : samePositionTerms) {\n      terms.push(nextTerm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(LinkedList[TermInfo],QueryPhraseMap,LinkedList[TermInfo],int).mjava","pathOld":"/dev/null","sourceNew":"  void extractPhrases(LinkedList<TermInfo> terms, QueryPhraseMap currMap, LinkedList<TermInfo> phraseCandidate, int longest) {\n    if (terms.isEmpty()) {\n      if (longest > 0) {\n        addIfNoOverlap( new WeightedPhraseInfo( phraseCandidate.subList(0, longest), currMap.getBoost(), currMap.getTermOrPhraseNumber() ) );\n      }\n      return;\n    }\n    ArrayList<TermInfo> samePositionTerms = new ArrayList<TermInfo>();\n    do {\n      samePositionTerms.add(terms.pop());\n    } while (!terms.isEmpty() && terms.get(0).getPosition() == samePositionTerms.get(0).getPosition());\n\n    // try all next terms at the same position\n    for (TermInfo nextTerm : samePositionTerms) {\n      QueryPhraseMap nextMap = currMap.getTermMap(nextTerm.getText());\n      if (nextMap != null) {\n        phraseCandidate.add(nextTerm);\n        int l = longest;\n        if(nextMap.isValidTermOrPhrase( phraseCandidate ) ){\n          l = phraseCandidate.size();\n        }\n        extractPhrases(terms, nextMap, phraseCandidate, l);\n        phraseCandidate.removeLast();\n      }\n    }\n\n    // ignore the next term\n    extractPhrases(terms, currMap, phraseCandidate, longest);\n\n    // add terms back\n    for (TermInfo nextTerm : samePositionTerms) {\n      terms.push(nextTerm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9052c1a564d473a9e5d397f7bf9a96e9ec5819cc","date":1377013503,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(LinkedList[TermInfo],QueryPhraseMap,LinkedList[TermInfo],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(LinkedList[TermInfo],QueryPhraseMap,LinkedList[TermInfo],int).mjava","sourceNew":"  void extractPhrases(LinkedList<TermInfo> terms, QueryPhraseMap currMap, LinkedList<TermInfo> phraseCandidate, int longest) {\n    if (phraseCandidate.size() > 1 && phraseCandidate.getLast().getPosition() - phraseCandidate.getFirst().getPosition() > currMap.getMaxPhraseWindow()) {\n      return;\n    }\n    if (terms.isEmpty()) {\n      if (longest > 0) {\n        addIfNoOverlap( new WeightedPhraseInfo( phraseCandidate.subList(0, longest), currMap.getBoost(), currMap.getTermOrPhraseNumber() ) );\n      }\n      return;\n    }\n    ArrayList<TermInfo> samePositionTerms = new ArrayList<TermInfo>();\n    do {\n      samePositionTerms.add(terms.pop());\n    } while (!terms.isEmpty() && terms.get(0).getPosition() == samePositionTerms.get(0).getPosition());\n\n    // try all next terms at the same position\n    for (TermInfo nextTerm : samePositionTerms) {\n      QueryPhraseMap nextMap = currMap.getTermMap(nextTerm.getText());\n      if (nextMap != null) {\n        phraseCandidate.add(nextTerm);\n        int l = longest;\n        if(nextMap.isValidTermOrPhrase( phraseCandidate ) ){\n          l = phraseCandidate.size();\n        }\n        extractPhrases(terms, nextMap, phraseCandidate, l);\n        phraseCandidate.removeLast();\n      }\n    }\n\n    // ignore the next term\n    extractPhrases(terms, currMap, phraseCandidate, longest);\n\n    // add terms back\n    for (TermInfo nextTerm : samePositionTerms) {\n      terms.push(nextTerm);\n    }\n  }\n\n","sourceOld":"  void extractPhrases(LinkedList<TermInfo> terms, QueryPhraseMap currMap, LinkedList<TermInfo> phraseCandidate, int longest) {\n    if (terms.isEmpty()) {\n      if (longest > 0) {\n        addIfNoOverlap( new WeightedPhraseInfo( phraseCandidate.subList(0, longest), currMap.getBoost(), currMap.getTermOrPhraseNumber() ) );\n      }\n      return;\n    }\n    ArrayList<TermInfo> samePositionTerms = new ArrayList<TermInfo>();\n    do {\n      samePositionTerms.add(terms.pop());\n    } while (!terms.isEmpty() && terms.get(0).getPosition() == samePositionTerms.get(0).getPosition());\n\n    // try all next terms at the same position\n    for (TermInfo nextTerm : samePositionTerms) {\n      QueryPhraseMap nextMap = currMap.getTermMap(nextTerm.getText());\n      if (nextMap != null) {\n        phraseCandidate.add(nextTerm);\n        int l = longest;\n        if(nextMap.isValidTermOrPhrase( phraseCandidate ) ){\n          l = phraseCandidate.size();\n        }\n        extractPhrases(terms, nextMap, phraseCandidate, l);\n        phraseCandidate.removeLast();\n      }\n    }\n\n    // ignore the next term\n    extractPhrases(terms, currMap, phraseCandidate, longest);\n\n    // add terms back\n    for (TermInfo nextTerm : samePositionTerms) {\n      terms.push(nextTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(LinkedList[TermInfo],QueryPhraseMap,LinkedList[TermInfo],int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(LinkedList[TermInfo],QueryPhraseMap,LinkedList[TermInfo],int).mjava","sourceNew":"  void extractPhrases(LinkedList<TermInfo> terms, QueryPhraseMap currMap, LinkedList<TermInfo> phraseCandidate, int longest) {\n    if (phraseCandidate.size() > 1 && phraseCandidate.getLast().getPosition() - phraseCandidate.getFirst().getPosition() > currMap.getMaxPhraseWindow()) {\n      return;\n    }\n    if (terms.isEmpty()) {\n      if (longest > 0) {\n        addIfNoOverlap( new WeightedPhraseInfo( phraseCandidate.subList(0, longest), currMap.getBoost(), currMap.getTermOrPhraseNumber() ) );\n      }\n      return;\n    }\n    ArrayList<TermInfo> samePositionTerms = new ArrayList<TermInfo>();\n    do {\n      samePositionTerms.add(terms.pop());\n    } while (!terms.isEmpty() && terms.get(0).getPosition() == samePositionTerms.get(0).getPosition());\n\n    // try all next terms at the same position\n    for (TermInfo nextTerm : samePositionTerms) {\n      QueryPhraseMap nextMap = currMap.getTermMap(nextTerm.getText());\n      if (nextMap != null) {\n        phraseCandidate.add(nextTerm);\n        int l = longest;\n        if(nextMap.isValidTermOrPhrase( phraseCandidate ) ){\n          l = phraseCandidate.size();\n        }\n        extractPhrases(terms, nextMap, phraseCandidate, l);\n        phraseCandidate.removeLast();\n      }\n    }\n\n    // ignore the next term\n    extractPhrases(terms, currMap, phraseCandidate, longest);\n\n    // add terms back\n    for (TermInfo nextTerm : samePositionTerms) {\n      terms.push(nextTerm);\n    }\n  }\n\n","sourceOld":"  void extractPhrases(LinkedList<TermInfo> terms, QueryPhraseMap currMap, LinkedList<TermInfo> phraseCandidate, int longest) {\n    if (terms.isEmpty()) {\n      if (longest > 0) {\n        addIfNoOverlap( new WeightedPhraseInfo( phraseCandidate.subList(0, longest), currMap.getBoost(), currMap.getTermOrPhraseNumber() ) );\n      }\n      return;\n    }\n    ArrayList<TermInfo> samePositionTerms = new ArrayList<TermInfo>();\n    do {\n      samePositionTerms.add(terms.pop());\n    } while (!terms.isEmpty() && terms.get(0).getPosition() == samePositionTerms.get(0).getPosition());\n\n    // try all next terms at the same position\n    for (TermInfo nextTerm : samePositionTerms) {\n      QueryPhraseMap nextMap = currMap.getTermMap(nextTerm.getText());\n      if (nextMap != null) {\n        phraseCandidate.add(nextTerm);\n        int l = longest;\n        if(nextMap.isValidTermOrPhrase( phraseCandidate ) ){\n          l = phraseCandidate.size();\n        }\n        extractPhrases(terms, nextMap, phraseCandidate, l);\n        phraseCandidate.removeLast();\n      }\n    }\n\n    // ignore the next term\n    extractPhrases(terms, currMap, phraseCandidate, longest);\n\n    // add terms back\n    for (TermInfo nextTerm : samePositionTerms) {\n      terms.push(nextTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08","date":1378464767,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldPhraseList#extractPhrases(LinkedList[TermInfo],QueryPhraseMap,LinkedList[TermInfo],int).mjava","sourceNew":null,"sourceOld":"  void extractPhrases(LinkedList<TermInfo> terms, QueryPhraseMap currMap, LinkedList<TermInfo> phraseCandidate, int longest) {\n    if (phraseCandidate.size() > 1 && phraseCandidate.getLast().getPosition() - phraseCandidate.getFirst().getPosition() > currMap.getMaxPhraseWindow()) {\n      return;\n    }\n    if (terms.isEmpty()) {\n      if (longest > 0) {\n        addIfNoOverlap( new WeightedPhraseInfo( phraseCandidate.subList(0, longest), currMap.getBoost(), currMap.getTermOrPhraseNumber() ) );\n      }\n      return;\n    }\n    ArrayList<TermInfo> samePositionTerms = new ArrayList<TermInfo>();\n    do {\n      samePositionTerms.add(terms.pop());\n    } while (!terms.isEmpty() && terms.get(0).getPosition() == samePositionTerms.get(0).getPosition());\n\n    // try all next terms at the same position\n    for (TermInfo nextTerm : samePositionTerms) {\n      QueryPhraseMap nextMap = currMap.getTermMap(nextTerm.getText());\n      if (nextMap != null) {\n        phraseCandidate.add(nextTerm);\n        int l = longest;\n        if(nextMap.isValidTermOrPhrase( phraseCandidate ) ){\n          l = phraseCandidate.size();\n        }\n        extractPhrases(terms, nextMap, phraseCandidate, l);\n        phraseCandidate.removeLast();\n      }\n    }\n\n    // ignore the next term\n    extractPhrases(terms, currMap, phraseCandidate, longest);\n\n    // add terms back\n    for (TermInfo nextTerm : samePositionTerms) {\n      terms.push(nextTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47d6c59c2165ec476da09e8ececaaf1776aaca46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9052c1a564d473a9e5d397f7bf9a96e9ec5819cc":["47d6c59c2165ec476da09e8ececaaf1776aaca46"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","9052c1a564d473a9e5d397f7bf9a96e9ec5819cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["9052c1a564d473a9e5d397f7bf9a96e9ec5819cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"]},"commit2Childs":{"47d6c59c2165ec476da09e8ececaaf1776aaca46":["9052c1a564d473a9e5d397f7bf9a96e9ec5819cc"],"9052c1a564d473a9e5d397f7bf9a96e9ec5819cc":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["47d6c59c2165ec476da09e8ececaaf1776aaca46","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}