{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","sourceNew":"    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.getValue(), o2\n                .getValue());\n            if (value == 0) {\n              value = o1.getOrdinal() - o2.getOrdinal();\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","sourceOld":"    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.getValue(), o2\n                .getValue());\n            if (value == 0) {\n              value = o1.getOrdinal() - o2.getOrdinal();\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","sourceNew":"    @Override\n    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          @Override\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.getValue(), o2\n                .getValue());\n            if (value == 0) {\n              value = o1.getOrdinal() - o2.getOrdinal();\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","sourceOld":"    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.getValue(), o2\n                .getValue());\n            if (value == 0) {\n              value = o1.getOrdinal() - o2.getOrdinal();\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","sourceNew":"    @Override\n    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          @Override\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.getValue(), o2\n                .getValue());\n            if (value == 0) {\n              value = o1.getOrdinal() - o2.getOrdinal();\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","sourceOld":"    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.getValue(), o2\n                .getValue());\n            if (value == 0) {\n              value = o1.getOrdinal() - o2.getOrdinal();\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","sourceNew":"    @Override\n    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          @Override\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.value, o2.value);\n            if (value == 0) {\n              value = o1.ordinal - o2.ordinal;\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","sourceOld":"    @Override\n    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          @Override\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.getValue(), o2\n                .getValue());\n            if (value == 0) {\n              value = o1.getOrdinal() - o2.getOrdinal();\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","sourceNew":"    @Override\n    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          @Override\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.value, o2.value);\n            if (value == 0) {\n              value = o1.ordinal - o2.ordinal;\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","sourceOld":"    @Override\n    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          @Override\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.getValue(), o2\n                .getValue());\n            if (value == 0) {\n              value = o1.getOrdinal() - o2.getOrdinal();\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","sourceNew":null,"sourceOld":"    @Override\n    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          @Override\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.value, o2.value);\n            if (value == 0) {\n              value = o1.ordinal - o2.ordinal;\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils.AllValueHeap#pop().mjava","sourceNew":null,"sourceOld":"    @Override\n    public FacetResultNode pop() {\n      if (!isReady) {\n        Collections.sort(resultNodes, new Comparator<FacetResultNode>() {\n          @Override\n          public int compare(FacetResultNode o1, FacetResultNode o2) {\n            int value = Double.compare(o1.value, o2.value);\n            if (value == 0) {\n              value = o1.ordinal - o2.ordinal;\n            }\n            if (accending) {\n              value = -value;\n            }\n            return value;\n          }\n        });\n        isReady = true;\n      }\n\n      return resultNodes.remove(0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["811cdb4a80352766eb0c762e48972707a924e5cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["811cdb4a80352766eb0c762e48972707a924e5cd","d33e19a97046248623a7591aeaa6547233fd15e2"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"811cdb4a80352766eb0c762e48972707a924e5cd":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}