{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testFramework().mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testFramework().mjava","pathOld":"/dev/null","sourceNew":"  public void testFramework() {\n    Map<String, Object[]> calls = new HashMap<>();\n    Map<String, Object> out = new HashMap<>();\n    CoreContainer mockCC = TestCoreAdminApis.getCoreContainerMock(calls, out);\n    PluginBag<SolrRequestHandler> containerHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    containerHandlers.put(COLLECTIONS_HANDLER_PATH, new TestCollectionAPIs.MockCollectionsHandler());\n    containerHandlers.put(CORES_HANDLER_PATH, new CoreAdminHandler(mockCC));\n    containerHandlers.put(CONFIGSETS_HANDLER_PATH, new ConfigSetsHandler(mockCC));\n    out.put(\"getRequestHandlers\", containerHandlers);\n\n    PluginBag<SolrRequestHandler> coreHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    coreHandlers.put(\"/schema\", new SchemaHandler());\n    coreHandlers.put(\"/config\", new SolrConfigHandler());\n    coreHandlers.put(\"/admin/ping\", new PingRequestHandler());\n\n    Map<String, String> parts = new HashMap<>();\n    String fullPath = \"/collections/hello/shards\";\n    Api api = V2HttpCall.getApiInfo(containerHandlers, fullPath, \"POST\",\n       fullPath, parts);\n    assertNotNull(api);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/create\", NOT_NULL));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards\", \"POST\",\n      null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/split\", NOT_NULL,\n        \"/commands/add-replica\", NOT_NULL\n    ));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/force-leader\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello\", \"POST\",\n       null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/add-replica-property\", NOT_NULL,\n        \"/commands/delete-replica-property\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1/replica1\", \"DELETE\",\n       null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"DELETE\",\n        \"/url/params/onlyIfDown/type\", \"boolean\"\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n    assertEquals(\"replica1\", parts.get(\"replica\"));\n\n    SolrQueryResponse rsp = invoke(containerHandlers, null, \"/collections/_introspect\", GET, mockCC);\n\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/spec[0]/methods[0]\", \"DELETE\",\n        \"/spec[1]/methods[0]\", \"POST\",\n        \"/spec[2]/methods[0]\", \"GET\"\n\n    ));\n\n    rsp = invoke(coreHandlers, \"/schema/_introspect\", \"/collections/hello/schema/_introspect\", GET, mockCC);\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/spec[0]/methods[0]\", \"POST\",\n        \"/spec[0]/commands\", NOT_NULL,\n        \"/spec[1]/methods[0]\", \"GET\"));\n\n    rsp = invoke(coreHandlers, \"/\", \"/collections/hello/_introspect\", GET, mockCC);\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/availableSubPaths\", NOT_NULL,\n        \"availableSubPaths /collections/hello/config/jmx\", NOT_NULL,\n        \"availableSubPaths /collections/hello/schema\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}/{replica}\", NOT_NULL\n    ));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testFramework().mjava","pathOld":"/dev/null","sourceNew":"  public void testFramework() {\n    Map<String, Object[]> calls = new HashMap<>();\n    Map<String, Object> out = new HashMap<>();\n    CoreContainer mockCC = TestCoreAdminApis.getCoreContainerMock(calls, out);\n    PluginBag<SolrRequestHandler> containerHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    containerHandlers.put(COLLECTIONS_HANDLER_PATH, new TestCollectionAPIs.MockCollectionsHandler());\n    containerHandlers.put(CORES_HANDLER_PATH, new CoreAdminHandler(mockCC));\n    containerHandlers.put(CONFIGSETS_HANDLER_PATH, new ConfigSetsHandler(mockCC));\n    out.put(\"getRequestHandlers\", containerHandlers);\n\n    PluginBag<SolrRequestHandler> coreHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    coreHandlers.put(\"/schema\", new SchemaHandler());\n    coreHandlers.put(\"/config\", new SolrConfigHandler());\n    coreHandlers.put(\"/admin/ping\", new PingRequestHandler());\n\n    Map<String, String> parts = new HashMap<>();\n    String fullPath = \"/collections/hello/shards\";\n    Api api = V2HttpCall.getApiInfo(containerHandlers, fullPath, \"POST\",\n       fullPath, parts);\n    assertNotNull(api);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/create\", NOT_NULL));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards\", \"POST\",\n      null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/split\", NOT_NULL,\n        \"/commands/add-replica\", NOT_NULL\n    ));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/force-leader\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello\", \"POST\",\n       null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/add-replica-property\", NOT_NULL,\n        \"/commands/delete-replica-property\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1/replica1\", \"DELETE\",\n       null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"DELETE\",\n        \"/url/params/onlyIfDown/type\", \"boolean\"\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n    assertEquals(\"replica1\", parts.get(\"replica\"));\n\n    SolrQueryResponse rsp = invoke(containerHandlers, null, \"/collections/_introspect\", GET, mockCC);\n\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/spec[0]/methods[0]\", \"DELETE\",\n        \"/spec[1]/methods[0]\", \"POST\",\n        \"/spec[2]/methods[0]\", \"GET\"\n\n    ));\n\n    rsp = invoke(coreHandlers, \"/schema/_introspect\", \"/collections/hello/schema/_introspect\", GET, mockCC);\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/spec[0]/methods[0]\", \"POST\",\n        \"/spec[0]/commands\", NOT_NULL,\n        \"/spec[1]/methods[0]\", \"GET\"));\n\n    rsp = invoke(coreHandlers, \"/\", \"/collections/hello/_introspect\", GET, mockCC);\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/availableSubPaths\", NOT_NULL,\n        \"availableSubPaths /collections/hello/config/jmx\", NOT_NULL,\n        \"availableSubPaths /collections/hello/schema\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}/{replica}\", NOT_NULL\n    ));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1","date":1566871283,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testFramework().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testFramework().mjava","sourceNew":"  public void testFramework() {\n    Map<String, Object[]> calls = new HashMap<>();\n    Map<String, Object> out = new HashMap<>();\n    CoreContainer mockCC = TestCoreAdminApis.getCoreContainerMock(calls, out);\n    PluginBag<SolrRequestHandler> containerHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    containerHandlers.put(COLLECTIONS_HANDLER_PATH, new TestCollectionAPIs.MockCollectionsHandler());\n    containerHandlers.put(CORES_HANDLER_PATH, new CoreAdminHandler(mockCC));\n    containerHandlers.put(CONFIGSETS_HANDLER_PATH, new ConfigSetsHandler(mockCC));\n    out.put(\"getRequestHandlers\", containerHandlers);\n\n    PluginBag<SolrRequestHandler> coreHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    coreHandlers.put(\"/schema\", new SchemaHandler());\n    coreHandlers.put(\"/config\", new SolrConfigHandler());\n    coreHandlers.put(\"/admin/ping\", new PingRequestHandler());\n\n    Map<String, String> parts = new HashMap<>();\n    String fullPath = \"/collections/hello/shards\";\n    Api api = V2HttpCall.getApiInfo(containerHandlers, fullPath, \"POST\",\n        fullPath, parts);\n    assertNotNull(api);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/create\", NOT_NULL));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/split\", NOT_NULL,\n        \"/commands/add-replica\", NOT_NULL\n    ));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/force-leader\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/add-replica-property\", NOT_NULL,\n        \"/commands/delete-replica-property\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1/replica1\", \"DELETE\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"DELETE\",\n        \"/url/params/onlyIfDown/type\", \"boolean\"\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n    assertEquals(\"replica1\", parts.get(\"replica\"));\n\n    SolrQueryResponse rsp = invoke(containerHandlers, null, \"/collections/_introspect\", GET, mockCC);\n\n    Set<String> methodNames = new HashSet<>();\n    methodNames.add(rsp.getValues()._getStr(\"/spec[0]/methods[0]\", null));\n    methodNames.add(rsp.getValues()._getStr(\"/spec[1]/methods[0]\", null));\n    methodNames.add(rsp.getValues()._getStr(\"/spec[2]/methods[0]\", null));\n    assertTrue(methodNames.contains(\"DELETE\"));\n    assertTrue(methodNames.contains(\"POST\"));\n    assertTrue(methodNames.contains(\"GET\"));\n\n    methodNames = new HashSet<>();\n\n    rsp = invoke(coreHandlers, \"/schema/_introspect\", \"/collections/hello/schema/_introspect\", GET, mockCC);\n    methodNames.add(rsp.getValues()._getStr(\"/spec[0]/methods[0]\", null));\n    methodNames.add(rsp.getValues()._getStr(\"/spec[1]/methods[0]\", null));\n    assertTrue(methodNames.contains(\"POST\"));\n    assertTrue(methodNames.contains(\"GET\"));\n\n    rsp = invoke(coreHandlers, \"/\", \"/collections/hello/_introspect\", GET, mockCC);\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/availableSubPaths\", NOT_NULL,\n        \"availableSubPaths /collections/hello/config/jmx\", NOT_NULL,\n        \"availableSubPaths /collections/hello/schema\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}/{replica}\", NOT_NULL\n    ));\n\n  }\n\n","sourceOld":"  public void testFramework() {\n    Map<String, Object[]> calls = new HashMap<>();\n    Map<String, Object> out = new HashMap<>();\n    CoreContainer mockCC = TestCoreAdminApis.getCoreContainerMock(calls, out);\n    PluginBag<SolrRequestHandler> containerHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    containerHandlers.put(COLLECTIONS_HANDLER_PATH, new TestCollectionAPIs.MockCollectionsHandler());\n    containerHandlers.put(CORES_HANDLER_PATH, new CoreAdminHandler(mockCC));\n    containerHandlers.put(CONFIGSETS_HANDLER_PATH, new ConfigSetsHandler(mockCC));\n    out.put(\"getRequestHandlers\", containerHandlers);\n\n    PluginBag<SolrRequestHandler> coreHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    coreHandlers.put(\"/schema\", new SchemaHandler());\n    coreHandlers.put(\"/config\", new SolrConfigHandler());\n    coreHandlers.put(\"/admin/ping\", new PingRequestHandler());\n\n    Map<String, String> parts = new HashMap<>();\n    String fullPath = \"/collections/hello/shards\";\n    Api api = V2HttpCall.getApiInfo(containerHandlers, fullPath, \"POST\",\n       fullPath, parts);\n    assertNotNull(api);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/create\", NOT_NULL));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards\", \"POST\",\n      null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/split\", NOT_NULL,\n        \"/commands/add-replica\", NOT_NULL\n    ));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/force-leader\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello\", \"POST\",\n       null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/add-replica-property\", NOT_NULL,\n        \"/commands/delete-replica-property\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1/replica1\", \"DELETE\",\n       null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"DELETE\",\n        \"/url/params/onlyIfDown/type\", \"boolean\"\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n    assertEquals(\"replica1\", parts.get(\"replica\"));\n\n    SolrQueryResponse rsp = invoke(containerHandlers, null, \"/collections/_introspect\", GET, mockCC);\n\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/spec[0]/methods[0]\", \"DELETE\",\n        \"/spec[1]/methods[0]\", \"POST\",\n        \"/spec[2]/methods[0]\", \"GET\"\n\n    ));\n\n    rsp = invoke(coreHandlers, \"/schema/_introspect\", \"/collections/hello/schema/_introspect\", GET, mockCC);\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/spec[0]/methods[0]\", \"POST\",\n        \"/spec[0]/commands\", NOT_NULL,\n        \"/spec[1]/methods[0]\", \"GET\"));\n\n    rsp = invoke(coreHandlers, \"/\", \"/collections/hello/_introspect\", GET, mockCC);\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/availableSubPaths\", NOT_NULL,\n        \"availableSubPaths /collections/hello/config/jmx\", NOT_NULL,\n        \"availableSubPaths /collections/hello/schema\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}/{replica}\", NOT_NULL\n    ));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92d579a5d677457eb3cbac9551000f590be33b55","date":1600915032,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testFramework().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestApiFramework#testFramework().mjava","sourceNew":"  public void testFramework() {\n    Map<String, Object[]> calls = new HashMap<>();\n    Map<String, Object> out = new HashMap<>();\n    CoreContainer mockCC = TestCoreAdminApis.getCoreContainerMock(calls, out);\n    PluginBag<SolrRequestHandler> containerHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    TestCollectionAPIs.MockCollectionsHandler collectionsHandler = new TestCollectionAPIs.MockCollectionsHandler();\n    containerHandlers.put(COLLECTIONS_HANDLER_PATH, collectionsHandler);\n    containerHandlers.getApiBag().registerObject(new CollectionsAPI(collectionsHandler));\n    containerHandlers.put(CORES_HANDLER_PATH, new CoreAdminHandler(mockCC));\n    containerHandlers.put(CONFIGSETS_HANDLER_PATH, new ConfigSetsHandler(mockCC));\n    out.put(\"getRequestHandlers\", containerHandlers);\n\n    PluginBag<SolrRequestHandler> coreHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    coreHandlers.put(\"/schema\", new SchemaHandler());\n    coreHandlers.put(\"/config\", new SolrConfigHandler());\n    coreHandlers.put(\"/admin/ping\", new PingRequestHandler());\n\n    Map<String, String> parts = new HashMap<>();\n    String fullPath = \"/collections/hello/shards\";\n    Api api = V2HttpCall.getApiInfo(containerHandlers, fullPath, \"POST\",\n        fullPath, parts);\n    assertNotNull(api);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/create\", NOT_NULL));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/split\", NOT_NULL,\n        \"/commands/add-replica\", NOT_NULL\n    ));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/force-leader\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/add-replica-property\", NOT_NULL,\n        \"/commands/delete-replica-property\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1/replica1\", \"DELETE\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"DELETE\",\n        \"/url/params/onlyIfDown/type\", \"boolean\"\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n    assertEquals(\"replica1\", parts.get(\"replica\"));\n\n    SolrQueryResponse rsp = invoke(containerHandlers, null, \"/collections/_introspect\", GET, mockCC);\n\n    Set<String> methodNames = new HashSet<>();\n    methodNames.add(rsp.getValues()._getStr(\"/spec[0]/methods[0]\", null));\n    methodNames.add(rsp.getValues()._getStr(\"/spec[1]/methods[0]\", null));\n    methodNames.add(rsp.getValues()._getStr(\"/spec[2]/methods[0]\", null));\n    assertTrue(methodNames.contains(\"DELETE\"));\n    assertTrue(methodNames.contains(\"POST\"));\n    assertTrue(methodNames.contains(\"GET\"));\n\n    methodNames = new HashSet<>();\n\n    rsp = invoke(coreHandlers, \"/schema/_introspect\", \"/collections/hello/schema/_introspect\", GET, mockCC);\n    methodNames.add(rsp.getValues()._getStr(\"/spec[0]/methods[0]\", null));\n    methodNames.add(rsp.getValues()._getStr(\"/spec[1]/methods[0]\", null));\n    assertTrue(methodNames.contains(\"POST\"));\n    assertTrue(methodNames.contains(\"GET\"));\n\n    rsp = invoke(coreHandlers, \"/\", \"/collections/hello/_introspect\", GET, mockCC);\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/availableSubPaths\", NOT_NULL,\n        \"availableSubPaths /collections/hello/config/jmx\", NOT_NULL,\n        \"availableSubPaths /collections/hello/schema\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}/{replica}\", NOT_NULL\n    ));\n\n  }\n\n","sourceOld":"  public void testFramework() {\n    Map<String, Object[]> calls = new HashMap<>();\n    Map<String, Object> out = new HashMap<>();\n    CoreContainer mockCC = TestCoreAdminApis.getCoreContainerMock(calls, out);\n    PluginBag<SolrRequestHandler> containerHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    containerHandlers.put(COLLECTIONS_HANDLER_PATH, new TestCollectionAPIs.MockCollectionsHandler());\n    containerHandlers.put(CORES_HANDLER_PATH, new CoreAdminHandler(mockCC));\n    containerHandlers.put(CONFIGSETS_HANDLER_PATH, new ConfigSetsHandler(mockCC));\n    out.put(\"getRequestHandlers\", containerHandlers);\n\n    PluginBag<SolrRequestHandler> coreHandlers = new PluginBag<>(SolrRequestHandler.class, null, false);\n    coreHandlers.put(\"/schema\", new SchemaHandler());\n    coreHandlers.put(\"/config\", new SolrConfigHandler());\n    coreHandlers.put(\"/admin/ping\", new PingRequestHandler());\n\n    Map<String, String> parts = new HashMap<>();\n    String fullPath = \"/collections/hello/shards\";\n    Api api = V2HttpCall.getApiInfo(containerHandlers, fullPath, \"POST\",\n        fullPath, parts);\n    assertNotNull(api);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/create\", NOT_NULL));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/split\", NOT_NULL,\n        \"/commands/add-replica\", NOT_NULL\n    ));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/force-leader\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n\n\n    parts = new HashMap<>();\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello\", \"POST\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"POST\",\n        \"/commands/add-replica-property\", NOT_NULL,\n        \"/commands/delete-replica-property\", NOT_NULL\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n\n    api = V2HttpCall.getApiInfo(containerHandlers, \"/collections/hello/shards/shard1/replica1\", \"DELETE\",\n        null, parts);\n    assertConditions(api.getSpec(), Utils.makeMap(\n        \"/methods[0]\", \"DELETE\",\n        \"/url/params/onlyIfDown/type\", \"boolean\"\n    ));\n    assertEquals(\"hello\", parts.get(\"collection\"));\n    assertEquals(\"shard1\", parts.get(\"shard\"));\n    assertEquals(\"replica1\", parts.get(\"replica\"));\n\n    SolrQueryResponse rsp = invoke(containerHandlers, null, \"/collections/_introspect\", GET, mockCC);\n\n    Set<String> methodNames = new HashSet<>();\n    methodNames.add(rsp.getValues()._getStr(\"/spec[0]/methods[0]\", null));\n    methodNames.add(rsp.getValues()._getStr(\"/spec[1]/methods[0]\", null));\n    methodNames.add(rsp.getValues()._getStr(\"/spec[2]/methods[0]\", null));\n    assertTrue(methodNames.contains(\"DELETE\"));\n    assertTrue(methodNames.contains(\"POST\"));\n    assertTrue(methodNames.contains(\"GET\"));\n\n    methodNames = new HashSet<>();\n\n    rsp = invoke(coreHandlers, \"/schema/_introspect\", \"/collections/hello/schema/_introspect\", GET, mockCC);\n    methodNames.add(rsp.getValues()._getStr(\"/spec[0]/methods[0]\", null));\n    methodNames.add(rsp.getValues()._getStr(\"/spec[1]/methods[0]\", null));\n    assertTrue(methodNames.contains(\"POST\"));\n    assertTrue(methodNames.contains(\"GET\"));\n\n    rsp = invoke(coreHandlers, \"/\", \"/collections/hello/_introspect\", GET, mockCC);\n    assertConditions(rsp.getValues().asMap(2), Utils.makeMap(\n        \"/availableSubPaths\", NOT_NULL,\n        \"availableSubPaths /collections/hello/config/jmx\", NOT_NULL,\n        \"availableSubPaths /collections/hello/schema\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}\", NOT_NULL,\n        \"availableSubPaths /collections/hello/shards/{shard}/{replica}\", NOT_NULL\n    ));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"92d579a5d677457eb3cbac9551000f590be33b55":["86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92d579a5d677457eb3cbac9551000f590be33b55"],"86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"]},"commit2Childs":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"92d579a5d677457eb3cbac9551000f590be33b55":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86b825c025ea7e2be4c0af9f000c2dc0f12ff4b1":["92d579a5d677457eb3cbac9551000f590be33b55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}