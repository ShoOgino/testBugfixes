{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","commits":[{"id":"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","date":1390928346,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"/dev/null","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67f37df79147ed4dd608300c2336c2979db98be","date":1436271524,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = LegacyNumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = NumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a8a6e8618a812308bce0a978e52ca5c453a112","date":1457444484,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(IntPoint.newExactQuery(\"year\", 2007), BooleanClause.Occur.MUST);\n    Query qc = new Query() {\n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        return builder.build();\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"hack!\";\n      }\n    };\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    Query qw1 = qc.rewrite(r);\n    Query qw2 = qw1.rewrite(r);\n\n    assertNotSame(qc, qw1);\n    assertNotSame(qw1, qw2);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    MultiTermQuery qc = LegacyNumericRangeQuery.newIntRange(\"year\", 2007, 2007, true, true);\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    qc.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    int h1 = qc.hashCode();\n    Query qw1 = qc.rewrite(r);\n    int h2 = qw1.hashCode();\n    Query qw2 = qw1.rewrite(r);\n    int h3 = qw2.hashCode();\n\n    assertTrue(h1 != h2);\n    assertTrue(h2 != h3);\n    assertTrue(h3 != h1);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","date":1457550664,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(IntPoint.newExactQuery(\"year\", 2007), BooleanClause.Occur.MUST);\n    Query qc = new Query() {\n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        return builder.build();\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"hack!\";\n      }\n    };\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    Query qw1 = qc.rewrite(r);\n    Query qw2 = qw1.rewrite(r);\n\n    assertNotSame(qc, qw1);\n    assertNotSame(qw1, qw2);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(IntPoint.newExactQuery(\"year\", 2007), BooleanClause.Occur.MUST);\n    Query qc = new Query() {\n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        return builder.build();\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"hack!\";\n      }\n    };\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    Query qw1 = qc.rewrite(r);\n    Query qw2 = qw1.rewrite(r);\n\n    assertNotSame(qc, qw1);\n    assertNotSame(qw1, qw2);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations:\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(IntPoint.newExactQuery(\"year\", 2007), BooleanClause.Occur.MUST);\n    Query qc = new Query() {\n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        return builder.build();\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"hack!\";\n      }\n\n      @Override\n      public boolean equals(Object o) {\n        return o == this;\n      }\n\n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n    };\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    Query qw1 = qc.rewrite(r);\n    Query qw2 = qw1.rewrite(r);\n\n    assertNotSame(qc, qw1);\n    assertNotSame(qw1, qw2);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(IntPoint.newExactQuery(\"year\", 2007), BooleanClause.Occur.MUST);\n    Query qc = new Query() {\n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        return builder.build();\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"hack!\";\n      }\n    };\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    Query qw1 = qc.rewrite(r);\n    Query qw2 = qw1.rewrite(r);\n\n    assertNotSame(qc, qw1);\n    assertNotSame(qw1, qw2);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations:\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(IntPoint.newExactQuery(\"year\", 2007), BooleanClause.Occur.MUST);\n    Query qc = new Query() {\n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        return builder.build();\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"hack!\";\n      }\n\n      @Override\n      public boolean equals(Object o) {\n        return o == this;\n      }\n\n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n    };\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    Query qw1 = qc.rewrite(r);\n    Query qw2 = qw1.rewrite(r);\n\n    assertNotSame(qc, qw1);\n    assertNotSame(qw1, qw2);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations: \n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(IntPoint.newExactQuery(\"year\", 2007), BooleanClause.Occur.MUST);\n    Query qc = new Query() {\n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        return builder.build();\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"hack!\";\n      }\n    };\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    Query qw1 = qc.rewrite(r);\n    Query qw2 = qw1.rewrite(r);\n\n    assertNotSame(qc, qw1);\n    assertNotSame(qw1, qw2);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":null,"sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations:\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(IntPoint.newExactQuery(\"year\", 2007), BooleanClause.Occur.MUST);\n    Query qc = new Query() {\n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        return builder.build();\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"hack!\";\n      }\n\n      @Override\n      public boolean equals(Object o) {\n        return o == this;\n      }\n\n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n    };\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    Query qw1 = qc.rewrite(r);\n    Query qw2 = qw1.rewrite(r);\n\n    assertNotSame(qc, qw1);\n    assertNotSame(qw1, qw2);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testBugCausedByRewritingTwice().mjava","sourceNew":null,"sourceOld":"  public void testBugCausedByRewritingTwice() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n\n    for (int i=0;i<10;i++) {\n      docs.clear();\n      docs.add(makeJob(\"ruby\", i));\n      docs.add(makeJob(\"java\", 2007));\n      docs.add(makeResume(\"Frank\", \"United States\"));\n      w.addDocuments(docs);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Hacky: this causes the query to need 2 rewrite\n    // iterations:\n    BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    builder.add(IntPoint.newExactQuery(\"year\", 2007), BooleanClause.Occur.MUST);\n    Query qc = new Query() {\n      @Override\n      public Query rewrite(IndexReader reader) throws IOException {\n        return builder.build();\n      }\n\n      @Override\n      public String toString(String field) {\n        return \"hack!\";\n      }\n\n      @Override\n      public boolean equals(Object o) {\n        return o == this;\n      }\n\n      @Override\n      public int hashCode() {\n        return System.identityHashCode(this);\n      }\n    };\n\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    Query qw1 = qc.rewrite(r);\n    Query qw2 = qw1.rewrite(r);\n\n    assertNotSame(qc, qw1);\n    assertNotSame(qw1, qw2);\n\n    ToParentBlockJoinQuery qp = new ToParentBlockJoinQuery(qc, parentsFilter, ScoreMode.Max);\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 10, true, true);\n\n    s.search(qp, c);\n    TopGroups<Integer> groups = c.getTopGroups(qp, Sort.INDEXORDER, 0, 10, 0, true);\n    for (GroupDocs<Integer> group : groups.groups) {\n      assertEquals(1, group.totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a67f37df79147ed4dd608300c2336c2979db98be":["4b3915945926c0bf7def01b0c504977709d3aed3"],"2713584a660051cd646423be682771e3bbd99985":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"37a8a6e8618a812308bce0a978e52ca5c453a112":["770342641f7b505eaa8dccdc666158bff2419109"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["a67f37df79147ed4dd608300c2336c2979db98be"],"4b3915945926c0bf7def01b0c504977709d3aed3":["2713584a660051cd646423be682771e3bbd99985"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","0e7bc21595222ae4f75509300fbb7726691f387f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b012914a8110b2ff1d075ed1ef72aa57084d4897","2713584a660051cd646423be682771e3bbd99985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["2713584a660051cd646423be682771e3bbd99985","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a67f37df79147ed4dd608300c2336c2979db98be":["770342641f7b505eaa8dccdc666158bff2419109"],"2713584a660051cd646423be682771e3bbd99985":["4b3915945926c0bf7def01b0c504977709d3aed3","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"37a8a6e8618a812308bce0a978e52ca5c453a112":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"4b3915945926c0bf7def01b0c504977709d3aed3":["a67f37df79147ed4dd608300c2336c2979db98be"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"770342641f7b505eaa8dccdc666158bff2419109":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0e7bc21595222ae4f75509300fbb7726691f387f"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}