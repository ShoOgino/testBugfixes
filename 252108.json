{"path":"solr/core/src/java/org/apache/solr/search/LRUCache#putCacheValue(K,CacheValue[V]).mjava","commits":[{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#putCacheValue(K,CacheValue[V]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Visible for testing to create synthetic cache entries.\n   * @lucene.internal\n   */\n  public V putCacheValue(K key, CacheValue<V> cacheValue) {\n    synchronized (map) {\n      if (getState() == State.LIVE) {\n        stats.inserts.increment();\n      }\n\n      if (syntheticEntries) {\n        if (cacheValue.createTime < oldestEntry) {\n          oldestEntry = cacheValue.createTime;\n        }\n      }\n\n      // increment local inserts regardless of state???\n      // it does make it more consistent with the current size...\n      inserts++;\n\n      // important to calc and add new ram bytes first so that removeEldestEntry can compare correctly\n      long keySize = RamUsageEstimator.sizeOfObject(key, QUERY_DEFAULT_RAM_BYTES_USED);\n      long valueSize = RamUsageEstimator.sizeOfObject(cacheValue, QUERY_DEFAULT_RAM_BYTES_USED);\n      ramBytesUsed += keySize + valueSize + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY;\n      CacheValue<V> old = map.put(key, cacheValue);\n      if (old != null) {\n        long bytesToDecrement = RamUsageEstimator.sizeOfObject(old, QUERY_DEFAULT_RAM_BYTES_USED);\n        // the key existed in the map but we added its size before the put, so let's back out\n        bytesToDecrement += LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY;\n        bytesToDecrement += RamUsageEstimator.sizeOfObject(key, QUERY_DEFAULT_RAM_BYTES_USED);\n        ramBytesUsed -= bytesToDecrement;\n      }\n      return old == null ? null : old.value;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#putCacheValue(K,CacheValue[V]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Visible for testing to create synthetic cache entries.\n   * @lucene.internal\n   */\n  public V putCacheValue(K key, CacheValue<V> cacheValue) {\n    synchronized (map) {\n      if (getState() == State.LIVE) {\n        stats.inserts.increment();\n      }\n\n      if (syntheticEntries) {\n        if (cacheValue.createTime < oldestEntry) {\n          oldestEntry = cacheValue.createTime;\n        }\n      }\n\n      // increment local inserts regardless of state???\n      // it does make it more consistent with the current size...\n      inserts++;\n\n      // important to calc and add new ram bytes first so that removeEldestEntry can compare correctly\n      long keySize = RamUsageEstimator.sizeOfObject(key, QUERY_DEFAULT_RAM_BYTES_USED);\n      long valueSize = RamUsageEstimator.sizeOfObject(cacheValue, QUERY_DEFAULT_RAM_BYTES_USED);\n      ramBytesUsed += keySize + valueSize + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY;\n      CacheValue<V> old = map.put(key, cacheValue);\n      if (old != null) {\n        long bytesToDecrement = RamUsageEstimator.sizeOfObject(old, QUERY_DEFAULT_RAM_BYTES_USED);\n        // the key existed in the map but we added its size before the put, so let's back out\n        bytesToDecrement += LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY;\n        bytesToDecrement += RamUsageEstimator.sizeOfObject(key, QUERY_DEFAULT_RAM_BYTES_USED);\n        ramBytesUsed -= bytesToDecrement;\n      }\n      return old == null ? null : old.value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d7d3943904804560937e6239effeebda0f920e4":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["4d7d3943904804560937e6239effeebda0f920e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}