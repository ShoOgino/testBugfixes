{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getMinAchievedReplicationFactor(String,NamedList).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getMinAchievedReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getMinAchievedReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Useful for determining the minimum achieved replication factor across\n   * all shards involved in processing an update request, typically useful\n   * for gauging the replication factor of a batch. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public int getMinAchievedReplicationFactor(String collection, NamedList resp) {\n    // it's probably already on the top-level header set by condense\n    NamedList header = (NamedList)resp.get(\"responseHeader\");\n    Integer achRf = (Integer)header.get(UpdateRequest.REPFACT);\n    if (achRf != null)\n      return achRf.intValue();\n\n    // not on the top-level header, walk the shard route tree\n    Map<String,Integer> shardRf = getShardReplicationFactor(collection, resp);\n    for (Integer rf : shardRf.values()) {\n      if (achRf == null || rf < achRf) {\n        achRf = rf;\n      }\n    }    \n    return (achRf != null) ? achRf.intValue() : -1;\n  }\n\n","sourceOld":"  /**\n   * Useful for determining the minimum achieved replication factor across\n   * all shards involved in processing an update request, typically useful\n   * for gauging the replication factor of a batch. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public int getMinAchievedReplicationFactor(String collection, NamedList resp) {\n    // it's probably already on the top-level header set by condense\n    NamedList header = (NamedList)resp.get(\"responseHeader\");\n    Integer achRf = (Integer)header.get(UpdateRequest.REPFACT);\n    if (achRf != null)\n      return achRf.intValue();\n\n    // not on the top-level header, walk the shard route tree\n    Map<String,Integer> shardRf = getShardReplicationFactor(collection, resp);\n    for (Integer rf : shardRf.values()) {\n      if (achRf == null || rf < achRf) {\n        achRf = rf;\n      }\n    }    \n    return (achRf != null) ? achRf.intValue() : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getMinAchievedReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getMinAchievedReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Useful for determining the minimum achieved replication factor across\n   * all shards involved in processing an update request, typically useful\n   * for gauging the replication factor of a batch.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public int getMinAchievedReplicationFactor(String collection, NamedList resp) {\n    // it's probably already on the top-level header set by condense\n    NamedList header = (NamedList)resp.get(\"responseHeader\");\n    Integer achRf = (Integer)header.get(UpdateRequest.REPFACT);\n    if (achRf != null)\n      return achRf.intValue();\n\n    // not on the top-level header, walk the shard route tree\n    Map<String,Integer> shardRf = getShardReplicationFactor(collection, resp);\n    for (Integer rf : shardRf.values()) {\n      if (achRf == null || rf < achRf) {\n        achRf = rf;\n      }\n    }\n    return (achRf != null) ? achRf.intValue() : -1;\n  }\n\n","sourceOld":"  /**\n   * Useful for determining the minimum achieved replication factor across\n   * all shards involved in processing an update request, typically useful\n   * for gauging the replication factor of a batch. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public int getMinAchievedReplicationFactor(String collection, NamedList resp) {\n    // it's probably already on the top-level header set by condense\n    NamedList header = (NamedList)resp.get(\"responseHeader\");\n    Integer achRf = (Integer)header.get(UpdateRequest.REPFACT);\n    if (achRf != null)\n      return achRf.intValue();\n\n    // not on the top-level header, walk the shard route tree\n    Map<String,Integer> shardRf = getShardReplicationFactor(collection, resp);\n    for (Integer rf : shardRf.values()) {\n      if (achRf == null || rf < achRf) {\n        achRf = rf;\n      }\n    }    \n    return (achRf != null) ? achRf.intValue() : -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"]},"commit2Childs":{"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}