{"path":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! indexed() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on unindexed field: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    if (this.type.isPointField() && !hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a PointField without doc values: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    if (this.type.isPointField() && !hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a PointField without doc values: \" \n                              + getName());\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not sort on a field w/o docValues unless it is indexed and supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    if (this.type.isPointField() && !hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a PointField without doc values: \" \n                              + getName());\n    }\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c","9001fdb834e467ef899e41c747c42b27b4d45099","73bb5a57dc75b54a39494f99986599cae7dff417"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not sort on a field w/o docValues unless it is indexed and supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if (! (indexed() || hasDocValues()) ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a field which is neither indexed nor has doc values: \" \n                              + getName());\n    }\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    if (this.type.isPointField() && !hasDocValues()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on a PointField without doc values: \" \n                              + getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf2282b6a7c3f113e7a233b785b80527c03d590","date":1516129064,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if ( multiValued()\n         // if either of these are non-null, then we should not error\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,true)\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,false) ) {\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName() + \" of type: \" + this.type.getTypeName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not sort on a field w/o docValues unless it is indexed and supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not sort on a field w/o docValues unless it is indexed and supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if ( multiValued()\n         // if either of these are non-null, then we should not error\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,true)\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,false) ) {\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName() + \" of type: \" + this.type.getTypeName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not sort on a field w/o docValues unless it is indexed and supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if ( multiValued() ) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not sort on a field w/o docValues unless it is indexed and supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if ( multiValued()\n         // if either of these are non-null, then we should not error\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,true)\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,false) ) {\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName() + \" of type: \" + this.type.getTypeName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && isUninvertible() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not sort on a field w/o docValues unless it is indexed=true uninvertible=true and the type supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if ( multiValued()\n         // if either of these are non-null, then we should not error\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,true)\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,false) ) {\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName() + \" of type: \" + this.type.getTypeName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not sort on a field w/o docValues unless it is indexed and supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b35e05781839a0dc467a95caf2e64f9eff4dd73d","date":1574953990,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#checkSortability().mjava","sourceNew":"  /**\n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if ( multiValued()\n         // if either of these are non-null, then we should not error\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,true)\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,false) ) {\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName() + \" of type: \" + this.type.getTypeName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && isUninvertible() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not sort on a field w/o docValues unless it is indexed=true uninvertible=true and the type supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Sanity checks that the properties of this field type are plausible \n   * for a field that may be used in sorting, throwing an appropriate \n   * exception (including the field name) if it is not.  FieldType subclasses \n   * can choose to call this method in their getSortField implementation\n   * @see FieldType#getSortField\n   */\n  public void checkSortability() throws SolrException {\n    if ( multiValued()\n         // if either of these are non-null, then we should not error\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,true)\n         && null == this.type.getDefaultMultiValueSelectorForSort(this,false) ) {\n      \n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                              \"can not sort on multivalued field: \" \n                              + getName() + \" of type: \" + this.type.getTypeName());\n    }\n    if (! hasDocValues() ) {\n      if ( ! ( indexed() && isUninvertible() && null != this.type.getUninversionType(this) ) ) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"can not sort on a field w/o docValues unless it is indexed=true uninvertible=true and the type supports Uninversion: \" \n                                + getName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["46dc9ac8b3e748407baaef82453138ff3974480c"],"b94236357aaa22b76c10629851fe4e376e0cea82":["79900e89f08cc17c4bcf49789dd61a2236ee7840","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"46dc9ac8b3e748407baaef82453138ff3974480c":["73bb5a57dc75b54a39494f99986599cae7dff417"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["46dc9ac8b3e748407baaef82453138ff3974480c"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["b94236357aaa22b76c10629851fe4e376e0cea82"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["73bb5a57dc75b54a39494f99986599cae7dff417","46dc9ac8b3e748407baaef82453138ff3974480c"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["c26f00b574427b55127e869b935845554afde1fa","73bb5a57dc75b54a39494f99986599cae7dff417"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b35e05781839a0dc467a95caf2e64f9eff4dd73d":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b35e05781839a0dc467a95caf2e64f9eff4dd73d"],"73bb5a57dc75b54a39494f99986599cae7dff417":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"46dc9ac8b3e748407baaef82453138ff3974480c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","79900e89f08cc17c4bcf49789dd61a2236ee7840","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"c26f00b574427b55127e869b935845554afde1fa":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["b94236357aaa22b76c10629851fe4e376e0cea82","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["b35e05781839a0dc467a95caf2e64f9eff4dd73d"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b35e05781839a0dc467a95caf2e64f9eff4dd73d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"73bb5a57dc75b54a39494f99986599cae7dff417":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","95303ff3749680c743b9425f9cf99e6e4065e8a8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}