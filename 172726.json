{"path":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testFieldWithNoNorm().mjava","commits":[{"id":"7ae36bc5dae83f94e7da6e03d7f3b14ea175af4c","date":1166653933,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testFieldWithNoNorm().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldWithNoNorm() throws Exception {\n    \n    IndexReader r = IndexReader.open(store);\n    byte[] norms = r.norms(\"nonorm\");\n    \n    // sanity check, norms should all be 1\n    assertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n    for (int i = 0; i< norms.length; i++) {\n      assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n    }\n    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    try {\n      fnm.reSetNorms(\"nonorm\");\n    } catch (Exception e) {\n      assertNull(\"caught something\", e);\n    }\n    \n    // nothing should have changed\n    r = IndexReader.open(store);\n    \n    norms = r.norms(\"nonorm\");\n    assertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n    for (int i = 0; i< norms.length; i++) {\n      assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n    }\n\n    r.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testFieldWithNoNorm().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testFieldWithNoNorm().mjava","sourceNew":"  public void testFieldWithNoNorm() throws Exception {\n    \n    IndexReader r = IndexReader.open(store);\n    byte[] norms = r.norms(\"nonorm\");\n    \n    // sanity check, norms should all be 1\n    assertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n    if (!r.getDisableFakeNorms()) {\n      for (int i = 0; i< norms.length; i++) {\n        assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n      }\n    } else {\n      assertNull(norms);\n    }\n    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    try {\n      fnm.reSetNorms(\"nonorm\");\n    } catch (Exception e) {\n      assertNull(\"caught something\", e);\n    }\n    \n    // nothing should have changed\n    r = IndexReader.open(store);\n    \n    norms = r.norms(\"nonorm\");\n    assertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n    if (!r.getDisableFakeNorms()) {\n      for (int i = 0; i< norms.length; i++) {\n        assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n      }\n    } else {\n      assertNull(norms);\n    }\n\n    r.close();\n  }\n\n","sourceOld":"  public void testFieldWithNoNorm() throws Exception {\n    \n    IndexReader r = IndexReader.open(store);\n    byte[] norms = r.norms(\"nonorm\");\n    \n    // sanity check, norms should all be 1\n    assertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n    for (int i = 0; i< norms.length; i++) {\n      assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n    }\n    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    try {\n      fnm.reSetNorms(\"nonorm\");\n    } catch (Exception e) {\n      assertNull(\"caught something\", e);\n    }\n    \n    // nothing should have changed\n    r = IndexReader.open(store);\n    \n    norms = r.norms(\"nonorm\");\n    assertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n    for (int i = 0; i< norms.length; i++) {\n      assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n    }\n\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testFieldWithNoNorm().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testFieldWithNoNorm().mjava","sourceNew":"  public void testFieldWithNoNorm() throws Exception {\n    \n    IndexReader r = IndexReader.open(store);\n    byte[] norms = r.norms(\"nonorm\");\n    \n    // sanity check, norms should all be 1\n    assertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n    if (!r.getDisableFakeNorms()) {\n      for (int i = 0; i< norms.length; i++) {\n        assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n      }\n    } else {\n      assertNull(norms);\n    }\n    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    try {\n      fnm.reSetNorms(\"nonorm\");\n    } catch (Exception e) {\n      assertNull(\"caught something\", e);\n    }\n    \n    // nothing should have changed\n    r = IndexReader.open(store);\n    \n    norms = r.norms(\"nonorm\");\n    assertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n    if (!r.getDisableFakeNorms()) {\n      for (int i = 0; i< norms.length; i++) {\n        assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n      }\n    } else {\n      assertNull(norms);\n    }\n\n    r.close();\n  }\n\n","sourceOld":"  public void testFieldWithNoNorm() throws Exception {\n    \n    IndexReader r = IndexReader.open(store);\n    byte[] norms = r.norms(\"nonorm\");\n    \n    // sanity check, norms should all be 1\n    assertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n    if (!r.getDisableFakeNorms()) {\n      for (int i = 0; i< norms.length; i++) {\n        assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n      }\n    } else {\n      assertNull(norms);\n    }\n    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    try {\n      fnm.reSetNorms(\"nonorm\");\n    } catch (Exception e) {\n      assertNull(\"caught something\", e);\n    }\n    \n    // nothing should have changed\n    r = IndexReader.open(store);\n    \n    norms = r.norms(\"nonorm\");\n    assertTrue(\"Whoops we have norms?\", !r.hasNorms(\"nonorm\"));\n    if (!r.getDisableFakeNorms()) {\n      for (int i = 0; i< norms.length; i++) {\n        assertEquals(\"\"+i, DEFAULT_NORM, norms[i]);\n      }\n    } else {\n      assertNull(norms);\n    }\n\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["7ae36bc5dae83f94e7da6e03d7f3b14ea175af4c"],"7ae36bc5dae83f94e7da6e03d7f3b14ea175af4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"7ae36bc5dae83f94e7da6e03d7f3b14ea175af4c":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ae36bc5dae83f94e7da6e03d7f3b14ea175af4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}