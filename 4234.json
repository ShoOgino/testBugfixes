{"path":"src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","commits":[{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idfExplain(Collection,Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    if(supportedMethods.overridesCollectionIDF) {\n      final float idf = idf(terms, searcher);\n      return new IDFExplanation() {\n        @Override\n        public float getIdf() {\n          return idf;\n        }\n        @Override\n        public String explain() {\n          return \"Inexplicable\";\n        }\n      };\n    }\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection terms, Searcher searcher) throws IOException {\n    if(supportedMethods.overridesCollectionIDF) {\n      final float idf = idf(terms, searcher);\n      return new IDFExplanation() {\n        @Override\n        public float getIdf() {\n          return idf;\n        }\n        @Override\n        public String explain() {\n          return \"Inexplicable\";\n        }\n      };\n    }\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58","date":1256297148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    if(supportedMethods.overridesCollectionIDF) {\n      final float idf = idf(terms, searcher);\n      return new IDFExplanation() {\n        @Override\n        public float getIdf() {\n          return idf;\n        }\n        @Override\n        public String explain() {\n          return \"Inexplicable\";\n        }\n      };\n    }\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58"]},"commit2Childs":{"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}