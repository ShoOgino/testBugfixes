{"path":"lucene/core/src/test/org/apache/lucene/geo/TestCircle2D#testTriangleDisjoint().mjava","commits":[{"id":"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc","date":1582124610,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestCircle2D#testTriangleDisjoint().mjava","pathOld":"/dev/null","sourceNew":"  public void testTriangleDisjoint() {\n    Component2D circle2D;\n    if (random().nextBoolean()) {\n      Circle circle = new Circle(0, 0, 100);\n      circle2D = LatLonGeometry.create(circle);\n    } else {\n      XYCircle xyCircle = new XYCircle(0, 0, 1);\n      circle2D = XYGeometry.create(xyCircle);\n    }\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, circle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n    assertEquals(Component2D.WithinRelation.DISJOINT, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestCircle2D#testTriangleDisjoint().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestCircle2D#testTriangleDisjoint().mjava","sourceNew":"  public void testTriangleDisjoint() {\n    Component2D circle2D;\n    if (random().nextBoolean()) {\n      Circle circle = new Circle(0, 0, 100);\n      circle2D = LatLonGeometry.create(circle);\n    } else {\n      XYCircle xyCircle = new XYCircle(0, 0, 1);\n      circle2D = XYGeometry.create(xyCircle);\n    }\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertFalse(circle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n    assertFalse(circle2D.intersectsLine(ax, ay, bx, by));\n    assertFalse(circle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n    assertFalse(circle2D.containsLine(ax, ay, bx, by));\n    assertEquals(Component2D.WithinRelation.DISJOINT, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n  }\n\n","sourceOld":"  public void testTriangleDisjoint() {\n    Component2D circle2D;\n    if (random().nextBoolean()) {\n      Circle circle = new Circle(0, 0, 100);\n      circle2D = LatLonGeometry.create(circle);\n    } else {\n      XYCircle xyCircle = new XYCircle(0, 0, 1);\n      circle2D = XYGeometry.create(xyCircle);\n    }\n    double ax = 4;\n    double ay = 4;\n    double bx = 5;\n    double by = 5;\n    double cx = 5;\n    double cy = 4;\n    assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, circle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n    assertEquals(Component2D.WithinRelation.DISJOINT, circle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c568a1e2a5125c2245150eebb030a81baa158b31":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc":["c568a1e2a5125c2245150eebb030a81baa158b31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}