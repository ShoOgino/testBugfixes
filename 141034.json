{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","commits":[{"id":"106069d345c14ee5c76f0ea76397b02a656f883c","date":1411998064,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","pathOld":"/dev/null","sourceNew":"  protected static List<String> getActiveReplicaCoreUrls(ZkController zkController, String collection, String localCoreNodeName) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ZkStateReader zkStateReader = zkController.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (!localCoreNodeName.equals(replica.getName()) &&\n                ZkStateReader.ACTIVE.equals(replica.getStr(ZkStateReader.STATE_PROP)) &&\n                liveNodes.contains(replica.getNodeName())) {\n              ZkCoreNodeProps replicaCoreProps = new ZkCoreNodeProps(replica);\n              activeReplicaCoreUrls.add(replicaCoreProps.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","pathOld":"/dev/null","sourceNew":"  protected static List<String> getActiveReplicaCoreUrls(ZkController zkController, String collection, String localCoreNodeName) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ZkStateReader zkStateReader = zkController.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (!localCoreNodeName.equals(replica.getName()) &&\n                ZkStateReader.ACTIVE.equals(replica.getStr(ZkStateReader.STATE_PROP)) &&\n                liveNodes.contains(replica.getNodeName())) {\n              ZkCoreNodeProps replicaCoreProps = new ZkCoreNodeProps(replica);\n              activeReplicaCoreUrls.add(replicaCoreProps.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","sourceNew":"  protected static List<String> getActiveReplicaCoreUrls(ZkController zkController, String collection, String localCoreNodeName) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ZkStateReader zkStateReader = zkController.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (!localCoreNodeName.equals(replica.getName()) &&\n                replica.getState() == Replica.State.ACTIVE &&\n                liveNodes.contains(replica.getNodeName())) {\n              ZkCoreNodeProps replicaCoreProps = new ZkCoreNodeProps(replica);\n              activeReplicaCoreUrls.add(replicaCoreProps.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":"  protected static List<String> getActiveReplicaCoreUrls(ZkController zkController, String collection, String localCoreNodeName) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ZkStateReader zkStateReader = zkController.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (!localCoreNodeName.equals(replica.getName()) &&\n                ZkStateReader.ACTIVE.equals(replica.getStr(ZkStateReader.STATE_PROP)) &&\n                liveNodes.contains(replica.getNodeName())) {\n              ZkCoreNodeProps replicaCoreProps = new ZkCoreNodeProps(replica);\n              activeReplicaCoreUrls.add(replicaCoreProps.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","sourceNew":"  protected static List<String> getActiveReplicaCoreUrls(ZkController zkController, String collection, String localCoreNodeName) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ZkStateReader zkStateReader = zkController.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection != null && docCollection.getActiveSlices() != null && docCollection.getActiveSlices().size() > 0) {\n      final Collection<Slice> activeSlices = docCollection.getActiveSlices();\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (!localCoreNodeName.equals(replica.getName()) &&\n                replica.getState() == Replica.State.ACTIVE &&\n                liveNodes.contains(replica.getNodeName())) {\n              ZkCoreNodeProps replicaCoreProps = new ZkCoreNodeProps(replica);\n              activeReplicaCoreUrls.add(replicaCoreProps.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":"  protected static List<String> getActiveReplicaCoreUrls(ZkController zkController, String collection, String localCoreNodeName) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ZkStateReader zkStateReader = zkController.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (!localCoreNodeName.equals(replica.getName()) &&\n                replica.getState() == Replica.State.ACTIVE &&\n                liveNodes.contains(replica.getNodeName())) {\n              ZkCoreNodeProps replicaCoreProps = new ZkCoreNodeProps(replica);\n              activeReplicaCoreUrls.add(replicaCoreProps.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","bugFix":["106069d345c14ee5c76f0ea76397b02a656f883c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","sourceNew":"  protected static List<String> getActiveReplicaCoreUrls(ZkController zkController, String collection, String localCoreNodeName) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ZkStateReader zkStateReader = zkController.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection != null && docCollection.getActiveSlices() != null && docCollection.getActiveSlices().size() > 0) {\n      final Collection<Slice> activeSlices = docCollection.getActiveSlices();\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (!localCoreNodeName.equals(replica.getName()) &&\n                replica.getState() == Replica.State.ACTIVE &&\n                liveNodes.contains(replica.getNodeName())) {\n              ZkCoreNodeProps replicaCoreProps = new ZkCoreNodeProps(replica);\n              activeReplicaCoreUrls.add(replicaCoreProps.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":"  protected static List<String> getActiveReplicaCoreUrls(ZkController zkController, String collection, String localCoreNodeName) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ZkStateReader zkStateReader = zkController.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    Collection<Slice> activeSlices = clusterState.getActiveSlices(collection);\n    if (activeSlices != null && activeSlices.size() > 0) {\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (!localCoreNodeName.equals(replica.getName()) &&\n                replica.getState() == Replica.State.ACTIVE &&\n                liveNodes.contains(replica.getNodeName())) {\n              ZkCoreNodeProps replicaCoreProps = new ZkCoreNodeProps(replica);\n              activeReplicaCoreUrls.add(replicaCoreProps.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#getActiveReplicaCoreUrls(ZkController,String,String).mjava","sourceNew":"  protected static List<String> getActiveReplicaCoreUrls(ZkController zkController, String collection, String localCoreNodeName) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ZkStateReader zkStateReader = zkController.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection != null && docCollection.getActiveSlicesArr().length > 0) {\n      final Slice[] activeSlices = docCollection.getActiveSlicesArr();\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (!localCoreNodeName.equals(replica.getName()) &&\n                replica.getState() == Replica.State.ACTIVE &&\n                liveNodes.contains(replica.getNodeName())) {\n              ZkCoreNodeProps replicaCoreProps = new ZkCoreNodeProps(replica);\n              activeReplicaCoreUrls.add(replicaCoreProps.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","sourceOld":"  protected static List<String> getActiveReplicaCoreUrls(ZkController zkController, String collection, String localCoreNodeName) {\n    List<String> activeReplicaCoreUrls = new ArrayList<>();\n    ZkStateReader zkStateReader = zkController.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    final DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    if (docCollection != null && docCollection.getActiveSlices() != null && docCollection.getActiveSlices().size() > 0) {\n      final Collection<Slice> activeSlices = docCollection.getActiveSlices();\n      for (Slice next : activeSlices) {\n        Map<String, Replica> replicasMap = next.getReplicasMap();\n        if (replicasMap != null) {\n          for (Map.Entry<String, Replica> entry : replicasMap.entrySet()) {\n            Replica replica = entry.getValue();\n            if (!localCoreNodeName.equals(replica.getName()) &&\n                replica.getState() == Replica.State.ACTIVE &&\n                liveNodes.contains(replica.getNodeName())) {\n              ZkCoreNodeProps replicaCoreProps = new ZkCoreNodeProps(replica);\n              activeReplicaCoreUrls.add(replicaCoreProps.getCoreUrl());\n            }\n          }\n        }\n      }\n    }\n    return activeReplicaCoreUrls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["106069d345c14ee5c76f0ea76397b02a656f883c"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["344b0840364d990b29b97467bfcc766ff8325d11"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a219f1dcad1700e84807666bdbd2b573e8de7021","344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","106069d345c14ee5c76f0ea76397b02a656f883c"],"106069d345c14ee5c76f0ea76397b02a656f883c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c84df91ca6a2e8d6f26f185663112546a27f6b45"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"344b0840364d990b29b97467bfcc766ff8325d11":["c84df91ca6a2e8d6f26f185663112546a27f6b45","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","106069d345c14ee5c76f0ea76397b02a656f883c"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"106069d345c14ee5c76f0ea76397b02a656f883c":["a219f1dcad1700e84807666bdbd2b573e8de7021","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}