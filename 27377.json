{"path":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","commits":[{"id":"773a737806859660d4756f710adc0ad53e05f9d5","date":1432140757,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"/dev/null","sourceNew":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"\\n\\n\\n Total of \"+deletedDocs.size()+\" docs deleted \\n\\n\\n\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["877f1e09b9299ce0757f4d83768da944803baf04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","sourceNew":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"\\n\\n\\n Total of \"+deletedDocs.size()+\" docs deleted \\n\\n\\n\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"\\n\\n\\n Total of \"+deletedDocs.size()+\" docs deleted \\n\\n\\n\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete();\n      req.setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"877f1e09b9299ce0757f4d83768da944803baf04","date":1433276115,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","sourceNew":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"\\n\\n\\n Total of \"+deletedDocs.size()+\" docs deleted \\n\\n\\n\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":["773a737806859660d4756f710adc0ad53e05f9d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7049ad12744e132ed475c4ad0e547cecc4ef0053","date":1438822408,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","sourceNew":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, testCollectionName);\n    notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","sourceNew":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, testCollectionName);\n    notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, testCollectionName);\n    notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","sourceNew":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, testCollectionName);\n    notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","sourceOld":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, testCollectionName);\n    notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","sourceNew":"  @Test\n  public void testReplicaVersionHandling() throws Exception {\n\n    final String shardId = \"shard1\";\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 1, 3)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    final ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 3));\n\n    final Replica leader = stateReader.getLeaderRetry(COLLECTION, shardId);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, COLLECTION);\n\n    sendDoc(1);\n    cluster.getSolrClient().commit(COLLECTION);\n\n    // verify doc is on the leader and replica\n    final List<Replica> notLeaders = stateReader.getClusterState().getCollection(COLLECTION).getReplicas()\n        .stream()\n        .filter(r -> r.getCoreName().equals(leader.getCoreName()) == false)\n        .collect(Collectors.toList());\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\", docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cluster.getSolrClient().commit(COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cluster.getSolrClient().commit(COLLECTION);\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1000, deletedDocs);\n\n  }\n\n","sourceOld":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, testCollectionName);\n    notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","sourceNew":"  @Test\n  public void testReplicaVersionHandling() throws Exception {\n\n    final String shardId = \"shard1\";\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 1, 3)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    final ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 3));\n\n    final Replica leader = stateReader.getLeaderRetry(COLLECTION, shardId);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, COLLECTION);\n\n    sendDoc(1);\n    cluster.getSolrClient().commit(COLLECTION);\n\n    // verify doc is on the leader and replica\n    final List<Replica> notLeaders = stateReader.getClusterState().getCollection(COLLECTION).getReplicas()\n        .stream()\n        .filter(r -> r.getCoreName().equals(leader.getCoreName()) == false)\n        .collect(Collectors.toList());\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\", docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cluster.getSolrClient().commit(COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cluster.getSolrClient().commit(COLLECTION);\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1000, deletedDocs);\n\n  }\n\n","sourceOld":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, testCollectionName);\n    notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","sourceNew":"  @Test\n  public void testReplicaVersionHandling() throws Exception {\n\n    final String shardId = \"shard1\";\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 1, 3)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    final ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 3));\n\n    final Replica leader = stateReader.getLeaderRetry(COLLECTION, shardId);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, COLLECTION);\n\n    sendDoc(1);\n    cluster.getSolrClient().commit(COLLECTION);\n\n    // verify doc is on the leader and replica\n    final List<Replica> notLeaders = stateReader.getClusterState().getCollection(COLLECTION).getReplicas()\n        .stream()\n        .filter(r -> r.getCoreName().equals(leader.getCoreName()) == false)\n        .collect(Collectors.toList());\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\", docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cluster.getSolrClient().commit(COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cluster.getSolrClient().commit(COLLECTION);\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1000, deletedDocs);\n\n  }\n\n","sourceOld":"  protected void testReplicaVersionHandling() throws Exception {\n    final String testCollectionName = \"c8n_vers_1x3\";\n    String shardId = \"shard1\";\n    int rf = 3;\n    createCollectionRetry(testCollectionName, 1, rf, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    final Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, shardId);\n    List<Replica> notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, testCollectionName);\n    notLeaders =\n        ensureAllReplicasAreActive(testCollectionName, shardId, 1, rf, maxWaitSecsToSeeAllActive);\n\n    sendDoc(1);\n    cloudClient.commit();\n\n    // verify doc is on the leader and replica\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(id, docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, testCollectionName);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cloudClient.commit();\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cloudClient.commit();\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, testCollectionName);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1000, deletedDocs);\n\n    // try to clean up\n    try {\n      CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()\n              .setCollectionName(testCollectionName);\n      req.process(cloudClient);\n    } catch (Exception e) {\n      // don't fail the test\n      log.warn(\"Could not delete collection {} after test completed\", testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77c47ac12a932418e039884bba9619a37d778d81","date":1487540073,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","sourceNew":"  @Test\n  public void testReplicaVersionHandling() throws Exception {\n\n    final String shardId = \"shard1\";\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 1, 3)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    final ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 3));\n\n    final Replica leader = stateReader.getLeaderRetry(COLLECTION, shardId);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, COLLECTION);\n\n    sendDoc(1);\n    cluster.getSolrClient().commit(COLLECTION);\n\n    // verify doc is on the leader and replica\n    final List<Replica> notLeaders = stateReader.getClusterState().getCollection(COLLECTION).getReplicas()\n        .stream()\n        .filter(r -> r.getCoreName().equals(leader.getCoreName()) == false)\n        .collect(Collectors.toList());\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\", docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int ds = docsSent.get();\n          if (ds > 0) {\n            int docToDelete = rand.nextInt(ds) + 1;\n            if (!deletedDocs.contains(docToDelete)) {\n              delI(String.valueOf(docToDelete));\n              deletedDocs.add(docToDelete);\n            }\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cluster.getSolrClient().commit(COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cluster.getSolrClient().commit(COLLECTION);\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1000, deletedDocs);\n\n  }\n\n","sourceOld":"  @Test\n  public void testReplicaVersionHandling() throws Exception {\n\n    final String shardId = \"shard1\";\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 1, 3)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    final ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 3));\n\n    final Replica leader = stateReader.getLeaderRetry(COLLECTION, shardId);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, COLLECTION);\n\n    sendDoc(1);\n    cluster.getSolrClient().commit(COLLECTION);\n\n    // verify doc is on the leader and replica\n    final List<Replica> notLeaders = stateReader.getClusterState().getCollection(COLLECTION).getReplicas()\n        .stream()\n        .filter(r -> r.getCoreName().equals(leader.getCoreName()) == false)\n        .collect(Collectors.toList());\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\", docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int docToDelete = rand.nextInt(docsSent.get())+1;\n          if (!deletedDocs.contains(docToDelete)) {\n            delI(String.valueOf(docToDelete));\n            deletedDocs.add(docToDelete);\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cluster.getSolrClient().commit(COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cluster.getSolrClient().commit(COLLECTION);\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1000, deletedDocs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#testReplicaVersionHandling().mjava","sourceNew":"  @Test\n  public void testReplicaVersionHandling() throws Exception {\n\n    final String shardId = \"shard1\";\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 1, 3)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    final ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 3));\n\n    final Replica leader = stateReader.getLeaderRetry(COLLECTION, shardId);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, COLLECTION);\n\n    sendDoc(1);\n    cluster.getSolrClient().commit(COLLECTION);\n\n    // verify doc is on the leader and replica\n    final List<Replica> notLeaders = stateReader.getClusterState().getCollection(COLLECTION).getReplicas()\n        .stream()\n        .filter(r -> r.getCoreName().equals(leader.getCoreName()) == false)\n        .collect(Collectors.toList());\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\", docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version ({}) document directly to replica\", maxOnReplica -1);\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int ds = docsSent.get();\n          if (ds > 0) {\n            int docToDelete = rand.nextInt(ds) + 1;\n            if (!deletedDocs.contains(docToDelete)) {\n              delI(String.valueOf(docToDelete));\n              deletedDocs.add(docToDelete);\n            }\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cluster.getSolrClient().commit(COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cluster.getSolrClient().commit(COLLECTION);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Total of {} docs deleted\", deletedDocs.size());\n    }\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1000, deletedDocs);\n\n  }\n\n","sourceOld":"  @Test\n  public void testReplicaVersionHandling() throws Exception {\n\n    final String shardId = \"shard1\";\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 1, 3)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n\n    final ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();\n    stateReader.waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 1, 3));\n\n    final Replica leader = stateReader.getLeaderRetry(COLLECTION, shardId);\n\n    // start by reloading the empty collection so we try to calculate the max from an empty index\n    reloadCollection(leader, COLLECTION);\n\n    sendDoc(1);\n    cluster.getSolrClient().commit(COLLECTION);\n\n    // verify doc is on the leader and replica\n    final List<Replica> notLeaders = stateReader.getClusterState().getCollection(COLLECTION).getReplicas()\n        .stream()\n        .filter(r -> r.getCoreName().equals(leader.getCoreName()) == false)\n        .collect(Collectors.toList());\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1, null);\n\n    // get max version from the leader and replica\n    Replica replica = notLeaders.get(0);\n    Long maxOnLeader = getMaxVersionFromIndex(leader);\n    Long maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version: \" + maxOnLeader, maxOnLeader, maxOnReplica);\n\n    // send the same doc but with a lower version than the max in the index\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      String docId = String.valueOf(1);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\", docId);\n      doc.setField(\"_version_\", maxOnReplica - 1); // bad version!!!\n\n      // simulate what the leader does when sending a doc to a replica\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(DISTRIB_UPDATE_PARAM, DistributedUpdateProcessor.DistribPhase.FROMLEADER.toString());\n      params.set(DISTRIB_FROM, leader.getCoreUrl());\n\n      UpdateRequest req = new UpdateRequest();\n      req.setParams(params);\n      req.add(doc);\n\n      log.info(\"Sending doc with out-of-date version (\"+(maxOnReplica -1)+\") document directly to replica\");\n\n      client.request(req);\n      client.commit();\n\n      Long docVersion = getVersionFromIndex(replica, docId);\n      assertEquals(\"older version should have been thrown away\", maxOnReplica, docVersion);\n    }\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    // now start sending docs while collection is reloading\n\n    delQ(\"*:*\");\n    commit();\n\n    final Set<Integer> deletedDocs = new HashSet<>();\n    final AtomicInteger docsSent = new AtomicInteger(0);\n    final Random rand = new Random(5150);\n    Thread docSenderThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(rand.nextInt(30)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 1000; i++) {\n          if (i % (rand.nextInt(20)+1) == 0) {\n            try {\n              Thread.sleep(rand.nextInt(50)+1);\n            } catch (InterruptedException e) {}\n          }\n\n          int docId = i+1;\n          try {\n            sendDoc(docId);\n            docsSent.incrementAndGet();\n          } catch (Exception e) {}\n        }\n      }\n    };\n\n    Thread reloaderThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(300)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 3; i++) {\n          try {\n            reloadCollection(leader, COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(300)+300);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n    Thread deleteThread = new Thread() {\n      public void run() {\n\n        // brief delay before sending docs\n        try {\n          Thread.sleep(500);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 200; i++) {\n          try {\n            Thread.sleep(rand.nextInt(50)+1);\n          } catch (InterruptedException e) {}\n\n          int ds = docsSent.get();\n          if (ds > 0) {\n            int docToDelete = rand.nextInt(ds) + 1;\n            if (!deletedDocs.contains(docToDelete)) {\n              delI(String.valueOf(docToDelete));\n              deletedDocs.add(docToDelete);\n            }\n          }\n        }\n      }\n    };\n\n    Thread committerThread = new Thread() {\n      public void run() {\n        try {\n          Thread.sleep(rand.nextInt(200)+1);\n        } catch (InterruptedException e) {}\n\n        for (int i=0; i < 20; i++) {\n          try {\n            cluster.getSolrClient().commit(COLLECTION);\n          } catch (Exception e) {}\n\n          try {\n            Thread.sleep(rand.nextInt(100)+100);\n          } catch (InterruptedException e) {}\n        }\n      }\n    };\n\n\n    docSenderThread.start();\n    reloaderThread.start();\n    committerThread.start();\n    deleteThread.start();\n\n    docSenderThread.join();\n    reloaderThread.join();\n    committerThread.join();\n    deleteThread.join();\n\n    cluster.getSolrClient().commit(COLLECTION);\n\n    log.info(\"Total of \"+deletedDocs.size()+\" docs deleted\");\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version before reload\", maxOnLeader, maxOnReplica);\n\n    reloadCollection(leader, COLLECTION);\n\n    maxOnLeader = getMaxVersionFromIndex(leader);\n    maxOnReplica = getMaxVersionFromIndex(replica);\n    assertEquals(\"leader and replica should have same max version after reload\", maxOnLeader, maxOnReplica);\n\n    assertDocsExistInAllReplicas(leader, notLeaders, COLLECTION, 1, 1000, deletedDocs);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["7049ad12744e132ed475c4ad0e547cecc4ef0053"],"77c47ac12a932418e039884bba9619a37d778d81":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["77c47ac12a932418e039884bba9619a37d778d81"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"],"773a737806859660d4756f710adc0ad53e05f9d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7049ad12744e132ed475c4ad0e547cecc4ef0053":["877f1e09b9299ce0757f4d83768da944803baf04"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["7049ad12744e132ed475c4ad0e547cecc4ef0053","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["773a737806859660d4756f710adc0ad53e05f9d5"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"877f1e09b9299ce0757f4d83768da944803baf04":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"]},"commit2Childs":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"77c47ac12a932418e039884bba9619a37d778d81":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["77c47ac12a932418e039884bba9619a37d778d81","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"773a737806859660d4756f710adc0ad53e05f9d5":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["773a737806859660d4756f710adc0ad53e05f9d5"],"7049ad12744e132ed475c4ad0e547cecc4ef0053":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["877f1e09b9299ce0757f4d83768da944803baf04"],"877f1e09b9299ce0757f4d83768da944803baf04":["7049ad12744e132ed475c4ad0e547cecc4ef0053"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}