{"path":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","commits":[{"id":"0d3072fffb39e4aa50fce38815821919b35fc194","date":1138579199,"type":0,"author":"Yoav Shapira","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","pathOld":"/dev/null","sourceNew":"  /***\r\n   * Return a list of tokens according to a test string format:\r\n   * a b c  =>  returns List<Token> [a,b,c]\r\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\r\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\r\n   */\r\n  public List tokens(String str) {\r\n    String[] arr = str.split(\" \");\r\n    List result = new ArrayList();\r\n    for (int i=0; i<arr.length; i++) {\r\n      String[] toks = arr[i].split(\"/\");\r\n      String[] params = toks[0].split(\",\");\r\n      Token t = new Token(params[0],0,0,\"TEST\");\r\n      if (params.length > 1) t.setPositionIncrement(Integer.parseInt(params[1]));\r\n      result.add(t);\r\n      for (int j=1; j<toks.length; j++) {\r\n        t = new Token(toks[j],0,0,\"TEST\");\r\n        t.setPositionIncrement(0);\r\n        result.add(t);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c1781d63ce2d5e979c8b3f35682b60a86f5df553","c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1781d63ce2d5e979c8b3f35682b60a86f5df553","date":1153254917,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   */\n  public List tokens(String str) {\n    String[] arr = str.split(\" \");\n    List result = new ArrayList();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n      Token t = new Token(params[0],0,0,\"TEST\");\n      if (params.length > 1) t.setPositionIncrement(Integer.parseInt(params[1]));\n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\r\n   * Return a list of tokens according to a test string format:\r\n   * a b c  =>  returns List<Token> [a,b,c]\r\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\r\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\r\n   */\r\n  public List tokens(String str) {\r\n    String[] arr = str.split(\" \");\r\n    List result = new ArrayList();\r\n    for (int i=0; i<arr.length; i++) {\r\n      String[] toks = arr[i].split(\"/\");\r\n      String[] params = toks[0].split(\",\");\r\n      Token t = new Token(params[0],0,0,\"TEST\");\r\n      if (params.length > 1) t.setPositionIncrement(Integer.parseInt(params[1]));\r\n      result.add(t);\r\n      for (int j=1; j<toks.length; j++) {\r\n        t = new Token(toks[j],0,0,\"TEST\");\r\n        t.setPositionIncrement(0);\r\n        result.add(t);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\n","bugFix":["0d3072fffb39e4aa50fce38815821919b35fc194"],"bugIntro":["751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226","751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226","date":1172784996,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   */\n  public List tokens(String str) {\n    String[] arr = str.split(\" \");\n    List result = new ArrayList();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   */\n  public List tokens(String str) {\n    String[] arr = str.split(\" \");\n    List result = new ArrayList();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n      Token t = new Token(params[0],0,0,\"TEST\");\n      if (params.length > 1) t.setPositionIncrement(Integer.parseInt(params[1]));\n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de4d615b00f60dce1293e87276b0685ce0f0d621","date":1179940685,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/BaseTokenTestCase#tokens(String).mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   */\n  public List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   */\n  public List tokens(String str) {\n    String[] arr = str.split(\" \");\n    List result = new ArrayList();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","pathOld":"src/test/org/apache/solr/analysis/BaseTokenTestCase#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   */\n  public List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokens(String).mjava","sourceNew":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /***\n   * Return a list of tokens according to a test string format:\n   * a b c  =>  returns List<Token> [a,b,c]\n   * a/b   => tokens a and b share the same spot (b.positionIncrement=0)\n   * a,3/b/c => a,b,c all share same position (a.positionIncrement=3, b.positionIncrement=0, c.positionIncrement=0)\n   * a,1,10,11  => \"a\" with positionIncrement=1, startOffset=10, endOffset=11\n   * @deprecated does not support attributes api\n   */\n  private List<Token> tokens(String str) {\n    String[] arr = str.split(\" \");\n    List<Token> result = new ArrayList<Token>();\n    for (int i=0; i<arr.length; i++) {\n      String[] toks = arr[i].split(\"/\");\n      String[] params = toks[0].split(\",\");\n\n      int posInc;\n      int start;\n      int end;\n\n      if (params.length > 1) {\n        posInc = Integer.parseInt(params[1]);\n      } else {\n        posInc = 1;\n      }\n\n      if (params.length > 2) {\n        start = Integer.parseInt(params[2]);\n      } else {\n        start = 0;\n      }\n\n      if (params.length > 3) {\n        end = Integer.parseInt(params[3]);\n      } else {\n        end = start + params[0].length();\n      }\n\n      Token t = new Token(params[0],start,end,\"TEST\");\n      t.setPositionIncrement(posInc);\n      \n      result.add(t);\n      for (int j=1; j<toks.length; j++) {\n        t = new Token(toks[j],0,0,\"TEST\");\n        t.setPositionIncrement(0);\n        result.add(t);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de4d615b00f60dce1293e87276b0685ce0f0d621":["751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"c1781d63ce2d5e979c8b3f35682b60a86f5df553":["0d3072fffb39e4aa50fce38815821919b35fc194"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["de4d615b00f60dce1293e87276b0685ce0f0d621"],"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"0d3072fffb39e4aa50fce38815821919b35fc194":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"de4d615b00f60dce1293e87276b0685ce0f0d621":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0d3072fffb39e4aa50fce38815821919b35fc194"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c1781d63ce2d5e979c8b3f35682b60a86f5df553":["751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226"],"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226":["de4d615b00f60dce1293e87276b0685ce0f0d621"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["ad94625fb8d088209f46650c8097196fec67f00c"],"0d3072fffb39e4aa50fce38815821919b35fc194":["c1781d63ce2d5e979c8b3f35682b60a86f5df553"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}