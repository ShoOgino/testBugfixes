{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer());\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer());\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer());\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(Version.LUCENE_CURRENT, indexField, new StandardAnalyzer(Version.LUCENE_CURRENT));\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/SimpleQQParser#parse(QualityQuery).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer());\n      queryParser.set(qp);\n    }\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq.build();\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.benchmark.quality.QualityQueryParser#parse(org.apache.lucene.benchmark.quality.QualityQuery)\n   */\n  @Override\n  public Query parse(QualityQuery qq) throws ParseException {\n    QueryParser qp = queryParser.get();\n    if (qp==null) {\n      qp = new QueryParser(indexField, new StandardAnalyzer());\n      queryParser.set(qp);\n    }\n    BooleanQuery bq = new BooleanQuery();\n    for (int i = 0; i < qqNames.length; i++)\n      bq.add(qp.parse(QueryParserBase.escape(qq.getValue(qqNames[i]))), BooleanClause.Occur.SHOULD);\n    \n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7530de27b87b961b51f01bd1299b7004d46e8823"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}