{"path":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","pathOld":"/dev/null","sourceNew":"  final void score(HitCollector c, final int end) throws IOException {\n    int d = doc;\t\t\t\t  // cache doc in local\n    while (d < end) {\t\t\t\t  // for docs in window\n      final int f = freqs[pointer];\n      float score =\t\t\t\t  // compute tf(f)*weight\n\tf < SCORE_CACHE_SIZE\t\t\t  // check cache\n\t ? scoreCache[f]\t\t\t  // cache hit\n\t : Similarity.tf(f)*weight;\t\t  // cache miss\n\n      score *= Similarity.norm(norms[d]);\t  // normalize for field\n\n      c.collect(d, score);\t\t\t  // collect score\n\n      if (++pointer == pointerMax) {\n\tpointerMax = termDocs.read(docs, freqs);  // refill buffers\n\tif (pointerMax != 0) {\n\t  pointer = 0;\n\t} else {\n\t  termDocs.close();\t\t\t  // close stream\n\t  doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n\t  return;\n\t}\n      } \n      d = docs[pointer];\n    }\n    doc = d;\t\t\t\t\t  // flush cache\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14aec0a40da5a9c26f8752701a5aa10f78f5017d","date":1027969875,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","sourceNew":"  final void score(HitCollector c, final int end) throws IOException {\n    int d = doc;\t\t\t\t  // cache doc in local\n    while (d < end) {\t\t\t\t  // for docs in window\n      final int f = freqs[pointer];\n      float score =\t\t\t\t  // compute tf(f)*weight\n\tf < SCORE_CACHE_SIZE\t\t\t  // check cache\n\t ? scoreCache[f]\t\t\t  // cache hit\n\t : Similarity.tf(f)*weight;\t\t  // cache miss\n\n      score *= Similarity.decodeNorm(norms[d]);\t  // normalize for field\n\n      c.collect(d, score);\t\t\t  // collect score\n\n      if (++pointer == pointerMax) {\n\tpointerMax = termDocs.read(docs, freqs);  // refill buffers\n\tif (pointerMax != 0) {\n\t  pointer = 0;\n\t} else {\n\t  termDocs.close();\t\t\t  // close stream\n\t  doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n\t  return;\n\t}\n      } \n      d = docs[pointer];\n    }\n    doc = d;\t\t\t\t\t  // flush cache\n  }\n\n","sourceOld":"  final void score(HitCollector c, final int end) throws IOException {\n    int d = doc;\t\t\t\t  // cache doc in local\n    while (d < end) {\t\t\t\t  // for docs in window\n      final int f = freqs[pointer];\n      float score =\t\t\t\t  // compute tf(f)*weight\n\tf < SCORE_CACHE_SIZE\t\t\t  // check cache\n\t ? scoreCache[f]\t\t\t  // cache hit\n\t : Similarity.tf(f)*weight;\t\t  // cache miss\n\n      score *= Similarity.norm(norms[d]);\t  // normalize for field\n\n      c.collect(d, score);\t\t\t  // collect score\n\n      if (++pointer == pointerMax) {\n\tpointerMax = termDocs.read(docs, freqs);  // refill buffers\n\tif (pointerMax != 0) {\n\t  pointer = 0;\n\t} else {\n\t  termDocs.close();\t\t\t  // close stream\n\t  doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n\t  return;\n\t}\n      } \n      d = docs[pointer];\n    }\n    doc = d;\t\t\t\t\t  // flush cache\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","sourceNew":"  final void score(HitCollector c, final int end) throws IOException {\n    int d = doc;\t\t\t\t  // cache doc in local\n    Similarity similarity = getSimilarity();      // cache sim in local\n    while (d < end) {\t\t\t\t  // for docs in window\n      final int f = freqs[pointer];\n      float score =\t\t\t\t  // compute tf(f)*weight\n\tf < SCORE_CACHE_SIZE\t\t\t  // check cache\n\t ? scoreCache[f]\t\t\t  // cache hit\n\t : similarity.tf(f)*weight;\t\t  // cache miss\n\n      score *= Similarity.decodeNorm(norms[d]);\t  // normalize for field\n\n      c.collect(d, score);\t\t\t  // collect score\n\n      if (++pointer == pointerMax) {\n\tpointerMax = termDocs.read(docs, freqs);  // refill buffers\n\tif (pointerMax != 0) {\n\t  pointer = 0;\n\t} else {\n\t  termDocs.close();\t\t\t  // close stream\n\t  doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n\t  return;\n\t}\n      } \n      d = docs[pointer];\n    }\n    doc = d;\t\t\t\t\t  // flush cache\n  }\n\n","sourceOld":"  final void score(HitCollector c, final int end) throws IOException {\n    int d = doc;\t\t\t\t  // cache doc in local\n    while (d < end) {\t\t\t\t  // for docs in window\n      final int f = freqs[pointer];\n      float score =\t\t\t\t  // compute tf(f)*weight\n\tf < SCORE_CACHE_SIZE\t\t\t  // check cache\n\t ? scoreCache[f]\t\t\t  // cache hit\n\t : Similarity.tf(f)*weight;\t\t  // cache miss\n\n      score *= Similarity.decodeNorm(norms[d]);\t  // normalize for field\n\n      c.collect(d, score);\t\t\t  // collect score\n\n      if (++pointer == pointerMax) {\n\tpointerMax = termDocs.read(docs, freqs);  // refill buffers\n\tif (pointerMax != 0) {\n\t  pointer = 0;\n\t} else {\n\t  termDocs.close();\t\t\t  // close stream\n\t  doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n\t  return;\n\t}\n      } \n      d = docs[pointer];\n    }\n    doc = d;\t\t\t\t\t  // flush cache\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","sourceNew":"  public final void score(HitCollector c, final int end) throws IOException {\n    int d = doc;\t\t\t\t  // cache doc in local\n    Similarity similarity = getSimilarity();      // cache sim in local\n    while (d < end) {\t\t\t\t  // for docs in window\n      final int f = freqs[pointer];\n      float score =\t\t\t\t  // compute tf(f)*weight\n\tf < SCORE_CACHE_SIZE\t\t\t  // check cache\n\t ? scoreCache[f]\t\t\t  // cache hit\n\t : similarity.tf(f)*weightValue;          // cache miss\n\n      score *= Similarity.decodeNorm(norms[d]);\t  // normalize for field\n\n      c.collect(d, score);\t\t\t  // collect score\n\n      if (++pointer == pointerMax) {\n\tpointerMax = termDocs.read(docs, freqs);  // refill buffers\n\tif (pointerMax != 0) {\n\t  pointer = 0;\n\t} else {\n\t  termDocs.close();\t\t\t  // close stream\n\t  doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n\t  return;\n\t}\n      } \n      d = docs[pointer];\n    }\n    doc = d;\t\t\t\t\t  // flush cache\n  }\n\n","sourceOld":"  final void score(HitCollector c, final int end) throws IOException {\n    int d = doc;\t\t\t\t  // cache doc in local\n    Similarity similarity = getSimilarity();      // cache sim in local\n    while (d < end) {\t\t\t\t  // for docs in window\n      final int f = freqs[pointer];\n      float score =\t\t\t\t  // compute tf(f)*weight\n\tf < SCORE_CACHE_SIZE\t\t\t  // check cache\n\t ? scoreCache[f]\t\t\t  // cache hit\n\t : similarity.tf(f)*weight;\t\t  // cache miss\n\n      score *= Similarity.decodeNorm(norms[d]);\t  // normalize for field\n\n      c.collect(d, score);\t\t\t  // collect score\n\n      if (++pointer == pointerMax) {\n\tpointerMax = termDocs.read(docs, freqs);  // refill buffers\n\tif (pointerMax != 0) {\n\t  pointer = 0;\n\t} else {\n\t  termDocs.close();\t\t\t  // close stream\n\t  doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n\t  return;\n\t}\n      } \n      d = docs[pointer];\n    }\n    doc = d;\t\t\t\t\t  // flush cache\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","sourceNew":null,"sourceOld":"  public final void score(HitCollector c, final int end) throws IOException {\n    int d = doc;\t\t\t\t  // cache doc in local\n    Similarity similarity = getSimilarity();      // cache sim in local\n    while (d < end) {\t\t\t\t  // for docs in window\n      final int f = freqs[pointer];\n      float score =\t\t\t\t  // compute tf(f)*weight\n\tf < SCORE_CACHE_SIZE\t\t\t  // check cache\n\t ? scoreCache[f]\t\t\t  // cache hit\n\t : similarity.tf(f)*weightValue;          // cache miss\n\n      score *= Similarity.decodeNorm(norms[d]);\t  // normalize for field\n\n      c.collect(d, score);\t\t\t  // collect score\n\n      if (++pointer == pointerMax) {\n\tpointerMax = termDocs.read(docs, freqs);  // refill buffers\n\tif (pointerMax != 0) {\n\t  pointer = 0;\n\t} else {\n\t  termDocs.close();\t\t\t  // close stream\n\t  doc = Integer.MAX_VALUE;\t\t  // set to sentinel value\n\t  return;\n\t}\n      } \n      d = docs[pointer];\n    }\n    doc = d;\t\t\t\t\t  // flush cache\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a53bff5f7abfecc50821f3dfcdca3d4c445cf88","date":1095875760,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","pathOld":"/dev/null","sourceNew":"  protected boolean score(HitCollector c, int end) throws IOException {\n    Similarity similarity = getSimilarity();      // cache sim in local\n    while (doc < end) {                           // for docs in window\n      int f = freqs[pointer];\n      float score =                               // compute tf(f)*weight\n        f < SCORE_CACHE_SIZE                      // check cache\n         ? scoreCache[f]                          // cache hit\n         : similarity.tf(f)*weightValue;          // cache miss\n\n      score *= Similarity.decodeNorm(norms[doc]); // normalize for field\n\n      c.collect(doc, score);                      // collect score\n\n      if (++pointer >= pointerMax) {\n        pointerMax = termDocs.read(docs, freqs);  // refill buffers\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          termDocs.close();                       // close stream\n          doc = Integer.MAX_VALUE;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca861c9b33e33b0d19ead9f2bc0860efe8dd6841","date":1095877107,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","sourceNew":"  protected boolean score(HitCollector c, int end) throws IOException {\n    Similarity similarity = getSimilarity();      // cache sim in local\n    float[] normDecoder = similarity.getNormDecoder();\n    while (doc < end) {                           // for docs in window\n      int f = freqs[pointer];\n      float score =                               // compute tf(f)*weight\n        f < SCORE_CACHE_SIZE                      // check cache\n         ? scoreCache[f]                          // cache hit\n         : similarity.tf(f)*weightValue;          // cache miss\n\n      score *= normDecoder[norms[doc] & 0xFF];    // normalize for field\n\n      c.collect(doc, score);                      // collect score\n\n      if (++pointer >= pointerMax) {\n        pointerMax = termDocs.read(docs, freqs);  // refill buffers\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          termDocs.close();                       // close stream\n          doc = Integer.MAX_VALUE;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n    }\n    return true;\n  }\n\n","sourceOld":"  protected boolean score(HitCollector c, int end) throws IOException {\n    Similarity similarity = getSimilarity();      // cache sim in local\n    while (doc < end) {                           // for docs in window\n      int f = freqs[pointer];\n      float score =                               // compute tf(f)*weight\n        f < SCORE_CACHE_SIZE                      // check cache\n         ? scoreCache[f]                          // cache hit\n         : similarity.tf(f)*weightValue;          // cache miss\n\n      score *= Similarity.decodeNorm(norms[doc]); // normalize for field\n\n      c.collect(doc, score);                      // collect score\n\n      if (++pointer >= pointerMax) {\n        pointerMax = termDocs.read(docs, freqs);  // refill buffers\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          termDocs.close();                       // close stream\n          doc = Integer.MAX_VALUE;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f48e84d4bccad9fa25c1c8eb5b17150676a8726","date":1097096472,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","sourceNew":"  protected boolean score(HitCollector c, int end) throws IOException {\n    Similarity similarity = getSimilarity();      // cache sim in local\n    float[] normDecoder = Similarity.getNormDecoder();\n    while (doc < end) {                           // for docs in window\n      int f = freqs[pointer];\n      float score =                               // compute tf(f)*weight\n        f < SCORE_CACHE_SIZE                      // check cache\n         ? scoreCache[f]                          // cache hit\n         : similarity.tf(f)*weightValue;          // cache miss\n\n      score *= normDecoder[norms[doc] & 0xFF];    // normalize for field\n\n      c.collect(doc, score);                      // collect score\n\n      if (++pointer >= pointerMax) {\n        pointerMax = termDocs.read(docs, freqs);  // refill buffers\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          termDocs.close();                       // close stream\n          doc = Integer.MAX_VALUE;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n    }\n    return true;\n  }\n\n","sourceOld":"  protected boolean score(HitCollector c, int end) throws IOException {\n    Similarity similarity = getSimilarity();      // cache sim in local\n    float[] normDecoder = similarity.getNormDecoder();\n    while (doc < end) {                           // for docs in window\n      int f = freqs[pointer];\n      float score =                               // compute tf(f)*weight\n        f < SCORE_CACHE_SIZE                      // check cache\n         ? scoreCache[f]                          // cache hit\n         : similarity.tf(f)*weightValue;          // cache miss\n\n      score *= normDecoder[norms[doc] & 0xFF];    // normalize for field\n\n      c.collect(doc, score);                      // collect score\n\n      if (++pointer >= pointerMax) {\n        pointerMax = termDocs.read(docs, freqs);  // refill buffers\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          termDocs.close();                       // close stream\n          doc = Integer.MAX_VALUE;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","sourceNew":"  /** @deprecated use {@link #score(Collector, int)} instead. */\n  protected boolean score(HitCollector c, int end) throws IOException {\n    return score(new HitCollectorWrapper(c), end);\n  }\n\n","sourceOld":"  protected boolean score(HitCollector c, int end) throws IOException {\n    Similarity similarity = getSimilarity();      // cache sim in local\n    float[] normDecoder = Similarity.getNormDecoder();\n    while (doc < end) {                           // for docs in window\n      int f = freqs[pointer];\n      float score =                               // compute tf(f)*weight\n        f < SCORE_CACHE_SIZE                      // check cache\n         ? scoreCache[f]                          // cache hit\n         : similarity.tf(f)*weightValue;          // cache miss\n\n      score *= normDecoder[norms[doc] & 0xFF];    // normalize for field\n\n      c.collect(doc, score);                      // collect score\n\n      if (++pointer >= pointerMax) {\n        pointerMax = termDocs.read(docs, freqs);  // refill buffers\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          termDocs.close();                       // close stream\n          doc = Integer.MAX_VALUE;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","sourceNew":"  /** @deprecated use {@link #score(Collector, int)} instead. */\n  protected boolean score(HitCollector c, int end) throws IOException {\n    return score(new HitCollectorWrapper(c), end, doc);\n  }\n\n","sourceOld":"  /** @deprecated use {@link #score(Collector, int)} instead. */\n  protected boolean score(HitCollector c, int end) throws IOException {\n    return score(new HitCollectorWrapper(c), end);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa6b36d4f0afdb006498f433653ee214a61be4fa","date":1251387263,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","sourceNew":"  /** @deprecated use {@link #score(Collector, int, int)} instead. */\n  protected boolean score(HitCollector c, int end) throws IOException {\n    return score(new HitCollectorWrapper(c), end, doc);\n  }\n\n","sourceOld":"  /** @deprecated use {@link #score(Collector, int)} instead. */\n  protected boolean score(HitCollector c, int end) throws IOException {\n    return score(new HitCollectorWrapper(c), end, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61cbcf396559d597a914594d7e2830c142ecfd91","date":1255444081,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/TermScorer#score(HitCollector,int).mjava","sourceNew":null,"sourceOld":"  /** @deprecated use {@link #score(Collector, int, int)} instead. */\n  protected boolean score(HitCollector c, int end) throws IOException {\n    return score(new HitCollectorWrapper(c), end, doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa6b36d4f0afdb006498f433653ee214a61be4fa":["30a558487f2298c2c19ceca9103c1b6865d64708"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["6f48e84d4bccad9fa25c1c8eb5b17150676a8726"],"6f5efa46fb27648cd98137d9898d819e115911bc":["14aec0a40da5a9c26f8752701a5aa10f78f5017d"],"6f48e84d4bccad9fa25c1c8eb5b17150676a8726":["ca861c9b33e33b0d19ead9f2bc0860efe8dd6841"],"14aec0a40da5a9c26f8752701a5aa10f78f5017d":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"30a558487f2298c2c19ceca9103c1b6865d64708":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"ca861c9b33e33b0d19ead9f2bc0860efe8dd6841":["9a53bff5f7abfecc50821f3dfcdca3d4c445cf88"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["6f5efa46fb27648cd98137d9898d819e115911bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61cbcf396559d597a914594d7e2830c142ecfd91":["aa6b36d4f0afdb006498f433653ee214a61be4fa"],"9a53bff5f7abfecc50821f3dfcdca3d4c445cf88":["15c469602973ef1a33c9a07367a380d278ffab20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61cbcf396559d597a914594d7e2830c142ecfd91"],"15c469602973ef1a33c9a07367a380d278ffab20":["27274410c91546fcfc28e692abd2dd77ca99be4b"]},"commit2Childs":{"aa6b36d4f0afdb006498f433653ee214a61be4fa":["61cbcf396559d597a914594d7e2830c142ecfd91"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["14aec0a40da5a9c26f8752701a5aa10f78f5017d"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"6f5efa46fb27648cd98137d9898d819e115911bc":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"6f48e84d4bccad9fa25c1c8eb5b17150676a8726":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"14aec0a40da5a9c26f8752701a5aa10f78f5017d":["6f5efa46fb27648cd98137d9898d819e115911bc"],"30a558487f2298c2c19ceca9103c1b6865d64708":["aa6b36d4f0afdb006498f433653ee214a61be4fa"],"ca861c9b33e33b0d19ead9f2bc0860efe8dd6841":["6f48e84d4bccad9fa25c1c8eb5b17150676a8726"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["15c469602973ef1a33c9a07367a380d278ffab20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"61cbcf396559d597a914594d7e2830c142ecfd91":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9a53bff5f7abfecc50821f3dfcdca3d4c445cf88":["ca861c9b33e33b0d19ead9f2bc0860efe8dd6841"],"15c469602973ef1a33c9a07367a380d278ffab20":["9a53bff5f7abfecc50821f3dfcdca3d4c445cf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}