{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f669665df5eca906baaf4197c0d728ad70a3633b","date":1386102141,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(ScaleFloatFunction.this);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final FunctionValues vals =  source.getValues(context, readerContext);\n\n    return new FloatDocValues(this) {\n      @Override\n      public float floatVal(int doc) {\n        return (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      @Override\n      public String toString(int doc) {\n        return \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f669665df5eca906baaf4197c0d728ad70a3633b":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["19275ba31e621f6da1b83bf13af75233876fd3d4","f669665df5eca906baaf4197c0d728ad70a3633b"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f669665df5eca906baaf4197c0d728ad70a3633b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f669665df5eca906baaf4197c0d728ad70a3633b":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["f669665df5eca906baaf4197c0d728ad70a3633b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}