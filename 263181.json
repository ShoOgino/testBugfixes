{"path":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","commits":[{"id":"58b6341c01680bddb99b9aa4697c800f1b1f3c02","date":1393514086,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1151ecb4798f5c31137aec032c241638018ed20","date":1394284367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0af84f7eb1ce29d521e0890c71cb77a167b910","date":1395997467,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b6c47f9f12abf6110d5203037447c07bf430e73","date":1453898961,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // don't use a randomized similarity, e.g. stopwords for DFI can get scored as 0,\n    // so boosting them is kind of crazy\n    s.setSimilarity(new BM25Similarity());\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // don't use a randomized similarity, e.g. stopwords for DFI can get scored as 0,\n    // so boosting them is kind of crazy\n    s.setSimilarity(new BM25Similarity());\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/CommonTermsQueryTest#testExtend().mjava","sourceNew":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // don't use a randomized similarity, e.g. stopwords for DFI can get scored as 0,\n    // so boosting them is kind of crazy\n    s.setSimilarity(new BM25Similarity());\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits.value, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","sourceOld":"  @Test\n  public void testExtend() throws IOException {\n    Directory dir = newDirectory();\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, analyzer);\n    String[] docs = new String[] {\"this is the end of the world right\",\n        \"is this it or maybe not\",\n        \"this is the end of the universe as we know it\",\n        \"there is the famous restaurant at the end of the universe\",};\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      doc.add(newTextField(\"field\", docs[i], Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n    // don't use a randomized similarity, e.g. stopwords for DFI can get scored as 0,\n    // so boosting them is kind of crazy\n    s.setSimilarity(new BM25Similarity());\n    {\n      CommonTermsQuery query = new CommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"0\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"2\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n\n    {\n      // this one boosts the termQuery(\"field\" \"universe\") by 10x\n      CommonTermsQuery query = new ExtendedCommonTermsQuery(Occur.SHOULD, Occur.SHOULD,\n          random().nextBoolean() ? 2.0f : 0.5f);\n      query.add(new Term(\"field\", \"is\"));\n      query.add(new Term(\"field\", \"this\"));\n      query.add(new Term(\"field\", \"end\"));\n      query.add(new Term(\"field\", \"world\"));\n      query.add(new Term(\"field\", \"universe\"));\n      query.add(new Term(\"field\", \"right\"));\n      TopDocs search = s.search(query, 10);\n      assertEquals(search.totalHits, 3);\n      assertEquals(\"2\", r.document(search.scoreDocs[0].doc).get(\"id\"));\n      assertEquals(\"3\", r.document(search.scoreDocs[1].doc).get(\"id\"));\n      assertEquals(\"0\", r.document(search.scoreDocs[2].doc).get(\"id\"));\n    }\n    IOUtils.close(r, w, dir, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["e1151ecb4798f5c31137aec032c241638018ed20","fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"58b6341c01680bddb99b9aa4697c800f1b1f3c02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["58b6341c01680bddb99b9aa4697c800f1b1f3c02","e1151ecb4798f5c31137aec032c241638018ed20"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a56958d7f71a28824f20031ffbb2e13502a0274e","1b6c47f9f12abf6110d5203037447c07bf430e73"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58b6341c01680bddb99b9aa4697c800f1b1f3c02"],"fb0af84f7eb1ce29d521e0890c71cb77a167b910":["e1151ecb4798f5c31137aec032c241638018ed20"],"e1151ecb4798f5c31137aec032c241638018ed20":["58b6341c01680bddb99b9aa4697c800f1b1f3c02"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0ef034a4f10871667ae75181537775ddcf8ade4","a56958d7f71a28824f20031ffbb2e13502a0274e"],"1b6c47f9f12abf6110d5203037447c07bf430e73":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1b6c47f9f12abf6110d5203037447c07bf430e73"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"58b6341c01680bddb99b9aa4697c800f1b1f3c02":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","e1151ecb4798f5c31137aec032c241638018ed20"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"e1151ecb4798f5c31137aec032c241638018ed20":["5eb2511ababf862ea11e10761c70ee560cd84510","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","fb0af84f7eb1ce29d521e0890c71cb77a167b910"],"fb0af84f7eb1ce29d521e0890c71cb77a167b910":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1b6c47f9f12abf6110d5203037447c07bf430e73":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58b6341c01680bddb99b9aa4697c800f1b1f3c02","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1b6c47f9f12abf6110d5203037447c07bf430e73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","1e6acbaae7af722f17204ceccf0f7db5753eccf3","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}