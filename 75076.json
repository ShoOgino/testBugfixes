{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,Replica.State,int,boolean,Overseer).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,Replica.State,int,boolean,Overseer).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#publishState(String,String,String,String,Replica.State,int).mjava","sourceNew":"    public String publishState(String collection, String coreName, String coreNodeName, String shard, Replica.State stateName, int numShards, boolean startElection, Overseer overseer)\n        throws Exception {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n        ZkDistributedQueue q = overseer.getStateUpdateQueue();\n        q.offer(Utils.toJSON(m));\n        return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n            ZkStateReader.STATE_PROP, stateName.toString(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n            ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        ZkDistributedQueue q = overseer.getStateUpdateQueue();\n        q.offer(Utils.toJSON(m));\n      }\n\n      if (startElection && collection.length() > 0) {\n        zkStateReader.waitForState(collection, 45000, TimeUnit.MILLISECONDS,\n            (liveNodes, collectionState) -> getShardId(collectionState, coreNodeName) != null);\n        String shardId = getShardId(collection, coreNodeName);\n        if (shardId != null) {\n          ElectionContext prevContext = electionContext.get(coreName);\n          if (prevContext != null) {\n            prevContext.cancelElection();\n          }\n\n          try {\n            zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                + shardId + \"/election\", true);\n          } catch (NodeExistsException nee) {}\n          ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n              \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n              nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n              ZkStateReader.SHARD_ID_PROP, shardId,\n              ZkStateReader.COLLECTION_PROP, collection,\n              ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n          LeaderElector elector = new LeaderElector(zkClient);\n          ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n              elector, shardId, collection, nodeName + \"_\" + coreName, props,\n              MockSolrSource.makeSimpleMock(overseer, zkStateReader, null));\n          elector.setup(ctx);\n          electionContext.put(coreName, ctx);\n          elector.joinElection(ctx, false);\n          return shardId;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    public String publishState(String collection, String coreName, String coreNodeName, String shard, Replica.State stateName, int numShards)\n        throws Exception {\n      if (stateName == null) {\n        ElectionContext ec = electionContext.remove(coreName);\n        if (ec != null) {\n          ec.cancelElection();\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection);\n        ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n        return null;\n      } else {\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n            ZkStateReader.STATE_PROP, stateName.toString(),\n            ZkStateReader.NODE_NAME_PROP, nodeName,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName,\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.NUM_SHARDS_PROP, Integer.toString(numShards),\n            ZkStateReader.BASE_URL_PROP, \"http://\" + nodeName + \"/solr/\");\n        ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n      }\n\n      if (collection.length() > 0) {\n        for (int i = 0; i < 120; i++) {\n          String shardId = getShardId(collection, coreNodeName);\n          if (shardId != null) {\n            ElectionContext prevContext = electionContext.get(coreName);\n            if (prevContext != null) {\n              prevContext.cancelElection();\n            }\n\n            try {\n              zkClient.makePath(\"/collections/\" + collection + \"/leader_elect/\"\n                  + shardId + \"/election\", true);\n            } catch (NodeExistsException nee) {}\n            ZkNodeProps props = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,\n                \"http://\" + nodeName + \"/solr/\", ZkStateReader.NODE_NAME_PROP,\n                nodeName, ZkStateReader.CORE_NAME_PROP, coreName,\n                ZkStateReader.SHARD_ID_PROP, shardId,\n                ZkStateReader.COLLECTION_PROP, collection,\n                ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n            LeaderElector elector = new LeaderElector(zkClient);\n            ShardLeaderElectionContextBase ctx = new ShardLeaderElectionContextBase(\n                elector, shardId, collection, nodeName + \"_\" + coreName, props,\n                zkStateReader);\n            elector.setup(ctx);\n            electionContext.put(coreName, ctx);\n            elector.joinElection(ctx, false);\n            return shardId;\n          }\n          Thread.sleep(500);\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}