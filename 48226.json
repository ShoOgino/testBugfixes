{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","commits":[{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row]).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          boolean pass = sealedClause.getTag().isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          boolean pass = tag.isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          boolean pass = sealedClause.getTag().isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if(t.varType.isPerNodeValue){\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          boolean pass = sealedClause.getTag().isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          boolean pass = sealedClause.getTag().isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if(t.varType.isPerNodeValue){\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if(t.varType.isPerNodeValue){\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          boolean pass = sealedClause.getTag().isPass(tagVal);\n          tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n          if (pass) {\n            tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if(t.varType.isPerNodeValue){\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if (t.varType.meta.isNodeSpecificVal()) {\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if(t.varType.isPerNodeValue){\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52316373036b9f161a08896e7c9ebf4389790a47","date":1533187246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if (t.varType.meta.isNodeSpecificVal()) {\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n\n    if (this.getTag().op != LESS_THAN && this.getTag().varType == Type.NODE) {\n      collVsShardVsTagVsCount.forEach((coll, shardVsNodeVsCount) ->\n          shardVsNodeVsCount.forEach((shard, nodeVsCount) -> {\n            for (Row row : allRows) {\n              if (!nodeVsCount.containsKey(row.node)) {\n                nodeVsCount.put(row.node, new ReplicaCount());\n              }\n            }\n          }));\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if (t.varType.meta.isNodeSpecificVal()) {\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","sourceNew":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if (t.varType.meta.isNodeSpecificVal()) {\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            tagVsCount.computeIfAbsent(String.valueOf(t.getValue()), s -> new ReplicaCount());\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            if(!pass && !isReplicaZero()) continue;\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n\n    if (this.getTag().op != LESS_THAN && this.getTag().varType == Type.NODE) {\n      collVsShardVsTagVsCount.forEach((coll, shardVsNodeVsCount) ->\n          shardVsNodeVsCount.forEach((shard, nodeVsCount) -> {\n            for (Row row : allRows) {\n              if (!nodeVsCount.containsKey(row.node)) {\n                nodeVsCount.put(row.node, new ReplicaCount());\n              }\n            }\n          }));\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if (t.varType.meta.isNodeSpecificVal()) {\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n\n    if (this.getTag().op != LESS_THAN && this.getTag().varType == Type.NODE) {\n      collVsShardVsTagVsCount.forEach((coll, shardVsNodeVsCount) ->\n          shardVsNodeVsCount.forEach((shard, nodeVsCount) -> {\n            for (Row row : allRows) {\n              if (!nodeVsCount.containsKey(row.node)) {\n                nodeVsCount.put(row.node, new ReplicaCount());\n              }\n            }\n          }));\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#computeReplicaCounts(List[Row],ComputedValueEvaluator).mjava","sourceNew":null,"sourceOld":"  private Map<String, Map<String, Map<String, ReplicaCount>>> computeReplicaCounts(List<Row> allRows,\n                                                                                   ComputedValueEvaluator computedValueEvaluator) {\n    Map<String, Map<String, Map<String, ReplicaCount>>> collVsShardVsTagVsCount = new HashMap<>();\n    for (Row row : allRows) {\n      computedValueEvaluator.node = row.node;\n      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.collectionVsShardVsReplicas.entrySet()) {\n        String collectionName = colls.getKey();\n        if (!collection.isPass(collectionName)) continue;\n        Map<String, Map<String, ReplicaCount>> collMap = collVsShardVsTagVsCount.computeIfAbsent(collectionName, s -> new HashMap<>());\n        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {\n          String shardName = shards.getKey();\n          if (ANY.equals(shard.val)) shardName = ANY;\n          if (!shard.isPass(shardName)) break;\n          Map<String, ReplicaCount> tagVsCount = collMap.computeIfAbsent(shardName, s -> new HashMap<>());\n          Object tagVal = row.getVal(tag.name);\n          computedValueEvaluator.collName = collectionName;\n          computedValueEvaluator.shardName = shardName;\n          SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n          Condition t = sealedClause.getTag();\n          if (t.varType.meta.isNodeSpecificVal()) {\n            boolean pass = t.getOperand().match(t.val, tagVal) == TestStatus.PASS;\n            tagVsCount.computeIfAbsent(row.node, s -> new ReplicaCount());\n            if(pass) {\n              tagVsCount.get(row.node).increment(shards.getValue());\n            }\n          } else {\n            tagVsCount.computeIfAbsent(String.valueOf(t.getValue()), s -> new ReplicaCount());\n            boolean pass = sealedClause.getTag().isPass(tagVal);\n            if(!pass && !isReplicaZero()) continue;\n            tagVsCount.computeIfAbsent(pass ? String.valueOf(tagVal) : \"\", s -> new ReplicaCount());\n            if (pass) {\n              tagVsCount.get(String.valueOf(tagVal)).increment(shards.getValue());\n            }\n          }\n        }\n      }\n    }\n\n    if (this.getTag().op != LESS_THAN && this.getTag().varType == Type.NODE) {\n      collVsShardVsTagVsCount.forEach((coll, shardVsNodeVsCount) ->\n          shardVsNodeVsCount.forEach((shard, nodeVsCount) -> {\n            for (Row row : allRows) {\n              if (!nodeVsCount.containsKey(row.node)) {\n                nodeVsCount.put(row.node, new ReplicaCount());\n              }\n            }\n          }));\n    }\n    return collVsShardVsTagVsCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["16a22f8085bb46850c91784e94f7714345011404"],"78231225260fb5b3bf9920f203d71477d5501c65":["9837f40c922407d857991971de6def18eda0857b"],"52316373036b9f161a08896e7c9ebf4389790a47":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"9837f40c922407d857991971de6def18eda0857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"16a22f8085bb46850c91784e94f7714345011404":["52316373036b9f161a08896e7c9ebf4389790a47"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52316373036b9f161a08896e7c9ebf4389790a47":["16a22f8085bb46850c91784e94f7714345011404"],"9837f40c922407d857991971de6def18eda0857b":["78231225260fb5b3bf9920f203d71477d5501c65","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["52316373036b9f161a08896e7c9ebf4389790a47"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"16a22f8085bb46850c91784e94f7714345011404":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}