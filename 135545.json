{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng#computeDestination(LatLng,double,double,DistanceUnits).mjava","commits":[{"id":"3b6f51785c57651e9e1864b7b883037f24541c76","date":1271186480,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng#computeDestination(LatLng,double,double,DistanceUnits).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Utility method for calculating a target point given a start, a heading (in degrees), a distance and a distance unit\n   * @param startPoint\n   * \t\t\t\t\t\t\t\t\tbeginning point of the path\n   * @param distance\n   * \t\t\t\t\t\t\t\t\tdistance to be travel from the starting point\n   * @param heading\n   * \t\t\t\t\t\t\t\t\theading in degrees to follow during the travel\n   * @param distanceUnit\n   * \t\t\t\t\t\t\t\t\tunit of the distance to to travel\n   * @return arrival point of the described travel   \n   */\n  public static LatLng computeDestination(LatLng startPoint, double distance, double heading, DistanceUnits distanceUnit) {\n    double startPointLatitude = startPoint.getLat();\n    double startPointLongitude = startPoint.getLng();\n    double earthRadius = distanceUnit.earthRadius();\n    double headingRad = Math.toRadians(heading);\n    double startPointLatitudeRad = Math.toRadians(startPointLatitude);\n    double startPointLongitudeRad = Math.toRadians(startPointLongitude);\n\n    // Haversine formula (http://www.movable-type.co.uk/scripts/latlong.html)\n    double destinationLatitudeRad = Math.asin(Math.sin(startPointLatitudeRad)\n        * Math.cos(distance / earthRadius) + Math.cos(startPointLatitudeRad)\n        * Math.sin(distance / earthRadius) * Math.cos(headingRad));\n\n    double destinationLongitudeRad = startPointLongitudeRad\n        + Math.atan2(Math.sin(headingRad) * Math.sin(distance / earthRadius)\n            * Math.cos(startPointLatitudeRad), Math.cos(distance / earthRadius)\n            - Math.sin(startPointLatitudeRad)\n            * Math.sin(destinationLatitudeRad));\n\n    return new FloatLatLng(Math.toDegrees(destinationLatitudeRad), Math\n        .toDegrees(destinationLongitudeRad));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5","date":1271290552,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/LatLng#computeDestination(LatLng,double,double,DistanceUnits).mjava","sourceNew":null,"sourceOld":"  /**\n   * Utility method for calculating a target point given a start, a heading (in degrees), a distance and a distance unit\n   * @param startPoint\n   * \t\t\t\t\t\t\t\t\tbeginning point of the path\n   * @param distance\n   * \t\t\t\t\t\t\t\t\tdistance to be travel from the starting point\n   * @param heading\n   * \t\t\t\t\t\t\t\t\theading in degrees to follow during the travel\n   * @param distanceUnit\n   * \t\t\t\t\t\t\t\t\tunit of the distance to to travel\n   * @return arrival point of the described travel   \n   */\n  public static LatLng computeDestination(LatLng startPoint, double distance, double heading, DistanceUnits distanceUnit) {\n    double startPointLatitude = startPoint.getLat();\n    double startPointLongitude = startPoint.getLng();\n    double earthRadius = distanceUnit.earthRadius();\n    double headingRad = Math.toRadians(heading);\n    double startPointLatitudeRad = Math.toRadians(startPointLatitude);\n    double startPointLongitudeRad = Math.toRadians(startPointLongitude);\n\n    // Haversine formula (http://www.movable-type.co.uk/scripts/latlong.html)\n    double destinationLatitudeRad = Math.asin(Math.sin(startPointLatitudeRad)\n        * Math.cos(distance / earthRadius) + Math.cos(startPointLatitudeRad)\n        * Math.sin(distance / earthRadius) * Math.cos(headingRad));\n\n    double destinationLongitudeRad = startPointLongitudeRad\n        + Math.atan2(Math.sin(headingRad) * Math.sin(distance / earthRadius)\n            * Math.cos(startPointLatitudeRad), Math.cos(distance / earthRadius)\n            - Math.sin(startPointLatitudeRad)\n            * Math.sin(destinationLatitudeRad));\n\n    return new FloatLatLng(Math.toDegrees(destinationLatitudeRad), Math\n        .toDegrees(destinationLongitudeRad));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b6f51785c57651e9e1864b7b883037f24541c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5":["3b6f51785c57651e9e1864b7b883037f24541c76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5"]},"commit2Childs":{"3b6f51785c57651e9e1864b7b883037f24541c76":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b6f51785c57651e9e1864b7b883037f24541c76"],"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}