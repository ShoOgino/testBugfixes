{"path":"lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread#NRTManagerReopenThread(NRTManager,double,double).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread#NRTManagerReopenThread(NRTManager,double,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NRTManagerReopenThread#NRTManagerReopenThread(NRTManager,double,double).mjava","sourceNew":"  /**\n   * Create NRTManagerReopenThread, to periodically reopen the NRT searcher.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific indexing change to\n   *        become visible.\n   */\n\n  public NRTManagerReopenThread(NRTManager manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addWaitingListener(this);\n  }\n\n","sourceOld":"  /**\n   * Create NRTManagerReopenThread, to periodically reopen the NRT searcher.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific indexing change to\n   *        become visible.\n   */\n\n  public NRTManagerReopenThread(NRTManager manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addWaitingListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ControlledRealTimeReopenThread#ControlledRealTimeReopenThread(TrackingIndexWriter,ReferenceManager[T],double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManagerReopenThread#NRTManagerReopenThread(NRTManager,double,double).mjava","sourceNew":"  /**\n   * Create ControlledRealTimeReopenThread, to periodically\n   * reopen the a {@link ReferenceManager}.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur, when no\n   *        caller is waiting for a specific generation to\n   *        become visible.\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific generation to\n   *        become visible.\n   */\n  public ControlledRealTimeReopenThread(TrackingIndexWriter writer, ReferenceManager<T> manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.writer = writer;\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addListener(new HandleRefresh());\n  }\n\n","sourceOld":"  /**\n   * Create NRTManagerReopenThread, to periodically reopen the NRT searcher.\n   *\n   * @param targetMaxStaleSec Maximum time until a new\n   *        reader must be opened; this sets the upper bound\n   *        on how slowly reopens may occur\n   *\n   * @param targetMinStaleSec Mininum time until a new\n   *        reader can be opened; this sets the lower bound\n   *        on how quickly reopens may occur, when a caller\n   *        is waiting for a specific indexing change to\n   *        become visible.\n   */\n\n  public NRTManagerReopenThread(NRTManager manager, double targetMaxStaleSec, double targetMinStaleSec) {\n    if (targetMaxStaleSec < targetMinStaleSec) {\n      throw new IllegalArgumentException(\"targetMaxScaleSec (= \" + targetMaxStaleSec + \") < targetMinStaleSec (=\" + targetMinStaleSec + \")\");\n    }\n    this.manager = manager;\n    this.targetMaxStaleNS = (long) (1000000000*targetMaxStaleSec);\n    this.targetMinStaleNS = (long) (1000000000*targetMinStaleSec);\n    manager.addWaitingListener(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2045b132a2396bb23dff28d2d9f349a6907d36e"]},"commit2Childs":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}