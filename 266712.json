{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","commits":[{"id":"70b55953b6a72596cb534ead735a8b849a473cac","date":1363634568,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = maybeWrapWithMergingReader(w.getReader());\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"70b55953b6a72596cb534ead735a8b849a473cac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["70b55953b6a72596cb534ead735a8b849a473cac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70b55953b6a72596cb534ead735a8b849a473cac"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"70b55953b6a72596cb534ead735a8b849a473cac":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}