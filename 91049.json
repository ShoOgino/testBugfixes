{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReader.SepDocsEnum#read().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReader.SepDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.SepDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed947d41796fd2096684c439e8a9b69aac940cf","date":1321538339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReader.SepDocsEnum#read().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReader.SepDocsEnum#read().mjava","sourceNew":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        accum += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          docs[i] = doc = accum;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","sourceOld":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        doc += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (liveDocs == null || liveDocs.get(doc)) {\n          docs[i] = doc;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReader.SepDocsEnum#read().mjava","sourceNew":null,"sourceOld":"    @Override\n    public int read() throws IOException {\n      // TODO: -- switch to bulk read api in IntIndexInput\n      //System.out.println(\"sepdocs read\");\n      final int[] docs = bulkResult.docs.ints;\n      final int[] freqs = bulkResult.freqs.ints;\n      int i = 0;\n      final int length = docs.length;\n      while (i < length && count < docFreq) {\n        count++;\n        // manually inlined call to next() for speed\n        //System.out.println(\"decode doc\");\n        accum += docReader.next();\n        if (!omitTF) {\n          //System.out.println(\"decode freq\");\n          freq = freqReader.next();\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          docs[i] = doc = accum;\n          freqs[i] = freq;\n          //System.out.println(\"  docs[\" + i + \"]=\" + doc + \" count=\" + count + \" dF=\" + docFreq);\n          i++;\n        }\n      }\n      return i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0445bcd8433e331f296f5502fc089b336cbac3a6"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["1ed947d41796fd2096684c439e8a9b69aac940cf"],"1ed947d41796fd2096684c439e8a9b69aac940cf":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"0445bcd8433e331f296f5502fc089b336cbac3a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}