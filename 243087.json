{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","commits":[{"id":"4de9b9325d973e4bc4c97eb91fe119eafa6caa99","date":1365179986,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","pathOld":"/dev/null","sourceNew":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighed\"));\n      query.setSlop(3);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighted\"));\n      query.setSlop(30);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      BooleanQuery inner = new BooleanQuery();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner, Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","sourceNew":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighed\"));\n      query.setSlop(3);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighted\"));\n      query.setSlop(30);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      BooleanQuery inner = new BooleanQuery();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner, Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighed\"));\n      query.setSlop(3);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighted\"));\n      query.setSlop(30);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      BooleanQuery inner = new BooleanQuery();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner, Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","sourceNew":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighed\"));\n      query.setSlop(3);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighted\"));\n      query.setSlop(30);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      BooleanQuery inner = new BooleanQuery();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner, Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighed\"));\n      query.setSlop(3);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighted\"));\n      query.setSlop(30);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      BooleanQuery inner = new BooleanQuery();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner, Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","sourceNew":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighed\"));\n      query.setSlop(3);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighted\"));\n      query.setSlop(30);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      BooleanQuery inner = new BooleanQuery();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner, Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighed\"));\n      query.setSlop(3);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighted\"));\n      query.setSlop(30);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      BooleanQuery inner = new BooleanQuery();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner, Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","sourceNew":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery(5, field, \"test\", \"foo\", \"highlighed\");\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery(3, field, \"test\", \"foo\", \"highlighed\");\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery(30, field, \"test\", \"foo\", \"highlighed\");\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery(5, field, \"test\", \"foo\", \"highlighed\");\n      BooleanQuery inner = new BooleanQuery();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner, Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighed\"));\n      query.setSlop(3);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery();\n      query.add(new Term(field, \"test\"));\n      query.add(new Term(field, \"foo\"));\n      query.add(new Term(field, \"highlighted\"));\n      query.setSlop(30);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(field, \"test\"));\n      pq.add(new Term(field, \"foo\"));\n      pq.add(new Term(field, \"highlighed\"));\n      pq.setSlop(5);\n      BooleanQuery inner = new BooleanQuery();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner, Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","sourceNew":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      PhraseQuery pq = new PhraseQuery(5, field, \"test\", \"foo\", \"highlighed\");\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery(3, field, \"test\", \"foo\", \"highlighed\");\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery(30, field, \"test\", \"foo\", \"highlighed\");\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      PhraseQuery pq = new PhraseQuery(5, field, \"test\", \"foo\", \"highlighed\");\n      BooleanQuery.Builder inner = new BooleanQuery.Builder();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner.build(), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery(5, field, \"test\", \"foo\", \"highlighed\");\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery(3, field, \"test\", \"foo\", \"highlighed\");\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery(30, field, \"test\", \"foo\", \"highlighed\");\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery query = new BooleanQuery();\n      PhraseQuery pq = new PhraseQuery(5, field, \"test\", \"foo\", \"highlighed\");\n      BooleanQuery inner = new BooleanQuery();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner, Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery query = new BooleanQuery();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testPhraseHighlightTest().mjava","sourceNew":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      PhraseQuery pq = new PhraseQuery(5, field, \"test\", \"foo\", \"highlighed\");\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery(3, field, \"test\", \"foo\", \"highlighed\");\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery(30, field, \"test\", \"foo\", \"highlighed\");\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      PhraseQuery pq = new PhraseQuery(5, field, \"test\", \"foo\", \"highlighed\");\n      BooleanQuery.Builder inner = new BooleanQuery.Builder();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner.build(), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // see LUCENE-4899\n  public void testPhraseHighlightTest() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    Field longTermField = new Field(\"long_term\", \"This is a test thisisaverylongwordandmakessurethisfails where foo is highlighed and should be highlighted\", type);\n    Field noLongTermField = new Field(\"no_long_term\", \"This is a test where foo is highlighed and should be highlighted\", type);\n\n    doc.add(longTermField);\n    doc.add(noLongTermField);\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    int docId = 0;\n    String field = \"no_long_term\";\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.add(new TermQuery(new Term(field, \"test\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      PhraseQuery pq = new PhraseQuery(5, field, \"test\", \"foo\", \"highlighed\");\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery(3, field, \"test\", \"foo\", \"highlighed\");\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(0, bestFragments.length);\n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n      \n    }\n    {\n      PhraseQuery query = new PhraseQuery(30, field, \"test\", \"foo\", \"highlighed\");\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query, reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n    }\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      PhraseQuery pq = new PhraseQuery(5, field, \"test\", \"foo\", \"highlighed\");\n      BooleanQuery.Builder inner = new BooleanQuery.Builder();\n      inner.add(pq, Occur.MUST);\n      inner.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(inner.build(), Occur.MUST);\n      query.add(pq, Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      assertEquals(0, bestFragments.length);\n      \n      bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 30, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"a <b>test</b> where <b>foo</b> is <b>highlighed</b> and\", bestFragments[0]);\n    }\n    \n    field = \"long_term\";\n    {\n      BooleanQuery.Builder query = new BooleanQuery.Builder();\n      query.add(new TermQuery(new Term(field,\n          \"thisisaverylongwordandmakessurethisfails\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"foo\")), Occur.MUST);\n      query.add(new TermQuery(new Term(field, \"highlighed\")), Occur.MUST);\n      FieldQuery fieldQuery = highlighter.getFieldQuery(query.build(), reader);\n      String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader,\n          docId, field, 18, 1);\n      // highlighted results are centered\n      assertEquals(1, bestFragments.length);\n      assertEquals(\"<b>thisisaverylongwordandmakessurethisfails</b>\",\n          bestFragments[0]);\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"2a1862266772deb28cdcb7d996b64d2177022687":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e9e1499c5d26c936238506df90a3c02c76707722":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4de9b9325d973e4bc4c97eb91fe119eafa6caa99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["4de9b9325d973e4bc4c97eb91fe119eafa6caa99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4de9b9325d973e4bc4c97eb91fe119eafa6caa99"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e9e1499c5d26c936238506df90a3c02c76707722"],"4de9b9325d973e4bc4c97eb91fe119eafa6caa99":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}