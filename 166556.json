{"path":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","commits":[{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":1,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to compare against time in header\")\n  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception {\n\n    String requestURI = request.getRequestURI();\n    if (requestURI.endsWith(PublicKeyHandler.PATH)) {\n      numPassThrough.inc();\n      filterChain.doFilter(request, response);\n      return true;\n    }\n    long receivedTime = System.currentTimeMillis();\n    String header = request.getHeader(HEADER);\n    if (header == null) {\n      //this must not happen\n      log.error(\"No SolrAuth header present\");\n      numMissingCredentials.inc();\n      filterChain.doFilter(request, response);\n      return true;\n    }\n\n    List<String> authInfo = StrUtils.splitWS(header, false);\n    if (authInfo.size() < 2) {\n      log.error(\"Invalid SolrAuth Header {}\", header);\n      numErrors.mark();\n      filterChain.doFilter(request, response);\n      return true;\n    }\n\n    String nodeName = authInfo.get(0);\n    String cipher = authInfo.get(1);\n\n    PKIHeaderData decipher = decipherHeader(nodeName, cipher);\n    if (decipher == null) {\n      log.error(\"Could not decipher a header {} . No principal set\", header);\n      numMissingCredentials.inc();\n      filterChain.doFilter(request, response);\n      return true;\n    }\n    if ((receivedTime - decipher.timestamp) > MAX_VALIDITY) {\n      log.error(\"Invalid key request timestamp: {} , received timestamp: {} , TTL: {}\", decipher.timestamp, receivedTime, MAX_VALIDITY);\n      numErrors.mark();\n      filterChain.doFilter(request, response);\n      return true;\n    }\n\n    final Principal principal = \"$\".equals(decipher.userName) ?\n        SU :\n        new BasicUserPrincipal(decipher.userName);\n\n    numAuthenticated.inc();\n    filterChain.doFilter(wrapWithPrincipal(request, principal), response);\n    return true;\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to compare against time in header\")\n  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain) throws Exception {\n\n    String requestURI = ((HttpServletRequest) request).getRequestURI();\n    if (requestURI.endsWith(PublicKeyHandler.PATH)) {\n      numPassThrough.inc();\n      filterChain.doFilter(request, response);\n      return true;\n    }\n    long receivedTime = System.currentTimeMillis();\n    String header = ((HttpServletRequest) request).getHeader(HEADER);\n    if (header == null) {\n      //this must not happen\n      log.error(\"No SolrAuth header present\");\n      numMissingCredentials.inc();\n      filterChain.doFilter(request, response);\n      return true;\n    }\n\n    List<String> authInfo = StrUtils.splitWS(header, false);\n    if (authInfo.size() < 2) {\n      log.error(\"Invalid SolrAuth Header {}\", header);\n      numErrors.mark();\n      filterChain.doFilter(request, response);\n      return true;\n    }\n\n    String nodeName = authInfo.get(0);\n    String cipher = authInfo.get(1);\n\n    PKIHeaderData decipher = decipherHeader(nodeName, cipher);\n    if (decipher == null) {\n      log.error(\"Could not decipher a header {} . No principal set\", header);\n      numMissingCredentials.inc();\n      filterChain.doFilter(request, response);\n      return true;\n    }\n    if ((receivedTime - decipher.timestamp) > MAX_VALIDITY) {\n      log.error(\"Invalid key request timestamp: {} , received timestamp: {} , TTL: {}\", decipher.timestamp, receivedTime, MAX_VALIDITY);\n      numErrors.mark();\n      filterChain.doFilter(request, response);\n      return true;\n    }\n\n    final Principal principal = \"$\".equals(decipher.userName) ?\n        SU :\n        new BasicUserPrincipal(decipher.userName);\n\n    numAuthenticated.inc();\n    filterChain.doFilter(getWrapper((HttpServletRequest) request, principal), response);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b436ffee26b67f87efef6a3bab24697332b6b2"]},"commit2Childs":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}