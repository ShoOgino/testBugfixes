{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(int).mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b1c67b5eba853532b31132bf5aef70a3b2be63f","date":1375351298,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = resolver.valueOf(ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = resolver.valueOf(ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(int).mjava","sourceNew":null,"sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = resolver.valueOf(ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(int).mjava","sourceNew":null,"sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = resolver.valueOf(ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3b1c67b5eba853532b31132bf5aef70a3b2be63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3b1c67b5eba853532b31132bf5aef70a3b2be63f","d33e19a97046248623a7591aeaa6547233fd15e2"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["3b1c67b5eba853532b31132bf5aef70a3b2be63f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}