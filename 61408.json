{"path":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#doCacheWrite(String).mjava","commits":[{"id":"46855a2e3c096d06b604f73733ed9fefa822ba45","date":1305654486,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#doCacheWrite(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Subclass can override this to customize logic; return\n   *  true if this file should be written to the RAMDirectory. */\n  protected boolean doCacheWrite(String name) {\n    final MergePolicy.OneMerge merge = merges.get(Thread.currentThread());\n    //System.out.println(Thread.currentThread().getName() + \": CACHE check merge=\" + merge + \" size=\" + (merge==null ? 0 : merge.estimatedMergeBytes));\n    return !name.equals(IndexFileNames.SEGMENTS_GEN) && (merge == null || merge.estimatedMergeBytes <= maxMergeSizeBytes) && cache.sizeInBytes() <= maxCachedBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#doCacheWrite(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Subclass can override this to customize logic; return\n   *  true if this file should be written to the RAMDirectory. */\n  protected boolean doCacheWrite(String name) {\n    final MergePolicy.OneMerge merge = merges.get(Thread.currentThread());\n    //System.out.println(Thread.currentThread().getName() + \": CACHE check merge=\" + merge + \" size=\" + (merge==null ? 0 : merge.estimatedMergeBytes));\n    return !name.equals(IndexFileNames.SEGMENTS_GEN) && (merge == null || merge.estimatedMergeBytes <= maxMergeSizeBytes) && cache.sizeInBytes() <= maxCachedBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#doCacheWrite(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Subclass can override this to customize logic; return\n   *  true if this file should be written to the RAMDirectory. */\n  protected boolean doCacheWrite(String name) {\n    final MergePolicy.OneMerge merge = merges.get(Thread.currentThread());\n    //System.out.println(Thread.currentThread().getName() + \": CACHE check merge=\" + merge + \" size=\" + (merge==null ? 0 : merge.estimatedMergeBytes));\n    return !name.equals(IndexFileNames.SEGMENTS_GEN) && (merge == null || merge.estimatedMergeBytes <= maxMergeSizeBytes) && cache.sizeInBytes() <= maxCachedBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#doCacheWrite(String,IOContext).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#doCacheWrite(String).mjava","sourceNew":"  /** Subclass can override this to customize logic; return\n   *  true if this file should be written to the RAMDirectory. */\n  protected boolean doCacheWrite(String name, IOContext context) {\n    final MergeInfo merge = context.mergeInfo;\n    //System.out.println(Thread.currentThread().getName() + \": CACHE check merge=\" + merge + \" size=\" + (merge==null ? 0 : merge.estimatedMergeBytes));\n    return !name.equals(IndexFileNames.SEGMENTS_GEN) && (merge == null || merge.estimatedMergeBytes <= maxMergeSizeBytes) && cache.sizeInBytes() <= maxCachedBytes;\n  }\n\n","sourceOld":"  /** Subclass can override this to customize logic; return\n   *  true if this file should be written to the RAMDirectory. */\n  protected boolean doCacheWrite(String name) {\n    final MergePolicy.OneMerge merge = merges.get(Thread.currentThread());\n    //System.out.println(Thread.currentThread().getName() + \": CACHE check merge=\" + merge + \" size=\" + (merge==null ? 0 : merge.estimatedMergeBytes));\n    return !name.equals(IndexFileNames.SEGMENTS_GEN) && (merge == null || merge.estimatedMergeBytes <= maxMergeSizeBytes) && cache.sizeInBytes() <= maxCachedBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#doCacheWrite(String,IOContext).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#doCacheWrite(String).mjava","sourceNew":"  /** Subclass can override this to customize logic; return\n   *  true if this file should be written to the RAMDirectory. */\n  protected boolean doCacheWrite(String name, IOContext context) {\n    final MergeInfo merge = context.mergeInfo;\n    //System.out.println(Thread.currentThread().getName() + \": CACHE check merge=\" + merge + \" size=\" + (merge==null ? 0 : merge.estimatedMergeBytes));\n    return !name.equals(IndexFileNames.SEGMENTS_GEN) && (merge == null || merge.estimatedMergeBytes <= maxMergeSizeBytes) && cache.sizeInBytes() <= maxCachedBytes;\n  }\n\n","sourceOld":"  /** Subclass can override this to customize logic; return\n   *  true if this file should be written to the RAMDirectory. */\n  protected boolean doCacheWrite(String name) {\n    final MergePolicy.OneMerge merge = merges.get(Thread.currentThread());\n    //System.out.println(Thread.currentThread().getName() + \": CACHE check merge=\" + merge + \" size=\" + (merge==null ? 0 : merge.estimatedMergeBytes));\n    return !name.equals(IndexFileNames.SEGMENTS_GEN) && (merge == null || merge.estimatedMergeBytes <= maxMergeSizeBytes) && cache.sizeInBytes() <= maxCachedBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#doCacheWrite(String,IOContext).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/NRTCachingDirectory#doCacheWrite(String).mjava","sourceNew":"  /** Subclass can override this to customize logic; return\n   *  true if this file should be written to the RAMDirectory. */\n  protected boolean doCacheWrite(String name, IOContext context) {\n    final MergeInfo merge = context.mergeInfo;\n    //System.out.println(Thread.currentThread().getName() + \": CACHE check merge=\" + merge + \" size=\" + (merge==null ? 0 : merge.estimatedMergeBytes));\n    return !name.equals(IndexFileNames.SEGMENTS_GEN) && (merge == null || merge.estimatedMergeBytes <= maxMergeSizeBytes) && cache.sizeInBytes() <= maxCachedBytes;\n  }\n\n","sourceOld":"  /** Subclass can override this to customize logic; return\n   *  true if this file should be written to the RAMDirectory. */\n  protected boolean doCacheWrite(String name) {\n    final MergePolicy.OneMerge merge = merges.get(Thread.currentThread());\n    //System.out.println(Thread.currentThread().getName() + \": CACHE check merge=\" + merge + \" size=\" + (merge==null ? 0 : merge.estimatedMergeBytes));\n    return !name.equals(IndexFileNames.SEGMENTS_GEN) && (merge == null || merge.estimatedMergeBytes <= maxMergeSizeBytes) && cache.sizeInBytes() <= maxCachedBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46855a2e3c096d06b604f73733ed9fefa822ba45"],"46855a2e3c096d06b604f73733ed9fefa822ba45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46855a2e3c096d06b604f73733ed9fefa822ba45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["46855a2e3c096d06b604f73733ed9fefa822ba45"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["46855a2e3c096d06b604f73733ed9fefa822ba45","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"46855a2e3c096d06b604f73733ed9fefa822ba45":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","46855a2e3c096d06b604f73733ed9fefa822ba45","a3776dccca01c11e7046323cfad46a3b4a471233"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}