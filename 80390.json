{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3741149a89925c02f14dbeef8365b896798d91fc","date":1303483574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"232515072ebc96d9bf7e9c188e7f57b20e10916d","date":1304682144,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0dc13f9e59664be282b46015a020c945dc2a48","date":1305657127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (random.nextInt(4) == 0) { // preflex-only setup\n        codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n      } else { // per-field setup\n        CodecProvider.setDefault(new RandomCodecProvider(random));\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else { // ordinary setup\n      codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a225d7f24f7054982644bd304fdbac541473ab7","date":1306919042,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37ff5956d30d0c66110ac0c84d8e32d46b67eff1","date":1306967829,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3391411bd88eb23a38cddc1e1698d8116d32c2","date":1310494698,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    random.initialized = true;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"068303c7eefa006e42a6e790e1e51b5d26ffa02f","date":1311518223,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    staticSeed = \"random\".equals(TEST_SEED) ? seedRand.nextLong() : TwoLongs.fromString(TEST_SEED).l1;\n    random.setSeed(staticSeed);\n    random.initialized = true;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18f9aa8f75daee5daae15ce44c7310d58d41301d","date":1311695764,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    savedLocale = Locale.getDefault();\n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b88f145033cba453c8f65cc86eb444c625ee86c0","date":1312803337,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdbabcdfbf0ec1640188c28570cd54fd30440942","date":1317820582,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":["232515072ebc96d9bf7e9c188e7f57b20e10916d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ce9405fbe78d1bdd0c3e6af10d384567e4b2fce","date":1318715330,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9449fcbbc5269b257424d857899116bf629b663","date":1318779910,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33f3748c3aa0fc11e19eeafcf3c71450cfd7f63","date":1319561096,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n    \n    // verify assertions are enabled (do last, for smooth cleanup)\n    assertTrue(\"assertions are not enabled!\", assertionsEnabled());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","bugFix":null,"bugIntro":["33f2eeecbc2a4c4b861e8af7c840c279db789544"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33f2eeecbc2a4c4b861e8af7c840c279db789544","date":1319702279,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n    \n    // verify assertions are enabled (do last, for smooth cleanup)\n    if (!Boolean.parseBoolean(System.getProperty(\"tests.asserts.gracious\", \"false\"))) {\n      assertTrue(\"assertions are not enabled!\", assertionsEnabled());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n    \n    // verify assertions are enabled (do last, for smooth cleanup)\n    assertTrue(\"assertions are not enabled!\", assertionsEnabled());\n  }\n\n","bugFix":["d33f3748c3aa0fc11e19eeafcf3c71450cfd7f63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#beforeClassLuceneTestCaseJ4().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    // if verbose: print some debugging stuff about which codecs are loaded\n    if (VERBOSE) {\n      Set<String> codecs = Codec.availableCodecs();\n      for (String codec : codecs) {\n        System.out.println(\"Loaded codec: '\" + codec + \"': \" + Codec.forName(codec).getClass().getName());\n      }\n      \n      Set<String> postingsFormats = PostingsFormat.availablePostingsFormats();\n      for (String postingsFormat : postingsFormats) {\n        System.out.println(\"Loaded postingsFormat: '\" + postingsFormat + \"': \" + PostingsFormat.forName(postingsFormat).getClass().getName());\n      }\n    }\n\n    PREFLEX_IMPERSONATION_IS_ACTIVE = false;\n    savedCodec = Codec.getDefault();\n    final Codec codec;\n    if (\"Lucene3x\".equals(TEST_POSTINGSFORMAT) || (\"random\".equals(TEST_POSTINGSFORMAT) && random.nextInt(4) == 0)) { // preflex-only setup\n      codec = new PreFlexRWCodec();\n      PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    } else if (\"random\".equals(TEST_POSTINGSFORMAT)) {\n      codec = new RandomCodec(random, useNoMemoryExpensiveCodec);\n    } else {\n      codec = new Lucene40Codec() {\n        private final PostingsFormat format = PostingsFormat.forName(TEST_POSTINGSFORMAT);\n        \n        @Override\n        public PostingsFormat getPostingsFormatForField(String field) {\n          return format;\n        }\n\n        @Override\n        public String toString() {\n          return super.toString() + \": \" + format.toString();\n        }\n      };\n    }\n\n    Codec.setDefault(codec);\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassLuceneTestCaseJ4() {\n    initRandom();\n    state = State.INITIAL;\n    tempDirs.clear();\n    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());\n    \n    // enable this by default, for IDE consistency with ant tests (as its the default from ant)\n    // TODO: really should be in solr base classes, but some extend LTC directly.\n    // we do this in beforeClass, because some tests currently disable it\n    if (System.getProperty(\"solr.directoryFactory\") == null) {\n      System.setProperty(\"solr.directoryFactory\", \"org.apache.solr.core.MockDirectoryFactory\");\n    }\n    \n    savedCodecProvider = CodecProvider.getDefault();\n    if (\"random\".equals(TEST_CODECPROVIDER)) {\n      if (\"randomPerField\".equals(TEST_CODEC)) {\n        if (random.nextInt(4) == 0) { // preflex-only setup\n          codec = installTestCodecs(\"PreFlex\", CodecProvider.getDefault());\n        } else { // per-field setup\n          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));\n          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n        }\n      } else { // ordinary setup\n        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());\n      }\n    } else {\n      // someone specified their own codecprovider by class\n      try {\n        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);\n        CodecProvider cp = cpClazz.newInstance();\n        String codecName;\n        if (TEST_CODEC.startsWith(\"random\")) { // TODO: somehow do random per-field?!\n          Set<String> codecSet = cp.listAll();\n          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);\n          codecName = availableCodecs[random.nextInt(availableCodecs.length)];\n        } else {\n          codecName = TEST_CODEC;\n        }\n        \n        codec = cp.lookup(codecName);\n        cp.setDefaultFieldCodec(codecName);\n        CodecProvider.setDefault(cp);\n      } catch (Exception e) {\n        System.err.println(\"Could not instantiate CodecProvider: \" + TEST_CODECPROVIDER);\n        throw new RuntimeException(e);\n      }\n    }\n    \n    savedLocale = Locale.getDefault();\n    \n    // START hack to init ICU safely before we randomize locales.\n    // ICU fails during classloading when a special Java7-only locale is the default\n    // see: http://bugs.icu-project.org/trac/ticket/8734\n    if (!icuTested) {\n      icuTested = true;\n      try {\n        Locale.setDefault(Locale.US);\n        Class.forName(\"com.ibm.icu.util.ULocale\");\n      } catch (ClassNotFoundException cnfe) {\n        // ignore if no ICU is in classpath\n      }\n    }\n    // END hack\n    \n    locale = TEST_LOCALE.equals(\"random\") ? randomLocale(random) : localeForName(TEST_LOCALE);\n    Locale.setDefault(locale);\n    savedTimeZone = TimeZone.getDefault();\n    timeZone = TEST_TIMEZONE.equals(\"random\") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);\n    TimeZone.setDefault(timeZone);\n    similarityProvider = new RandomSimilarityProvider(random);\n    testsFailed = false;\n    \n    // verify assertions are enabled (do last, for smooth cleanup)\n    if (!Boolean.parseBoolean(System.getProperty(\"tests.asserts.gracious\", \"false\"))) {\n      assertTrue(\"assertions are not enabled!\", assertionsEnabled());\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","197be891529ba2dea8287e2251906be9533dc8ea","7c7d4195d2838330e4e86a6c09f67dcca69cce98"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8ce9405fbe78d1bdd0c3e6af10d384567e4b2fce":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"c715a0f99152be7566591f323c6c5a25725a1bcb":["c3a8a449466c1ff7ce2274fe73dab487256964b4","6a225d7f24f7054982644bd304fdbac541473ab7"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["b88f145033cba453c8f65cc86eb444c625ee86c0"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["bde51b089eb7f86171eb3406e38a274743f9b7ac","3741149a89925c02f14dbeef8365b896798d91fc"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"33f2eeecbc2a4c4b861e8af7c840c279db789544":["d33f3748c3aa0fc11e19eeafcf3c71450cfd7f63"],"37ff5956d30d0c66110ac0c84d8e32d46b67eff1":["a3776dccca01c11e7046323cfad46a3b4a471233","6a225d7f24f7054982644bd304fdbac541473ab7"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","232515072ebc96d9bf7e9c188e7f57b20e10916d"],"fdbabcdfbf0ec1640188c28570cd54fd30440942":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"b88f145033cba453c8f65cc86eb444c625ee86c0":["18f9aa8f75daee5daae15ce44c7310d58d41301d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"068303c7eefa006e42a6e790e1e51b5d26ffa02f":["4d3391411bd88eb23a38cddc1e1698d8116d32c2"],"4d3391411bd88eb23a38cddc1e1698d8116d32c2":["6a225d7f24f7054982644bd304fdbac541473ab7"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3741149a89925c02f14dbeef8365b896798d91fc"],"7b91922b55d15444d554721b352861d028eb8278":["33f2eeecbc2a4c4b861e8af7c840c279db789544"],"18f9aa8f75daee5daae15ce44c7310d58d41301d":["068303c7eefa006e42a6e790e1e51b5d26ffa02f"],"6a225d7f24f7054982644bd304fdbac541473ab7":["5f0dc13f9e59664be282b46015a020c945dc2a48"],"232515072ebc96d9bf7e9c188e7f57b20e10916d":["3741149a89925c02f14dbeef8365b896798d91fc"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5f0dc13f9e59664be282b46015a020c945dc2a48"],"d9449fcbbc5269b257424d857899116bf629b663":["8ce9405fbe78d1bdd0c3e6af10d384567e4b2fce"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","5f0dc13f9e59664be282b46015a020c945dc2a48"],"3741149a89925c02f14dbeef8365b896798d91fc":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"5f0dc13f9e59664be282b46015a020c945dc2a48":["232515072ebc96d9bf7e9c188e7f57b20e10916d"],"d33f3748c3aa0fc11e19eeafcf3c71450cfd7f63":["d9449fcbbc5269b257424d857899116bf629b663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"8ce9405fbe78d1bdd0c3e6af10d384567e4b2fce":["d9449fcbbc5269b257424d857899116bf629b663"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["fdbabcdfbf0ec1640188c28570cd54fd30440942"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233","3741149a89925c02f14dbeef8365b896798d91fc"],"33f2eeecbc2a4c4b861e8af7c840c279db789544":["7b91922b55d15444d554721b352861d028eb8278"],"37ff5956d30d0c66110ac0c84d8e32d46b67eff1":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"fdbabcdfbf0ec1640188c28570cd54fd30440942":["8ce9405fbe78d1bdd0c3e6af10d384567e4b2fce"],"b88f145033cba453c8f65cc86eb444c625ee86c0":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"068303c7eefa006e42a6e790e1e51b5d26ffa02f":["18f9aa8f75daee5daae15ce44c7310d58d41301d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"4d3391411bd88eb23a38cddc1e1698d8116d32c2":["068303c7eefa006e42a6e790e1e51b5d26ffa02f"],"18f9aa8f75daee5daae15ce44c7310d58d41301d":["b88f145033cba453c8f65cc86eb444c625ee86c0"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c715a0f99152be7566591f323c6c5a25725a1bcb"],"6a225d7f24f7054982644bd304fdbac541473ab7":["c715a0f99152be7566591f323c6c5a25725a1bcb","37ff5956d30d0c66110ac0c84d8e32d46b67eff1","4d3391411bd88eb23a38cddc1e1698d8116d32c2"],"232515072ebc96d9bf7e9c188e7f57b20e10916d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5f0dc13f9e59664be282b46015a020c945dc2a48"],"d9449fcbbc5269b257424d857899116bf629b663":["d33f3748c3aa0fc11e19eeafcf3c71450cfd7f63"],"a3776dccca01c11e7046323cfad46a3b4a471233":["37ff5956d30d0c66110ac0c84d8e32d46b67eff1"],"3741149a89925c02f14dbeef8365b896798d91fc":["d493718201f0d0c54c773fb323d87bbd2fbffe41","135621f3a0670a9394eb563224a3b76cc4dddc0f","232515072ebc96d9bf7e9c188e7f57b20e10916d"],"5f0dc13f9e59664be282b46015a020c945dc2a48":["6a225d7f24f7054982644bd304fdbac541473ab7","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"d33f3748c3aa0fc11e19eeafcf3c71450cfd7f63":["33f2eeecbc2a4c4b861e8af7c840c279db789544"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c715a0f99152be7566591f323c6c5a25725a1bcb","d493718201f0d0c54c773fb323d87bbd2fbffe41","37ff5956d30d0c66110ac0c84d8e32d46b67eff1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}