{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","commits":[{"id":"0215c504dd86fecb28c636f37ebcfb2906a839ec","date":1522393878,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":["464244264804e3f981bf1fb4b732516d8d62dbc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    @SuppressWarnings({\"unchecked\"})\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/RestoreTriggerStateTest#testEventFromRestoredState().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEFRS',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    events.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    @SuppressWarnings({\"unchecked\"})\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    Thread.sleep(10000);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"0215c504dd86fecb28c636f37ebcfb2906a839ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0215c504dd86fecb28c636f37ebcfb2906a839ec"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"0215c504dd86fecb28c636f37ebcfb2906a839ec":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0215c504dd86fecb28c636f37ebcfb2906a839ec","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"89948af0461fead48f44ba8fb7866f107ce83f22":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}