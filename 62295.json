{"path":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, DocsEnum.FLAG_NONE);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.FLAG_POSITIONS);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n      // nocommit: check\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f44c3f4f09e009cc5fcf28aad2343e541d849","date":1427824904,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n      // nocommit: check\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ac81480868d6bcd251ab080a87395b9e23d7c7","date":1429050381,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":null,"sourceOld":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d5e43895c6f1bdbf4f7260372c0526309ea78ee","date":1429052573,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c74000f48f15dd52e66dc2f279abd04cb226ed2","date":1429059243,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery]#UnionPostingsEnum(Bits,LeafReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":null,"sourceOld":"  public UnionPostingsEnum(Bits liveDocs, LeafReaderContext context, Term[] terms, Map<Term, TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<PostingsEnum> postingsEnums = new LinkedList<>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      PostingsEnum postings = termsEnum.postings(liveDocs, null, PostingsEnum.POSITIONS);\n      cost += postings.cost();\n      postingsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(postingsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d5e43895c6f1bdbf4f7260372c0526309ea78ee":["f8ac81480868d6bcd251ab080a87395b9e23d7c7"],"cb5311f0bff57ce15a23909f4cfb953773630534":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","611f44c3f4f09e009cc5fcf28aad2343e541d849"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"611f44c3f4f09e009cc5fcf28aad2343e541d849":["cb5311f0bff57ce15a23909f4cfb953773630534"],"f8ac81480868d6bcd251ab080a87395b9e23d7c7":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["6d5e43895c6f1bdbf4f7260372c0526309ea78ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"]},"commit2Childs":{"6d5e43895c6f1bdbf4f7260372c0526309ea78ee":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"cb5311f0bff57ce15a23909f4cfb953773630534":["611f44c3f4f09e009cc5fcf28aad2343e541d849"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["f8ac81480868d6bcd251ab080a87395b9e23d7c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"611f44c3f4f09e009cc5fcf28aad2343e541d849":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"f8ac81480868d6bcd251ab080a87395b9e23d7c7":["6d5e43895c6f1bdbf4f7260372c0526309ea78ee"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}