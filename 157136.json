{"path":"backwards/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"/dev/null","sourceNew":"  public void testBinaryField()\n    throws Exception\n  {\n    Document doc = new Document();\n    Fieldable stringFld = new Field(\"string\", binaryVal, Field.Store.YES, Field.Index.NO);\n    Fieldable binaryFld = new Field(\"binary\", binaryVal.getBytes(), Field.Store.YES);\n    Fieldable binaryFld2 = new Field(\"binary\", binaryVal2.getBytes(), Field.Store.YES);\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.fields.size());\n    \n    assertTrue(binaryFld.isBinary());\n    assertTrue(binaryFld.isStored());\n    assertFalse(binaryFld.isIndexed());\n    assertFalse(binaryFld.isTokenized());\n    \n    String binaryTest = new String(doc.getBinaryValue(\"binary\"));\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.fields.size());\n    \n    byte[][] binaryTests = doc.getBinaryValues(\"binary\");\n        \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = new String(binaryTests[0]);\n    String binaryTest2 = new String(binaryTests[1]);\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.fields.size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestDocument#testBinaryField().mjava","sourceNew":"  public void testBinaryField()\n    throws Exception\n  {\n    Document doc = new Document();\n    Fieldable stringFld = new Field(\"string\", binaryVal, Field.Store.YES, Field.Index.NO);\n    Fieldable binaryFld = new Field(\"binary\", binaryVal.getBytes(), Field.Store.YES);\n    Fieldable binaryFld2 = new Field(\"binary\", binaryVal2.getBytes(), Field.Store.YES);\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.fields.size());\n    \n    assertTrue(binaryFld.isBinary());\n    assertTrue(binaryFld.isStored());\n    assertFalse(binaryFld.isIndexed());\n    assertFalse(binaryFld.isTokenized());\n    \n    String binaryTest = new String(doc.getBinaryValue(\"binary\"));\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.fields.size());\n    \n    byte[][] binaryTests = doc.getBinaryValues(\"binary\");\n        \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = new String(binaryTests[0]);\n    String binaryTest2 = new String(binaryTests[1]);\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.fields.size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":"  public void testBinaryField()\n    throws Exception\n  {\n    Document doc = new Document();\n    Fieldable stringFld = new Field(\"string\", binaryVal, Field.Store.YES, Field.Index.NO);\n    Fieldable binaryFld = new Field(\"binary\", binaryVal.getBytes(), Field.Store.YES);\n    Fieldable binaryFld2 = new Field(\"binary\", binaryVal2.getBytes(), Field.Store.YES);\n    \n    doc.add(stringFld);\n    doc.add(binaryFld);\n    \n    assertEquals(2, doc.fields.size());\n    \n    assertTrue(binaryFld.isBinary());\n    assertTrue(binaryFld.isStored());\n    assertFalse(binaryFld.isIndexed());\n    assertFalse(binaryFld.isTokenized());\n    \n    String binaryTest = new String(doc.getBinaryValue(\"binary\"));\n    assertTrue(binaryTest.equals(binaryVal));\n    \n    String stringTest = doc.get(\"string\");\n    assertTrue(binaryTest.equals(stringTest));\n    \n    doc.add(binaryFld2);\n    \n    assertEquals(3, doc.fields.size());\n    \n    byte[][] binaryTests = doc.getBinaryValues(\"binary\");\n        \n    assertEquals(2, binaryTests.length);\n    \n    binaryTest = new String(binaryTests[0]);\n    String binaryTest2 = new String(binaryTests[1]);\n    \n    assertFalse(binaryTest.equals(binaryTest2));\n    \n    assertTrue(binaryTest.equals(binaryVal));\n    assertTrue(binaryTest2.equals(binaryVal2));\n    \n    doc.removeField(\"string\");\n    assertEquals(2, doc.fields.size());\n    \n    doc.removeFields(\"binary\");\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}