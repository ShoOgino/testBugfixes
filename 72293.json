{"path":"src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n  \n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n  \n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc29674855884c7ea8ac29eeb09a0276a16f334f","date":1247637346,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n  \n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["cc29674855884c7ea8ac29eeb09a0276a16f334f"],"cc29674855884c7ea8ac29eeb09a0276a16f334f":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["cc29674855884c7ea8ac29eeb09a0276a16f334f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cc29674855884c7ea8ac29eeb09a0276a16f334f":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}