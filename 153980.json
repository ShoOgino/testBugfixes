{"path":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRange().mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRange().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRange().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof TermRangeQuery);\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRange().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof TermRangeQuery);\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof TermRangeQuery);\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"]},"commit2Childs":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}