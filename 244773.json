{"path":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#checkHttpCachingVeto(SolrQueryResponse,HttpServletResponse,Method).mjava","commits":[{"id":"5ff676ea3919c34f30df120b9fa469cd439203ec","date":1211576148,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#checkHttpCachingVeto(SolrQueryResponse,HttpServletResponse,Method).mjava","pathOld":"/dev/null","sourceNew":"   /**\n   * Checks if the downstream request handler wants to avoid HTTP caching of\n   * the response.\n   * \n   * @param solrRsp The Solr response object\n   * @param resp The HTTP servlet response object\n   * @param reqMethod The HTTP request type\n   */\n  public static void checkHttpCachingVeto(final SolrQueryResponse solrRsp,\n      HttpServletResponse resp, final Method reqMethod) {\n    // For POST we do nothing. They never get cached\n    if (Method.POST == reqMethod || Method.OTHER == reqMethod) {\n      return;\n    }\n    // If the request handler has not vetoed and there is no\n    // exception silently return\n    if (solrRsp.isHttpCaching() && solrRsp.getException() == null) {\n      return;\n    }\n    \n    // Otherwise we tell the caches that we don't want to cache the response\n    resp.setHeader(\"Cache-Control\", \"no-cache, no-store\");\n\n    // For HTTP/1.0 proxy caches\n    resp.setHeader(\"Pragma\", \"no-cache\");\n\n    // This sets the expiry date to a date in the past\n    // As long as no time machines get invented this is safe\n    resp.setHeader(\"Expires\", \"Sat, 01 Jan 2000 01:00:00 GMT\");\n\n    // We signal \"just modified\" just in case some broken\n    // proxy cache does not follow the above headers\n    resp.setDateHeader(\"Last-Modified\", System.currentTimeMillis());\n    \n    // We override the ETag with something different\n    resp.setHeader(\"ETag\", '\"'+Long.toHexString(System.currentTimeMillis())+'\"');\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#checkHttpCachingVeto(SolrQueryResponse,HttpServletResponse,Method).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#checkHttpCachingVeto(SolrQueryResponse,HttpServletResponse,Method).mjava","sourceNew":"   /**\n   * Checks if the downstream request handler wants to avoid HTTP caching of\n   * the response.\n   * \n   * @param solrRsp The Solr response object\n   * @param resp The HTTP servlet response object\n   * @param reqMethod The HTTP request type\n   */\n  public static void checkHttpCachingVeto(final SolrQueryResponse solrRsp,\n      HttpServletResponse resp, final Method reqMethod) {\n    // For POST we do nothing. They never get cached\n    if (Method.POST == reqMethod || Method.OTHER == reqMethod) {\n      return;\n    }\n    // If the request handler has not vetoed and there is no\n    // exception silently return\n    if (solrRsp.isHttpCaching() && solrRsp.getException() == null) {\n      return;\n    }\n    \n    // Otherwise we tell the caches that we don't want to cache the response\n    resp.setHeader(\"Cache-Control\", \"no-cache, no-store\");\n\n    // For HTTP/1.0 proxy caches\n    resp.setHeader(\"Pragma\", \"no-cache\");\n\n    // This sets the expiry date to a date in the past\n    // As long as no time machines get invented this is safe\n    resp.setHeader(\"Expires\", \"Sat, 01 Jan 2000 01:00:00 GMT\");\n\n    // We signal \"just modified\" just in case some broken\n    // proxy cache does not follow the above headers\n    resp.setDateHeader(\"Last-Modified\", System.currentTimeMillis());\n    \n    // We override the ETag with something different\n    resp.setHeader(\"ETag\", '\"'+Long.toHexString(System.currentTimeMillis())+'\"');\n  } \n\n","sourceOld":"   /**\n   * Checks if the downstream request handler wants to avoid HTTP caching of\n   * the response.\n   * \n   * @param solrRsp The Solr response object\n   * @param resp The HTTP servlet response object\n   * @param reqMethod The HTTP request type\n   */\n  public static void checkHttpCachingVeto(final SolrQueryResponse solrRsp,\n      HttpServletResponse resp, final Method reqMethod) {\n    // For POST we do nothing. They never get cached\n    if (Method.POST == reqMethod || Method.OTHER == reqMethod) {\n      return;\n    }\n    // If the request handler has not vetoed and there is no\n    // exception silently return\n    if (solrRsp.isHttpCaching() && solrRsp.getException() == null) {\n      return;\n    }\n    \n    // Otherwise we tell the caches that we don't want to cache the response\n    resp.setHeader(\"Cache-Control\", \"no-cache, no-store\");\n\n    // For HTTP/1.0 proxy caches\n    resp.setHeader(\"Pragma\", \"no-cache\");\n\n    // This sets the expiry date to a date in the past\n    // As long as no time machines get invented this is safe\n    resp.setHeader(\"Expires\", \"Sat, 01 Jan 2000 01:00:00 GMT\");\n\n    // We signal \"just modified\" just in case some broken\n    // proxy cache does not follow the above headers\n    resp.setDateHeader(\"Last-Modified\", System.currentTimeMillis());\n    \n    // We override the ETag with something different\n    resp.setHeader(\"ETag\", '\"'+Long.toHexString(System.currentTimeMillis())+'\"');\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ff676ea3919c34f30df120b9fa469cd439203ec":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["5ff676ea3919c34f30df120b9fa469cd439203ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5ff676ea3919c34f30df120b9fa469cd439203ec":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5ff676ea3919c34f30df120b9fa469cd439203ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}