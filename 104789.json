{"path":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d18745f77db7a9967160ddb1c276852c3bba718c","date":1297332062,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08bd82f9f7ac6b7ae532616311b08252338e335d","date":1297527663,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n    final int n = random.nextInt(4);\n\n    if (n == 0) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockSep postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockSingleIntFactory());\n    } else if (n == 1) {\n      final int blockSize = _TestUtil.nextInt(random, 1, 2000);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockFixedIntBlock(\" + blockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockFixedIntBlockCodec.MockIntFactory(blockSize));\n    } else if (n == 2) {\n      final int baseBlockSize = _TestUtil.nextInt(random, 1, 127);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing MockVariableIntBlock(\" + baseBlockSize + \") postings\");\n      }\n      postingsWriter = new SepPostingsWriterImpl(state, new MockVariableIntBlockCodec.MockIntFactory(baseBlockSize));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return random.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter, BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbf673cc117fc27d2c820811d2a886119346b0c9","date":1302615417,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 64);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 64);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4","date":1303229616,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 64);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 64);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5a871c0a23009308ca3ffa6b14f04457e271ff","date":1305043277,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c986853309f96720b4528634c9131648cb0f7376","date":1305987691,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random));\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == 17;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    out.writeLong(seed);\n    out.close();\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecIdAsString(), SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" codecID=\" + state.codecId + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n    \n    PostingsWriterBase postingsWriter;\n\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriterImpl(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriterImpl(totTFCutoff, postingsWriter);\n    }\n\n    final TermsIndexWriterBase indexWriter;\n    boolean success = false;\n\n    try {\n      if (random.nextBoolean()) {\n        state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n        }\n        indexWriter = new FixedGapTermsIndexWriter(state);\n      } else {\n        final VariableGapTermsIndexWriter.IndexTermSelector selector;\n        final int n2 = random.nextInt(3);\n        if (n2 == 0) {\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n          }\n        } else if (n2 == 1) {\n          final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n          final int tii = _TestUtil.nextInt(random, 1, 100);\n          selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n        } else {\n          final long seed2 = random.nextLong();\n          final int gap = _TestUtil.nextInt(random, 2, 40);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n          }\n          selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n              final Random rand = new Random(seed2);\n\n              @Override\n              public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                return rand.nextInt(gap) == gap/2;\n              }\n\n              @Override\n              public void newField(FieldInfo fieldInfo) {\n              }\n            };\n        }\n        indexWriter = new VariableGapTermsIndexWriter(state, selector);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        postingsWriter.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsConsumer ret = new BlockTermsWriter(indexWriter, state, postingsWriter);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsWriter.close();\n        } finally {\n          indexWriter.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/mockrandom/MockRandomPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" formatID=\" + state.segmentSuffix + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new Lucene40PostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n    // we pull this before the seed intentionally: because its not consumed at runtime\n    // (the skipInterval is written into postings header)\n    int skipInterval = _TestUtil.nextInt(seedRandom, 2, 10);\n    \n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: skipInterval=\" + skipInterval);\n    }\n    \n    final long seed = seedRandom.nextLong();\n\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockRandomCodec: writing to seg=\" + state.segmentName + \" codecID=\" + state.codecId + \" seed=\" + seed);\n    }\n\n    final String seedFileName = IndexFileNames.segmentFileName(state.segmentName, state.codecId, SEED_EXT);\n    final IndexOutput out = state.directory.createOutput(seedFileName, state.context);\n    try {\n      out.writeLong(seed);\n    } finally {\n      out.close();\n    }\n\n    final Random random = new Random(seed);\n    \n    random.nextInt(); // consume a random for buffersize\n\n    PostingsWriterBase postingsWriter;\n    if (random.nextBoolean()) {\n      postingsWriter = new SepPostingsWriter(state, new MockIntStreamFactory(random), skipInterval);\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Standard postings\");\n      }\n      postingsWriter = new StandardPostingsWriter(state, skipInterval);\n    }\n\n    if (random.nextBoolean()) {\n      final int totTFCutoff = _TestUtil.nextInt(random, 1, 20);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing pulsing postings with totTFCutoff=\" + totTFCutoff);\n      }\n      postingsWriter = new PulsingPostingsWriter(totTFCutoff, postingsWriter);\n    }\n\n    final FieldsConsumer fields;\n\n    if (random.nextBoolean()) {\n      // Use BlockTree terms dict\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing BlockTree terms dict\");\n      }\n\n      // TODO: would be nice to allow 1 but this is very\n      // slow to write\n      final int minTermsInBlock = _TestUtil.nextInt(random, 2, 100);\n      final int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random.nextInt(100));\n\n      boolean success = false;\n      try {\n        fields = new BlockTreeTermsWriter(state, postingsWriter, minTermsInBlock, maxTermsInBlock);\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n    } else {\n\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockRandomCodec: writing Block terms dict\");\n      }\n\n      boolean success = false;\n\n      final TermsIndexWriterBase indexWriter;\n      try {\n        if (random.nextBoolean()) {\n          state.termIndexInterval = _TestUtil.nextInt(random, 1, 100);\n          if (LuceneTestCase.VERBOSE) {\n            System.out.println(\"MockRandomCodec: fixed-gap terms index (tii=\" + state.termIndexInterval + \")\");\n          }\n          indexWriter = new FixedGapTermsIndexWriter(state);\n        } else {\n          final VariableGapTermsIndexWriter.IndexTermSelector selector;\n          final int n2 = random.nextInt(3);\n          if (n2 == 0) {\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNTermSelector(tii);\n           if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"MockRandomCodec: variable-gap terms index (tii=\" + tii + \")\");\n            }\n          } else if (n2 == 1) {\n            final int docFreqThresh = _TestUtil.nextInt(random, 2, 100);\n            final int tii = _TestUtil.nextInt(random, 1, 100);\n            selector = new VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector(docFreqThresh, tii);\n          } else {\n            final long seed2 = random.nextLong();\n            final int gap = _TestUtil.nextInt(random, 2, 40);\n            if (LuceneTestCase.VERBOSE) {\n             System.out.println(\"MockRandomCodec: random-gap terms index (max gap=\" + gap + \")\");\n            }\n           selector = new VariableGapTermsIndexWriter.IndexTermSelector() {\n                final Random rand = new Random(seed2);\n\n                @Override\n                public boolean isIndexTerm(BytesRef term, TermStats stats) {\n                  return rand.nextInt(gap) == gap/2;\n                }\n\n                @Override\n                  public void newField(FieldInfo fieldInfo) {\n                }\n              };\n          }\n          indexWriter = new VariableGapTermsIndexWriter(state, selector);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          postingsWriter.close();\n        }\n      }\n\n      success = false;\n      try {\n        fields = new BlockTermsWriter(indexWriter, state, postingsWriter);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            postingsWriter.close();\n          } finally {\n            indexWriter.close();\n          }\n        }\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","c986853309f96720b4528634c9131648cb0f7376"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"efb7a19703a037c29e30440260d393500febc1f4":["c986853309f96720b4528634c9131648cb0f7376"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["efb7a19703a037c29e30440260d393500febc1f4"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["962d04139994fce5193143ef35615499a9a96d78","d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4"],"d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4":["fbf673cc117fc27d2c820811d2a886119346b0c9"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","8c5a871c0a23009308ca3ffa6b14f04457e271ff"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["efb7a19703a037c29e30440260d393500febc1f4","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"8c5a871c0a23009308ca3ffa6b14f04457e271ff":["d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","efb7a19703a037c29e30440260d393500febc1f4"],"c986853309f96720b4528634c9131648cb0f7376":["8c5a871c0a23009308ca3ffa6b14f04457e271ff"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["08bd82f9f7ac6b7ae532616311b08252338e335d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4"],"fbf673cc117fc27d2c820811d2a886119346b0c9":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","fbf673cc117fc27d2c820811d2a886119346b0c9"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"08bd82f9f7ac6b7ae532616311b08252338e335d":["d18745f77db7a9967160ddb1c276852c3bba718c"],"d18745f77db7a9967160ddb1c276852c3bba718c":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","c986853309f96720b4528634c9131648cb0f7376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"efb7a19703a037c29e30440260d393500febc1f4":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4":["d493718201f0d0c54c773fb323d87bbd2fbffe41","8c5a871c0a23009308ca3ffa6b14f04457e271ff","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","d18745f77db7a9967160ddb1c276852c3bba718c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","60ba444201d2570214b6fcf1d15600dc1a01f548"],"8c5a871c0a23009308ca3ffa6b14f04457e271ff":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","c986853309f96720b4528634c9131648cb0f7376"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"c986853309f96720b4528634c9131648cb0f7376":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","efb7a19703a037c29e30440260d393500febc1f4","a3776dccca01c11e7046323cfad46a3b4a471233"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","fbf673cc117fc27d2c820811d2a886119346b0c9","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"fbf673cc117fc27d2c820811d2a886119346b0c9":["d7f11e41daf233ecd42d1646234f6e7fe1d7f6c4","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"08bd82f9f7ac6b7ae532616311b08252338e335d":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d18745f77db7a9967160ddb1c276852c3bba718c":["08bd82f9f7ac6b7ae532616311b08252338e335d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0150c6e116b24d66f02d63fcb0758f336e8791e2","d493718201f0d0c54c773fb323d87bbd2fbffe41","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}