{"path":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"719f4efa5dfc2bc5476a646af6ab142e8d67f7a3","date":1276292818,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SystemInfoRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    rsp.add(\"core\", core.getName());\n    rsp.add(\"schema\", req.getSchema().getSchemaName());\n    rsp.add(\"start\", new Date(core.getStartTime()));\n    rsp.add(\"now\", new Date().toString());\n    rsp.add(\"host\", hostname);\n    rsp.add(\"cwd\", System.getProperty(\"user.dir\"));\n    rsp.add(\"instanceDir\", core.getSolrConfig().getInstanceDir());\n\n    Package solrP = SolrCore.class.getPackage();\n    Package luceneP = LucenePackage.class.getPackage();\n    NamedList version = new NamedList();\n    version.add(\"solrSpecVersion\", solrP.getSpecificationVersion());\n    version.add(\"solrImplVersion\", solrP.getImplementationVersion());\n    version.add(\"luceneSpecVersion\", luceneP.getSpecificationVersion());\n    version.add(\"luceneImplVersion\", luceneP.getImplementationVersion());\n\n    rsp.add(\"version\", version);\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"objects\", cats);\n    \n    Set<String> requestedCats = arrayToSet(req.getParams().getParams(\"cat\"));\n    if (requestedCats.isEmpty()) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        requestedCats.add(cat.name());\n      }\n    }\n    for (String catName : requestedCats) {\n      cats.add(catName,new SimpleOrderedMap());\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", arrayToSet(m.getDocs()));\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755f2f419306d7297c8feee10d1897addf4b2dd0","date":1294442354,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList cats = new NamedList();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList catInfo = (NamedList) cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList mBeanInfo = new SimpleOrderedMap();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrCore core = req.getCore();\n    \n    NamedList<NamedList<NamedList<Object>>> cats = new NamedList<NamedList<NamedList<Object>>>();\n    rsp.add(\"solr-mbeans\", cats);\n    \n    String[] requestedCats = req.getParams().getParams(\"cat\");\n    if (null == requestedCats || 0 == requestedCats.length) {\n      for (SolrInfoMBean.Category cat : SolrInfoMBean.Category.values()) {\n        cats.add(cat.name(), new SimpleOrderedMap<NamedList<Object>>());\n      }\n    } else {\n      for (String catName : requestedCats) {\n        cats.add(catName,new SimpleOrderedMap<NamedList<Object>>());\n      }\n    }\n         \n    Set<String> requestedKeys = arrayToSet(req.getParams().getParams(\"key\"));\n    \n    Map<String, SolrInfoMBean> reg = core.getInfoRegistry();\n    for (Map.Entry<String, SolrInfoMBean> entry : reg.entrySet()) {\n      String key = entry.getKey();\n      SolrInfoMBean m = entry.getValue();\n\n      if ( ! ( requestedKeys.isEmpty() || requestedKeys.contains(key) ) ) continue;\n\n      NamedList<NamedList<Object>> catInfo = cats.get(m.getCategory().name());\n      if ( null == catInfo ) continue;\n\n      NamedList<Object> mBeanInfo = new SimpleOrderedMap<Object>();\n      mBeanInfo.add(\"class\", m.getName());\n      mBeanInfo.add(\"version\", m.getVersion());\n      mBeanInfo.add(\"description\", m.getDescription());\n      mBeanInfo.add(\"srcId\", m.getSourceId());\n      mBeanInfo.add(\"src\", m.getSource());\n      mBeanInfo.add(\"docs\", m.getDocs());\n      \n      if (req.getParams().getFieldBool(key, \"stats\", false))\n        mBeanInfo.add(\"stats\", m.getStatistics());\n      \n      catInfo.add(key, mBeanInfo);\n    }\n    rsp.setHttpCaching(false); // never cache, no matter what init config looks like\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"719f4efa5dfc2bc5476a646af6ab142e8d67f7a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["719f4efa5dfc2bc5476a646af6ab142e8d67f7a3"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["719f4efa5dfc2bc5476a646af6ab142e8d67f7a3","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","719f4efa5dfc2bc5476a646af6ab142e8d67f7a3"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","755f2f419306d7297c8feee10d1897addf4b2dd0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"719f4efa5dfc2bc5476a646af6ab142e8d67f7a3":["755f2f419306d7297c8feee10d1897addf4b2dd0","29ef99d61cda9641b6250bf9567329a6e65f901d","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["719f4efa5dfc2bc5476a646af6ab142e8d67f7a3","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}