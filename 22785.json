{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"/dev/null","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#close().mjava","sourceNew":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /** Remove all our references to readers, and commits\n     *  any pending changes. */\n    synchronized void close() throws IOException {\n      Iterator<Map.Entry<SegmentInfo,SegmentReader>> iter = readerMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        \n        Map.Entry<SegmentInfo,SegmentReader> ent = iter.next();\n\n        SegmentReader sr = ent.getValue();\n        if (sr.hasChanges) {\n          assert infoIsLive(sr.getSegmentInfo());\n          sr.startCommit();\n          boolean success = false;\n          try {\n            sr.doCommit(null);\n            success = true;\n          } finally {\n            if (!success) {\n              sr.rollbackCommit();\n            }\n          }\n        }\n\n        iter.remove();\n\n        // NOTE: it is allowed that this decRef does not\n        // actually close the SR; this can happen when a\n        // near real-time reader is kept open after the\n        // IndexWriter instance is closed\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}