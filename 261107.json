{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","commits":[{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolverImpl,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<String, Map<String, Object>>();\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + epw.getEntity().getName());\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + epw.getEntity().getName());\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<Map<String, Object>>(parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolverImpl resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<String, Map<String, Object>>();\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + epw.getEntity().getName());\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        getModifiedParentRows(resolver.addNamespace(epw.getEntity().getName(), row), epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        getModifiedParentRows(resolver.addNamespace(epw.getEntity().getName(), row), epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + epw.getEntity().getName());\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<Map<String, Object>>(parentKeyList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<String, Map<String, Object>>();\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + epw.getEntity().getName());\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + epw.getEntity().getName());\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<Map<String, Object>>(parentKeyList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<>();\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + epw.getEntity().getName());\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + epw.getEntity().getName());\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<>(parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<Map<String, Object>>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<String, Map<String, Object>>();\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + epw.getEntity().getName());\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<Map<String, Object>>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + epw.getEntity().getName());\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<Map<String, Object>>(parentKeyList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<>();\n    log.info(\"Running ModifiedRowKey() for Entity: \" + epw.getEntity().getName());\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    log.info(\"Completed ModifiedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deltaSet.size());\n    log.info(\"Completed DeletedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    log.info(\"Completed parentDeltaQuery for Entity: \" + epw.getEntity().getName());\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<>(parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<>();\n    LOG.info(\"Running ModifiedRowKey() for Entity: \" + epw.getEntity().getName());\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    LOG.info(\"Completed ModifiedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deltaSet.size());\n    LOG.info(\"Completed DeletedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    LOG.info(\"Completed parentDeltaQuery for Entity: \" + epw.getEntity().getName());\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<>(parentKeyList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<>();\n    if (log.isInfoEnabled()) {\n      log.info(\"Running ModifiedRowKey() for Entity: {}\", epw.getEntity().getName());\n    }\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Completed ModifiedRowKey for Entity: {} rows obtained: {}\", epw.getEntity().getName(), deltaSet.size());\n      log.info(\"Completed DeletedRowKey for Entity: {} rows obtained : {}\", epw.getEntity().getName(), deletedSet.size()); // logOk\n    }\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Completed parentDeltaQuery for Entity: {}\", epw.getEntity().getName());\n    }\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<>(parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<>();\n    log.info(\"Running ModifiedRowKey() for Entity: \" + epw.getEntity().getName());\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    log.info(\"Completed ModifiedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deltaSet.size());\n    log.info(\"Completed DeletedRowKey for Entity: \" + epw.getEntity().getName() + \" rows obtained : \" + deletedSet.size());\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    log.info(\"Completed parentDeltaQuery for Entity: \" + epw.getEntity().getName());\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<>(parentKeyList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","sourceNew":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<>();\n    if (log.isInfoEnabled()) {\n      log.info(\"Running ModifiedRowKey() for Entity: {}\", epw.getEntity().getName());\n    }\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Completed ModifiedRowKey for Entity: {} rows obtained: {}\", epw.getEntity().getName(), deltaSet.size());\n      log.info(\"Completed DeletedRowKey for Entity: {} rows obtained : {}\", epw.getEntity().getName(), deletedSet.size()); // logOk\n    }\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Completed parentDeltaQuery for Entity: {}\", epw.getEntity().getName());\n    }\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<>(parentKeyList);\n  }\n\n","sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<>();\n    if (log.isInfoEnabled()) {\n      log.info(\"Running ModifiedRowKey() for Entity: {}\", epw.getEntity().getName());\n    }\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Completed ModifiedRowKey for Entity: {} rows obtained: {}\", epw.getEntity().getName(), deltaSet.size());\n      log.info(\"Completed DeletedRowKey for Entity: {} rows obtained : {}\", epw.getEntity().getName(), deletedSet.size()); // logOk\n    }\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Completed parentDeltaQuery for Entity: {}\", epw.getEntity().getName());\n    }\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<>(parentKeyList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#collectDelta(EntityProcessorWrapper,VariableResolver,Set[Map[String,Object]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p> Collects unique keys of all Solr documents for whom one or more source tables have been changed since the last\n   * indexed time. </p> <p> Note: In our definition, unique key of Solr document is the primary key of the top level\n   * entity (unless skipped using docRoot=false) in the Solr document in data-config.xml </p>\n   *\n   * @return an iterator to the list of keys for which Solr documents should be updated.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Set<Map<String, Object>> collectDelta(EntityProcessorWrapper epw, VariableResolver resolver,\n                                               Set<Map<String, Object>> deletedRows) {\n    //someone called abort\n    if (stop.get())\n      return new HashSet();\n\n    ContextImpl context1 = new ContextImpl(epw, resolver, null, Context.FIND_DELTA, session, null, this);\n    epw.init(context1);\n\n    Set<Map<String, Object>> myModifiedPks = new HashSet<>();\n\n   \n\n    for (EntityProcessorWrapper childEpw : epw.getChildren()) {\n      //this ensures that we start from the leaf nodes\n      myModifiedPks.addAll(collectDelta(childEpw, resolver, deletedRows));\n      //someone called abort\n      if (stop.get())\n        return new HashSet();\n    }\n    \n    // identifying the modified rows for this entity\n    Map<String, Map<String, Object>> deltaSet = new HashMap<>();\n    if (log.isInfoEnabled()) {\n      log.info(\"Running ModifiedRowKey() for Entity: {}\", epw.getEntity().getName());\n    }\n    //get the modified rows in this entity\n    String pk = epw.getEntity().getPk();\n    while (true) {\n      Map<String, Object> row = epw.nextModifiedRowKey();\n\n      if (row == null)\n        break;\n\n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      deltaSet.put(pkValue.toString(), row);\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n    //get the deleted rows for this entity\n    Set<Map<String, Object>> deletedSet = new HashSet<>();\n    while (true) {\n      Map<String, Object> row = epw.nextDeletedRowKey();\n      if (row == null)\n        break;\n\n      deletedSet.add(row);\n      \n      Object pkValue = row.get(pk);\n      if (pkValue == null) {\n        pk = findMatchingPkColumn(pk, row);\n        pkValue = row.get(pk);\n      }\n\n      // Remove deleted rows from the delta rows\n      String deletedRowPk = pkValue.toString();\n      if (deltaSet.containsKey(deletedRowPk)) {\n        deltaSet.remove(deletedRowPk);\n      }\n\n      importStatistics.rowsCount.incrementAndGet();\n      // check for abort\n      if (stop.get())\n        return new HashSet();\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Completed ModifiedRowKey for Entity: {} rows obtained: {}\", epw.getEntity().getName(), deltaSet.size());\n      log.info(\"Completed DeletedRowKey for Entity: {} rows obtained : {}\", epw.getEntity().getName(), deletedSet.size()); // logOk\n    }\n\n    myModifiedPks.addAll(deltaSet.values());\n    Set<Map<String, Object>> parentKeyList = new HashSet<>();\n    //all that we have captured is useless (in a sub-entity) if no rows in the parent is modified because of these\n    //propogate up the changes in the chain\n    if (epw.getEntity().getParentEntity() != null) {\n      // identifying deleted rows with deltas\n\n      for (Map<String, Object> row : myModifiedPks) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n      // running the same for deletedrows\n      for (Map<String, Object> row : deletedSet) {\n        resolver.addNamespace(epw.getEntity().getName(), row);\n        getModifiedParentRows(resolver, epw.getEntity().getName(), epw, parentKeyList);\n        // check for abort\n        if (stop.get())\n          return new HashSet();\n      }\n    }\n    if (log.isInfoEnabled()) {\n      log.info(\"Completed parentDeltaQuery for Entity: {}\", epw.getEntity().getName());\n    }\n    if (epw.getEntity().isDocRoot())\n      deletedRows.addAll(deletedSet);\n\n    // Do not use entity.isDocRoot here because one of descendant entities may set rootEntity=\"true\"\n    return epw.getEntity().getParentEntity() == null ?\n        myModifiedPks : new HashSet<>(parentKeyList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c7b0ae5716b6c2044195a818e9ae58205175659"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}