{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum).mjava","sourceNew":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","sourceOld":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum).mjava","sourceNew":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","sourceOld":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum).mjava","sourceNew":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean bothHaveFreqs) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (bothHaveFreqs) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","sourceOld":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermStats(TermsEnum,TermsEnum).mjava","sourceNew":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean bothHaveFreqs) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (bothHaveFreqs) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","sourceOld":"  /**\n   * checks term-level statistics\n   */\n  public void assertTermStats(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum) throws Exception {\n    assertEquals(leftTermsEnum.docFreq(), rightTermsEnum.docFreq());\n    if (leftTermsEnum.totalTermFreq() != -1 && rightTermsEnum.totalTermFreq() != -1) {\n      assertEquals(leftTermsEnum.totalTermFreq(), rightTermsEnum.totalTermFreq());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"086ffe31d8fba0110227db122974163709ecc1b4":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}