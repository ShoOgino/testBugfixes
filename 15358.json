{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#buildPolygonShape(PlanetModel,List[GeoPoint],int,int,SidedPlane,boolean).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#buildPolygonShape(PlanetModel,List[GeoPoint],int,int,SidedPlane,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPolygonFactory#buildPolygonShape(PlanetModel,List[GeoPoint],int,int,SidedPlane,boolean).mjava","sourceNew":"  public static GeoMembershipShape buildPolygonShape(final PlanetModel planetModel, final List<GeoPoint> pointsList, final int startPointIndex, final int endPointIndex, final SidedPlane startingEdge, final boolean isInternalEdge) {\n    // Algorithm as follows:\n    // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n    // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n    // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n\n    // Current composite.  This is what we'll actually be returning.\n    final GeoCompositeMembershipShape rval = new GeoCompositeMembershipShape();\n\n    final List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n    final List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n    final BitSet internalEdgeList = new BitSet();\n    final List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n\n    // Initialize the current list and current planes\n    currentList.add(pointsList.get(startPointIndex));\n    currentList.add(pointsList.get(endPointIndex));\n    internalEdgeList.set(currentPlanes.size(), isInternalEdge);\n    currentPlanes.add(startingEdge);\n\n    // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n    for (int i = 0; i < pointsList.size() - 2; i++) {\n      GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n      if (isWithin(newPoint, currentPlanes)) {\n        // Construct a sided plane based on the last two points, and the previous point\n        SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), newPoint, currentList.get(currentList.size() - 1));\n        // Construct a sided plane based on the return trip\n        SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size() - 1), currentList.get(0), newPoint);\n        // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n        // be creating if we stopped making the current polygon right now.\n        boolean pointInside = false;\n        for (int j = i + 1; j < pointsList.size() - 2; j++) {\n          GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n          boolean isInside = true;\n          if (isInside && !newBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside && !returnBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside) {\n            for (SidedPlane plane : currentPlanes) {\n              if (!plane.isWithin(checkPoint)) {\n                isInside = false;\n                break;\n              }\n            }\n          }\n          if (isInside) {\n            pointInside = true;\n            break;\n          }\n        }\n        if (!pointInside) {\n          // Any excluded points?\n          boolean isInternalBoundary = recursionList.size() > 0;\n          if (isInternalBoundary) {\n            // Handle exclusion\n            recursionList.add(newPoint);\n            recursionList.add(currentList.get(currentList.size() - 1));\n            if (recursionList.size() == pointsList.size()) {\n              // We are trying to recurse with a list the same size as the one we started with.\n              // Clearly, the polygon cannot be constructed\n              throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n            recursionList.clear();\n          }\n          currentList.add(newPoint);\n          internalEdgeList.set(currentPlanes.size(), isInternalBoundary);\n          currentPlanes.add(newBoundary);\n        } else {\n          recursionList.add(newPoint);\n        }\n      } else {\n        recursionList.add(newPoint);\n      }\n    }\n\n    boolean returnEdgeInternalBoundary = recursionList.size() > 0;\n    if (returnEdgeInternalBoundary) {\n      // The last step back to the start point had a recursion, so take care of that before we complete our work\n      recursionList.add(currentList.get(0));\n      recursionList.add(currentList.get(currentList.size() - 1));\n      if (recursionList.size() == pointsList.size()) {\n        // We are trying to recurse with a list the same size as the one we started with.\n        // Clearly, the polygon cannot be constructed\n        throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n      }\n      // Construct a sided plane based on these two points, and the previous point\n      SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), currentList.get(0), currentList.get(currentList.size() - 1));\n      // We want the other side for the recursion\n      SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n      rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n      recursionList.clear();\n    }\n    // Now, add in the current shape.\n    rval.addShape(new GeoConvexPolygon(planetModel, currentList, internalEdgeList, returnEdgeInternalBoundary));\n    //System.out.println(\"Done creating polygon\");\n    return rval;\n  }\n\n","sourceOld":"  public static GeoMembershipShape buildPolygonShape(final PlanetModel planetModel, final List<GeoPoint> pointsList, final int startPointIndex, final int endPointIndex, final SidedPlane startingEdge, final boolean isInternalEdge) {\n    // Algorithm as follows:\n    // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n    // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n    // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n\n    // Current composite.  This is what we'll actually be returning.\n    final GeoCompositeMembershipShape rval = new GeoCompositeMembershipShape();\n\n    final List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n    final List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n    final BitSet internalEdgeList = new BitSet();\n    final List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n\n    // Initialize the current list and current planes\n    currentList.add(pointsList.get(startPointIndex));\n    currentList.add(pointsList.get(endPointIndex));\n    internalEdgeList.set(currentPlanes.size(), isInternalEdge);\n    currentPlanes.add(startingEdge);\n\n    // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n    for (int i = 0; i < pointsList.size() - 2; i++) {\n      GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n      if (isWithin(newPoint, currentPlanes)) {\n        // Construct a sided plane based on the last two points, and the previous point\n        SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), newPoint, currentList.get(currentList.size() - 1));\n        // Construct a sided plane based on the return trip\n        SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size() - 1), currentList.get(0), newPoint);\n        // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n        // be creating if we stopped making the current polygon right now.\n        boolean pointInside = false;\n        for (int j = i + 1; j < pointsList.size() - 2; j++) {\n          GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n          boolean isInside = true;\n          if (isInside && !newBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside && !returnBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside) {\n            for (SidedPlane plane : currentPlanes) {\n              if (!plane.isWithin(checkPoint)) {\n                isInside = false;\n                break;\n              }\n            }\n          }\n          if (isInside) {\n            pointInside = true;\n            break;\n          }\n        }\n        if (!pointInside) {\n          // Any excluded points?\n          boolean isInternalBoundary = recursionList.size() > 0;\n          if (isInternalBoundary) {\n            // Handle exclusion\n            recursionList.add(newPoint);\n            recursionList.add(currentList.get(currentList.size() - 1));\n            if (recursionList.size() == pointsList.size()) {\n              // We are trying to recurse with a list the same size as the one we started with.\n              // Clearly, the polygon cannot be constructed\n              throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n            recursionList.clear();\n          }\n          currentList.add(newPoint);\n          internalEdgeList.set(currentPlanes.size(), isInternalBoundary);\n          currentPlanes.add(newBoundary);\n        } else {\n          recursionList.add(newPoint);\n        }\n      } else {\n        recursionList.add(newPoint);\n      }\n    }\n\n    boolean returnEdgeInternalBoundary = recursionList.size() > 0;\n    if (returnEdgeInternalBoundary) {\n      // The last step back to the start point had a recursion, so take care of that before we complete our work\n      recursionList.add(currentList.get(0));\n      recursionList.add(currentList.get(currentList.size() - 1));\n      if (recursionList.size() == pointsList.size()) {\n        // We are trying to recurse with a list the same size as the one we started with.\n        // Clearly, the polygon cannot be constructed\n        throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n      }\n      // Construct a sided plane based on these two points, and the previous point\n      SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), currentList.get(0), currentList.get(currentList.size() - 1));\n      // We want the other side for the recursion\n      SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n      rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n      recursionList.clear();\n    }\n    // Now, add in the current shape.\n    rval.addShape(new GeoConvexPolygon(planetModel, currentList, internalEdgeList, returnEdgeInternalBoundary));\n    //System.out.println(\"Done creating polygon\");\n    return rval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71849bd31d150133a9a1027bf1607967b406c57","date":1436811056,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#buildPolygonShape(PlanetModel,List[GeoPoint],int,int,SidedPlane,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#buildPolygonShape(PlanetModel,List[GeoPoint],int,int,SidedPlane,boolean).mjava","sourceNew":"  /** Build a GeoMembershipShape given points, starting edge, and whether starting edge is internal or not.\n   * @param pointsList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param startPointIndex is one of the points constituting the starting edge.\n   * @param endPointIndex is another of the points constituting the starting edge.\n   * @param startingEdge is the plane describing the starting edge.\n   * @param isInternalEdge is true if the specified edge is an internal one.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape buildPolygonShape(final PlanetModel planetModel, final List<GeoPoint> pointsList, final int startPointIndex, final int endPointIndex, final SidedPlane startingEdge, final boolean isInternalEdge) {\n    // Algorithm as follows:\n    // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n    // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n    // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n\n    // Current composite.  This is what we'll actually be returning.\n    final GeoCompositeMembershipShape rval = new GeoCompositeMembershipShape();\n\n    final List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n    final List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n    final BitSet internalEdgeList = new BitSet();\n    final List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n\n    // Initialize the current list and current planes\n    currentList.add(pointsList.get(startPointIndex));\n    currentList.add(pointsList.get(endPointIndex));\n    internalEdgeList.set(currentPlanes.size(), isInternalEdge);\n    currentPlanes.add(startingEdge);\n\n    // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n    for (int i = 0; i < pointsList.size() - 2; i++) {\n      GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n      if (isWithin(newPoint, currentPlanes)) {\n        // Construct a sided plane based on the last two points, and the previous point\n        SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), newPoint, currentList.get(currentList.size() - 1));\n        // Construct a sided plane based on the return trip\n        SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size() - 1), currentList.get(0), newPoint);\n        // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n        // be creating if we stopped making the current polygon right now.\n        boolean pointInside = false;\n        for (int j = i + 1; j < pointsList.size() - 2; j++) {\n          GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n          boolean isInside = true;\n          if (isInside && !newBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside && !returnBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside) {\n            for (SidedPlane plane : currentPlanes) {\n              if (!plane.isWithin(checkPoint)) {\n                isInside = false;\n                break;\n              }\n            }\n          }\n          if (isInside) {\n            pointInside = true;\n            break;\n          }\n        }\n        if (!pointInside) {\n          // Any excluded points?\n          boolean isInternalBoundary = recursionList.size() > 0;\n          if (isInternalBoundary) {\n            // Handle exclusion\n            recursionList.add(newPoint);\n            recursionList.add(currentList.get(currentList.size() - 1));\n            if (recursionList.size() == pointsList.size()) {\n              // We are trying to recurse with a list the same size as the one we started with.\n              // Clearly, the polygon cannot be constructed\n              throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n            recursionList.clear();\n          }\n          currentList.add(newPoint);\n          internalEdgeList.set(currentPlanes.size(), isInternalBoundary);\n          currentPlanes.add(newBoundary);\n        } else {\n          recursionList.add(newPoint);\n        }\n      } else {\n        recursionList.add(newPoint);\n      }\n    }\n\n    boolean returnEdgeInternalBoundary = recursionList.size() > 0;\n    if (returnEdgeInternalBoundary) {\n      // The last step back to the start point had a recursion, so take care of that before we complete our work\n      recursionList.add(currentList.get(0));\n      recursionList.add(currentList.get(currentList.size() - 1));\n      if (recursionList.size() == pointsList.size()) {\n        // We are trying to recurse with a list the same size as the one we started with.\n        // Clearly, the polygon cannot be constructed\n        throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n      }\n      // Construct a sided plane based on these two points, and the previous point\n      SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), currentList.get(0), currentList.get(currentList.size() - 1));\n      // We want the other side for the recursion\n      SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n      rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n      recursionList.clear();\n    }\n    // Now, add in the current shape.\n    rval.addShape(new GeoConvexPolygon(planetModel, currentList, internalEdgeList, returnEdgeInternalBoundary));\n    //System.out.println(\"Done creating polygon\");\n    return rval;\n  }\n\n","sourceOld":"  public static GeoMembershipShape buildPolygonShape(final PlanetModel planetModel, final List<GeoPoint> pointsList, final int startPointIndex, final int endPointIndex, final SidedPlane startingEdge, final boolean isInternalEdge) {\n    // Algorithm as follows:\n    // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n    // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n    // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n\n    // Current composite.  This is what we'll actually be returning.\n    final GeoCompositeMembershipShape rval = new GeoCompositeMembershipShape();\n\n    final List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n    final List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n    final BitSet internalEdgeList = new BitSet();\n    final List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n\n    // Initialize the current list and current planes\n    currentList.add(pointsList.get(startPointIndex));\n    currentList.add(pointsList.get(endPointIndex));\n    internalEdgeList.set(currentPlanes.size(), isInternalEdge);\n    currentPlanes.add(startingEdge);\n\n    // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n    for (int i = 0; i < pointsList.size() - 2; i++) {\n      GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n      if (isWithin(newPoint, currentPlanes)) {\n        // Construct a sided plane based on the last two points, and the previous point\n        SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), newPoint, currentList.get(currentList.size() - 1));\n        // Construct a sided plane based on the return trip\n        SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size() - 1), currentList.get(0), newPoint);\n        // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n        // be creating if we stopped making the current polygon right now.\n        boolean pointInside = false;\n        for (int j = i + 1; j < pointsList.size() - 2; j++) {\n          GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n          boolean isInside = true;\n          if (isInside && !newBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside && !returnBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside) {\n            for (SidedPlane plane : currentPlanes) {\n              if (!plane.isWithin(checkPoint)) {\n                isInside = false;\n                break;\n              }\n            }\n          }\n          if (isInside) {\n            pointInside = true;\n            break;\n          }\n        }\n        if (!pointInside) {\n          // Any excluded points?\n          boolean isInternalBoundary = recursionList.size() > 0;\n          if (isInternalBoundary) {\n            // Handle exclusion\n            recursionList.add(newPoint);\n            recursionList.add(currentList.get(currentList.size() - 1));\n            if (recursionList.size() == pointsList.size()) {\n              // We are trying to recurse with a list the same size as the one we started with.\n              // Clearly, the polygon cannot be constructed\n              throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n            recursionList.clear();\n          }\n          currentList.add(newPoint);\n          internalEdgeList.set(currentPlanes.size(), isInternalBoundary);\n          currentPlanes.add(newBoundary);\n        } else {\n          recursionList.add(newPoint);\n        }\n      } else {\n        recursionList.add(newPoint);\n      }\n    }\n\n    boolean returnEdgeInternalBoundary = recursionList.size() > 0;\n    if (returnEdgeInternalBoundary) {\n      // The last step back to the start point had a recursion, so take care of that before we complete our work\n      recursionList.add(currentList.get(0));\n      recursionList.add(currentList.get(currentList.size() - 1));\n      if (recursionList.size() == pointsList.size()) {\n        // We are trying to recurse with a list the same size as the one we started with.\n        // Clearly, the polygon cannot be constructed\n        throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n      }\n      // Construct a sided plane based on these two points, and the previous point\n      SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), currentList.get(0), currentList.get(currentList.size() - 1));\n      // We want the other side for the recursion\n      SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n      rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n      recursionList.clear();\n    }\n    // Now, add in the current shape.\n    rval.addShape(new GeoConvexPolygon(planetModel, currentList, internalEdgeList, returnEdgeInternalBoundary));\n    //System.out.println(\"Done creating polygon\");\n    return rval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","date":1441921550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#buildPolygonShape(PlanetModel,List[GeoPoint],int,int,SidedPlane,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#buildPolygonShape(PlanetModel,List[GeoPoint],int,int,SidedPlane,boolean).mjava","sourceNew":"  /** Build a GeoMembershipShape given points, starting edge, and whether starting edge is internal or not.\n   * @param pointsList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param startPointIndex is one of the points constituting the starting edge.\n   * @param endPointIndex is another of the points constituting the starting edge.\n   * @param startingEdge is the plane describing the starting edge.\n   * @param isInternalEdge is true if the specified edge is an internal one.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoPolygon buildPolygonShape(final PlanetModel planetModel, final List<GeoPoint> pointsList, final int startPointIndex, final int endPointIndex, final SidedPlane startingEdge, final boolean isInternalEdge) {\n    // Algorithm as follows:\n    // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n    // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n    // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n\n    // Current composite.  This is what we'll actually be returning.\n    final GeoCompositePolygon rval = new GeoCompositePolygon();\n\n    final List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n    final List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n    final BitSet internalEdgeList = new BitSet();\n    final List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n\n    // Initialize the current list and current planes\n    currentList.add(pointsList.get(startPointIndex));\n    currentList.add(pointsList.get(endPointIndex));\n    internalEdgeList.set(currentPlanes.size(), isInternalEdge);\n    currentPlanes.add(startingEdge);\n\n    // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n    for (int i = 0; i < pointsList.size() - 2; i++) {\n      GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n      if (isWithin(newPoint, currentPlanes)) {\n        // Construct a sided plane based on the last two points, and the previous point\n        SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), newPoint, currentList.get(currentList.size() - 1));\n        // Construct a sided plane based on the return trip\n        SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size() - 1), currentList.get(0), newPoint);\n        // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n        // be creating if we stopped making the current polygon right now.\n        boolean pointInside = false;\n        for (int j = i + 1; j < pointsList.size() - 2; j++) {\n          GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n          boolean isInside = true;\n          if (isInside && !newBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside && !returnBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside) {\n            for (SidedPlane plane : currentPlanes) {\n              if (!plane.isWithin(checkPoint)) {\n                isInside = false;\n                break;\n              }\n            }\n          }\n          if (isInside) {\n            pointInside = true;\n            break;\n          }\n        }\n        if (!pointInside) {\n          // Any excluded points?\n          boolean isInternalBoundary = recursionList.size() > 0;\n          if (isInternalBoundary) {\n            // Handle exclusion\n            recursionList.add(newPoint);\n            recursionList.add(currentList.get(currentList.size() - 1));\n            if (recursionList.size() == pointsList.size()) {\n              // We are trying to recurse with a list the same size as the one we started with.\n              // Clearly, the polygon cannot be constructed\n              throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n            recursionList.clear();\n          }\n          currentList.add(newPoint);\n          internalEdgeList.set(currentPlanes.size(), isInternalBoundary);\n          currentPlanes.add(newBoundary);\n        } else {\n          recursionList.add(newPoint);\n        }\n      } else {\n        recursionList.add(newPoint);\n      }\n    }\n\n    boolean returnEdgeInternalBoundary = recursionList.size() > 0;\n    if (returnEdgeInternalBoundary) {\n      // The last step back to the start point had a recursion, so take care of that before we complete our work\n      recursionList.add(currentList.get(0));\n      recursionList.add(currentList.get(currentList.size() - 1));\n      if (recursionList.size() == pointsList.size()) {\n        // We are trying to recurse with a list the same size as the one we started with.\n        // Clearly, the polygon cannot be constructed\n        throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n      }\n      // Construct a sided plane based on these two points, and the previous point\n      SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), currentList.get(0), currentList.get(currentList.size() - 1));\n      // We want the other side for the recursion\n      SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n      rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n      recursionList.clear();\n    }\n    // Now, add in the current shape.\n    rval.addShape(new GeoConvexPolygon(planetModel, currentList, internalEdgeList, returnEdgeInternalBoundary));\n    //System.out.println(\"Done creating polygon\");\n    return rval;\n  }\n\n","sourceOld":"  /** Build a GeoMembershipShape given points, starting edge, and whether starting edge is internal or not.\n   * @param pointsList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param startPointIndex is one of the points constituting the starting edge.\n   * @param endPointIndex is another of the points constituting the starting edge.\n   * @param startingEdge is the plane describing the starting edge.\n   * @param isInternalEdge is true if the specified edge is an internal one.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoMembershipShape buildPolygonShape(final PlanetModel planetModel, final List<GeoPoint> pointsList, final int startPointIndex, final int endPointIndex, final SidedPlane startingEdge, final boolean isInternalEdge) {\n    // Algorithm as follows:\n    // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n    // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n    // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n\n    // Current composite.  This is what we'll actually be returning.\n    final GeoCompositeMembershipShape rval = new GeoCompositeMembershipShape();\n\n    final List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n    final List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n    final BitSet internalEdgeList = new BitSet();\n    final List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n\n    // Initialize the current list and current planes\n    currentList.add(pointsList.get(startPointIndex));\n    currentList.add(pointsList.get(endPointIndex));\n    internalEdgeList.set(currentPlanes.size(), isInternalEdge);\n    currentPlanes.add(startingEdge);\n\n    // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n    for (int i = 0; i < pointsList.size() - 2; i++) {\n      GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n      if (isWithin(newPoint, currentPlanes)) {\n        // Construct a sided plane based on the last two points, and the previous point\n        SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), newPoint, currentList.get(currentList.size() - 1));\n        // Construct a sided plane based on the return trip\n        SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size() - 1), currentList.get(0), newPoint);\n        // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n        // be creating if we stopped making the current polygon right now.\n        boolean pointInside = false;\n        for (int j = i + 1; j < pointsList.size() - 2; j++) {\n          GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n          boolean isInside = true;\n          if (isInside && !newBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside && !returnBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside) {\n            for (SidedPlane plane : currentPlanes) {\n              if (!plane.isWithin(checkPoint)) {\n                isInside = false;\n                break;\n              }\n            }\n          }\n          if (isInside) {\n            pointInside = true;\n            break;\n          }\n        }\n        if (!pointInside) {\n          // Any excluded points?\n          boolean isInternalBoundary = recursionList.size() > 0;\n          if (isInternalBoundary) {\n            // Handle exclusion\n            recursionList.add(newPoint);\n            recursionList.add(currentList.get(currentList.size() - 1));\n            if (recursionList.size() == pointsList.size()) {\n              // We are trying to recurse with a list the same size as the one we started with.\n              // Clearly, the polygon cannot be constructed\n              throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n            recursionList.clear();\n          }\n          currentList.add(newPoint);\n          internalEdgeList.set(currentPlanes.size(), isInternalBoundary);\n          currentPlanes.add(newBoundary);\n        } else {\n          recursionList.add(newPoint);\n        }\n      } else {\n        recursionList.add(newPoint);\n      }\n    }\n\n    boolean returnEdgeInternalBoundary = recursionList.size() > 0;\n    if (returnEdgeInternalBoundary) {\n      // The last step back to the start point had a recursion, so take care of that before we complete our work\n      recursionList.add(currentList.get(0));\n      recursionList.add(currentList.get(currentList.size() - 1));\n      if (recursionList.size() == pointsList.size()) {\n        // We are trying to recurse with a list the same size as the one we started with.\n        // Clearly, the polygon cannot be constructed\n        throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n      }\n      // Construct a sided plane based on these two points, and the previous point\n      SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), currentList.get(0), currentList.get(currentList.size() - 1));\n      // We want the other side for the recursion\n      SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n      rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n      recursionList.clear();\n    }\n    // Now, add in the current shape.\n    rval.addShape(new GeoConvexPolygon(planetModel, currentList, internalEdgeList, returnEdgeInternalBoundary));\n    //System.out.println(\"Done creating polygon\");\n    return rval;\n  }\n\n","bugFix":["f9f97ca977ad649f14b4f60a888adef2edd7a64e","e2997acf74723385bd84aff1ea0b12af4aefde77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPolygonFactory#buildPolygonShape(PlanetModel,List[GeoPoint],int,int,SidedPlane,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPolygonFactory#buildPolygonShape(PlanetModel,List[GeoPoint],int,int,SidedPlane,boolean).mjava","sourceNew":"  /** Build a GeoMembershipShape given points, starting edge, and whether starting edge is internal or not.\n   * @param pointsList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param startPointIndex is one of the points constituting the starting edge.\n   * @param endPointIndex is another of the points constituting the starting edge.\n   * @param startingEdge is the plane describing the starting edge.\n   * @param isInternalEdge is true if the specified edge is an internal one.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoPolygon buildPolygonShape(final PlanetModel planetModel, final List<GeoPoint> pointsList, final int startPointIndex, final int endPointIndex, final SidedPlane startingEdge, final boolean isInternalEdge) {\n    // Algorithm as follows:\n    // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n    // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n    // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n\n    // Current composite.  This is what we'll actually be returning.\n    final GeoCompositePolygon rval = new GeoCompositePolygon();\n\n    final List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n    final List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n    final BitSet internalEdgeList = new BitSet();\n    final List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n\n    // Initialize the current list and current planes\n    currentList.add(pointsList.get(startPointIndex));\n    currentList.add(pointsList.get(endPointIndex));\n    internalEdgeList.set(currentPlanes.size(), isInternalEdge);\n    currentPlanes.add(startingEdge);\n\n    // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n    for (int i = 0; i < pointsList.size() - 2; i++) {\n      GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n      if (isWithin(newPoint, currentPlanes)) {\n        // Construct a sided plane based on the last two points, and the previous point\n        SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), newPoint, currentList.get(currentList.size() - 1));\n        // Construct a sided plane based on the return trip\n        SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size() - 1), currentList.get(0), newPoint);\n        // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n        // be creating if we stopped making the current polygon right now.\n        boolean pointInside = false;\n        for (int j = i + 1; j < pointsList.size() - 2; j++) {\n          GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n          boolean isInside = true;\n          if (isInside && !newBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside && !returnBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside) {\n            for (SidedPlane plane : currentPlanes) {\n              if (!plane.isWithin(checkPoint)) {\n                isInside = false;\n                break;\n              }\n            }\n          }\n          if (isInside) {\n            pointInside = true;\n            break;\n          }\n        }\n        if (!pointInside) {\n          // Any excluded points?\n          boolean isInternalBoundary = recursionList.size() > 0;\n          if (isInternalBoundary) {\n            // Handle exclusion\n            recursionList.add(newPoint);\n            recursionList.add(currentList.get(currentList.size() - 1));\n            if (recursionList.size() == pointsList.size()) {\n              // We are trying to recurse with a list the same size as the one we started with.\n              // Clearly, the polygon cannot be constructed\n              throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n            recursionList.clear();\n          }\n          currentList.add(newPoint);\n          internalEdgeList.set(currentPlanes.size(), isInternalBoundary);\n          currentPlanes.add(newBoundary);\n        } else {\n          recursionList.add(newPoint);\n        }\n      } else {\n        recursionList.add(newPoint);\n      }\n    }\n\n    boolean returnEdgeInternalBoundary = recursionList.size() > 0;\n    if (returnEdgeInternalBoundary) {\n      // The last step back to the start point had a recursion, so take care of that before we complete our work\n      recursionList.add(currentList.get(0));\n      recursionList.add(currentList.get(currentList.size() - 1));\n      if (recursionList.size() == pointsList.size()) {\n        // We are trying to recurse with a list the same size as the one we started with.\n        // Clearly, the polygon cannot be constructed\n        throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n      }\n      // Construct a sided plane based on these two points, and the previous point\n      SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), currentList.get(0), currentList.get(currentList.size() - 1));\n      // We want the other side for the recursion\n      SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n      rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n      recursionList.clear();\n    }\n    // Now, add in the current shape.\n    rval.addShape(new GeoConvexPolygon(planetModel, currentList, internalEdgeList, returnEdgeInternalBoundary));\n    //System.out.println(\"Done creating polygon\");\n    return rval;\n  }\n\n","sourceOld":"  /** Build a GeoMembershipShape given points, starting edge, and whether starting edge is internal or not.\n   * @param pointsList        is a list of the GeoPoints to build an arbitrary polygon out of.\n   * @param startPointIndex is one of the points constituting the starting edge.\n   * @param endPointIndex is another of the points constituting the starting edge.\n   * @param startingEdge is the plane describing the starting edge.\n   * @param isInternalEdge is true if the specified edge is an internal one.\n   * @return a GeoMembershipShape corresponding to what was specified.\n   */\n  public static GeoPolygon buildPolygonShape(final PlanetModel planetModel, final List<GeoPoint> pointsList, final int startPointIndex, final int endPointIndex, final SidedPlane startingEdge, final boolean isInternalEdge) {\n    // Algorithm as follows:\n    // Start with sided edge.  Go through all points in some order.  For each new point, determine if the point is within all edges considered so far.\n    // If not, put it into a list of points for recursion.  If it is within, add new edge and keep going.\n    // Once we detect a point that is within, if there are points put aside for recursion, then call recursively.\n\n    // Current composite.  This is what we'll actually be returning.\n    final GeoCompositePolygon rval = new GeoCompositePolygon();\n\n    final List<GeoPoint> recursionList = new ArrayList<GeoPoint>();\n    final List<GeoPoint> currentList = new ArrayList<GeoPoint>();\n    final BitSet internalEdgeList = new BitSet();\n    final List<SidedPlane> currentPlanes = new ArrayList<SidedPlane>();\n\n    // Initialize the current list and current planes\n    currentList.add(pointsList.get(startPointIndex));\n    currentList.add(pointsList.get(endPointIndex));\n    internalEdgeList.set(currentPlanes.size(), isInternalEdge);\n    currentPlanes.add(startingEdge);\n\n    // Now, scan all remaining points, in order.  We'll use an index and just add to it.\n    for (int i = 0; i < pointsList.size() - 2; i++) {\n      GeoPoint newPoint = pointsList.get(getLegalIndex(i + endPointIndex + 1, pointsList.size()));\n      if (isWithin(newPoint, currentPlanes)) {\n        // Construct a sided plane based on the last two points, and the previous point\n        SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), newPoint, currentList.get(currentList.size() - 1));\n        // Construct a sided plane based on the return trip\n        SidedPlane returnBoundary = new SidedPlane(currentList.get(currentList.size() - 1), currentList.get(0), newPoint);\n        // Verify that none of the points beyond the new point in the list are inside the polygon we'd\n        // be creating if we stopped making the current polygon right now.\n        boolean pointInside = false;\n        for (int j = i + 1; j < pointsList.size() - 2; j++) {\n          GeoPoint checkPoint = pointsList.get(getLegalIndex(j + endPointIndex + 1, pointsList.size()));\n          boolean isInside = true;\n          if (isInside && !newBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside && !returnBoundary.isWithin(checkPoint))\n            isInside = false;\n          if (isInside) {\n            for (SidedPlane plane : currentPlanes) {\n              if (!plane.isWithin(checkPoint)) {\n                isInside = false;\n                break;\n              }\n            }\n          }\n          if (isInside) {\n            pointInside = true;\n            break;\n          }\n        }\n        if (!pointInside) {\n          // Any excluded points?\n          boolean isInternalBoundary = recursionList.size() > 0;\n          if (isInternalBoundary) {\n            // Handle exclusion\n            recursionList.add(newPoint);\n            recursionList.add(currentList.get(currentList.size() - 1));\n            if (recursionList.size() == pointsList.size()) {\n              // We are trying to recurse with a list the same size as the one we started with.\n              // Clearly, the polygon cannot be constructed\n              throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n            }\n            // We want the other side for the recursion\n            SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n            rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n            recursionList.clear();\n          }\n          currentList.add(newPoint);\n          internalEdgeList.set(currentPlanes.size(), isInternalBoundary);\n          currentPlanes.add(newBoundary);\n        } else {\n          recursionList.add(newPoint);\n        }\n      } else {\n        recursionList.add(newPoint);\n      }\n    }\n\n    boolean returnEdgeInternalBoundary = recursionList.size() > 0;\n    if (returnEdgeInternalBoundary) {\n      // The last step back to the start point had a recursion, so take care of that before we complete our work\n      recursionList.add(currentList.get(0));\n      recursionList.add(currentList.get(currentList.size() - 1));\n      if (recursionList.size() == pointsList.size()) {\n        // We are trying to recurse with a list the same size as the one we started with.\n        // Clearly, the polygon cannot be constructed\n        throw new IllegalArgumentException(\"Polygon is illegal; cannot be decomposed into convex parts\");\n      }\n      // Construct a sided plane based on these two points, and the previous point\n      SidedPlane newBoundary = new SidedPlane(currentList.get(currentList.size() - 2), currentList.get(0), currentList.get(currentList.size() - 1));\n      // We want the other side for the recursion\n      SidedPlane otherSideNewBoundary = new SidedPlane(newBoundary);\n      rval.addShape(buildPolygonShape(planetModel, recursionList, recursionList.size() - 2, recursionList.size() - 1, otherSideNewBoundary, true));\n      recursionList.clear();\n    }\n    // Now, add in the current shape.\n    rval.addShape(new GeoConvexPolygon(planetModel, currentList, internalEdgeList, returnEdgeInternalBoundary));\n    //System.out.println(\"Done creating polygon\");\n    return rval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71849bd31d150133a9a1027bf1607967b406c57":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["a71849bd31d150133a9a1027bf1607967b406c57"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a71849bd31d150133a9a1027bf1607967b406c57":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a71849bd31d150133a9a1027bf1607967b406c57"],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}