{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"/dev/null","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7811b56f2d9e37eb839450d346535c87f1f504c2","date":1502459873,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    try {\n      c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'ip_1':'<30%'}\"));\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n\n    }\n\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    try {\n      c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'ip_1':'<30%'}\"));\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n\n    }\n\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = Clause.create(\"{replica:'<2', node:'#ANY'}\");\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create(\"{replica:'>2', node:'#ANY'}\");\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create(\"{replica:0, nodeRole:'!overseer'}\");\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'<12.7'}\");\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'>12.7'}\");\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create(\"{replica:0, 'metrics:x:y:z':'>12.7'}\");\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    try {\n      c = Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n\n    }\n\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    try {\n      c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'ip_1':'<30%'}\"));\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    try {\n      c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'ip_1':'<30%'}\"));\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n\n    }\n\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = Clause.create(\"{replica:'<2', node:'#ANY'}\");\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create(\"{replica:'>2', node:'#ANY'}\");\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create(\"{replica:0, nodeRole:'!overseer'}\");\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'<12.7'}\");\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'>12.7'}\");\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create(\"{replica:0, 'metrics:x:y:z':'>12.7'}\");\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    try {\n      c = Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = Clause.create(\"{replica:'<2', node:'#ANY'}\");\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create(\"{replica:'>2', node:'#ANY'}\");\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create(\"{replica:0, nodeRole:'!overseer'}\");\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'<12.7'}\");\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'>12.7'}\");\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create(\"{replica:0, 'metrics:x:y:z':'>12.7'}\");\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    try {\n      c = Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n\n    }\n\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    try {\n      c = Clause.create((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'ip_1':'<30%'}\"));\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = Clause.create(\"{replica:'<2', node:'#ANY'}\");\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create(\"{replica:'>2', node:'#ANY'}\");\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create(\"{replica:0, nodeRole:'!overseer'}\");\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'<12.7'}\");\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'>12.7'}\");\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create(\"{replica:0, 'metrics:x:y:z':'>12.7'}\");\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    try {\n      c = Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n\n    }\n\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'<2', node:'#ANY'}\"));\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:'>2', node:'#ANY'}\"));\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, nodeRole:'!overseer'}\"));\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'<12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, sysLoadAvg:'>12.7'}\"));\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = new Clause((Map<String, Object>) Utils.fromJSONString(\"{replica:0, 'metrics:x:y:z':'>12.7'}\"));\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":"  public void testOperands() {\n    Clause c = Clause.create(\"{replica:'<2', node:'#ANY'}\");\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create(\"{replica:'>2', node:'#ANY'}\");\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create(\"{replica:0, nodeRole:'!overseer'}\");\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'<12.7'}\");\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'>12.7'}\");\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create(\"{replica:0, 'metrics:x:y:z':'>12.7'}\");\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create(\"{replica: '<3', sysprop.zone : [east, west]}\");\n    assertTrue(c.tag.isPass(\"east\"));\n    assertTrue(c.tag.isPass(\"west\"));\n    assertFalse(c.tag.isPass(\"south\"));\n\n  }\n\n","sourceOld":"  public void testOperands() {\n    Clause c = Clause.create(\"{replica:'<2', node:'#ANY'}\");\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create(\"{replica:'>2', node:'#ANY'}\");\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create(\"{replica:0, nodeRole:'!overseer'}\");\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'<12.7'}\");\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'>12.7'}\");\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create(\"{replica:0, 'metrics:x:y:z':'>12.7'}\");\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    try {\n      c = Clause.create(\"{replica:0, 'ip_1':'<30%'}\");\n      fail(\"Expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\"'%' is not allowed for variable :  'ip_1'\"));\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOperands().mjava","sourceNew":null,"sourceOld":"  public void testOperands() {\n    Clause c = Clause.create(\"{replica:'<2', node:'#ANY'}\");\n    assertFalse(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertTrue(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\"<2.0\\\"}\", c.replica.toString());\n\n    c = Clause.create(\"{replica:'>2', node:'#ANY'}\");\n    assertTrue(c.replica.isPass(3));\n    assertFalse(c.replica.isPass(2));\n    assertFalse(c.replica.isPass(1));\n    assertEquals(\"{\\\"replica\\\":\\\">2.0\\\"}\", c.replica.toString());\n\n\n    c = Clause.create(\"{replica:0, nodeRole:'!overseer'}\");\n    assertTrue(c.tag.isPass(\"OVERSEER\"));\n    assertFalse(c.tag.isPass(\"overseer\"));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'<12.7'}\");\n    assertTrue(c.tag.isPass(\"12.6\"));\n    assertTrue(c.tag.isPass(12.6d));\n    assertFalse(c.tag.isPass(\"12.9\"));\n    assertFalse(c.tag.isPass(12.9d));\n\n    c = Clause.create(\"{replica:0, sysLoadAvg:'>12.7'}\");\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create(\"{replica:0, 'metrics:x:y:z':'>12.7'}\");\n    assertTrue(c.tag.val instanceof String);\n    assertTrue(c.tag.isPass(\"12.8\"));\n    assertTrue(c.tag.isPass(12.8d));\n    assertFalse(c.tag.isPass(\"12.6\"));\n    assertFalse(c.tag.isPass(12.6d));\n\n    c = Clause.create(\"{replica: '<3', sysprop.zone : [east, west]}\");\n    assertTrue(c.tag.isPass(\"east\"));\n    assertTrue(c.tag.isPass(\"west\"));\n    assertFalse(c.tag.isPass(\"south\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","7811b56f2d9e37eb839450d346535c87f1f504c2"],"3f504512a03d978990cbff30db0522b354e846db":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"78231225260fb5b3bf9920f203d71477d5501c65":["9837f40c922407d857991971de6def18eda0857b"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["560c18d71dad43d675158783c3840f8c80d6d39c","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"7811b56f2d9e37eb839450d346535c87f1f504c2":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9837f40c922407d857991971de6def18eda0857b":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["560c18d71dad43d675158783c3840f8c80d6d39c","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["7811b56f2d9e37eb839450d346535c87f1f504c2"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["3f504512a03d978990cbff30db0522b354e846db"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"7811b56f2d9e37eb839450d346535c87f1f504c2":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"9837f40c922407d857991971de6def18eda0857b":["78231225260fb5b3bf9920f203d71477d5501c65","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"560c18d71dad43d675158783c3840f8c80d6d39c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}