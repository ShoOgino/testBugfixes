{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerByName().mjava","commits":[{"id":"2c24804758d67429e3055070a9fe970d4f159954","date":1565508925,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerByName().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnalyzerByName() throws Exception {\n\n    String addFieldTypeAnalyzer = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextField',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'charFilters' : [{\\n\" +\n        \"                'name':'patternReplace',\\n\" +\n        \"                'replacement':'$1$1',\\n\" +\n        \"                'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"            }],\\n\" +\n        \"        'tokenizer' : { 'name':'whitespace' },\\n\" +\n        \"        'filters' : [{ 'name':'asciiFolding' }]\\n\" +\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzer));\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextField\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    Map tokenizer = (Map)analyzer.get(\"tokenizer\");\n    List charFilters = (List)analyzer.get(\"charFilters\");\n    List tokenFilters = (List)analyzer.get(\"filters\");\n    assertEquals(\"whitespace\", String.valueOf(tokenizer.get(\"name\")));\n    assertEquals(\"patternReplace\", String.valueOf(((Map)charFilters.get(0)).get(\"name\")));\n    assertEquals(\"asciiFolding\", String.valueOf(((Map)tokenFilters.get(0)).get(\"name\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerByName().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAnalyzerByName().mjava","sourceNew":"  public void testAnalyzerByName() throws Exception {\n\n    String addFieldTypeAnalyzer = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextField',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'charFilters' : [{\\n\" +\n        \"                'name':'patternReplace',\\n\" +\n        \"                'replacement':'$1$1',\\n\" +\n        \"                'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"            }],\\n\" +\n        \"        'tokenizer' : { 'name':'whitespace' },\\n\" +\n        \"        'filters' : [{ 'name':'asciiFolding' }]\\n\" +\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzer));\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextField\", \"fieldTypes\");\n    assertNotNull(map);\n    @SuppressWarnings({\"rawtypes\"})\n    Map analyzer = (Map)map.get(\"analyzer\");\n    @SuppressWarnings({\"rawtypes\"})\n    Map tokenizer = (Map)analyzer.get(\"tokenizer\");\n    @SuppressWarnings({\"rawtypes\"})\n    List charFilters = (List)analyzer.get(\"charFilters\");\n    @SuppressWarnings({\"rawtypes\"})\n    List tokenFilters = (List)analyzer.get(\"filters\");\n    assertEquals(\"whitespace\", String.valueOf(tokenizer.get(\"name\")));\n    assertEquals(\"patternReplace\", String.valueOf(((Map)charFilters.get(0)).get(\"name\")));\n    assertEquals(\"asciiFolding\", String.valueOf(((Map)tokenFilters.get(0)).get(\"name\")));\n  }\n\n","sourceOld":"  public void testAnalyzerByName() throws Exception {\n\n    String addFieldTypeAnalyzer = \"{\\n\" +\n        \"'add-field-type' : {\" +\n        \"    'name' : 'myNewTextField',\\n\" +\n        \"    'class':'solr.TextField',\\n\" +\n        \"    'analyzer' : {\\n\" +\n        \"        'charFilters' : [{\\n\" +\n        \"                'name':'patternReplace',\\n\" +\n        \"                'replacement':'$1$1',\\n\" +\n        \"                'pattern':'([a-zA-Z])\\\\\\\\\\\\\\\\1+'\\n\" +\n        \"            }],\\n\" +\n        \"        'tokenizer' : { 'name':'whitespace' },\\n\" +\n        \"        'filters' : [{ 'name':'asciiFolding' }]\\n\" +\n        \"    }\\n\"+\n        \"}}\";\n\n    String response = restTestHarness.post(\"/schema\", json(addFieldTypeAnalyzer));\n    Map map = (Map) fromJSONString(response);\n    assertNull(response, map.get(\"error\"));\n\n    map = getObj(restTestHarness, \"myNewTextField\", \"fieldTypes\");\n    assertNotNull(map);\n    Map analyzer = (Map)map.get(\"analyzer\");\n    Map tokenizer = (Map)analyzer.get(\"tokenizer\");\n    List charFilters = (List)analyzer.get(\"charFilters\");\n    List tokenFilters = (List)analyzer.get(\"filters\");\n    assertEquals(\"whitespace\", String.valueOf(tokenizer.get(\"name\")));\n    assertEquals(\"patternReplace\", String.valueOf(((Map)charFilters.get(0)).get(\"name\")));\n    assertEquals(\"asciiFolding\", String.valueOf(((Map)tokenFilters.get(0)).get(\"name\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c24804758d67429e3055070a9fe970d4f159954":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["2c24804758d67429e3055070a9fe970d4f159954"]},"commit2Childs":{"2c24804758d67429e3055070a9fe970d4f159954":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c24804758d67429e3055070a9fe970d4f159954"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}