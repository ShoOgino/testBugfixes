{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","commits":[{"id":"b873e6a2036c1deda886d1fcf6ba42c995dd15a0","date":1408410832,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"/dev/null","sourceNew":"  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (AtomicReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","437e65c578cab603d9201916b0e285f3d68aff45","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (AtomicReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (AtomicReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (AtomicReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (AtomicReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (AtomicReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a87ce200bba7d88024e2f1c4012212072ce8a5ae","date":1417031281,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                CheckIndex.testDocValues(leaf.reader(), infoStream, true);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"437e65c578cab603d9201916b0e285f3d68aff45","date":1427831677,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException();\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  @Slow\n  public void testThreads3() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  @Slow\n  public void testThreads3() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  @Slow\n  public void testThreads3() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testThreads3() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads3().mjava","sourceNew":"  @Nightly\n  public void testThreads3() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  @Slow\n  public void testThreads3() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    int numSortedSets = random().nextInt(21);\n    int numBinaries = random().nextInt(21);\n    int numSortedNums = random().nextInt(21);\n    \n    int numDocs = TestUtil.nextInt(random(), 2025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      for (int j = 0; j < numSortedSets; j++) {\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n        doc.add(new SortedSetDocValuesField(\"ss\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numBinaries; j++) {\n        doc.add(new BinaryDocValuesField(\"b\" + j, new BytesRef(TestUtil.randomSimpleString(random()))));\n      }\n      \n      for (int j = 0; j < numSortedNums; j++) {\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n        doc.add(new SortedNumericDocValuesField(\"sn\" + j, TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE)));\n      }\n      writer.addDocument(doc);\n    }\n    writer.close();\n    \n    // now check with threads\n    for (int i = 0; i < 10; i++) {\n      final DirectoryReader r = DirectoryReader.open(dir);\n      final CountDownLatch startingGun = new CountDownLatch(1);\n      Thread threads[] = new Thread[TestUtil.nextInt(random(), 4, 10)];\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n              PrintStream infoStream = new PrintStream(bos, false, IOUtils.UTF_8);\n              startingGun.await();\n              for (LeafReaderContext leaf : r.leaves()) {\n                DocValuesStatus status = CheckIndex.testDocValues((SegmentReader)leaf.reader(), infoStream, true);\n                if (status.error != null) {\n                  throw status.error;\n                }\n              }\n            } catch (Throwable e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      }\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].start();\n      }\n      startingGun.countDown();\n      for (int tid = 0; tid < threads.length; tid++) {\n        threads[tid].join();\n      }\n      r.close();\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"437e65c578cab603d9201916b0e285f3d68aff45":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["437e65c578cab603d9201916b0e285f3d68aff45","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0","ad2a673349939e48652bf304cccf673c3412198f"],"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a87ce200bba7d88024e2f1c4012212072ce8a5ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a87ce200bba7d88024e2f1c4012212072ce8a5ae","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"b873e6a2036c1deda886d1fcf6ba42c995dd15a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a87ce200bba7d88024e2f1c4012212072ce8a5ae":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["437e65c578cab603d9201916b0e285f3d68aff45","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["437e65c578cab603d9201916b0e285f3d68aff45"],"ad2a673349939e48652bf304cccf673c3412198f":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"fab172655716b96f7e42376116235017a922de3a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","437e65c578cab603d9201916b0e285f3d68aff45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"437e65c578cab603d9201916b0e285f3d68aff45":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","fab172655716b96f7e42376116235017a922de3a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a87ce200bba7d88024e2f1c4012212072ce8a5ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["437e65c578cab603d9201916b0e285f3d68aff45","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fab172655716b96f7e42376116235017a922de3a"],"b873e6a2036c1deda886d1fcf6ba42c995dd15a0":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","ad2a673349939e48652bf304cccf673c3412198f"],"a87ce200bba7d88024e2f1c4012212072ce8a5ae":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}