{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon#testMultiPolygon().mjava","commits":[{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon#testMultiPolygon().mjava","pathOld":"/dev/null","sourceNew":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // contains(box): this can conservatively return false\n    assertTrue(Polygon.contains(polygons, -2, 2, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, 6, 7, 6, 7)); // in the hole\n    assertTrue(Polygon.contains(polygons, 24, 25, 24, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, 51, 52, 51, 52)); // in the ocean\n    assertFalse(Polygon.contains(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertFalse(Polygon.contains(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertFalse(Polygon.contains(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertFalse(Polygon.contains(polygons, 5, 6, 5, 6)); // overlapping the island\n\n    // crosses(box): this can conservatively return true\n    assertTrue(Polygon.crosses(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertTrue(Polygon.crosses(polygons, 49, 51, 49, 51)); // overlapping the mainland and ocean\n    assertTrue(Polygon.crosses(polygons, 9, 11, 9, 11)); // overlapping the hole and mainland\n    assertTrue(Polygon.crosses(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["82235a501cff963da53cb98d86009e33e15cf47f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86979a945891cffd49f9634fac5d16ebfe47c541","date":1459704804,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testMultiPolygon().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon#testMultiPolygon().mjava","sourceNew":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // contains(box): this can conservatively return false\n    assertTrue(Polygon.contains(polygons, -2, 2, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, 6, 7, 6, 7)); // in the hole\n    assertTrue(Polygon.contains(polygons, 24, 25, 24, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, 51, 52, 51, 52)); // in the ocean\n    assertFalse(Polygon.contains(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertFalse(Polygon.contains(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertFalse(Polygon.contains(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertFalse(Polygon.contains(polygons, 5, 6, 5, 6)); // overlapping the island\n\n    // crosses(box): this can conservatively return true\n    assertTrue(Polygon.crosses(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertTrue(Polygon.crosses(polygons, 49, 51, 49, 51)); // overlapping the mainland and ocean\n    assertTrue(Polygon.crosses(polygons, 9, 11, 9, 11)); // overlapping the hole and mainland\n    assertTrue(Polygon.crosses(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","sourceOld":"  /** Three boxes, an island inside a hole inside a shape */\n  public void testMultiPolygon() {\n    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });\n    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);\n    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );\n    Polygon polygons[] = new Polygon[] { outer, island };\n    \n    // contains(point)\n    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole\n    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean\n    \n    // contains(box): this can conservatively return false\n    assertTrue(Polygon.contains(polygons, -2, 2, -2, 2)); // on the island\n    assertFalse(Polygon.contains(polygons, 6, 7, 6, 7)); // in the hole\n    assertTrue(Polygon.contains(polygons, 24, 25, 24, 25)); // on the mainland\n    assertFalse(Polygon.contains(polygons, 51, 52, 51, 52)); // in the ocean\n    assertFalse(Polygon.contains(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertFalse(Polygon.contains(polygons, 49, 51, 49, 51)); // overlapping the mainland\n    assertFalse(Polygon.contains(polygons, 9, 11, 9, 11)); // overlapping the hole\n    assertFalse(Polygon.contains(polygons, 5, 6, 5, 6)); // overlapping the island\n\n    // crosses(box): this can conservatively return true\n    assertTrue(Polygon.crosses(polygons, -60, 60, -60, 60)); // enclosing us completely\n    assertTrue(Polygon.crosses(polygons, 49, 51, 49, 51)); // overlapping the mainland and ocean\n    assertTrue(Polygon.crosses(polygons, 9, 11, 9, 11)); // overlapping the hole and mainland\n    assertTrue(Polygon.crosses(polygons, 5, 6, 5, 6)); // overlapping the island\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86979a945891cffd49f9634fac5d16ebfe47c541":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86979a945891cffd49f9634fac5d16ebfe47c541"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["86979a945891cffd49f9634fac5d16ebfe47c541"],"86979a945891cffd49f9634fac5d16ebfe47c541":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}