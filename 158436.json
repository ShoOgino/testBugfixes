{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setMaxConnections(HttpClient,int).mjava","commits":[{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setMaxConnections(HttpClient,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set max total connections allowed. This call will only work when\n   * {@link ThreadSafeClientConnManager} is used.\n   */\n  public static void setMaxConnections(final HttpClient httpClient,\n      int max) {\n    if(httpClient.getConnectionManager() instanceof ThreadSafeClientConnManager) {\n      ThreadSafeClientConnManager mgr = (ThreadSafeClientConnManager)httpClient.getConnectionManager();\n      mgr.setMaxTotal(max);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10034129a9d9aaaeba391901f4be8f100b21eb7c","date":1360791957,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setMaxConnections(HttpClient,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setMaxConnections(HttpClient,int).mjava","sourceNew":"  /**\n   * Set max total connections allowed. This call will only work when\n   * {@link ThreadSafeClientConnManager} or\n   * {@link PoolingClientConnectionManager} is used.\n   */\n  public static void setMaxConnections(final HttpClient httpClient,\n      int max) {\n    // would have been nice if there was a common interface\n    if (httpClient.getConnectionManager() instanceof ThreadSafeClientConnManager) {\n      ThreadSafeClientConnManager mgr = (ThreadSafeClientConnManager)httpClient.getConnectionManager();\n      mgr.setMaxTotal(max);\n    } else if (httpClient.getConnectionManager() instanceof PoolingClientConnectionManager) {\n      PoolingClientConnectionManager mgr = (PoolingClientConnectionManager)httpClient.getConnectionManager();\n      mgr.setMaxTotal(max);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set max total connections allowed. This call will only work when\n   * {@link ThreadSafeClientConnManager} is used.\n   */\n  public static void setMaxConnections(final HttpClient httpClient,\n      int max) {\n    if(httpClient.getConnectionManager() instanceof ThreadSafeClientConnManager) {\n      ThreadSafeClientConnManager mgr = (ThreadSafeClientConnManager)httpClient.getConnectionManager();\n      mgr.setMaxTotal(max);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setMaxConnections(HttpClient,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setMaxConnections(HttpClient,int).mjava","sourceNew":"  /**\n   * Set max total connections allowed. This call will only work when\n   * {@link ThreadSafeClientConnManager} or\n   * {@link PoolingClientConnectionManager} is used.\n   */\n  public static void setMaxConnections(final HttpClient httpClient,\n      int max) {\n    // would have been nice if there was a common interface\n    if (httpClient.getConnectionManager() instanceof ThreadSafeClientConnManager) {\n      ThreadSafeClientConnManager mgr = (ThreadSafeClientConnManager)httpClient.getConnectionManager();\n      mgr.setMaxTotal(max);\n    } else if (httpClient.getConnectionManager() instanceof PoolingClientConnectionManager) {\n      PoolingClientConnectionManager mgr = (PoolingClientConnectionManager)httpClient.getConnectionManager();\n      mgr.setMaxTotal(max);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set max total connections allowed. This call will only work when\n   * {@link ThreadSafeClientConnManager} is used.\n   */\n  public static void setMaxConnections(final HttpClient httpClient,\n      int max) {\n    if(httpClient.getConnectionManager() instanceof ThreadSafeClientConnManager) {\n      ThreadSafeClientConnManager mgr = (ThreadSafeClientConnManager)httpClient.getConnectionManager();\n      mgr.setMaxTotal(max);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setMaxConnections(HttpClient,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Set max total connections allowed. This call will only work when\n   * {@link ThreadSafeClientConnManager} or\n   * {@link PoolingClientConnectionManager} is used.\n   */\n  public static void setMaxConnections(final HttpClient httpClient,\n      int max) {\n    // would have been nice if there was a common interface\n    if (httpClient.getConnectionManager() instanceof ThreadSafeClientConnManager) {\n      ThreadSafeClientConnManager mgr = (ThreadSafeClientConnManager)httpClient.getConnectionManager();\n      mgr.setMaxTotal(max);\n    } else if (httpClient.getConnectionManager() instanceof PoolingClientConnectionManager) {\n      PoolingClientConnectionManager mgr = (PoolingClientConnectionManager)httpClient.getConnectionManager();\n      mgr.setMaxTotal(max);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["10034129a9d9aaaeba391901f4be8f100b21eb7c"],"10034129a9d9aaaeba391901f4be8f100b21eb7c":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"3b41f996b22bd5518650f897d050088ff808ec03":["eb99886ff640d94edb43e0d36112a2b7023379ba","10034129a9d9aaaeba391901f4be8f100b21eb7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb99886ff640d94edb43e0d36112a2b7023379ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["859081acf00749f5dd462772c571d611d4a4d2db"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10034129a9d9aaaeba391901f4be8f100b21eb7c":["859081acf00749f5dd462772c571d611d4a4d2db","3b41f996b22bd5518650f897d050088ff808ec03"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["10034129a9d9aaaeba391901f4be8f100b21eb7c","3b41f996b22bd5518650f897d050088ff808ec03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}