{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n      TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n      modifier.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n    String[] startFiles = dir.listAll();\n    SegmentInfos infos = new SegmentInfos();\n    infos.read(dir);\n    new IndexFileDeleter(dir, new KeepOnlyLastCommitDeletionPolicy(), infos, null, null);\n    String[] endFiles = dir.listAll();\n\n    if (!Arrays.equals(startFiles, endFiles)) {\n      fail(\"docswriter abort() failed to delete unreferenced files:\\n  before delete:\\n    \"\n           + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n           + arrayToString(endFiles));\n    }\n\n    modifier.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n      TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n      modifier.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n      TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n      modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n      TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n      modifier.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n      TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n      modifier.close();\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n      TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n      modifier.close();\n  }\n\n","sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n      TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n      modifier.close();\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorInDocsWriterAdd().mjava","sourceNew":null,"sourceOld":"  public void testErrorInDocsWriterAdd() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (!failed) {\n            failed = true;\n            throw new IOException(\"fail in add doc\");\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.commit();\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      try {\n        modifier.addDocument(doc);\n      } catch (IOException io) {\n        break;\n      }\n    }\n\n      TestIndexWriter.assertNoUnreferencedFiles(dir, \"docsWriter.abort() failed to delete unreferenced files\");\n      modifier.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}