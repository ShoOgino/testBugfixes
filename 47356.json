{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","sourceNew":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n    \tcase BZIP2:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n    \t\tbreak;\n    \tcase GZIP:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n                break;\n    \tcase PLAIN:\n    \t\tbreak; // nothing to do\n    \tdefault:\n    \t\tassertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n    \tcase BZIP2:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n    \t\tbreak;\n    \tcase GZIP:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n                break;\n    \tcase PLAIN:\n    \t\tbreak; // nothing to do\n    \tdefault:\n    \t\tassertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","sourceNew":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n      case BZIP2:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n        break;\n      case GZIP:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n        break;\n      case PLAIN:\n        break; // nothing to do\n      default:\n        assertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n    \tcase BZIP2:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n    \t\tbreak;\n    \tcase GZIP:\n    \t\tin = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n                break;\n    \tcase PLAIN:\n    \t\tbreak; // nothing to do\n    \tdefault:\n    \t\tassertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","sourceNew":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n      case BZIP2:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n        break;\n      case GZIP:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n        break;\n      case PLAIN:\n        break; // nothing to do\n      default:\n        assertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n      case BZIP2:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n        break;\n      case GZIP:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n        break;\n      case PLAIN:\n        break; // nothing to do\n      default:\n        assertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","sourceNew":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n      case BZIP2:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n        break;\n      case GZIP:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n        break;\n      case PLAIN:\n        break; // nothing to do\n      default:\n        assertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n      case BZIP2:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n        break;\n      case GZIP:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n        break;\n      case PLAIN:\n        break; // nothing to do\n      default:\n        assertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, \"utf-8\"));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(Path,Type,String,String,String).mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#doReadTest(File,Type,String,String,String).mjava","sourceNew":"  private void doReadTest(Path file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = Files.newInputStream(file);\n    switch(fileType) {\n      case BZIP2:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n        break;\n      case GZIP:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n        break;\n      case PLAIN:\n        break; // nothing to do\n      default:\n        assertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    try (BufferedReader br = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8))) {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    }\n  }\n\n","sourceOld":"  private void doReadTest(File file, Type fileType, String expTitle,\n                          String expDate, String expBody) throws Exception {\n    InputStream in = new FileInputStream(file);\n    switch(fileType) {\n      case BZIP2:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.BZIP2, in);\n        break;\n      case GZIP:\n        in = csFactory.createCompressorInputStream(CompressorStreamFactory.GZIP, in);\n        break;\n      case PLAIN:\n        break; // nothing to do\n      default:\n        assertFalse(\"Unknown file type!\",true); //fail, should not happen\n    }\n    BufferedReader br = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));\n    try {\n      String line = br.readLine();\n      assertHeaderLine(line);\n      line = br.readLine();\n      assertNotNull(line);\n      String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n      int numExpParts = expBody == null ? 2 : 3;\n      assertEquals(numExpParts, parts.length);\n      assertEquals(expTitle, parts[0]);\n      assertEquals(expDate, parts[1]);\n      if (expBody != null) {\n        assertEquals(expBody, parts[2]);\n      }\n      assertNull(br.readLine());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}