{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","commits":[{"id":"c85fa43e6918808743daa7847ba0264373af687f","date":1395166336,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","pathOld":"/dev/null","sourceNew":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        new int[] { 1, 0, 0, 1, 1, 0, 1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","sourceNew":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        new int[] { 1, 0, 0, 1, 1, 0, 1 });\n  }\n\n","sourceOld":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        new int[] { 1, 0, 0, 1, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","sourceNew":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        new int[] { 1, 0, 0, 1, 1, 0, 1 });\n    a.close();\n  }\n\n","sourceOld":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        new int[] { 1, 0, 0, 1, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","sourceNew":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        new int[] { 1, 0, 0, 1, 1, 0, 1 });\n    a.close();\n  }\n\n","sourceOld":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        new int[] { 1, 0, 0, 1, 1, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c082d863b0816142731432e84d61934cfc50e9d8","date":1482445444,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","sourceNew":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        null,\n        new int[] { 1, 0, 0, 1, 1, 0, 1 },\n        null,\n        false);\n    a.close();\n  }\n\n","sourceOld":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        new int[] { 1, 0, 0, 1, 1, 0, 1 });\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testLotsOfConcatenating().mjava","sourceNew":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        null,\n        new int[] { 1, 0, 0, 1, 1, 0, 1 },\n        null,\n        false);\n    a.close();\n  }\n\n","sourceOld":"  /** concat numbers + words + all */\n  public void testLotsOfConcatenating() throws Exception {\n    final int flags = GENERATE_WORD_PARTS | GENERATE_NUMBER_PARTS | CATENATE_WORDS | CATENATE_NUMBERS | CATENATE_ALL | SPLIT_ON_CASE_CHANGE | SPLIT_ON_NUMERICS | STEM_ENGLISH_POSSESSIVE;    \n\n    /* analyzer that uses whitespace + wdf */\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, null));\n      }\n    };\n    \n    assertAnalyzesTo(a, \"abc-def-123-456\", \n        new String[] { \"abc\", \"abcdef\", \"abcdef123456\", \"def\", \"123\", \"123456\", \"456\" }, \n        new int[] { 0, 0, 0, 4, 8, 8, 12 }, \n        new int[] { 3, 7, 15, 7, 11, 15, 15 },\n        new int[] { 1, 0, 0, 1, 1, 0, 1 });\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"c082d863b0816142731432e84d61934cfc50e9d8":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["c85fa43e6918808743daa7847ba0264373af687f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"c85fa43e6918808743daa7847ba0264373af687f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c082d863b0816142731432e84d61934cfc50e9d8"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a56958d7f71a28824f20031ffbb2e13502a0274e","c082d863b0816142731432e84d61934cfc50e9d8"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c082d863b0816142731432e84d61934cfc50e9d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c85fa43e6918808743daa7847ba0264373af687f"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c082d863b0816142731432e84d61934cfc50e9d8","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"c85fa43e6918808743daa7847ba0264373af687f":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}