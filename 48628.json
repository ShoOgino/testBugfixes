{"path":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/DistanceUtilsTest#testParse().mjava","commits":[{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/DistanceUtilsTest#testParse().mjava","pathOld":"/dev/null","sourceNew":"  public void testParse() throws Exception {\n    String[] parse;\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2\", 2);\n    assertEquals(2, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2,-92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n    parse = DistanceUtils.parsePoint(null, \"    89.0         ,   73.2  ,              -92.3   \", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    String[] foo = DistanceUtils.parsePoint(parse, \"89.0         ,   73.2 ,              -92.3\", 3);\n    //should be same piece of memory\n    assertTrue(foo == parse);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n    //array should get automatically resized\n    parse = DistanceUtils.parsePoint(new String[1], \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    try {\n      parse = org.apache.lucene.spatial.tier.DistanceUtils.parsePoint(null, \"89.0         ,   \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n    try {\n      parse = DistanceUtils.parsePoint(null, \" , 89.0          \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"\", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n\n    double[] dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, dbls.length);\n    assertEquals(89.0, dbls[0]);\n    assertEquals(73.2, dbls[1]);\n    assertEquals(-92.3, dbls[2]);\n\n    try {\n      dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   foo ,              -92.3\", 3);\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n    }\n\n    dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   73.2    \");\n    assertEquals(2, dbls.length);\n    assertEquals(89.0, dbls[0]);\n    assertEquals(73.2, dbls[1]);\n\n    //test some bad lat/long pairs\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"189.0         ,   73.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   273.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"459be89020f9023e3b60066066a892c7edb5de58","date":1279657074,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/DistanceUtilsTest#testParse().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/DistanceUtilsTest#testParse().mjava","sourceNew":"  public void testParse() throws Exception {\n    String[] parse;\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2\", 2);\n    assertEquals(2, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2,-92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n    parse = DistanceUtils.parsePoint(null, \"    89.0         ,   73.2  ,              -92.3   \", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    String[] foo = DistanceUtils.parsePoint(parse, \"89.0         ,   73.2 ,              -92.3\", 3);\n    //should be same piece of memory\n    assertTrue(foo == parse);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n    //array should get automatically resized\n    parse = DistanceUtils.parsePoint(new String[1], \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"89.0         ,   \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n    try {\n      parse = DistanceUtils.parsePoint(null, \" , 89.0          \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"\", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n\n    double[] dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, dbls.length);\n    assertEquals(89.0, dbls[0]);\n    assertEquals(73.2, dbls[1]);\n    assertEquals(-92.3, dbls[2]);\n\n    try {\n      dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   foo ,              -92.3\", 3);\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n    }\n\n    dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   73.2    \");\n    assertEquals(2, dbls.length);\n    assertEquals(89.0, dbls[0]);\n    assertEquals(73.2, dbls[1]);\n\n    //test some bad lat/long pairs\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"189.0         ,   73.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   273.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n  }\n\n","sourceOld":"  public void testParse() throws Exception {\n    String[] parse;\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2\", 2);\n    assertEquals(2, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2,-92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n    parse = DistanceUtils.parsePoint(null, \"    89.0         ,   73.2  ,              -92.3   \", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    String[] foo = DistanceUtils.parsePoint(parse, \"89.0         ,   73.2 ,              -92.3\", 3);\n    //should be same piece of memory\n    assertTrue(foo == parse);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n    //array should get automatically resized\n    parse = DistanceUtils.parsePoint(new String[1], \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    try {\n      parse = org.apache.lucene.spatial.tier.DistanceUtils.parsePoint(null, \"89.0         ,   \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n    try {\n      parse = DistanceUtils.parsePoint(null, \" , 89.0          \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"\", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n\n    double[] dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, dbls.length);\n    assertEquals(89.0, dbls[0]);\n    assertEquals(73.2, dbls[1]);\n    assertEquals(-92.3, dbls[2]);\n\n    try {\n      dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   foo ,              -92.3\", 3);\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n    }\n\n    dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   73.2    \");\n    assertEquals(2, dbls.length);\n    assertEquals(89.0, dbls[0]);\n    assertEquals(73.2, dbls[1]);\n\n    //test some bad lat/long pairs\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"189.0         ,   73.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   273.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/DistanceUtilsTest#testParse().mjava","pathOld":"/dev/null","sourceNew":"  public void testParse() throws Exception {\n    String[] parse;\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2\", 2);\n    assertEquals(2, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2,-92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n    parse = DistanceUtils.parsePoint(null, \"    89.0         ,   73.2  ,              -92.3   \", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    String[] foo = DistanceUtils.parsePoint(parse, \"89.0         ,   73.2 ,              -92.3\", 3);\n    //should be same piece of memory\n    assertTrue(foo == parse);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n    //array should get automatically resized\n    parse = DistanceUtils.parsePoint(new String[1], \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"89.0         ,   \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n    try {\n      parse = DistanceUtils.parsePoint(null, \" , 89.0          \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"\", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n\n    double[] dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, dbls.length);\n    assertEquals(89.0, dbls[0]);\n    assertEquals(73.2, dbls[1]);\n    assertEquals(-92.3, dbls[2]);\n\n    try {\n      dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   foo ,              -92.3\", 3);\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n    }\n\n    dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   73.2    \");\n    assertEquals(2, dbls.length);\n    assertEquals(89.0, dbls[0]);\n    assertEquals(73.2, dbls[1]);\n\n    //test some bad lat/long pairs\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"189.0         ,   73.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   273.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/DistanceUtilsTest#testParse().mjava","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/DistanceUtilsTest#testParse().mjava","sourceNew":"  public void testParse() throws Exception {\n    String[] parse;\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2\", 2);\n    assertEquals(2, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2,-92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n    parse = DistanceUtils.parsePoint(null, \"    89.0         ,   73.2  ,              -92.3   \", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    String[] foo = DistanceUtils.parsePoint(parse, \"89.0         ,   73.2 ,              -92.3\", 3);\n    //should be same piece of memory\n    assertTrue(foo == parse);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n    //array should get automatically resized\n    parse = DistanceUtils.parsePoint(new String[1], \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"89.0         ,   \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n    try {\n      parse = DistanceUtils.parsePoint(null, \" , 89.0          \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"\", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n\n    double[] dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, dbls.length);\n    assertEquals(89.0, dbls[0], 0);\n    assertEquals(73.2, dbls[1], 0.1);\n    assertEquals(-92.3, dbls[2], 0.1);\n\n    try {\n      dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   foo ,              -92.3\", 3);\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n    }\n\n    dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   73.2    \");\n    assertEquals(2, dbls.length);\n    assertEquals(89.0, dbls[0], 0.1);\n    assertEquals(73.2, dbls[1], 0.1);\n\n    //test some bad lat/long pairs\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"189.0         ,   73.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   273.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n  }\n\n","sourceOld":"  public void testParse() throws Exception {\n    String[] parse;\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2\", 2);\n    assertEquals(2, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2,-92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n    parse = DistanceUtils.parsePoint(null, \"    89.0         ,   73.2  ,              -92.3   \", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    String[] foo = DistanceUtils.parsePoint(parse, \"89.0         ,   73.2 ,              -92.3\", 3);\n    //should be same piece of memory\n    assertTrue(foo == parse);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n    //array should get automatically resized\n    parse = DistanceUtils.parsePoint(new String[1], \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"89.0         ,   \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n    try {\n      parse = DistanceUtils.parsePoint(null, \" , 89.0          \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"\", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n\n    double[] dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, dbls.length);\n    assertEquals(89.0, dbls[0]);\n    assertEquals(73.2, dbls[1]);\n    assertEquals(-92.3, dbls[2]);\n\n    try {\n      dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   foo ,              -92.3\", 3);\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n    }\n\n    dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   73.2    \");\n    assertEquals(2, dbls.length);\n    assertEquals(89.0, dbls[0]);\n    assertEquals(73.2, dbls[1]);\n\n    //test some bad lat/long pairs\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"189.0         ,   73.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   273.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/DistanceUtilsTest#testParse().mjava","sourceNew":null,"sourceOld":"  public void testParse() throws Exception {\n    String[] parse;\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2\", 2);\n    assertEquals(2, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2,-92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n    parse = DistanceUtils.parsePoint(null, \"    89.0         ,   73.2  ,              -92.3   \", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    String[] foo = DistanceUtils.parsePoint(parse, \"89.0         ,   73.2 ,              -92.3\", 3);\n    //should be same piece of memory\n    assertTrue(foo == parse);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n    //array should get automatically resized\n    parse = DistanceUtils.parsePoint(new String[1], \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"89.0         ,   \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n    try {\n      parse = DistanceUtils.parsePoint(null, \" , 89.0          \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"\", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n\n    double[] dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, dbls.length);\n    assertEquals(89.0, dbls[0], 0);\n    assertEquals(73.2, dbls[1], 0.1);\n    assertEquals(-92.3, dbls[2], 0.1);\n\n    try {\n      dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   foo ,              -92.3\", 3);\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n    }\n\n    dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   73.2    \");\n    assertEquals(2, dbls.length);\n    assertEquals(89.0, dbls[0], 0.1);\n    assertEquals(73.2, dbls[1], 0.1);\n\n    //test some bad lat/long pairs\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"189.0         ,   73.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   273.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/DistanceUtilsTest#testParse().mjava","sourceNew":null,"sourceOld":"  public void testParse() throws Exception {\n    String[] parse;\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2\", 2);\n    assertEquals(2, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n\n    parse = DistanceUtils.parsePoint(null, \"89.0,73.2,-92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n    parse = DistanceUtils.parsePoint(null, \"    89.0         ,   73.2  ,              -92.3   \", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    String[] foo = DistanceUtils.parsePoint(parse, \"89.0         ,   73.2 ,              -92.3\", 3);\n    //should be same piece of memory\n    assertTrue(foo == parse);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n    //array should get automatically resized\n    parse = DistanceUtils.parsePoint(new String[1], \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, parse.length);\n    assertEquals(\"89.0\", parse[0]);\n    assertEquals(\"73.2\", parse[1]);\n    assertEquals(\"-92.3\", parse[2]);\n\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"89.0         ,   \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n    try {\n      parse = DistanceUtils.parsePoint(null, \" , 89.0          \", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n    try {\n      parse = DistanceUtils.parsePoint(null, \"\", 3);\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n    }\n\n\n    double[] dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   73.2 ,              -92.3\", 3);\n    assertEquals(3, dbls.length);\n    assertEquals(89.0, dbls[0], 0);\n    assertEquals(73.2, dbls[1], 0.1);\n    assertEquals(-92.3, dbls[2], 0.1);\n\n    try {\n      dbls = DistanceUtils.parsePointDouble(null, \"89.0         ,   foo ,              -92.3\", 3);\n      assertTrue(false);\n    } catch (NumberFormatException e) {\n    }\n\n    dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   73.2    \");\n    assertEquals(2, dbls.length);\n    assertEquals(89.0, dbls[0], 0.1);\n    assertEquals(73.2, dbls[1], 0.1);\n\n    //test some bad lat/long pairs\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"189.0         ,   73.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n    try {\n      dbls = DistanceUtils.parseLatitudeLongitude(null, \"89.0         ,   273.2    \");\n      assertTrue(false);\n    } catch (InvalidGeoException e) {\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["459be89020f9023e3b60066066a892c7edb5de58"],"459be89020f9023e3b60066066a892c7edb5de58":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","459be89020f9023e3b60066066a892c7edb5de58"],"e47768b261c28e7e6032060e8331475c81057953":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["459be89020f9023e3b60066066a892c7edb5de58"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"459be89020f9023e3b60066066a892c7edb5de58":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}