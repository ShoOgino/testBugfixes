{"path":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (term.startsWith(prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((float)((similarity - minSimilarity) * scale_factor));\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4ef80fac452dc9fe7ee68e418183ebbeb8d4001c","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df9ba72278ee433b2352986cbf97ab7161006953","date":1286047596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (term.startsWith(prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","sourceOld":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (term.startsWith(prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((float)((similarity - minSimilarity) * scale_factor));\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (term.startsWith(prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","sourceOld":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (term.startsWith(prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((float)((similarity - minSimilarity) * scale_factor));\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","sourceOld":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (term.startsWith(prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#accept(BytesRef).mjava","sourceNew":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","sourceOld":"    /**\n     * The termCompare method in FuzzyTermEnum uses Levenshtein distance to \n     * calculate the distance between the given term and the comparing term. \n     */\n    @Override\n    protected final AcceptStatus accept(BytesRef term) {\n      if (StringHelper.startsWith(term, prefixBytesRef)) {\n        UnicodeUtil.UTF8toUTF32(term, utf32);\n        final float similarity = similarity(utf32.ints, realPrefixLength, utf32.length - realPrefixLength);\n        if (similarity > minSimilarity) {\n          boostAtt.setBoost((similarity - minSimilarity) * scale_factor);\n          return AcceptStatus.YES;\n        } else return AcceptStatus.NO;\n      } else {\n        return AcceptStatus.END;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["df9ba72278ee433b2352986cbf97ab7161006953"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df9ba72278ee433b2352986cbf97ab7161006953":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","df9ba72278ee433b2352986cbf97ab7161006953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["df9ba72278ee433b2352986cbf97ab7161006953","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"df9ba72278ee433b2352986cbf97ab7161006953":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}