{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        // nocommit\n//        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n//        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = newDirectory(random);\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = newDirectory(random);\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        // nocommit\n//        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n//        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      modifier.setInfoStream(VERBOSE ? System.out : null);\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testRAMDeletes().mjava","sourceNew":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // test when delete terms only apply to ram segments\n  public void testRAMDeletes() throws IOException {\n    for(int t=0;t<2;t++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: t=\" + t);\n      }\n      Directory dir = newDirectory();\n      IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(4)\n          .setMaxBufferedDeleteTerms(4));\n      int id = 0;\n      int value = 100;\n\n      addDoc(modifier, ++id, value);\n      if (0 == t)\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n      addDoc(modifier, ++id, value);\n      if (0 == t) {\n        modifier.deleteDocuments(new Term(\"value\", String.valueOf(value)));\n        assertEquals(2, modifier.getNumBufferedDeleteTerms());\n        assertEquals(1, modifier.getBufferedDeleteTermsSize());\n      }\n      else\n        modifier.deleteDocuments(new TermQuery(new Term(\"value\", String.valueOf(value))));\n\n      addDoc(modifier, ++id, value);\n      assertEquals(0, modifier.getSegmentCount());\n      modifier.commit();\n\n      IndexReader reader = IndexReader.open(dir);\n      assertEquals(1, reader.numDocs());\n\n      int hitCount = getHitCount(dir, new Term(\"id\", String.valueOf(id)));\n      assertEquals(1, hitCount);\n      reader.close();\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["c7f8e68717c68517265937c911e1ce9f25750247"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["06584e6e98d592b34e1329b384182f368d2025e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"06584e6e98d592b34e1329b384182f368d2025e8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["06584e6e98d592b34e1329b384182f368d2025e8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["69a6d2d525aeab53c867ed26934185e5bb627d0e","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["06584e6e98d592b34e1329b384182f368d2025e8","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["c7f8e68717c68517265937c911e1ce9f25750247"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"06584e6e98d592b34e1329b384182f368d2025e8":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"c7f8e68717c68517265937c911e1ce9f25750247":["6c18273ea5b3974d2f30117f46f1ae416c28f727","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["06584e6e98d592b34e1329b384182f368d2025e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}