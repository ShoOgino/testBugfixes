{"path":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","commits":[{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","pathOld":"/dev/null","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44b2b56419751487c35e49f2500c27763771a491","date":1359394881,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    readerTermsIndexDivisor = IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR;\n    mergedSegmentWarmer = null;\n    termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL; // TODO: this should be private to the codec, not settable here\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new ThreadAffinityDocumentsWriterThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#LiveIndexWriterConfig(Analyzer,Version).mjava","sourceNew":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer) {\n    this.analyzer = analyzer;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","sourceOld":"  // used by IndexWriterConfig\n  LiveIndexWriterConfig(Analyzer analyzer, Version matchVersion) {\n    this.analyzer = analyzer;\n    this.matchVersion = matchVersion;\n    ramBufferSizeMB = IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB;\n    maxBufferedDocs = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS;\n    maxBufferedDeleteTerms = IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS;\n    mergedSegmentWarmer = null;\n    delPolicy = new KeepOnlyLastCommitDeletionPolicy();\n    commit = null;\n    useCompoundFile = IndexWriterConfig.DEFAULT_USE_COMPOUND_FILE_SYSTEM;\n    openMode = OpenMode.CREATE_OR_APPEND;\n    similarity = IndexSearcher.getDefaultSimilarity();\n    mergeScheduler = new ConcurrentMergeScheduler();\n    writeLockTimeout = IndexWriterConfig.WRITE_LOCK_TIMEOUT;\n    indexingChain = DocumentsWriterPerThread.defaultIndexingChain;\n    codec = Codec.getDefault();\n    if (codec == null) {\n      throw new NullPointerException();\n    }\n    infoStream = InfoStream.getDefault();\n    mergePolicy = new TieredMergePolicy();\n    flushPolicy = new FlushByRamOrCountsPolicy();\n    readerPooling = IndexWriterConfig.DEFAULT_READER_POOLING;\n    indexerThreadPool = new DocumentsWriterPerThreadPool(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);\n    perThreadHardLimitMB = IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7f4e54ed7cef46f86888b5fb547594f62160395c","44b2b56419751487c35e49f2500c27763771a491"],"44b2b56419751487c35e49f2500c27763771a491":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a45bec74b98f6fc05f52770cfb425739e6563960":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"44b2b56419751487c35e49f2500c27763771a491":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a45bec74b98f6fc05f52770cfb425739e6563960":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["d4d69c535930b5cce125cff868d40f6373dc27d4","44b2b56419751487c35e49f2500c27763771a491"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a45bec74b98f6fc05f52770cfb425739e6563960"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}