{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean).mjava","commits":[{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean closeAnalyzer) throws IOException {\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.r = new Random(r.nextLong());\n    w = mockIndexWriter(dir, c, r);\n    flushAt = TestUtil.nextInt(r, 10, 1000);\n    if (closeAnalyzer) {\n      analyzer = w.getAnalyzer();\n    } else {\n      analyzer = null;\n    }\n    codec = w.getConfig().getCodec();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW dir=\" + dir + \" config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + codec.getName());\n    }\n\n    // Make sure we sometimes test indices that don't get\n    // any forced merges:\n    doRandomForceMerge = !(c.getMergePolicy() instanceof NoMergePolicy) && r.nextBoolean();\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean closeAnalyzer) throws IOException {\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.r = new Random(r.nextLong());\n    w = mockIndexWriter(dir, c, r);\n    flushAt = TestUtil.nextInt(r, 10, 1000);\n    if (closeAnalyzer) {\n      analyzer = w.getAnalyzer();\n    } else {\n      analyzer = null;\n    }\n    codec = w.getConfig().getCodec();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW dir=\" + dir + \" config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + codec.getName());\n    }\n\n    // Make sure we sometimes test indices that don't get\n    // any forced merges:\n    doRandomForceMerge = !(c.getMergePolicy() instanceof NoMergePolicy) && r.nextBoolean();\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dcfd27b9fe602b19e032acdb429aab9fd78c6ef","date":1429503225,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean).mjava","sourceNew":"  private RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean closeAnalyzer) throws IOException {\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.r = new Random(r.nextLong());\n    w = mockIndexWriter(dir, c, r);\n    flushAt = TestUtil.nextInt(r, 10, 1000);\n    if (closeAnalyzer) {\n      analyzer = w.getAnalyzer();\n    } else {\n      analyzer = null;\n    }\n    codec = w.getConfig().getCodec();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW dir=\" + dir);\n    }\n\n    // Make sure we sometimes test indices that don't get\n    // any forced merges:\n    doRandomForceMerge = !(c.getMergePolicy() instanceof NoMergePolicy) && r.nextBoolean();\n  } \n\n","sourceOld":"  private RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean closeAnalyzer) throws IOException {\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.r = new Random(r.nextLong());\n    w = mockIndexWriter(dir, c, r);\n    flushAt = TestUtil.nextInt(r, 10, 1000);\n    if (closeAnalyzer) {\n      analyzer = w.getAnalyzer();\n    } else {\n      analyzer = null;\n    }\n    codec = w.getConfig().getCodec();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW dir=\" + dir + \" config=\" + w.getConfig());\n      System.out.println(\"codec default=\" + codec.getName());\n    }\n\n    // Make sure we sometimes test indices that don't get\n    // any forced merges:\n    doRandomForceMerge = !(c.getMergePolicy() instanceof NoMergePolicy) && r.nextBoolean();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c331bf2c0db325b2153017708714a1573f2ce35","date":1447166158,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean).mjava","sourceNew":"  private RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean closeAnalyzer) throws IOException {\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.r = new Random(r.nextLong());\n    w = mockIndexWriter(dir, c, r);\n    flushAt = TestUtil.nextInt(r, 10, 1000);\n    if (closeAnalyzer) {\n      analyzer = w.getAnalyzer();\n    } else {\n      analyzer = null;\n    }\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW dir=\" + dir);\n    }\n\n    // Make sure we sometimes test indices that don't get\n    // any forced merges:\n    doRandomForceMerge = !(c.getMergePolicy() instanceof NoMergePolicy) && r.nextBoolean();\n  } \n\n","sourceOld":"  private RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean closeAnalyzer) throws IOException {\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.r = new Random(r.nextLong());\n    w = mockIndexWriter(dir, c, r);\n    flushAt = TestUtil.nextInt(r, 10, 1000);\n    if (closeAnalyzer) {\n      analyzer = w.getAnalyzer();\n    } else {\n      analyzer = null;\n    }\n    codec = w.getConfig().getCodec();\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW dir=\" + dir);\n    }\n\n    // Make sure we sometimes test indices that don't get\n    // any forced merges:\n    doRandomForceMerge = !(c.getMergePolicy() instanceof NoMergePolicy) && r.nextBoolean();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#RandomIndexWriter(Random,Directory,IndexWriterConfig,boolean).mjava","sourceNew":"  /** create a RandomIndexWriter with the provided config */\n  public RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean useSoftDeletes) throws IOException {\n    this(r, dir, c, false, useSoftDeletes);\n  }\n\n","sourceOld":"  private RandomIndexWriter(Random r, Directory dir, IndexWriterConfig c, boolean closeAnalyzer) throws IOException {\n    // TODO: this should be solved in a different way; Random should not be shared (!).\n    this.r = new Random(r.nextLong());\n    w = mockIndexWriter(dir, c, r);\n    flushAt = TestUtil.nextInt(r, 10, 1000);\n    if (closeAnalyzer) {\n      analyzer = w.getAnalyzer();\n    } else {\n      analyzer = null;\n    }\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"RIW dir=\" + dir);\n    }\n\n    // Make sure we sometimes test indices that don't get\n    // any forced merges:\n    doRandomForceMerge = !(c.getMergePolicy() instanceof NoMergePolicy) && r.nextBoolean();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a56958d7f71a28824f20031ffbb2e13502a0274e"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["1c331bf2c0db325b2153017708714a1573f2ce35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5dcfd27b9fe602b19e032acdb429aab9fd78c6ef":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"1c331bf2c0db325b2153017708714a1573f2ce35":["5dcfd27b9fe602b19e032acdb429aab9fd78c6ef"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ee0394b8176abd7c90a4be8c05465be1879db79"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5dcfd27b9fe602b19e032acdb429aab9fd78c6ef":["1c331bf2c0db325b2153017708714a1573f2ce35"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5dcfd27b9fe602b19e032acdb429aab9fd78c6ef"],"1c331bf2c0db325b2153017708714a1573f2ce35":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}