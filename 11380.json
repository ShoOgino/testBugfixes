{"path":"src/java/org/apache/solr/analysis/WordDelimiterIterator#isBreak(int,int).mjava","commits":[{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterIterator#isBreak(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines whether the transition from lastType to type indicates a break\n   *\n   * @param lastType Last subword type\n   * @param type Current subword type\n   * @return {@code true} if the transition indicates a break, {@code false} otherwise\n   */\n  private boolean isBreak(int lastType, int type) {\n    if ((type & lastType) != 0) {\n      return false;\n    }\n    \n    if (!splitOnCaseChange && isAlpha(lastType) && isAlpha(type)) {\n      // ALPHA->ALPHA: always ignore if case isn't considered.\n      return false;\n    } else if (isUpper(lastType) && isAlpha(type)) {\n      // UPPER->letter: Don't split\n      return false;\n    } else if (!splitOnNumerics && ((isAlpha(lastType) && isDigit(type)) || (isDigit(lastType) && isAlpha(type)))) {\n      // ALPHA->NUMERIC, NUMERIC->ALPHA :Don't split\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterIterator#isBreak(int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterIterator#isBreak(int,int).mjava","sourceNew":"  /**\n   * Determines whether the transition from lastType to type indicates a break\n   *\n   * @param lastType Last subword type\n   * @param type Current subword type\n   * @return {@code true} if the transition indicates a break, {@code false} otherwise\n   */\n  private boolean isBreak(int lastType, int type) {\n    if ((type & lastType) != 0) {\n      return false;\n    }\n    \n    if (!splitOnCaseChange && isAlpha(lastType) && isAlpha(type)) {\n      // ALPHA->ALPHA: always ignore if case isn't considered.\n      return false;\n    } else if (isUpper(lastType) && isAlpha(type)) {\n      // UPPER->letter: Don't split\n      return false;\n    } else if (!splitOnNumerics && ((isAlpha(lastType) && isDigit(type)) || (isDigit(lastType) && isAlpha(type)))) {\n      // ALPHA->NUMERIC, NUMERIC->ALPHA :Don't split\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Determines whether the transition from lastType to type indicates a break\n   *\n   * @param lastType Last subword type\n   * @param type Current subword type\n   * @return {@code true} if the transition indicates a break, {@code false} otherwise\n   */\n  private boolean isBreak(int lastType, int type) {\n    if ((type & lastType) != 0) {\n      return false;\n    }\n    \n    if (!splitOnCaseChange && isAlpha(lastType) && isAlpha(type)) {\n      // ALPHA->ALPHA: always ignore if case isn't considered.\n      return false;\n    } else if (isUpper(lastType) && isAlpha(type)) {\n      // UPPER->letter: Don't split\n      return false;\n    } else if (!splitOnNumerics && ((isAlpha(lastType) && isDigit(type)) || (isDigit(lastType) && isAlpha(type)))) {\n      // ALPHA->NUMERIC, NUMERIC->ALPHA :Don't split\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}