{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriterPerField\".equals(trace[i].getClassName()) && \"flush\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"flushSegment\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriterPerField\".equals(trace[i].getClassName()) && \"flush\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"flushSegment\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a05409176bd65129d67a785ee70e881e238a9aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a05409176bd65129d67a785ee70e881e238a9aef"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a05409176bd65129d67a785ee70e881e238a9aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}