{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","date":1484565333,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = inner.scorer(context);\n      if (scorer.iterator().advance(doc) != doc)\n        return Explanation.noMatch(\"No match\");\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(scorer));\n      scores.advanceExact(doc);\n      Explanation scoreExpl = scoreExplanation(context, doc, scores);\n      if (boost == 1f)\n        return scoreExpl;\n      return Explanation.match(scoreExpl.getValue() * boost, \"product of:\",\n          Explanation.match(boost, \"boost\"), scoreExpl);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = inner.scorer(context);\n      if (scorer.iterator().advance(doc) != doc)\n        return Explanation.noMatch(\"No match\");\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(scorer));\n      scores.advanceExact(doc);\n      Explanation scoreExpl = scoreExplanation(context, doc, scores);\n      if (boost == 1f)\n        return scoreExpl;\n      return Explanation.match(scoreExpl.getValue() * boost, \"product of:\",\n          Explanation.match(boost, \"boost\"), scoreExpl);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = inner.scorer(context);\n      if (scorer.iterator().advance(doc) != doc)\n        return Explanation.noMatch(\"No match\");\n      Explanation scoreExplanation = inner.explain(context, doc);\n      Explanation expl = valueSource.explain(context, doc, scoreExplanation);\n      if (boost == 1f)\n        return expl;\n      return Explanation.match(expl.getValue() * boost, \"product of:\",\n          Explanation.match(boost, \"boost\"), expl);\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = inner.scorer(context);\n      if (scorer.iterator().advance(doc) != doc)\n        return Explanation.noMatch(\"No match\");\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(scorer));\n      scores.advanceExact(doc);\n      Explanation scoreExpl = scoreExplanation(context, doc, scores);\n      if (boost == 1f)\n        return scoreExpl;\n      return Explanation.match(scoreExpl.getValue() * boost, \"product of:\",\n          Explanation.match(boost, \"boost\"), scoreExpl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = inner.scorer(context);\n      if (scorer.iterator().advance(doc) != doc)\n        return Explanation.noMatch(\"No match\");\n      Explanation scoreExplanation = inner.explain(context, doc);\n      Explanation expl = valueSource.explain(context, doc, scoreExplanation);\n      if (boost == 1f)\n        return expl;\n      return Explanation.match(expl.getValue() * boost, \"product of:\",\n          Explanation.match(boost, \"boost\"), expl);\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = inner.scorer(context);\n      if (scorer.iterator().advance(doc) != doc)\n        return Explanation.noMatch(\"No match\");\n      DoubleValues scores = valueSource.getValues(context, DoubleValuesSource.fromScorer(scorer));\n      scores.advanceExact(doc);\n      Explanation scoreExpl = scoreExplanation(context, doc, scores);\n      if (boost == 1f)\n        return scoreExpl;\n      return Explanation.match(scoreExpl.getValue() * boost, \"product of:\",\n          Explanation.match(boost, \"boost\"), scoreExpl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a38488a55cc52553c9792da5044dd31b15128cd8","date":1510755769,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = inner.scorer(context);\n      if (scorer.iterator().advance(doc) != doc)\n        return Explanation.noMatch(\"No match\");\n      Explanation scoreExplanation = inner.explain(context, doc);\n      Explanation expl = valueSource.explain(context, doc, scoreExplanation);\n      return Explanation.match(expl.getValue() * boost, \"product of:\",\n          Explanation.match(boost, \"boost\"), expl);\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = inner.scorer(context);\n      if (scorer.iterator().advance(doc) != doc)\n        return Explanation.noMatch(\"No match\");\n      Explanation scoreExplanation = inner.explain(context, doc);\n      Explanation expl = valueSource.explain(context, doc, scoreExplanation);\n      if (boost == 1f)\n        return expl;\n      return Explanation.match(expl.getValue() * boost, \"product of:\",\n          Explanation.match(boost, \"boost\"), expl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionScoreQuery.FunctionScoreWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Explanation scoreExplanation = inner.explain(context, doc);\n      if (scoreExplanation.isMatch() == false) {\n        return scoreExplanation;\n      }\n\n      Scorer scorer = inner.scorer(context);\n      DoubleValues values = valueSource.getValues(context, DoubleValuesSource.fromScorer(scorer));\n      int advanced = scorer.iterator().advance(doc);\n      assert advanced == doc;\n\n      double value;\n      Explanation expl;\n      if (values.advanceExact(doc)) {\n        value = values.doubleValue();\n        expl = valueSource.explain(context, doc, scoreExplanation);\n        if (value < 0) {\n          value = 0;\n          expl = Explanation.match(0, \"truncated score, max of:\",\n              Explanation.match(0f, \"minimum score\"), expl);\n        } else if (Double.isNaN(value)) {\n          value = 0;\n          expl = Explanation.match(0, \"score, computed as (score == NaN ? 0 : score) since NaN is an illegal score from:\", expl);\n        }\n      } else {\n        value = 0;\n        expl = valueSource.explain(context, doc, scoreExplanation);\n      }\n\n      if (expl.isMatch() == false) {\n        expl = Explanation.match(0f, \"weight(\" + getQuery().toString() + \") using default score of 0 because the function produced no value:\", expl);\n      } else if (boost != 1f) {\n        expl = Explanation.match((float) (value * boost), \"weight(\" + getQuery().toString() + \"), product of:\",\n            Explanation.match(boost, \"boost\"), expl);\n      } else {\n        expl = Explanation.match(expl.getValue(), \"weight(\" + getQuery().toString() + \"), result of:\", expl);\n      }\n\n      return expl;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      Scorer scorer = inner.scorer(context);\n      if (scorer.iterator().advance(doc) != doc)\n        return Explanation.noMatch(\"No match\");\n      Explanation scoreExplanation = inner.explain(context, doc);\n      Explanation expl = valueSource.explain(context, doc, scoreExplanation);\n      return Explanation.match(expl.getValue() * boost, \"product of:\",\n          Explanation.match(boost, \"boost\"), expl);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6","501fdb8d708778ae5368dd5c44879e1d46487e43"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["a38488a55cc52553c9792da5044dd31b15128cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a38488a55cc52553c9792da5044dd31b15128cd8":["501fdb8d708778ae5368dd5c44879e1d46487e43"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"501fdb8d708778ae5368dd5c44879e1d46487e43":["e9017cf144952056066919f1ebc7897ff9bd71b1","a38488a55cc52553c9792da5044dd31b15128cd8"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["507e7decdf00981d09a74632ea30299a4ce6ba72","c5bceed3ccfd33baff7dde1a56def37b6ccd66f6"],"a38488a55cc52553c9792da5044dd31b15128cd8":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"c5bceed3ccfd33baff7dde1a56def37b6ccd66f6":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43","507e7decdf00981d09a74632ea30299a4ce6ba72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}