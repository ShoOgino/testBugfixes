{"path":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","commits":[{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, false);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery]#UnionDocsAndPositionsEnum(Bits,AtomicReaderContext,Term[],Map[Term,TermContext],TermsEnum).mjava","sourceNew":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, false);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","sourceOld":"  public UnionDocsAndPositionsEnum(Bits liveDocs, AtomicReaderContext context, Term[] terms, Map<Term,TermContext> termContexts, TermsEnum termsEnum) throws IOException {\n    List<DocsAndPositionsEnum> docsEnums = new LinkedList<DocsAndPositionsEnum>();\n    for (int i = 0; i < terms.length; i++) {\n      final Term term = terms[i];\n      TermState termState = termContexts.get(term).get(context.ord);\n      if (termState == null) {\n        // Term doesn't exist in reader\n        continue;\n      }\n      termsEnum.seekExact(term.bytes(), termState);\n      DocsAndPositionsEnum postings = termsEnum.docsAndPositions(liveDocs, null, false);\n      if (postings == null) {\n        // term does exist, but has no positions\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + term.text() + \")\");\n      }\n      docsEnums.add(postings);\n    }\n\n    _queue = new DocsQueue(docsEnums);\n    _posList = new IntQueue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2297162a22c55456e200caef2cbcb00fe381120":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["e2297162a22c55456e200caef2cbcb00fe381120"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2297162a22c55456e200caef2cbcb00fe381120"],"e2297162a22c55456e200caef2cbcb00fe381120":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}