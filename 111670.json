{"path":"src/test/org/apache/lucene/search/TestFuzzyQuery#testDefaultFuzzinessLong().mjava","commits":[{"id":"12056d6fe7f31fb827126f5e3b307e6af56cb080","date":1091398799,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testDefaultFuzzinessLong().mjava","pathOld":"/dev/null","sourceNew":"  public void testDefaultFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"));   \n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"));   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16787e95e3c32c394cf5195e223e39ff5cbda3a","date":1092422102,"type":5,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFuzzyQuery#testFuzzinessLong().mjava","pathOld":"src/test/org/apache/lucene/search/TestFuzzyQuery#testDefaultFuzzinessLong().mjava","sourceNew":"  public void testFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"));   \n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"));   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    // \"student\" doesn't match anymore thanks to increased minimum similarity:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"), 0.6f);   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), 1.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n    try {\n      query = new FuzzyQuery(new Term(\"field\", \"student\"), -0.1f);\n      fail(\"Expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // expecting exception\n    }\n\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDefaultFuzzinessLong() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    addDoc(\"aaaaaaa\", writer);\n    addDoc(\"segment\", writer);\n    writer.optimize();\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(directory);\n\n    FuzzyQuery query;\n    // not similar enough:\n    query = new FuzzyQuery(new Term(\"field\", \"xxxxx\"));   \n    Hits hits = searcher.search(query);\n    assertEquals(0, hits.length());\n    // edit distance to \"aaaaaaa\" = 3, this matches because the string is longer than\n    // in testDefaultFuzziness so a bigger difference is allowed:\n    query = new FuzzyQuery(new Term(\"field\", \"aaaaccc\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    assertEquals(hits.doc(0).get(\"field\"), (\"aaaaaaa\"));\n\n    // no match, more than half of the characters is wrong:\n    query = new FuzzyQuery(new Term(\"field\", \"aaacccc\"));   \n    hits = searcher.search(query);\n    assertEquals(0, hits.length());\n\n    // \"student\" and \"stellent\" are indeed similar to \"segment\" by default:\n    query = new FuzzyQuery(new Term(\"field\", \"student\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n    query = new FuzzyQuery(new Term(\"field\", \"stellent\"));   \n    hits = searcher.search(query);\n    assertEquals(1, hits.length());\n\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"12056d6fe7f31fb827126f5e3b307e6af56cb080":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c16787e95e3c32c394cf5195e223e39ff5cbda3a":["12056d6fe7f31fb827126f5e3b307e6af56cb080"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c16787e95e3c32c394cf5195e223e39ff5cbda3a"]},"commit2Childs":{"12056d6fe7f31fb827126f5e3b307e6af56cb080":["c16787e95e3c32c394cf5195e223e39ff5cbda3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12056d6fe7f31fb827126f5e3b307e6af56cb080"],"c16787e95e3c32c394cf5195e223e39ff5cbda3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}