{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","commits":[{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            if (ctx.getDistCalc().distance(point,centerPoint) > maxDistance)\n              continue;\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            if (ctx.getDistCalc().distance(point,centerPoint) > maxDistance)\n              continue;\n            final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":1,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTest#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            if (ctx.getDistCalc().distance(point,centerPoint) > maxDistance)\n              continue;\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            if (ctx.getDistCalc().distance(point,centerPoint) > maxDistance)\n              continue;\n            final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f272fa1627d87a9082502801ea6cb7fa2d71150","date":1434169192,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            if (ctx.getDistCalc().distance(point,centerPoint) > maxDistance)\n              continue;\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new RectIntersectionTestHelper<Geo3dShape>(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            if (ctx.getDistCalc().distance(point,centerPoint) > maxDistance)\n              continue;\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so only 10% of the usual figure\n        return laps/10000;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"535df84251be5af3be84d750beba0021aff9132d","date":1434649368,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            if (ctx.getDistCalc().distance(point,centerPoint) > maxDistance)\n              continue;\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e90aaa97ec49973177b5d3513542aa87c24e849c","date":1446111033,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPolygonRect().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPolygonRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPointIn(pointZone);\n            final GeoPoint gPt = new GeoPoint(planetModel, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount); //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n            return new Geo3dShape(planetModel, shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["e90aaa97ec49973177b5d3513542aa87c24e849c","112d77ac8d3e10a362516ad834c9a11d35c94234"],"3f272fa1627d87a9082502801ea6cb7fa2d71150":["fec06d6753751ae302c7d35866763e6cb414112d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["e90aaa97ec49973177b5d3513542aa87c24e849c"],"535df84251be5af3be84d750beba0021aff9132d":["3f272fa1627d87a9082502801ea6cb7fa2d71150"],"e90aaa97ec49973177b5d3513542aa87c24e849c":["535df84251be5af3be84d750beba0021aff9132d"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f272fa1627d87a9082502801ea6cb7fa2d71150":["535df84251be5af3be84d750beba0021aff9132d"],"fec06d6753751ae302c7d35866763e6cb414112d":["3f272fa1627d87a9082502801ea6cb7fa2d71150"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"535df84251be5af3be84d750beba0021aff9132d":["e90aaa97ec49973177b5d3513542aa87c24e849c"],"e90aaa97ec49973177b5d3513542aa87c24e849c":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}