{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testDeDupTails().mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testDeDupTails().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirect#testDeDupTails().mjava","sourceNew":"  public void testDeDupTails() throws Exception {\n    List<BytesRef> entries = new ArrayList<>();\n    for (int i = 0; i < 1000000; i += 4) {\n      byte[] b = new byte[3];\n      int val = i;\n      for (int j = b.length - 1; j >= 0; --j) {\n        b[j] = (byte) (val & 0xff);\n        val >>= 8;\n      }\n      entries.add(new BytesRef(b));\n    }\n    long size = buildFST(entries).ramBytesUsed();\n    // Size is 1648 when we use only list-encoding. We were previously failing to ever de-dup\n    // direct addressing, which led this case to blow up.\n    assertTrue(size <= 1080);\n    //printf(\"fst size = %d bytes\", size);\n  }\n\n","sourceOld":"  public void testDeDupTails() throws Exception {\n    List<BytesRef> entries = new ArrayList<>();\n    for (int i = 0; i < 1000000; i += 4) {\n      byte[] b = new byte[3];\n      int val = i;\n      for (int j = b.length - 1; j >= 0; --j) {\n        b[j] = (byte) (val & 0xff);\n        val >>= 8;\n      }\n      entries.add(new BytesRef(b));\n    }\n    long size = buildFST(entries).ramBytesUsed();\n    // Size is 1664 when we use only list-encoding.  We were previously failing to ever de-dup\n    // arrays-with-gaps, which led this case to blow up.\n    assertTrue(size < 3000);\n    //printf(\"fst size = %d bytes\", size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b831208f9f64a43d6d8650be743171c3ca8368dd","date":1573816524,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testDeDupTails().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testDeDupTails().mjava","sourceNew":"  public void testDeDupTails() throws Exception {\n    List<BytesRef> entries = new ArrayList<>();\n    for (int i = 0; i < 1000000; i += 4) {\n      byte[] b = new byte[3];\n      int val = i;\n      for (int j = b.length - 1; j >= 0; --j) {\n        b[j] = (byte) (val & 0xff);\n        val >>= 8;\n      }\n      entries.add(new BytesRef(b));\n    }\n    long size = buildFST(entries).ramBytesUsed();\n    // Size is 1648 when we use only list-encoding. We were previously failing to ever de-dup\n    // direct addressing, which led this case to blow up.\n    // This test will fail if there is more than 1% size increase with direct addressing.\n    assertTrue(\"FST size = \" + size + \" B\", size <= 1648 * 1.01d);\n  }\n\n","sourceOld":"  public void testDeDupTails() throws Exception {\n    List<BytesRef> entries = new ArrayList<>();\n    for (int i = 0; i < 1000000; i += 4) {\n      byte[] b = new byte[3];\n      int val = i;\n      for (int j = b.length - 1; j >= 0; --j) {\n        b[j] = (byte) (val & 0xff);\n        val >>= 8;\n      }\n      entries.add(new BytesRef(b));\n    }\n    long size = buildFST(entries).ramBytesUsed();\n    // Size is 1648 when we use only list-encoding. We were previously failing to ever de-dup\n    // direct addressing, which led this case to blow up.\n    assertTrue(size <= 1080);\n    //printf(\"fst size = %d bytes\", size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#testDeDupTails().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testDeDupTails().mjava","sourceNew":"  public void testDeDupTails() throws Exception {\n    List<BytesRef> entries = new ArrayList<>();\n    for (int i = 0; i < 1000000; i += 4) {\n      byte[] b = new byte[3];\n      int val = i;\n      for (int j = b.length - 1; j >= 0; --j) {\n        b[j] = (byte) (val & 0xff);\n        val >>= 8;\n      }\n      entries.add(new BytesRef(b));\n    }\n    long size = buildFST(entries).ramBytesUsed();\n    // Size is 1648 when we use only list-encoding. We were previously failing to ever de-dup\n    // direct addressing, which led this case to blow up.\n    // This test will fail if there is more than 1% size increase with direct addressing.\n    assertTrue(\"FST size = \" + size + \" B\", size <= 1648 * 1.01d);\n  }\n\n","sourceOld":"  public void testDeDupTails() throws Exception {\n    List<BytesRef> entries = new ArrayList<>();\n    for (int i = 0; i < 1000000; i += 4) {\n      byte[] b = new byte[3];\n      int val = i;\n      for (int j = b.length - 1; j >= 0; --j) {\n        b[j] = (byte) (val & 0xff);\n        val >>= 8;\n      }\n      entries.add(new BytesRef(b));\n    }\n    long size = buildFST(entries).ramBytesUsed();\n    // Size is 1648 when we use only list-encoding. We were previously failing to ever de-dup\n    // direct addressing, which led this case to blow up.\n    // This test will fail if there is more than 1% size increase with direct addressing.\n    assertTrue(\"FST size = \" + size + \" B\", size <= 1648 * 1.01d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#testDeDupTails().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#testDeDupTails().mjava","sourceNew":"  public void testDeDupTails() throws Exception {\n    List<BytesRef> entries = new ArrayList<>();\n    for (int i = 0; i < 1000000; i += 4) {\n      byte[] b = new byte[3];\n      int val = i;\n      for (int j = b.length - 1; j >= 0; --j) {\n        b[j] = (byte) (val & 0xff);\n        val >>= 8;\n      }\n      entries.add(new BytesRef(b));\n    }\n    long size = buildFST(entries).ramBytesUsed();\n    // Size is 1648 when we use only list-encoding. We were previously failing to ever de-dup\n    // direct addressing, which led this case to blow up.\n    // This test will fail if there is more than 1% size increase with direct addressing.\n    assertTrue(\"FST size = \" + size + \" B\", size <= 1648 * 1.01d);\n  }\n\n","sourceOld":"  public void testDeDupTails() throws Exception {\n    List<BytesRef> entries = new ArrayList<>();\n    for (int i = 0; i < 1000000; i += 4) {\n      byte[] b = new byte[3];\n      int val = i;\n      for (int j = b.length - 1; j >= 0; --j) {\n        b[j] = (byte) (val & 0xff);\n        val >>= 8;\n      }\n      entries.add(new BytesRef(b));\n    }\n    long size = buildFST(entries).ramBytesUsed();\n    // Size is 1648 when we use only list-encoding. We were previously failing to ever de-dup\n    // direct addressing, which led this case to blow up.\n    // This test will fail if there is more than 1% size increase with direct addressing.\n    assertTrue(\"FST size = \" + size + \" B\", size <= 1648 * 1.01d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["b831208f9f64a43d6d8650be743171c3ca8368dd","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["b831208f9f64a43d6d8650be743171c3ca8368dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"b831208f9f64a43d6d8650be743171c3ca8368dd":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["b831208f9f64a43d6d8650be743171c3ca8368dd"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b831208f9f64a43d6d8650be743171c3ca8368dd":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}