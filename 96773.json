{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two.build(), qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery complex = new BooleanQuery();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex, qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery two = new BooleanQuery();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two, qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two, qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) (((BoostQuery) qp.parse(\"/[A-Z][123]/^0.5\", df)).getQuery())).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two.build(), qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    q.setBoost(0.5f);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertTrue(qp.parse(\"/[A-Z][123]/^0.5\", df) instanceof RegexpQuery);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery)qp.parse(\"/[A-Z][123]/^0.5\", df)).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two.build(), qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true));\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) (((BoostQuery) qp.parse(\"/[A-Z][123]/^0.5\", df)).getQuery())).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two.build(), qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) (((BoostQuery) qp.parse(\"/[A-Z][123]/^0.5\", df)).getQuery())).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two.build(), qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true));\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) (((BoostQuery) qp.parse(\"/[A-Z][123]/^0.5\", df)).getQuery())).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two.build(), qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    qp.setLowercaseExpandedTerms(true);\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) (((BoostQuery) qp.parse(\"/[A-Z][123]/^0.5\", df)).getQuery())).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two.build(), qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","date":1600414700,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testRegexps().mjava","sourceNew":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true));\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) (((BoostQuery) qp.parse(\"/[A-Z][123]/^0.5\", df)).getQuery())).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n\n    // fuzzy op doesn't apply to regexps.\n    assertQueryNodeException(\"/http/~2\");\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two.build(), qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","sourceOld":"  public void testRegexps() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true));\n    final String df = \"field\" ;\n    RegexpQuery q = new RegexpQuery(new Term(\"field\", \"[a-z][123]\"));\n    assertEquals(q, qp.parse(\"/[a-z][123]/\", df));\n    assertEquals(q, qp.parse(\"/[A-Z][123]/\", df));\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertEquals(new BoostQuery(q, 0.5f), qp.parse(\"/[A-Z][123]/^0.5\", df));\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_REWRITE, ((RegexpQuery) (((BoostQuery) qp.parse(\"/[A-Z][123]/^0.5\", df)).getQuery())).getRewriteMethod());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n    \n    Query escaped = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\"));\n    assertEquals(escaped, qp.parse(\"/[a-z]\\\\/[123]/\", df));\n    Query escaped2 = new RegexpQuery(new Term(\"field\", \"[a-z]\\\\*[123]\"));\n    assertEquals(escaped2, qp.parse(\"/[a-z]\\\\*[123]/\", df));\n    \n    BooleanQuery.Builder complex = new BooleanQuery.Builder();\n    complex.add(new RegexpQuery(new Term(\"field\", \"[a-z]\\\\/[123]\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"path\", \"/etc/init.d/\")), Occur.MUST);\n    complex.add(new TermQuery(new Term(\"field\", \"/etc/init[.]d/lucene/\")), Occur.SHOULD);\n    assertEquals(complex.build(), qp.parse(\"/[a-z]\\\\/[123]/ AND path:\\\"/etc/init.d/\\\" OR \\\"/etc\\\\/init\\\\[.\\\\]d/lucene/\\\" \", df));\n    \n    Query re = new RegexpQuery(new Term(\"field\", \"http.*\"));\n    assertEquals(re, qp.parse(\"field:/http.*/\", df));\n    assertEquals(re, qp.parse(\"/http.*/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"http~0.5\"));\n    assertEquals(re, qp.parse(\"field:/http~0.5/\", df));\n    assertEquals(re, qp.parse(\"/http~0.5/\", df));\n    \n    re = new RegexpQuery(new Term(\"field\", \"boo\"));\n    assertEquals(re, qp.parse(\"field:/boo/\", df));\n    assertEquals(re, qp.parse(\"/boo/\", df));\n    \n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\"/boo/\\\"\", df));\n    assertEquals(new TermQuery(new Term(\"field\", \"/boo/\")), qp.parse(\"\\\\/boo\\\\/\", df));\n    \n    BooleanQuery.Builder two = new BooleanQuery.Builder();\n    two.add(new RegexpQuery(new Term(\"field\", \"foo\")), Occur.SHOULD);\n    two.add(new RegexpQuery(new Term(\"field\", \"bar\")), Occur.SHOULD);\n    assertEquals(two.build(), qp.parse(\"field:/foo/ field:/bar/\", df));\n    assertEquals(two.build(), qp.parse(\"/foo/ /bar/\", df));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2713584a660051cd646423be682771e3bbd99985"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","2713584a660051cd646423be682771e3bbd99985"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2713584a660051cd646423be682771e3bbd99985":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["b89678825b68eccaf09e6ab71675fc0b0af1e099","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["ea4107f60b9f95623c16025c9c247412ff809092"],"ea4107f60b9f95623c16025c9c247412ff809092":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"2713584a660051cd646423be682771e3bbd99985":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea4107f60b9f95623c16025c9c247412ff809092":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}