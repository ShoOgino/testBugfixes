{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyPartialUpdates(BytesRef,long,long,Set[String],SolrDocumentBase).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyPartialUpdates(BytesRef,long,long,Set[String],SolrDocumentBase).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Goes over backwards, following the prevPointer, to merge all partial updates into the passed doc. Stops at either a full\n   * document, or if there are no previous entries to follow in the update log.\n   *\n   * @param id          Binary representation of the unique key field\n   * @param prevPointer Pointer to the previous entry in the ulog, based on which the current in-place update was made.\n   * @param prevVersion Version of the previous entry in the ulog, based on which the current in-place update was made.\n   * @param onlyTheseFields When a non-null set of field names is passed in, the resolve process only attempts to populate\n   *        the given fields in this set. When this set is null, it resolves all fields.\n   * @param latestPartialDoc   Partial document that is to be populated\n   * @return Returns 0 if a full document was found in the log, -1 if no full document was found. If full document was supposed\n   * to be found in the tlogs, but couldn't be found (because the logs were rotated) then the prevPointer is returned.\n   */\n  synchronized public long applyPartialUpdates(BytesRef id, long prevPointer, long prevVersion,\n      Set<String> onlyTheseFields, SolrDocumentBase latestPartialDoc) {\n    \n    SolrInputDocument partialUpdateDoc = null;\n\n    List<TransactionLog> lookupLogs = Arrays.asList(tlog, prevMapLog, prevMapLog2);\n    while (prevPointer >= 0) {\n      //go through each partial update and apply it on the incoming doc one after another\n      List entry;\n      entry = getEntryFromTLog(prevPointer, prevVersion, lookupLogs);\n      if (entry == null) {\n        return prevPointer; // a previous update was supposed to be found, but wasn't found (due to log rotation)\n      }\n      int flags = (int) entry.get(UpdateLog.FLAGS_IDX);\n      \n      // since updates can depend only upon ADD updates or other UPDATE_INPLACE updates, we assert that we aren't\n      // getting something else\n      if ((flags & UpdateLog.ADD) != UpdateLog.ADD && (flags & UpdateLog.UPDATE_INPLACE) != UpdateLog.UPDATE_INPLACE) {\n        throw new SolrException(ErrorCode.INVALID_STATE, entry + \" should've been either ADD or UPDATE_INPLACE update\" + \n            \", while looking for id=\" + new String(id.bytes, Charset.forName(\"UTF-8\")));\n      }\n      // if this is an ADD (i.e. full document update), stop here\n      if ((flags & UpdateLog.ADD) == UpdateLog.ADD) {\n        partialUpdateDoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        applyOlderUpdates(latestPartialDoc, partialUpdateDoc, onlyTheseFields);\n        return 0; // Full document was found in the tlog itself\n      }\n      if (entry.size() < 5) {\n        throw new SolrException(ErrorCode.INVALID_STATE, entry + \" is not a partial doc\" + \n            \", while looking for id=\" + new String(id.bytes, Charset.forName(\"UTF-8\")));\n      }\n      // This update is an inplace update, get the partial doc. The input doc is always at last position.\n      partialUpdateDoc = (SolrInputDocument) entry.get(entry.size() - 1);\n      applyOlderUpdates(latestPartialDoc, partialUpdateDoc, onlyTheseFields);\n      prevPointer = (long) entry.get(UpdateLog.PREV_POINTER_IDX);\n      prevVersion = (long) entry.get(UpdateLog.PREV_VERSION_IDX);\n      \n      if (onlyTheseFields != null && latestPartialDoc.keySet().containsAll(onlyTheseFields)) {\n        return 0; // all the onlyTheseFields have been resolved, safe to abort now.\n      }\n    }\n\n    return -1; // last full document is not supposed to be in tlogs, but it must be in the index\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyPartialUpdates(BytesRef,long,long,Set[String],SolrDocumentBase).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Goes over backwards, following the prevPointer, to merge all partial updates into the passed doc. Stops at either a full\n   * document, or if there are no previous entries to follow in the update log.\n   *\n   * @param id          Binary representation of the unique key field\n   * @param prevPointer Pointer to the previous entry in the ulog, based on which the current in-place update was made.\n   * @param prevVersion Version of the previous entry in the ulog, based on which the current in-place update was made.\n   * @param onlyTheseFields When a non-null set of field names is passed in, the resolve process only attempts to populate\n   *        the given fields in this set. When this set is null, it resolves all fields.\n   * @param latestPartialDoc   Partial document that is to be populated\n   * @return Returns 0 if a full document was found in the log, -1 if no full document was found. If full document was supposed\n   * to be found in the tlogs, but couldn't be found (because the logs were rotated) then the prevPointer is returned.\n   */\n  synchronized public long applyPartialUpdates(BytesRef id, long prevPointer, long prevVersion,\n      Set<String> onlyTheseFields, SolrDocumentBase latestPartialDoc) {\n    \n    SolrInputDocument partialUpdateDoc = null;\n\n    List<TransactionLog> lookupLogs = Arrays.asList(tlog, prevMapLog, prevMapLog2);\n    while (prevPointer >= 0) {\n      //go through each partial update and apply it on the incoming doc one after another\n      List entry;\n      entry = getEntryFromTLog(prevPointer, prevVersion, lookupLogs);\n      if (entry == null) {\n        return prevPointer; // a previous update was supposed to be found, but wasn't found (due to log rotation)\n      }\n      int flags = (int) entry.get(UpdateLog.FLAGS_IDX);\n      \n      // since updates can depend only upon ADD updates or other UPDATE_INPLACE updates, we assert that we aren't\n      // getting something else\n      if ((flags & UpdateLog.ADD) != UpdateLog.ADD && (flags & UpdateLog.UPDATE_INPLACE) != UpdateLog.UPDATE_INPLACE) {\n        throw new SolrException(ErrorCode.INVALID_STATE, entry + \" should've been either ADD or UPDATE_INPLACE update\" + \n            \", while looking for id=\" + new String(id.bytes, Charset.forName(\"UTF-8\")));\n      }\n      // if this is an ADD (i.e. full document update), stop here\n      if ((flags & UpdateLog.ADD) == UpdateLog.ADD) {\n        partialUpdateDoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        applyOlderUpdates(latestPartialDoc, partialUpdateDoc, onlyTheseFields);\n        return 0; // Full document was found in the tlog itself\n      }\n      if (entry.size() < 5) {\n        throw new SolrException(ErrorCode.INVALID_STATE, entry + \" is not a partial doc\" + \n            \", while looking for id=\" + new String(id.bytes, Charset.forName(\"UTF-8\")));\n      }\n      // This update is an inplace update, get the partial doc. The input doc is always at last position.\n      partialUpdateDoc = (SolrInputDocument) entry.get(entry.size() - 1);\n      applyOlderUpdates(latestPartialDoc, partialUpdateDoc, onlyTheseFields);\n      prevPointer = (long) entry.get(UpdateLog.PREV_POINTER_IDX);\n      prevVersion = (long) entry.get(UpdateLog.PREV_VERSION_IDX);\n      \n      if (onlyTheseFields != null && latestPartialDoc.keySet().containsAll(onlyTheseFields)) {\n        return 0; // all the onlyTheseFields have been resolved, safe to abort now.\n      }\n    }\n\n    return -1; // last full document is not supposed to be in tlogs, but it must be in the index\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyPartialUpdates(BytesRef,long,long,Set[String],SolrDocumentBase).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyPartialUpdates(BytesRef,long,long,Set[String],SolrDocumentBase).mjava","sourceNew":"  /**\n   * Goes over backwards, following the prevPointer, to merge all partial updates into the passed doc. Stops at either a full\n   * document, or if there are no previous entries to follow in the update log.\n   *\n   * @param id          Binary representation of the unique key field\n   * @param prevPointer Pointer to the previous entry in the ulog, based on which the current in-place update was made.\n   * @param prevVersion Version of the previous entry in the ulog, based on which the current in-place update was made.\n   * @param onlyTheseFields When a non-null set of field names is passed in, the resolve process only attempts to populate\n   *        the given fields in this set. When this set is null, it resolves all fields.\n   * @param latestPartialDoc   Partial document that is to be populated\n   * @return Returns 0 if a full document was found in the log, -1 if no full document was found. If full document was supposed\n   * to be found in the tlogs, but couldn't be found (because the logs were rotated) then the prevPointer is returned.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  synchronized public long applyPartialUpdates(BytesRef id, long prevPointer, long prevVersion,\n      Set<String> onlyTheseFields, @SuppressWarnings({\"rawtypes\"})SolrDocumentBase latestPartialDoc) {\n    \n    SolrInputDocument partialUpdateDoc = null;\n\n    List<TransactionLog> lookupLogs = Arrays.asList(tlog, prevMapLog, prevMapLog2);\n    while (prevPointer >= 0) {\n      //go through each partial update and apply it on the incoming doc one after another\n      @SuppressWarnings({\"rawtypes\"})\n      List entry;\n      entry = getEntryFromTLog(prevPointer, prevVersion, lookupLogs);\n      if (entry == null) {\n        return prevPointer; // a previous update was supposed to be found, but wasn't found (due to log rotation)\n      }\n      int flags = (int) entry.get(UpdateLog.FLAGS_IDX);\n      \n      // since updates can depend only upon ADD updates or other UPDATE_INPLACE updates, we assert that we aren't\n      // getting something else\n      if ((flags & UpdateLog.ADD) != UpdateLog.ADD && (flags & UpdateLog.UPDATE_INPLACE) != UpdateLog.UPDATE_INPLACE) {\n        throw new SolrException(ErrorCode.INVALID_STATE, entry + \" should've been either ADD or UPDATE_INPLACE update\" + \n            \", while looking for id=\" + new String(id.bytes, Charset.forName(\"UTF-8\")));\n      }\n      // if this is an ADD (i.e. full document update), stop here\n      if ((flags & UpdateLog.ADD) == UpdateLog.ADD) {\n        partialUpdateDoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        applyOlderUpdates(latestPartialDoc, partialUpdateDoc, onlyTheseFields);\n        return 0; // Full document was found in the tlog itself\n      }\n      if (entry.size() < 5) {\n        throw new SolrException(ErrorCode.INVALID_STATE, entry + \" is not a partial doc\" + \n            \", while looking for id=\" + new String(id.bytes, Charset.forName(\"UTF-8\")));\n      }\n      // This update is an inplace update, get the partial doc. The input doc is always at last position.\n      partialUpdateDoc = (SolrInputDocument) entry.get(entry.size() - 1);\n      applyOlderUpdates(latestPartialDoc, partialUpdateDoc, onlyTheseFields);\n      prevPointer = (long) entry.get(UpdateLog.PREV_POINTER_IDX);\n      prevVersion = (long) entry.get(UpdateLog.PREV_VERSION_IDX);\n      \n      if (onlyTheseFields != null && latestPartialDoc.keySet().containsAll(onlyTheseFields)) {\n        return 0; // all the onlyTheseFields have been resolved, safe to abort now.\n      }\n    }\n\n    return -1; // last full document is not supposed to be in tlogs, but it must be in the index\n  }\n\n","sourceOld":"  /**\n   * Goes over backwards, following the prevPointer, to merge all partial updates into the passed doc. Stops at either a full\n   * document, or if there are no previous entries to follow in the update log.\n   *\n   * @param id          Binary representation of the unique key field\n   * @param prevPointer Pointer to the previous entry in the ulog, based on which the current in-place update was made.\n   * @param prevVersion Version of the previous entry in the ulog, based on which the current in-place update was made.\n   * @param onlyTheseFields When a non-null set of field names is passed in, the resolve process only attempts to populate\n   *        the given fields in this set. When this set is null, it resolves all fields.\n   * @param latestPartialDoc   Partial document that is to be populated\n   * @return Returns 0 if a full document was found in the log, -1 if no full document was found. If full document was supposed\n   * to be found in the tlogs, but couldn't be found (because the logs were rotated) then the prevPointer is returned.\n   */\n  synchronized public long applyPartialUpdates(BytesRef id, long prevPointer, long prevVersion,\n      Set<String> onlyTheseFields, SolrDocumentBase latestPartialDoc) {\n    \n    SolrInputDocument partialUpdateDoc = null;\n\n    List<TransactionLog> lookupLogs = Arrays.asList(tlog, prevMapLog, prevMapLog2);\n    while (prevPointer >= 0) {\n      //go through each partial update and apply it on the incoming doc one after another\n      List entry;\n      entry = getEntryFromTLog(prevPointer, prevVersion, lookupLogs);\n      if (entry == null) {\n        return prevPointer; // a previous update was supposed to be found, but wasn't found (due to log rotation)\n      }\n      int flags = (int) entry.get(UpdateLog.FLAGS_IDX);\n      \n      // since updates can depend only upon ADD updates or other UPDATE_INPLACE updates, we assert that we aren't\n      // getting something else\n      if ((flags & UpdateLog.ADD) != UpdateLog.ADD && (flags & UpdateLog.UPDATE_INPLACE) != UpdateLog.UPDATE_INPLACE) {\n        throw new SolrException(ErrorCode.INVALID_STATE, entry + \" should've been either ADD or UPDATE_INPLACE update\" + \n            \", while looking for id=\" + new String(id.bytes, Charset.forName(\"UTF-8\")));\n      }\n      // if this is an ADD (i.e. full document update), stop here\n      if ((flags & UpdateLog.ADD) == UpdateLog.ADD) {\n        partialUpdateDoc = (SolrInputDocument) entry.get(entry.size() - 1);\n        applyOlderUpdates(latestPartialDoc, partialUpdateDoc, onlyTheseFields);\n        return 0; // Full document was found in the tlog itself\n      }\n      if (entry.size() < 5) {\n        throw new SolrException(ErrorCode.INVALID_STATE, entry + \" is not a partial doc\" + \n            \", while looking for id=\" + new String(id.bytes, Charset.forName(\"UTF-8\")));\n      }\n      // This update is an inplace update, get the partial doc. The input doc is always at last position.\n      partialUpdateDoc = (SolrInputDocument) entry.get(entry.size() - 1);\n      applyOlderUpdates(latestPartialDoc, partialUpdateDoc, onlyTheseFields);\n      prevPointer = (long) entry.get(UpdateLog.PREV_POINTER_IDX);\n      prevVersion = (long) entry.get(UpdateLog.PREV_VERSION_IDX);\n      \n      if (onlyTheseFields != null && latestPartialDoc.keySet().containsAll(onlyTheseFields)) {\n        return 0; // all the onlyTheseFields have been resolved, safe to abort now.\n      }\n    }\n\n    return -1; // last full document is not supposed to be in tlogs, but it must be in the index\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}