{"path":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#finish(IndexOutput).mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#finish(IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes the 1d BKD tree to the provided {@link IndexOutput} and returns the file offset where index was written. */\n  public long finish(IndexOutput out) throws IOException {\n\n    if (writer != null) {\n      writer.close();\n    }\n\n    if (valueCount == 0) {\n      throw new IllegalStateException(\"at least one value must be indexed\");\n    }\n\n    // TODO: we should use in-memory sort here, if number of points is small enough:\n\n    long countPerLeaf = valueCount;\n    long innerNodeCount = 1;\n\n    while (countPerLeaf > maxValuesInLeafNode) {\n      countPerLeaf /= 2;\n      innerNodeCount *= 2;\n    }\n\n    //System.out.println(\"innerNodeCount=\" + innerNodeCount);\n\n    if (1+2*innerNodeCount >= Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many nodes; increase maxValuesInLeafNode (currently \" + maxValuesInLeafNode + \") and reindex\");\n    }\n\n    innerNodeCount--;\n\n    int numLeaves = (int) (innerNodeCount+1);\n\n    // Indexed by nodeID, but first (root) nodeID is 1\n    long[] blockMinValues = new long[numLeaves];\n\n    // +1 because leaf count is power of 2 (e.g. 8), and innerNodeCount is power of 2 minus 1 (e.g. 7)\n    long[] leafBlockFPs = new long[numLeaves];\n\n    // Make sure the math above \"worked\":\n    assert valueCount / blockMinValues.length <= maxValuesInLeafNode: \"valueCount=\" + valueCount + \" blockMinValues.length=\" + blockMinValues.length + \" maxValuesInLeafNode=\" + maxValuesInLeafNode;\n    //System.out.println(\"  avg pointsPerLeaf=\" + (valueCount/blockMinValues.length));\n\n    // Sort all docs by value:\n    SliceWriter sortedWriter = null;\n\n    boolean success = false;\n    try {\n      sortedWriter = sort();\n      heapWriter = null;\n\n      build(1, numLeaves,\n            new PathSlice(sortedWriter, 0, valueCount),\n            out,\n            globalMinValue, globalMaxValue,\n            blockMinValues,\n            leafBlockFPs);\n      success = true;\n    } finally {\n      if (success) {\n        sortedWriter.destroy();\n        IOUtils.rm(tempInput);\n      } else {\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n        IOUtils.deleteFilesIgnoringExceptions(tempInput);\n      }\n    }\n\n    //System.out.println(\"Total nodes: \" + innerNodeCount);\n\n    // Write index:\n    long indexFP = out.getFilePointer();\n    out.writeVInt(numLeaves);\n    out.writeVInt((int) (valueCount / numLeaves));\n\n    for (int i=0;i<blockMinValues.length;i++) {\n      out.writeLong(blockMinValues[i]);\n    }\n    for (int i=0;i<leafBlockFPs.length;i++) {\n      out.writeVLong(leafBlockFPs[i]);\n    }\n    out.writeLong(globalMaxValue);\n\n    if (tempDir != null) {\n      // If we had to go offline, we should have removed all temp files we wrote:\n      assert directoryIsEmpty(tempDir);\n      IOUtils.rm(tempDir);\n    }\n\n    return indexFP;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#finish(IndexOutput).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#finish(IndexOutput).mjava","sourceNew":"  /** Writes the 1d BKD tree to the provided {@link IndexOutput} and returns the file offset where index was written. */\n  public long finish(IndexOutput out) throws IOException {\n\n    if (writer != null) {\n      writer.close();\n    }\n\n    if (valueCount == 0) {\n      throw new IllegalStateException(\"at least one value must be indexed\");\n    }\n\n    // TODO: we should use in-memory sort here, if number of points is small enough:\n\n    long countPerLeaf = valueCount;\n    long innerNodeCount = 1;\n\n    while (countPerLeaf > maxValuesInLeafNode) {\n      countPerLeaf = (countPerLeaf+1)/2;\n      innerNodeCount *= 2;\n    }\n\n    //System.out.println(\"innerNodeCount=\" + innerNodeCount);\n\n    if (1+2*innerNodeCount >= Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many nodes; increase maxValuesInLeafNode (currently \" + maxValuesInLeafNode + \") and reindex\");\n    }\n\n    innerNodeCount--;\n\n    int numLeaves = (int) (innerNodeCount+1);\n\n    // Indexed by nodeID, but first (root) nodeID is 1\n    long[] blockMinValues = new long[numLeaves];\n\n    // +1 because leaf count is power of 2 (e.g. 8), and innerNodeCount is power of 2 minus 1 (e.g. 7)\n    long[] leafBlockFPs = new long[numLeaves];\n\n    // Make sure the math above \"worked\":\n    assert valueCount / blockMinValues.length <= maxValuesInLeafNode: \"valueCount=\" + valueCount + \" blockMinValues.length=\" + blockMinValues.length + \" maxValuesInLeafNode=\" + maxValuesInLeafNode;\n    //System.out.println(\"  avg pointsPerLeaf=\" + (valueCount/blockMinValues.length));\n\n    // Sort all docs by value:\n    SliceWriter sortedWriter = null;\n\n    boolean success = false;\n    try {\n      sortedWriter = sort();\n      heapWriter = null;\n\n      build(1, numLeaves,\n            new PathSlice(sortedWriter, 0, valueCount),\n            out,\n            globalMinValue, globalMaxValue,\n            blockMinValues,\n            leafBlockFPs);\n      success = true;\n    } finally {\n      if (success) {\n        sortedWriter.destroy();\n        IOUtils.rm(tempInput);\n      } else {\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n        IOUtils.deleteFilesIgnoringExceptions(tempInput);\n      }\n    }\n\n    //System.out.println(\"Total nodes: \" + innerNodeCount);\n\n    // Write index:\n    long indexFP = out.getFilePointer();\n    out.writeVInt(numLeaves);\n    out.writeVInt((int) (valueCount / numLeaves));\n\n    for (int i=0;i<blockMinValues.length;i++) {\n      out.writeLong(blockMinValues[i]);\n    }\n    for (int i=0;i<leafBlockFPs.length;i++) {\n      out.writeVLong(leafBlockFPs[i]);\n    }\n    out.writeLong(globalMaxValue);\n\n    if (tempDir != null) {\n      // If we had to go offline, we should have removed all temp files we wrote:\n      assert directoryIsEmpty(tempDir);\n      IOUtils.rm(tempDir);\n    }\n\n    return indexFP;\n  }\n\n","sourceOld":"  /** Writes the 1d BKD tree to the provided {@link IndexOutput} and returns the file offset where index was written. */\n  public long finish(IndexOutput out) throws IOException {\n\n    if (writer != null) {\n      writer.close();\n    }\n\n    if (valueCount == 0) {\n      throw new IllegalStateException(\"at least one value must be indexed\");\n    }\n\n    // TODO: we should use in-memory sort here, if number of points is small enough:\n\n    long countPerLeaf = valueCount;\n    long innerNodeCount = 1;\n\n    while (countPerLeaf > maxValuesInLeafNode) {\n      countPerLeaf /= 2;\n      innerNodeCount *= 2;\n    }\n\n    //System.out.println(\"innerNodeCount=\" + innerNodeCount);\n\n    if (1+2*innerNodeCount >= Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many nodes; increase maxValuesInLeafNode (currently \" + maxValuesInLeafNode + \") and reindex\");\n    }\n\n    innerNodeCount--;\n\n    int numLeaves = (int) (innerNodeCount+1);\n\n    // Indexed by nodeID, but first (root) nodeID is 1\n    long[] blockMinValues = new long[numLeaves];\n\n    // +1 because leaf count is power of 2 (e.g. 8), and innerNodeCount is power of 2 minus 1 (e.g. 7)\n    long[] leafBlockFPs = new long[numLeaves];\n\n    // Make sure the math above \"worked\":\n    assert valueCount / blockMinValues.length <= maxValuesInLeafNode: \"valueCount=\" + valueCount + \" blockMinValues.length=\" + blockMinValues.length + \" maxValuesInLeafNode=\" + maxValuesInLeafNode;\n    //System.out.println(\"  avg pointsPerLeaf=\" + (valueCount/blockMinValues.length));\n\n    // Sort all docs by value:\n    SliceWriter sortedWriter = null;\n\n    boolean success = false;\n    try {\n      sortedWriter = sort();\n      heapWriter = null;\n\n      build(1, numLeaves,\n            new PathSlice(sortedWriter, 0, valueCount),\n            out,\n            globalMinValue, globalMaxValue,\n            blockMinValues,\n            leafBlockFPs);\n      success = true;\n    } finally {\n      if (success) {\n        sortedWriter.destroy();\n        IOUtils.rm(tempInput);\n      } else {\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n        IOUtils.deleteFilesIgnoringExceptions(tempInput);\n      }\n    }\n\n    //System.out.println(\"Total nodes: \" + innerNodeCount);\n\n    // Write index:\n    long indexFP = out.getFilePointer();\n    out.writeVInt(numLeaves);\n    out.writeVInt((int) (valueCount / numLeaves));\n\n    for (int i=0;i<blockMinValues.length;i++) {\n      out.writeLong(blockMinValues[i]);\n    }\n    for (int i=0;i<leafBlockFPs.length;i++) {\n      out.writeVLong(leafBlockFPs[i]);\n    }\n    out.writeLong(globalMaxValue);\n\n    if (tempDir != null) {\n      // If we had to go offline, we should have removed all temp files we wrote:\n      assert directoryIsEmpty(tempDir);\n      IOUtils.rm(tempDir);\n    }\n\n    return indexFP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2","date":1443129829,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#finish(IndexOutput).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#finish(IndexOutput).mjava","sourceNew":"  /** Writes the 1d BKD tree to the provided {@link IndexOutput} and returns the file offset where index was written. */\n  public long finish(IndexOutput out) throws IOException {\n\n    if (writer != null) {\n      writer.close();\n    }\n\n    if (valueCount == 0) {\n      throw new IllegalStateException(\"at least one value must be indexed\");\n    }\n\n    // TODO: we should use in-memory sort here, if number of points is small enough:\n\n    long countPerLeaf = valueCount;\n    long innerNodeCount = 1;\n\n    while (countPerLeaf > maxValuesInLeafNode) {\n      countPerLeaf = (countPerLeaf+1)/2;\n      innerNodeCount *= 2;\n    }\n\n    //System.out.println(\"innerNodeCount=\" + innerNodeCount);\n\n    if (1+2*innerNodeCount >= Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many nodes; increase maxValuesInLeafNode (currently \" + maxValuesInLeafNode + \") and reindex\");\n    }\n\n    innerNodeCount--;\n\n    int numLeaves = (int) (innerNodeCount+1);\n\n    // Indexed by nodeID, but first (root) nodeID is 1\n    long[] blockMinValues = new long[numLeaves];\n\n    // +1 because leaf count is power of 2 (e.g. 8), and innerNodeCount is power of 2 minus 1 (e.g. 7)\n    long[] leafBlockFPs = new long[numLeaves];\n\n    // Make sure the math above \"worked\":\n    assert valueCount / blockMinValues.length <= maxValuesInLeafNode: \"valueCount=\" + valueCount + \" blockMinValues.length=\" + blockMinValues.length + \" maxValuesInLeafNode=\" + maxValuesInLeafNode;\n    //System.out.println(\"  avg pointsPerLeaf=\" + (valueCount/blockMinValues.length));\n\n    // Sort all docs by value:\n    SliceWriter sortedWriter = null;\n\n    boolean success = false;\n    try {\n      sortedWriter = sort();\n      heapWriter = null;\n\n      build(1, numLeaves,\n            new PathSlice(sortedWriter, 0, valueCount),\n            out,\n            globalMinValue, globalMaxValue,\n            blockMinValues,\n            leafBlockFPs);\n      success = true;\n    } finally {\n      if (success) {\n        sortedWriter.destroy();\n        IOUtils.rm(tempInput);\n      } else {\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n        IOUtils.deleteFilesIgnoringExceptions(tempInput);\n      }\n    }\n\n    //System.out.println(\"Total nodes: \" + innerNodeCount);\n\n    // Write index:\n    long indexFP = out.getFilePointer();\n    out.writeVInt(numLeaves);\n    out.writeVInt((int) (valueCount / numLeaves));\n\n    for (int i=0;i<blockMinValues.length;i++) {\n      out.writeLong(blockMinValues[i]);\n    }\n    for (int i=0;i<leafBlockFPs.length;i++) {\n      out.writeVLong(leafBlockFPs[i]);\n    }\n    out.writeLong(globalMaxValue);\n\n    return indexFP;\n  }\n\n","sourceOld":"  /** Writes the 1d BKD tree to the provided {@link IndexOutput} and returns the file offset where index was written. */\n  public long finish(IndexOutput out) throws IOException {\n\n    if (writer != null) {\n      writer.close();\n    }\n\n    if (valueCount == 0) {\n      throw new IllegalStateException(\"at least one value must be indexed\");\n    }\n\n    // TODO: we should use in-memory sort here, if number of points is small enough:\n\n    long countPerLeaf = valueCount;\n    long innerNodeCount = 1;\n\n    while (countPerLeaf > maxValuesInLeafNode) {\n      countPerLeaf = (countPerLeaf+1)/2;\n      innerNodeCount *= 2;\n    }\n\n    //System.out.println(\"innerNodeCount=\" + innerNodeCount);\n\n    if (1+2*innerNodeCount >= Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many nodes; increase maxValuesInLeafNode (currently \" + maxValuesInLeafNode + \") and reindex\");\n    }\n\n    innerNodeCount--;\n\n    int numLeaves = (int) (innerNodeCount+1);\n\n    // Indexed by nodeID, but first (root) nodeID is 1\n    long[] blockMinValues = new long[numLeaves];\n\n    // +1 because leaf count is power of 2 (e.g. 8), and innerNodeCount is power of 2 minus 1 (e.g. 7)\n    long[] leafBlockFPs = new long[numLeaves];\n\n    // Make sure the math above \"worked\":\n    assert valueCount / blockMinValues.length <= maxValuesInLeafNode: \"valueCount=\" + valueCount + \" blockMinValues.length=\" + blockMinValues.length + \" maxValuesInLeafNode=\" + maxValuesInLeafNode;\n    //System.out.println(\"  avg pointsPerLeaf=\" + (valueCount/blockMinValues.length));\n\n    // Sort all docs by value:\n    SliceWriter sortedWriter = null;\n\n    boolean success = false;\n    try {\n      sortedWriter = sort();\n      heapWriter = null;\n\n      build(1, numLeaves,\n            new PathSlice(sortedWriter, 0, valueCount),\n            out,\n            globalMinValue, globalMaxValue,\n            blockMinValues,\n            leafBlockFPs);\n      success = true;\n    } finally {\n      if (success) {\n        sortedWriter.destroy();\n        IOUtils.rm(tempInput);\n      } else {\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n        IOUtils.deleteFilesIgnoringExceptions(tempInput);\n      }\n    }\n\n    //System.out.println(\"Total nodes: \" + innerNodeCount);\n\n    // Write index:\n    long indexFP = out.getFilePointer();\n    out.writeVInt(numLeaves);\n    out.writeVInt((int) (valueCount / numLeaves));\n\n    for (int i=0;i<blockMinValues.length;i++) {\n      out.writeLong(blockMinValues[i]);\n    }\n    for (int i=0;i<leafBlockFPs.length;i++) {\n      out.writeVLong(leafBlockFPs[i]);\n    }\n    out.writeLong(globalMaxValue);\n\n    if (tempDir != null) {\n      // If we had to go offline, we should have removed all temp files we wrote:\n      assert directoryIsEmpty(tempDir);\n      IOUtils.rm(tempDir);\n    }\n\n    return indexFP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#finish(IndexOutput).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#finish(IndexOutput).mjava","sourceNew":"  /** Writes the 1d BKD tree to the provided {@link IndexOutput} and returns the file offset where index was written. */\n  public long finish(IndexOutput out) throws IOException {\n\n    if (offlineWriter != null) {\n      offlineWriter.close();\n    }\n\n    if (valueCount == 0) {\n      throw new IllegalStateException(\"at least one value must be indexed\");\n    }\n\n    // TODO: we should use in-memory sort here, if number of points is small enough:\n\n    long countPerLeaf = valueCount;\n    long innerNodeCount = 1;\n\n    while (countPerLeaf > maxValuesInLeafNode) {\n      countPerLeaf = (countPerLeaf+1)/2;\n      innerNodeCount *= 2;\n    }\n\n    //System.out.println(\"innerNodeCount=\" + innerNodeCount);\n\n    if (1+2*innerNodeCount >= Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many nodes; increase maxValuesInLeafNode (currently \" + maxValuesInLeafNode + \") and reindex\");\n    }\n\n    innerNodeCount--;\n\n    int numLeaves = (int) (innerNodeCount+1);\n\n    // Indexed by nodeID, but first (root) nodeID is 1\n    long[] blockMinValues = new long[numLeaves];\n\n    // +1 because leaf count is power of 2 (e.g. 8), and innerNodeCount is power of 2 minus 1 (e.g. 7)\n    long[] leafBlockFPs = new long[numLeaves];\n\n    // Make sure the math above \"worked\":\n    assert valueCount / blockMinValues.length <= maxValuesInLeafNode: \"valueCount=\" + valueCount + \" blockMinValues.length=\" + blockMinValues.length + \" maxValuesInLeafNode=\" + maxValuesInLeafNode;\n    //System.out.println(\"  avg pointsPerLeaf=\" + (valueCount/blockMinValues.length));\n\n    // Sort all docs by value:\n    SliceWriter sortedWriter = null;\n\n    boolean success = false;\n    try {\n      sortedWriter = sort();\n      heapWriter = null;\n\n      build(1, numLeaves,\n            new PathSlice(sortedWriter, 0, valueCount),\n            out,\n            globalMinValue, globalMaxValue,\n            blockMinValues,\n            leafBlockFPs);\n      success = true;\n    } finally {\n      if (success) {\n        sortedWriter.destroy();\n        if (tempInput != null) {\n          tempDir.deleteFile(tempInput.getName());\n        }\n      } else {\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n        if (tempInput != null) {\n          IOUtils.deleteFilesIgnoringExceptions(tempDir, tempInput.getName());\n        }\n      }\n    }\n\n    //System.out.println(\"Total nodes: \" + innerNodeCount);\n\n    // Write index:\n    long indexFP = out.getFilePointer();\n    out.writeVInt(numLeaves);\n    out.writeVInt((int) (valueCount / numLeaves));\n\n    for (int i=0;i<blockMinValues.length;i++) {\n      out.writeLong(blockMinValues[i]);\n    }\n    for (int i=0;i<leafBlockFPs.length;i++) {\n      out.writeVLong(leafBlockFPs[i]);\n    }\n    out.writeLong(globalMaxValue);\n\n    return indexFP;\n  }\n\n","sourceOld":"  /** Writes the 1d BKD tree to the provided {@link IndexOutput} and returns the file offset where index was written. */\n  public long finish(IndexOutput out) throws IOException {\n\n    if (writer != null) {\n      writer.close();\n    }\n\n    if (valueCount == 0) {\n      throw new IllegalStateException(\"at least one value must be indexed\");\n    }\n\n    // TODO: we should use in-memory sort here, if number of points is small enough:\n\n    long countPerLeaf = valueCount;\n    long innerNodeCount = 1;\n\n    while (countPerLeaf > maxValuesInLeafNode) {\n      countPerLeaf = (countPerLeaf+1)/2;\n      innerNodeCount *= 2;\n    }\n\n    //System.out.println(\"innerNodeCount=\" + innerNodeCount);\n\n    if (1+2*innerNodeCount >= Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many nodes; increase maxValuesInLeafNode (currently \" + maxValuesInLeafNode + \") and reindex\");\n    }\n\n    innerNodeCount--;\n\n    int numLeaves = (int) (innerNodeCount+1);\n\n    // Indexed by nodeID, but first (root) nodeID is 1\n    long[] blockMinValues = new long[numLeaves];\n\n    // +1 because leaf count is power of 2 (e.g. 8), and innerNodeCount is power of 2 minus 1 (e.g. 7)\n    long[] leafBlockFPs = new long[numLeaves];\n\n    // Make sure the math above \"worked\":\n    assert valueCount / blockMinValues.length <= maxValuesInLeafNode: \"valueCount=\" + valueCount + \" blockMinValues.length=\" + blockMinValues.length + \" maxValuesInLeafNode=\" + maxValuesInLeafNode;\n    //System.out.println(\"  avg pointsPerLeaf=\" + (valueCount/blockMinValues.length));\n\n    // Sort all docs by value:\n    SliceWriter sortedWriter = null;\n\n    boolean success = false;\n    try {\n      sortedWriter = sort();\n      heapWriter = null;\n\n      build(1, numLeaves,\n            new PathSlice(sortedWriter, 0, valueCount),\n            out,\n            globalMinValue, globalMaxValue,\n            blockMinValues,\n            leafBlockFPs);\n      success = true;\n    } finally {\n      if (success) {\n        sortedWriter.destroy();\n        IOUtils.rm(tempInput);\n      } else {\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n        IOUtils.deleteFilesIgnoringExceptions(tempInput);\n      }\n    }\n\n    //System.out.println(\"Total nodes: \" + innerNodeCount);\n\n    // Write index:\n    long indexFP = out.getFilePointer();\n    out.writeVInt(numLeaves);\n    out.writeVInt((int) (valueCount / numLeaves));\n\n    for (int i=0;i<blockMinValues.length;i++) {\n      out.writeLong(blockMinValues[i]);\n    }\n    for (int i=0;i<leafBlockFPs.length;i++) {\n      out.writeVLong(leafBlockFPs[i]);\n    }\n    out.writeLong(globalMaxValue);\n\n    return indexFP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#finish(IndexOutput).mjava","sourceNew":null,"sourceOld":"  /** Writes the 1d BKD tree to the provided {@link IndexOutput} and returns the file offset where index was written. */\n  public long finish(IndexOutput out) throws IOException {\n\n    if (offlineWriter != null) {\n      offlineWriter.close();\n    }\n\n    if (valueCount == 0) {\n      throw new IllegalStateException(\"at least one value must be indexed\");\n    }\n\n    // TODO: we should use in-memory sort here, if number of points is small enough:\n\n    long countPerLeaf = valueCount;\n    long innerNodeCount = 1;\n\n    while (countPerLeaf > maxValuesInLeafNode) {\n      countPerLeaf = (countPerLeaf+1)/2;\n      innerNodeCount *= 2;\n    }\n\n    //System.out.println(\"innerNodeCount=\" + innerNodeCount);\n\n    if (1+2*innerNodeCount >= Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many nodes; increase maxValuesInLeafNode (currently \" + maxValuesInLeafNode + \") and reindex\");\n    }\n\n    innerNodeCount--;\n\n    int numLeaves = (int) (innerNodeCount+1);\n\n    // Indexed by nodeID, but first (root) nodeID is 1\n    long[] blockMinValues = new long[numLeaves];\n\n    // +1 because leaf count is power of 2 (e.g. 8), and innerNodeCount is power of 2 minus 1 (e.g. 7)\n    long[] leafBlockFPs = new long[numLeaves];\n\n    // Make sure the math above \"worked\":\n    assert valueCount / blockMinValues.length <= maxValuesInLeafNode: \"valueCount=\" + valueCount + \" blockMinValues.length=\" + blockMinValues.length + \" maxValuesInLeafNode=\" + maxValuesInLeafNode;\n    //System.out.println(\"  avg pointsPerLeaf=\" + (valueCount/blockMinValues.length));\n\n    // Sort all docs by value:\n    SliceWriter sortedWriter = null;\n\n    boolean success = false;\n    try {\n      sortedWriter = sort();\n      heapWriter = null;\n\n      build(1, numLeaves,\n            new PathSlice(sortedWriter, 0, valueCount),\n            out,\n            globalMinValue, globalMaxValue,\n            blockMinValues,\n            leafBlockFPs);\n      success = true;\n    } finally {\n      if (success) {\n        sortedWriter.destroy();\n        if (tempInput != null) {\n          tempDir.deleteFile(tempInput.getName());\n        }\n      } else {\n        try {\n          sortedWriter.destroy();\n        } catch (Throwable t) {\n          // Suppress to keep throwing original exc\n        }\n        if (tempInput != null) {\n          IOUtils.deleteFilesIgnoringExceptions(tempDir, tempInput.getName());\n        }\n      }\n    }\n\n    //System.out.println(\"Total nodes: \" + innerNodeCount);\n\n    // Write index:\n    long indexFP = out.getFilePointer();\n    out.writeVInt(numLeaves);\n    out.writeVInt((int) (valueCount / numLeaves));\n\n    for (int i=0;i<blockMinValues.length;i++) {\n      out.writeLong(blockMinValues[i]);\n    }\n    for (int i=0;i<leafBlockFPs.length;i++) {\n      out.writeVLong(leafBlockFPs[i]);\n    }\n    out.writeLong(globalMaxValue);\n\n    return indexFP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["f64b7098768253180859cd8faeae6b1a185b06ed"],"f64b7098768253180859cd8faeae6b1a185b06ed":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["f64b7098768253180859cd8faeae6b1a185b06ed"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"f64b7098768253180859cd8faeae6b1a185b06ed":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}