{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","commits":[{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexSearcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexSearcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = IndexReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexSearcher searcher = new IndexSearcher(dBase.getDb(), true);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = IndexReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = IndexReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = IndexReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = IndexReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      searcher.close();\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/surround/query/BooleanQueryTst#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = IndexReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n\n    if (verbose) {    \n        System.out.println(\"\");\n        System.out.println(\"Query: \" + queryText);\n    }\n    \n    SrndQuery lq = QueryParser.parse(queryText);\n    \n    /* if (verbose) System.out.println(\"Srnd: \" + lq.toString()); */\n    \n    Query query = lq.makeLuceneQueryField(fieldName, qf);\n    /* if (verbose) System.out.println(\"Lucene: \" + query.toString()); */\n\n    TestCollector tc = new TestCollector();\n    IndexReader reader = IndexReader.open(dBase.getDb());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    try {\n      searcher.search(query, tc);\n    } finally {\n      reader.close();\n    }\n    tc.checkNrHits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["b89678825b68eccaf09e6ab71675fc0b0af1e099","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"a53a291ad9b1cc050d846b68758c061a55d52734":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}