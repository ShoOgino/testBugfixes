{"path":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testGetReaderByRam().mjava","commits":[{"id":"055d638a4196dbe214e915652b491642cfb7652b","date":1529056889,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testGetReaderByRam().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetReaderByRam() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l,\n        new NullInfoStream(), null, null);\n    assertEquals(0, pool.getReadersByRam().size());\n\n    int ord = 0;\n    for (SegmentCommitInfo commitInfo : segmentInfos) {\n      ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);\n      BinaryDocValuesFieldUpdates test = new BinaryDocValuesFieldUpdates(0, \"test\", commitInfo.info.maxDoc());\n      test.add(0, new BytesRef(new byte[ord++]));\n      test.finish();\n      readersAndUpdates.addDVUpdate(test);\n    }\n\n    List<ReadersAndUpdates> readersByRam = pool.getReadersByRam();\n    assertEquals(segmentInfos.size(), readersByRam.size());\n    long previousRam = Long.MAX_VALUE;\n    for (ReadersAndUpdates rld : readersByRam) {\n      assertTrue(\"previous: \" + previousRam + \" now: \" + rld.ramBytesUsed.get(), previousRam >= rld.ramBytesUsed.get());\n      previousRam = rld.ramBytesUsed.get();\n      rld.dropChanges();\n      pool.drop(rld.info);\n    }\n    IOUtils.close(pool, reader, directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testGetReaderByRam().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetReaderByRam() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l,\n        new NullInfoStream(), null, null);\n    assertEquals(0, pool.getReadersByRam().size());\n\n    int ord = 0;\n    for (SegmentCommitInfo commitInfo : segmentInfos) {\n      ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);\n      BinaryDocValuesFieldUpdates test = new BinaryDocValuesFieldUpdates(0, \"test\", commitInfo.info.maxDoc());\n      test.add(0, new BytesRef(new byte[ord++]));\n      test.finish();\n      readersAndUpdates.addDVUpdate(test);\n    }\n\n    List<ReadersAndUpdates> readersByRam = pool.getReadersByRam();\n    assertEquals(segmentInfos.size(), readersByRam.size());\n    long previousRam = Long.MAX_VALUE;\n    for (ReadersAndUpdates rld : readersByRam) {\n      assertTrue(\"previous: \" + previousRam + \" now: \" + rld.ramBytesUsed.get(), previousRam >= rld.ramBytesUsed.get());\n      previousRam = rld.ramBytesUsed.get();\n      rld.dropChanges();\n      pool.drop(rld.info);\n    }\n    IOUtils.close(pool, reader, directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testGetReaderByRam().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetReaderByRam() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l,\n        new NullInfoStream(), null, null);\n    assertEquals(0, pool.getReadersByRam().size());\n\n    int ord = 0;\n    for (SegmentCommitInfo commitInfo : segmentInfos) {\n      ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);\n      BinaryDocValuesFieldUpdates test = new BinaryDocValuesFieldUpdates(0, \"test\", commitInfo.info.maxDoc());\n      test.add(0, new BytesRef(new byte[ord++]));\n      test.finish();\n      readersAndUpdates.addDVUpdate(test);\n    }\n\n    List<ReadersAndUpdates> readersByRam = pool.getReadersByRam();\n    assertEquals(segmentInfos.size(), readersByRam.size());\n    long previousRam = Long.MAX_VALUE;\n    for (ReadersAndUpdates rld : readersByRam) {\n      assertTrue(\"previous: \" + previousRam + \" now: \" + rld.ramBytesUsed.get(), previousRam >= rld.ramBytesUsed.get());\n      previousRam = rld.ramBytesUsed.get();\n      rld.dropChanges();\n      pool.drop(rld.info);\n    }\n    IOUtils.close(pool, reader, directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testGetReaderByRam().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testGetReaderByRam().mjava","sourceNew":"  public void testGetReaderByRam() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l,\n        new NullInfoStream(), null, null, Collections.emptyMap());\n    assertEquals(0, pool.getReadersByRam().size());\n\n    int ord = 0;\n    for (SegmentCommitInfo commitInfo : segmentInfos) {\n      ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);\n      BinaryDocValuesFieldUpdates test = new BinaryDocValuesFieldUpdates(0, \"test\", commitInfo.info.maxDoc());\n      test.add(0, new BytesRef(new byte[ord++]));\n      test.finish();\n      readersAndUpdates.addDVUpdate(test);\n    }\n\n    List<ReadersAndUpdates> readersByRam = pool.getReadersByRam();\n    assertEquals(segmentInfos.size(), readersByRam.size());\n    long previousRam = Long.MAX_VALUE;\n    for (ReadersAndUpdates rld : readersByRam) {\n      assertTrue(\"previous: \" + previousRam + \" now: \" + rld.ramBytesUsed.get(), previousRam >= rld.ramBytesUsed.get());\n      previousRam = rld.ramBytesUsed.get();\n      rld.dropChanges();\n      pool.drop(rld.info);\n    }\n    IOUtils.close(pool, reader, directory);\n  }\n\n","sourceOld":"  public void testGetReaderByRam() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l,\n        new NullInfoStream(), null, null);\n    assertEquals(0, pool.getReadersByRam().size());\n\n    int ord = 0;\n    for (SegmentCommitInfo commitInfo : segmentInfos) {\n      ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);\n      BinaryDocValuesFieldUpdates test = new BinaryDocValuesFieldUpdates(0, \"test\", commitInfo.info.maxDoc());\n      test.add(0, new BytesRef(new byte[ord++]));\n      test.finish();\n      readersAndUpdates.addDVUpdate(test);\n    }\n\n    List<ReadersAndUpdates> readersByRam = pool.getReadersByRam();\n    assertEquals(segmentInfos.size(), readersByRam.size());\n    long previousRam = Long.MAX_VALUE;\n    for (ReadersAndUpdates rld : readersByRam) {\n      assertTrue(\"previous: \" + previousRam + \" now: \" + rld.ramBytesUsed.get(), previousRam >= rld.ramBytesUsed.get());\n      previousRam = rld.ramBytesUsed.get();\n      rld.dropChanges();\n      pool.drop(rld.info);\n    }\n    IOUtils.close(pool, reader, directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testGetReaderByRam().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderPool#testGetReaderByRam().mjava","sourceNew":"  public void testGetReaderByRam() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l,\n        new NullInfoStream(), null, null);\n    assertEquals(0, pool.getReadersByRam().size());\n\n    int ord = 0;\n    for (SegmentCommitInfo commitInfo : segmentInfos) {\n      ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);\n      BinaryDocValuesFieldUpdates test = new BinaryDocValuesFieldUpdates(0, \"test\", commitInfo.info.maxDoc());\n      test.add(0, new BytesRef(new byte[ord++]));\n      test.finish();\n      readersAndUpdates.addDVUpdate(test);\n    }\n\n    List<ReadersAndUpdates> readersByRam = pool.getReadersByRam();\n    assertEquals(segmentInfos.size(), readersByRam.size());\n    long previousRam = Long.MAX_VALUE;\n    for (ReadersAndUpdates rld : readersByRam) {\n      assertTrue(\"previous: \" + previousRam + \" now: \" + rld.ramBytesUsed.get(), previousRam >= rld.ramBytesUsed.get());\n      previousRam = rld.ramBytesUsed.get();\n      rld.dropChanges();\n      pool.drop(rld.info);\n    }\n    IOUtils.close(pool, reader, directory);\n  }\n\n","sourceOld":"  public void testGetReaderByRam() throws IOException {\n    Directory directory = newDirectory();\n    FieldInfos.FieldNumbers fieldNumbers = buildIndex(directory);\n    StandardDirectoryReader reader = (StandardDirectoryReader) DirectoryReader.open(directory);\n    SegmentInfos segmentInfos = reader.segmentInfos.clone();\n    ReaderPool pool = new ReaderPool(directory, directory, segmentInfos, fieldNumbers, () -> 0l,\n        new NullInfoStream(), null, null, Collections.emptyMap());\n    assertEquals(0, pool.getReadersByRam().size());\n\n    int ord = 0;\n    for (SegmentCommitInfo commitInfo : segmentInfos) {\n      ReadersAndUpdates readersAndUpdates = pool.get(commitInfo, true);\n      BinaryDocValuesFieldUpdates test = new BinaryDocValuesFieldUpdates(0, \"test\", commitInfo.info.maxDoc());\n      test.add(0, new BytesRef(new byte[ord++]));\n      test.finish();\n      readersAndUpdates.addDVUpdate(test);\n    }\n\n    List<ReadersAndUpdates> readersByRam = pool.getReadersByRam();\n    assertEquals(segmentInfos.size(), readersByRam.size());\n    long previousRam = Long.MAX_VALUE;\n    for (ReadersAndUpdates rld : readersByRam) {\n      assertTrue(\"previous: \" + previousRam + \" now: \" + rld.ramBytesUsed.get(), previousRam >= rld.ramBytesUsed.get());\n      previousRam = rld.ramBytesUsed.get();\n      rld.dropChanges();\n      pool.drop(rld.info);\n    }\n    IOUtils.close(pool, reader, directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","055d638a4196dbe214e915652b491642cfb7652b"],"055d638a4196dbe214e915652b491642cfb7652b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["055d638a4196dbe214e915652b491642cfb7652b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","055d638a4196dbe214e915652b491642cfb7652b"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"055d638a4196dbe214e915652b491642cfb7652b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","763da4a9605e47013078edc323b9d4b608f0f9e0","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","055d638a4196dbe214e915652b491642cfb7652b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}