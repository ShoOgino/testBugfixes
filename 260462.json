{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","commits":[{"id":"8d47f68d60cbff5718136b945ba8c55982342f38","date":1285583375,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      final int pos = Integer.parseInt(new String(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length));\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cddcf4b60f72abb24b04a518d731a82decd7bca","date":1289259163,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.result, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      final int pos = Integer.parseInt(new String(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length));\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.result, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      final int pos = Integer.parseInt(new String(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length));\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.result, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.result, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.result, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.result, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      SimpleTextUtil.readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      SimpleTextUtil.readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      SimpleTextUtil.readLine(in, scratch);\n      assert StringHelper.startsWith(scratch, POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      SimpleTextUtil.readLine(in, scratch);\n      if (StringHelper.startsWith(scratch, PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      SimpleTextUtil.readLine(in, scratch);\n      assert scratch.startsWith(POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      SimpleTextUtil.readLine(in, scratch);\n      if (scratch.startsWith(PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      SimpleTextUtil.readLine(in, scratch);\n      assert StringHelper.startsWith(scratch, POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      SimpleTextUtil.readLine(in, scratch);\n      if (StringHelper.startsWith(scratch, PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      SimpleTextUtil.readLine(in, scratch);\n      assert StringHelper.startsWith(scratch, POS): \"got line=\" + scratch.utf8ToString();\n      UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+POS.length, scratch.length-POS.length, scratchUTF16_2);\n      final int pos = ArrayUtil.parseInt(scratchUTF16_2.chars, 0, scratchUTF16_2.length);\n      final long fp = in.getFilePointer();\n      SimpleTextUtil.readLine(in, scratch);\n      if (StringHelper.startsWith(scratch, PAYLOAD)) {\n        final int len = scratch.length - PAYLOAD.length;\n        if (scratch2.bytes.length < len) {\n          scratch2.grow(len);\n        }\n        System.arraycopy(scratch.bytes, PAYLOAD.length, scratch2.bytes, 0, len);\n        scratch2.length = len;\n        payload = scratch2;\n      } else {\n        payload = null;\n        in.seek(fp);\n      }\n      return pos;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["7cddcf4b60f72abb24b04a518d731a82decd7bca","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"06584e6e98d592b34e1329b384182f368d2025e8":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["06584e6e98d592b34e1329b384182f368d2025e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["8d47f68d60cbff5718136b945ba8c55982342f38","7cddcf4b60f72abb24b04a518d731a82decd7bca"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["7cddcf4b60f72abb24b04a518d731a82decd7bca"],"8d47f68d60cbff5718136b945ba8c55982342f38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7cddcf4b60f72abb24b04a518d731a82decd7bca"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"7cddcf4b60f72abb24b04a518d731a82decd7bca":["8d47f68d60cbff5718136b945ba8c55982342f38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["85a883878c0af761245ab048babc63d099f835f3","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"06584e6e98d592b34e1329b384182f368d2025e8":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d47f68d60cbff5718136b945ba8c55982342f38","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","06584e6e98d592b34e1329b384182f368d2025e8","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"8d47f68d60cbff5718136b945ba8c55982342f38":["85a883878c0af761245ab048babc63d099f835f3","7cddcf4b60f72abb24b04a518d731a82decd7bca"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"7cddcf4b60f72abb24b04a518d731a82decd7bca":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","85a883878c0af761245ab048babc63d099f835f3","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}