{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      MultiTermQuery.RewriteMethod rewriteMethod = ((MultiTermRewriteMethodAttribute) getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class))\n          .getMultiTermRewriteMethod();\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n        collator = ((RangeCollatorAttribute) getQueryConfigHandler()\n            .getAttribute(RangeCollatorAttribute.class)).getRangeCollator();\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n        locale = ((LocaleAttribute) getQueryConfigHandler().getAttribute(\n            LocaleAttribute.class)).getLocale();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n          dateRes = ((DateResolutionAttribute) fieldConfig\n              .getAttribute(DateResolutionAttribute.class)).getDateResolution();\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, Locale\n            .getDefault());\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        if (dateRes == null) {\n          // no default or field specific date resolution has been set,\n          // use deprecated DateField to maintain compatibilty with\n          // pre-1.9 Lucene versions.\n          part1 = DateField.dateToString(d1);\n          part2 = DateField.dateToString(d2);\n\n        } else {\n          part1 = DateTools.dateToString(d1, dateRes);\n          part2 = DateTools.dateToString(d2, dateRes);\n        }\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator, rewriteMethod);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e91b7614171e0a6a82351457c2870d2a0124ba9a","8ba2a9cb0538219391cdc1af0f41446cf39684d7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/processors/ParametricRangeQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      MultiTermQuery.RewriteMethod rewriteMethod = ((MultiTermRewriteMethodAttribute) getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class))\n          .getMultiTermRewriteMethod();\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n        collator = ((RangeCollatorAttribute) getQueryConfigHandler()\n            .getAttribute(RangeCollatorAttribute.class)).getRangeCollator();\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n        locale = ((LocaleAttribute) getQueryConfigHandler().getAttribute(\n            LocaleAttribute.class)).getLocale();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n          dateRes = ((DateResolutionAttribute) fieldConfig\n              .getAttribute(DateResolutionAttribute.class)).getDateResolution();\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, Locale\n            .getDefault());\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        if (dateRes == null) {\n          // no default or field specific date resolution has been set,\n          // use deprecated DateField to maintain compatibilty with\n          // pre-1.9 Lucene versions.\n          part1 = DateField.dateToString(d1);\n          part2 = DateField.dateToString(d2);\n\n        } else {\n          part1 = DateTools.dateToString(d1, dateRes);\n          part2 = DateTools.dateToString(d2, dateRes);\n        }\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator, rewriteMethod);\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof ParametricRangeQueryNode) {\n      ParametricRangeQueryNode parametricRangeNode = (ParametricRangeQueryNode) node;\n      ParametricQueryNode upper = parametricRangeNode.getUpperBound();\n      ParametricQueryNode lower = parametricRangeNode.getLowerBound();\n      Locale locale = Locale.getDefault();\n      Collator collator = null;\n      DateTools.Resolution dateRes = null;\n      boolean inclusive = false;\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      MultiTermQuery.RewriteMethod rewriteMethod = ((MultiTermRewriteMethodAttribute) getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class))\n          .getMultiTermRewriteMethod();\n\n      if (getQueryConfigHandler().hasAttribute(RangeCollatorAttribute.class)) {\n        collator = ((RangeCollatorAttribute) getQueryConfigHandler()\n            .getAttribute(RangeCollatorAttribute.class)).getRangeCollator();\n      }\n\n      if (getQueryConfigHandler().hasAttribute(LocaleAttribute.class)) {\n        locale = ((LocaleAttribute) getQueryConfigHandler().getAttribute(\n            LocaleAttribute.class)).getLocale();\n      }\n\n      FieldConfig fieldConfig = getQueryConfigHandler().getFieldConfig(\n          parametricRangeNode.getField());\n\n      if (fieldConfig != null) {\n\n        if (fieldConfig.hasAttribute(DateResolutionAttribute.class)) {\n          dateRes = ((DateResolutionAttribute) fieldConfig\n              .getAttribute(DateResolutionAttribute.class)).getDateResolution();\n        }\n\n      }\n\n      if (upper.getOperator() == CompareOperator.LE) {\n        inclusive = true;\n\n      } else if (lower.getOperator() == CompareOperator.GE) {\n        inclusive = true;\n      }\n\n      String part1 = lower.getTextAsString();\n      String part2 = upper.getTextAsString();\n\n      try {\n        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, Locale\n            .getDefault());\n        df.setLenient(true);\n        Date d1 = df.parse(part1);\n        Date d2 = df.parse(part2);\n        if (inclusive) {\n          // The user can only specify the date, not the time, so make sure\n          // the time is set to the latest possible time of that date to really\n          // include all documents:\n          Calendar cal = Calendar.getInstance(locale);\n          cal.setTime(d2);\n          cal.set(Calendar.HOUR_OF_DAY, 23);\n          cal.set(Calendar.MINUTE, 59);\n          cal.set(Calendar.SECOND, 59);\n          cal.set(Calendar.MILLISECOND, 999);\n          d2 = cal.getTime();\n        }\n\n        if (dateRes == null) {\n          // no default or field specific date resolution has been set,\n          // use deprecated DateField to maintain compatibilty with\n          // pre-1.9 Lucene versions.\n          part1 = DateField.dateToString(d1);\n          part2 = DateField.dateToString(d2);\n\n        } else {\n          part1 = DateTools.dateToString(d1, dateRes);\n          part2 = DateTools.dateToString(d2, dateRes);\n        }\n      } catch (Exception e) {\n        // do nothing\n      }\n\n      lower.setText(part1);\n      upper.setText(part2);\n\n      return new RangeQueryNode(lower, upper, collator, rewriteMethod);\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}