{"path":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","commits":[{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n    } else\n      streams.tokenStream.reset(reader);\n    \n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c79a056cc0ebc0f62e4a01c20808260cc4c70074"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c79a056cc0ebc0f62e4a01c20808260cc4c70074","date":1198809971,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n    } else\n      streams.tokenStream.reset(reader);\n    \n    return streams.filteredTokenStream;\n  }\n\n","bugFix":["6864413dbc0c12104c978c05456f3da1d45adb03"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5b54d19e4682ef2b08bd06f76c13a4c8d785386","date":1199633864,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54c106a73719ede69e08f8b0ffe2950cc9ebfa07","date":1244055085,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      if (useDefaultStopPositionIncrements) {\n        streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n      } else {\n        streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements, streams.filteredTokenStream, stopSet);\n      }\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1322761c4c1bce8324005ba020f3c3e72a4529a7","date":1245100743,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /** @deprecated Use {@link #tokenStream} instead */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      if (useDefaultStopPositionIncrements) {\n        streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n      } else {\n        streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements, streams.filteredTokenStream, stopSet);\n      }\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      if (useDefaultStopPositionIncrements) {\n        streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n      } else {\n        streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements, streams.filteredTokenStream, stopSet);\n      }\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d66301bc45f6e3ffc51d21dc8bd48290d58aad7b","date":1247589138,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  /** @deprecated Use {@link #tokenStream} instead */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      if (useDefaultStopPositionIncrements) {\n        streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n      } else {\n        streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements, streams.filteredTokenStream, stopSet);\n      }\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  /** @deprecated Use {@link #tokenStream} instead */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      if (useDefaultStopPositionIncrements) {\n        streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n      } else {\n        streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements, streams.filteredTokenStream, stopSet);\n      }\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements, streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  /** @deprecated Use {@link #tokenStream} instead */\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      if (useDefaultStopPositionIncrements) {\n        streams.filteredTokenStream = new StopFilter(streams.filteredTokenStream, stopSet);\n      } else {\n        streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements, streams.filteredTokenStream, stopSet);\n      }\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                   streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements, streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c8de810875032655c7b5d5bf07c5a6a22e70290","date":1256716915,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements,\n                                                   streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),\n                                                   streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ce0ce6485d29a241c4ca4b6179d14df6a66bae","date":1259357651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(matchVersion,\n          streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements,\n                                                   streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements,\n                                                   streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(matchVersion,\n          streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(matchVersion, streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(matchVersion,\n          streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(enableStopPositionIncrements,\n                                                   streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(matchVersion,\n          streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(matchVersion, streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(matchVersion,\n          streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(matchVersion, streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6864413dbc0c12104c978c05456f3da1d45adb03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c79a056cc0ebc0f62e4a01c20808260cc4c70074":["6864413dbc0c12104c978c05456f3da1d45adb03"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"54c106a73719ede69e08f8b0ffe2950cc9ebfa07":["a5b54d19e4682ef2b08bd06f76c13a4c8d785386"],"d66301bc45f6e3ffc51d21dc8bd48290d58aad7b":["1322761c4c1bce8324005ba020f3c3e72a4529a7"],"4c8de810875032655c7b5d5bf07c5a6a22e70290":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1322761c4c1bce8324005ba020f3c3e72a4529a7":["54c106a73719ede69e08f8b0ffe2950cc9ebfa07"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["d66301bc45f6e3ffc51d21dc8bd48290d58aad7b"],"41ce0ce6485d29a241c4ca4b6179d14df6a66bae":["4c8de810875032655c7b5d5bf07c5a6a22e70290"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["41ce0ce6485d29a241c4ca4b6179d14df6a66bae"],"a5b54d19e4682ef2b08bd06f76c13a4c8d785386":["c79a056cc0ebc0f62e4a01c20808260cc4c70074"]},"commit2Childs":{"6864413dbc0c12104c978c05456f3da1d45adb03":["c79a056cc0ebc0f62e4a01c20808260cc4c70074"],"c79a056cc0ebc0f62e4a01c20808260cc4c70074":["a5b54d19e4682ef2b08bd06f76c13a4c8d785386"],"ba1116b3450a9c1642c89445d131b37344055245":["4c8de810875032655c7b5d5bf07c5a6a22e70290"],"54c106a73719ede69e08f8b0ffe2950cc9ebfa07":["1322761c4c1bce8324005ba020f3c3e72a4529a7"],"d66301bc45f6e3ffc51d21dc8bd48290d58aad7b":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"4c8de810875032655c7b5d5bf07c5a6a22e70290":["41ce0ce6485d29a241c4ca4b6179d14df6a66bae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6864413dbc0c12104c978c05456f3da1d45adb03"],"1322761c4c1bce8324005ba020f3c3e72a4529a7":["d66301bc45f6e3ffc51d21dc8bd48290d58aad7b"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"41ce0ce6485d29a241c4ca4b6179d14df6a66bae":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a5b54d19e4682ef2b08bd06f76c13a4c8d785386":["54c106a73719ede69e08f8b0ffe2950cc9ebfa07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}