{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n\n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected count=\" + maxDoc + \", got=\" + count);\n    }\n\n    if (minValue == maxValue) {\n      addConstant(minValue);\n    } else if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n      addByte1(values);\n    } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE) {\n      addByte2(values);\n    } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE) {\n      addByte4(values);\n    } else {\n      addByte8(values);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  private void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n\n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected count=\" + maxDoc + \", got=\" + count);\n    }\n\n    if (minValue == maxValue) {\n      addConstant(minValue);\n    } else if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n      addByte1(values);\n    } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE) {\n      addByte2(values);\n    } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE) {\n      addByte4(values);\n    } else {\n      addByte8(values);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n\n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected count=\" + maxDoc + \", got=\" + count);\n    }\n\n    if (minValue == maxValue) {\n      addConstant(minValue);\n    } else if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n      addByte1(values);\n    } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE) {\n      addByte2(values);\n    } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE) {\n      addByte4(values);\n    } else {\n      addByte8(values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  private void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n\n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected count=\" + maxDoc + \", got=\" + count);\n    }\n\n    if (minValue == maxValue) {\n      addConstant(minValue);\n    } else if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n      addByte1(values);\n    } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE) {\n      addByte2(values);\n    } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE) {\n      addByte4(values);\n    } else {\n      addByte8(values);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n\n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected count=\" + maxDoc + \", got=\" + count);\n    }\n\n    if (minValue == maxValue) {\n      addConstant(minValue);\n    } else if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n      addByte1(values);\n    } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE) {\n      addByte2(values);\n    } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE) {\n      addByte4(values);\n    } else {\n      addByte8(values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene53/Lucene53NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  private void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n\n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected count=\" + maxDoc + \", got=\" + count);\n    }\n\n    if (minValue == maxValue) {\n      addConstant(minValue);\n    } else if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n      addByte1(values);\n    } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE) {\n      addByte2(values);\n    } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE) {\n      addByte4(values);\n    } else {\n      addByte8(values);\n    }\n  }\n\n","sourceOld":"  private void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n\n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected count=\" + maxDoc + \", got=\" + count);\n    }\n\n    if (minValue == maxValue) {\n      addConstant(minValue);\n    } else if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n      addByte1(values);\n    } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE) {\n      addByte2(values);\n    } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE) {\n      addByte4(values);\n    } else {\n      addByte8(values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene53/Lucene53NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n\n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected count=\" + maxDoc + \", got=\" + count);\n    }\n\n    if (minValue == maxValue) {\n      addConstant(minValue);\n    } else if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n      addByte1(values);\n    } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE) {\n      addByte2(values);\n    } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE) {\n      addByte4(values);\n    } else {\n      addByte8(values);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}