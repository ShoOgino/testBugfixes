{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = IndexReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","sourceOld":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = IndexReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = DirectoryReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","sourceOld":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = IndexReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = DirectoryReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      StoredDocument temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","sourceOld":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = DirectoryReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = DirectoryReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      StoredDocument temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","sourceOld":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = DirectoryReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#verifyIndex(Directory,int).mjava","sourceNew":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = DirectoryReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      Document temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","sourceOld":"  private boolean verifyIndex(Directory directory, int startAt) throws IOException\n  {\n    boolean fail = false;\n    IndexReader reader = DirectoryReader.open(directory);\n\n    int max = reader.maxDoc();\n    for (int i = 0; i < max; i++)\n    {\n      StoredDocument temp = reader.document(i);\n      //System.out.println(\"doc \"+i+\"=\"+temp.getField(\"count\").stringValue());\n      //compare the index doc number to the value that it should be\n      if (!temp.getField(\"count\").stringValue().equals((i + startAt) + \"\"))\n      {\n        fail = true;\n        System.out.println(\"Document \" + (i + startAt) + \" is returning document \" + temp.getField(\"count\").stringValue());\n      }\n    }\n    reader.close();\n    return fail;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"1d028314cced5858683a1bb4741423d0f934257b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}