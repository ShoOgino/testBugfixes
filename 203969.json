{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.Dump#execute(SimScenario).mjava","commits":[{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.Dump#execute(SimScenario).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      boolean redact = Boolean.parseBoolean(params.get(\"redact\", \"false\"));\n      boolean withData = Boolean.parseBoolean(params.get(\"withData\", \"false\"));\n      boolean withStats = Boolean.parseBoolean(params.get(\"withStats\", \"false\"));\n      boolean withSuggestions = Boolean.parseBoolean(params.get(\"withSuggestions\", \"true\"));\n      boolean withDiagnostics = Boolean.parseBoolean(params.get(\"withDiagnostics\", \"false\"));\n      boolean withNodeState = Boolean.parseBoolean(params.get(\"withNodeState\", \"false\"));\n      boolean withClusterState = Boolean.parseBoolean(params.get(\"withClusterState\", \"false\"));\n      boolean withManagerState = Boolean.parseBoolean(params.get(\"withManagerState\", \"false\"));\n      SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(scenario.cluster, null);\n      Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true, redact);\n      if (!withData) {\n        snapshot.remove(SnapshotCloudManager.DISTRIB_STATE_KEY);\n      }\n      if (!withNodeState) {\n        snapshot.remove(SnapshotCloudManager.NODE_STATE_KEY);\n      }\n      if (!withClusterState) {\n        snapshot.remove(SnapshotCloudManager.CLUSTER_STATE_KEY);\n      }\n      if (!withStats) {\n        snapshot.remove(SnapshotCloudManager.STATISTICS_STATE_KEY);\n      }\n      if (!withManagerState) {\n        snapshot.remove(SnapshotCloudManager.MANAGER_STATE_KEY);\n      }\n      if (!withDiagnostics) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"diagnostics\");\n      }\n      if (!withSuggestions) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"suggestions\");\n      }\n      String data = Utils.toJSONString(snapshot);\n      if (redact) {\n        RedactionUtils.RedactionContext ctx = SimUtils.getRedactionContext(snapshotCloudManager.getClusterStateProvider().getClusterState());\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      scenario.console.println(data);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e01fcbda8c04bde654f99836a2f8813f9444f3","date":1589564391,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.Dump#execute(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.Dump#execute(SimScenario).mjava","sourceNew":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      boolean redact = Boolean.parseBoolean(params.get(\"redact\", \"false\"));\n      boolean withData = Boolean.parseBoolean(params.get(\"withData\", \"false\"));\n      boolean withStats = Boolean.parseBoolean(params.get(\"withStats\", \"false\"));\n      boolean withSuggestions = Boolean.parseBoolean(params.get(\"withSuggestions\", \"true\"));\n      boolean withDiagnostics = Boolean.parseBoolean(params.get(\"withDiagnostics\", \"false\"));\n      boolean withNodeState = Boolean.parseBoolean(params.get(\"withNodeState\", \"false\"));\n      boolean withClusterState = Boolean.parseBoolean(params.get(\"withClusterState\", \"false\"));\n      boolean withManagerState = Boolean.parseBoolean(params.get(\"withManagerState\", \"false\"));\n      SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(scenario.cluster, null);\n      Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true, redact);\n      if (!withData) {\n        snapshot.remove(SnapshotCloudManager.DISTRIB_STATE_KEY);\n      }\n      if (!withNodeState) {\n        snapshot.remove(SnapshotCloudManager.NODE_STATE_KEY);\n      }\n      if (!withClusterState) {\n        snapshot.remove(SnapshotCloudManager.CLUSTER_STATE_KEY);\n      }\n      if (!withStats) {\n        snapshot.remove(SnapshotCloudManager.STATISTICS_STATE_KEY);\n      }\n      if (!withManagerState) {\n        snapshot.remove(SnapshotCloudManager.MANAGER_STATE_KEY);\n      }\n      if (!withDiagnostics) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"diagnostics\");\n      }\n      if (!withSuggestions) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"suggestions\");\n      }\n      String data = Utils.toJSONString(snapshot);\n      if (redact) {\n        RedactionUtils.RedactionContext ctx = SimUtils.getRedactionContext(snapshotCloudManager.getClusterStateProvider().getClusterState());\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      snapshotCloudManager.close();\n      scenario.console.println(data);\n    }\n\n","sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      boolean redact = Boolean.parseBoolean(params.get(\"redact\", \"false\"));\n      boolean withData = Boolean.parseBoolean(params.get(\"withData\", \"false\"));\n      boolean withStats = Boolean.parseBoolean(params.get(\"withStats\", \"false\"));\n      boolean withSuggestions = Boolean.parseBoolean(params.get(\"withSuggestions\", \"true\"));\n      boolean withDiagnostics = Boolean.parseBoolean(params.get(\"withDiagnostics\", \"false\"));\n      boolean withNodeState = Boolean.parseBoolean(params.get(\"withNodeState\", \"false\"));\n      boolean withClusterState = Boolean.parseBoolean(params.get(\"withClusterState\", \"false\"));\n      boolean withManagerState = Boolean.parseBoolean(params.get(\"withManagerState\", \"false\"));\n      SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(scenario.cluster, null);\n      Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true, redact);\n      if (!withData) {\n        snapshot.remove(SnapshotCloudManager.DISTRIB_STATE_KEY);\n      }\n      if (!withNodeState) {\n        snapshot.remove(SnapshotCloudManager.NODE_STATE_KEY);\n      }\n      if (!withClusterState) {\n        snapshot.remove(SnapshotCloudManager.CLUSTER_STATE_KEY);\n      }\n      if (!withStats) {\n        snapshot.remove(SnapshotCloudManager.STATISTICS_STATE_KEY);\n      }\n      if (!withManagerState) {\n        snapshot.remove(SnapshotCloudManager.MANAGER_STATE_KEY);\n      }\n      if (!withDiagnostics) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"diagnostics\");\n      }\n      if (!withSuggestions) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"suggestions\");\n      }\n      String data = Utils.toJSONString(snapshot);\n      if (redact) {\n        RedactionUtils.RedactionContext ctx = SimUtils.getRedactionContext(snapshotCloudManager.getClusterStateProvider().getClusterState());\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      scenario.console.println(data);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.Dump#execute(SimScenario).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.Dump#execute(SimScenario).mjava","sourceNew":"    @Override\n    @SuppressWarnings({\"unchecked\"})\n    public void execute(SimScenario scenario) throws Exception {\n      boolean redact = Boolean.parseBoolean(params.get(\"redact\", \"false\"));\n      boolean withData = Boolean.parseBoolean(params.get(\"withData\", \"false\"));\n      boolean withStats = Boolean.parseBoolean(params.get(\"withStats\", \"false\"));\n      boolean withSuggestions = Boolean.parseBoolean(params.get(\"withSuggestions\", \"true\"));\n      boolean withDiagnostics = Boolean.parseBoolean(params.get(\"withDiagnostics\", \"false\"));\n      boolean withNodeState = Boolean.parseBoolean(params.get(\"withNodeState\", \"false\"));\n      boolean withClusterState = Boolean.parseBoolean(params.get(\"withClusterState\", \"false\"));\n      boolean withManagerState = Boolean.parseBoolean(params.get(\"withManagerState\", \"false\"));\n      SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(scenario.cluster, null);\n      Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true, redact);\n      if (!withData) {\n        snapshot.remove(SnapshotCloudManager.DISTRIB_STATE_KEY);\n      }\n      if (!withNodeState) {\n        snapshot.remove(SnapshotCloudManager.NODE_STATE_KEY);\n      }\n      if (!withClusterState) {\n        snapshot.remove(SnapshotCloudManager.CLUSTER_STATE_KEY);\n      }\n      if (!withStats) {\n        snapshot.remove(SnapshotCloudManager.STATISTICS_STATE_KEY);\n      }\n      if (!withManagerState) {\n        snapshot.remove(SnapshotCloudManager.MANAGER_STATE_KEY);\n      }\n      if (!withDiagnostics) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"diagnostics\");\n      }\n      if (!withSuggestions) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"suggestions\");\n      }\n      String data = Utils.toJSONString(snapshot);\n      if (redact) {\n        RedactionUtils.RedactionContext ctx = SimUtils.getRedactionContext(snapshotCloudManager.getClusterStateProvider().getClusterState());\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      snapshotCloudManager.close();\n      scenario.console.println(data);\n    }\n\n","sourceOld":"    @Override\n    public void execute(SimScenario scenario) throws Exception {\n      boolean redact = Boolean.parseBoolean(params.get(\"redact\", \"false\"));\n      boolean withData = Boolean.parseBoolean(params.get(\"withData\", \"false\"));\n      boolean withStats = Boolean.parseBoolean(params.get(\"withStats\", \"false\"));\n      boolean withSuggestions = Boolean.parseBoolean(params.get(\"withSuggestions\", \"true\"));\n      boolean withDiagnostics = Boolean.parseBoolean(params.get(\"withDiagnostics\", \"false\"));\n      boolean withNodeState = Boolean.parseBoolean(params.get(\"withNodeState\", \"false\"));\n      boolean withClusterState = Boolean.parseBoolean(params.get(\"withClusterState\", \"false\"));\n      boolean withManagerState = Boolean.parseBoolean(params.get(\"withManagerState\", \"false\"));\n      SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(scenario.cluster, null);\n      Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true, redact);\n      if (!withData) {\n        snapshot.remove(SnapshotCloudManager.DISTRIB_STATE_KEY);\n      }\n      if (!withNodeState) {\n        snapshot.remove(SnapshotCloudManager.NODE_STATE_KEY);\n      }\n      if (!withClusterState) {\n        snapshot.remove(SnapshotCloudManager.CLUSTER_STATE_KEY);\n      }\n      if (!withStats) {\n        snapshot.remove(SnapshotCloudManager.STATISTICS_STATE_KEY);\n      }\n      if (!withManagerState) {\n        snapshot.remove(SnapshotCloudManager.MANAGER_STATE_KEY);\n      }\n      if (!withDiagnostics) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"diagnostics\");\n      }\n      if (!withSuggestions) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"suggestions\");\n      }\n      String data = Utils.toJSONString(snapshot);\n      if (redact) {\n        RedactionUtils.RedactionContext ctx = SimUtils.getRedactionContext(snapshotCloudManager.getClusterStateProvider().getClusterState());\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      snapshotCloudManager.close();\n      scenario.console.println(data);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimScenario.Dump#execute(SimScenario).mjava","sourceNew":null,"sourceOld":"    @Override\n    @SuppressWarnings({\"unchecked\"})\n    public void execute(SimScenario scenario) throws Exception {\n      boolean redact = Boolean.parseBoolean(params.get(\"redact\", \"false\"));\n      boolean withData = Boolean.parseBoolean(params.get(\"withData\", \"false\"));\n      boolean withStats = Boolean.parseBoolean(params.get(\"withStats\", \"false\"));\n      boolean withSuggestions = Boolean.parseBoolean(params.get(\"withSuggestions\", \"true\"));\n      boolean withDiagnostics = Boolean.parseBoolean(params.get(\"withDiagnostics\", \"false\"));\n      boolean withNodeState = Boolean.parseBoolean(params.get(\"withNodeState\", \"false\"));\n      boolean withClusterState = Boolean.parseBoolean(params.get(\"withClusterState\", \"false\"));\n      boolean withManagerState = Boolean.parseBoolean(params.get(\"withManagerState\", \"false\"));\n      SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(scenario.cluster, null);\n      Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true, redact);\n      if (!withData) {\n        snapshot.remove(SnapshotCloudManager.DISTRIB_STATE_KEY);\n      }\n      if (!withNodeState) {\n        snapshot.remove(SnapshotCloudManager.NODE_STATE_KEY);\n      }\n      if (!withClusterState) {\n        snapshot.remove(SnapshotCloudManager.CLUSTER_STATE_KEY);\n      }\n      if (!withStats) {\n        snapshot.remove(SnapshotCloudManager.STATISTICS_STATE_KEY);\n      }\n      if (!withManagerState) {\n        snapshot.remove(SnapshotCloudManager.MANAGER_STATE_KEY);\n      }\n      if (!withDiagnostics) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"diagnostics\");\n      }\n      if (!withSuggestions) {\n        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove(\"suggestions\");\n      }\n      String data = Utils.toJSONString(snapshot);\n      if (redact) {\n        RedactionUtils.RedactionContext ctx = SimUtils.getRedactionContext(snapshotCloudManager.getClusterStateProvider().getClusterState());\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      snapshotCloudManager.close();\n      scenario.console.println(data);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"e6e01fcbda8c04bde654f99836a2f8813f9444f3":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["e6e01fcbda8c04bde654f99836a2f8813f9444f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6e01fcbda8c04bde654f99836a2f8813f9444f3":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["e6e01fcbda8c04bde654f99836a2f8813f9444f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}