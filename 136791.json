{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#insertAndFindBestMatch(byte[],int,int,Match).mjava","commits":[{"id":"12ce9a95ee9b66c59103cc6016c0758c792d1b78","date":1359122086,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#insertAndFindBestMatch(byte[],int,int,Match).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#insertAndFindBestMatch(byte[],int,int,Match).mjava","sourceNew":"    boolean insertAndFindBestMatch(byte[] buf, int off, int matchLimit, Match match) {\n      match.start = off;\n      match.len = 0;\n\n      insert(off, buf);\n\n      int ref = hashPointer(buf, off);\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1)) {\n          break;\n        }\n        if (buf[ref + match.len] == buf[off + match.len] && readIntEquals(buf, ref, off)) {\n          final int matchLen = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          if (matchLen > match.len) {\n            match.ref = ref;\n            match.len = matchLen;\n          }\n        }\n        ref = next(ref);\n      }\n\n      return match.len != 0;\n    }\n\n","sourceOld":"    boolean insertAndFindBestMatch(byte[] buf, int off, int matchLimit, Match match) {\n      match.start = off;\n      match.len = 0;\n\n      insert(off, buf);\n\n      int ref = hashPointer(buf, off);\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1)) {\n          break;\n        }\n        if (buf[ref + match.len] == buf[off + match.len] && readIntEquals(buf, ref, off)) {\n          final int matchLen = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          if (matchLen > match.len) {\n            match.ref = ref;\n            match.len = matchLen;\n          }\n        }\n        ref = next(ref);\n      }\n\n      return match.len != 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#insertAndFindBestMatch(byte[],int,int,Match).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HashTable#insertAndFindBestMatch(byte[],int,int,Match).mjava","sourceNew":"    boolean insertAndFindBestMatch(byte[] buf, int off, int matchLimit, Match match) {\n      match.start = off;\n      match.len = 0;\n\n      insert(off, buf);\n\n      int ref = hashPointer(buf, off);\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1)) {\n          break;\n        }\n        if (buf[ref + match.len] == buf[off + match.len] && readIntEquals(buf, ref, off)) {\n          final int matchLen = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          if (matchLen > match.len) {\n            match.ref = ref;\n            match.len = matchLen;\n          }\n        }\n        ref = next(ref);\n      }\n\n      return match.len != 0;\n    }\n\n","sourceOld":"    boolean insertAndFindBestMatch(byte[] buf, int off, int matchLimit, Match match) {\n      match.start = off;\n      match.len = 0;\n\n      insert(off, buf);\n\n      int ref = hashPointer(buf, off);\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1)) {\n          break;\n        }\n        if (buf[ref + match.len] == buf[off + match.len] && readIntEquals(buf, ref, off)) {\n          final int matchLen = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          if (matchLen > match.len) {\n            match.ref = ref;\n            match.len = matchLen;\n          }\n        }\n        ref = next(ref);\n      }\n\n      return match.len != 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a","date":1378311096,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#insertAndFindBestMatch(byte[],int,int,Match).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#insertAndFindBestMatch(byte[],int,int,Match).mjava","sourceNew":"    boolean insertAndFindBestMatch(byte[] buf, int off, int matchLimit, Match match) {\n      match.start = off;\n      match.len = 0;\n      int delta = 0;\n      int repl = 0;\n\n      insert(off, buf);\n\n      int ref = hashPointer(buf, off);\n\n      if (ref >= off - 4 && ref <= off && ref >= base) { // potential repetition\n        if (readIntEquals(buf, ref, off)) { // confirmed\n          delta = off - ref;\n          repl = match.len = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          match.ref = ref;\n        }\n        ref = next(ref);\n      }\n\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1) || ref > off) {\n          break;\n        }\n        if (buf[ref + match.len] == buf[off + match.len] && readIntEquals(buf, ref, off)) {\n          final int matchLen = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          if (matchLen > match.len) {\n            match.ref = ref;\n            match.len = matchLen;\n          }\n        }\n        ref = next(ref);\n      }\n\n      if (repl != 0) {\n        int ptr = off;\n        final int end = off + repl - (MIN_MATCH - 1);\n        while (ptr < end - delta) {\n          chainTable[ptr & MASK] = (short) delta; // pre load\n          ++ptr;\n        }\n        do {\n          chainTable[ptr & MASK] = (short) delta;\n          hashTable[hashHC(readInt(buf, ptr))] = ptr;\n          ++ptr;\n        } while (ptr < end);\n        nextToUpdate = end;\n      }\n\n      return match.len != 0;\n    }\n\n","sourceOld":"    boolean insertAndFindBestMatch(byte[] buf, int off, int matchLimit, Match match) {\n      match.start = off;\n      match.len = 0;\n\n      insert(off, buf);\n\n      int ref = hashPointer(buf, off);\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1)) {\n          break;\n        }\n        if (buf[ref + match.len] == buf[off + match.len] && readIntEquals(buf, ref, off)) {\n          final int matchLen = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          if (matchLen > match.len) {\n            match.ref = ref;\n            match.len = matchLen;\n          }\n        }\n        ref = next(ref);\n      }\n\n      return match.len != 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LZ4.HCHashTable#insertAndFindBestMatch(byte[],int,int,Match).mjava","sourceNew":null,"sourceOld":"    boolean insertAndFindBestMatch(byte[] buf, int off, int matchLimit, Match match) {\n      match.start = off;\n      match.len = 0;\n      int delta = 0;\n      int repl = 0;\n\n      insert(off, buf);\n\n      int ref = hashPointer(buf, off);\n\n      if (ref >= off - 4 && ref <= off && ref >= base) { // potential repetition\n        if (readIntEquals(buf, ref, off)) { // confirmed\n          delta = off - ref;\n          repl = match.len = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          match.ref = ref;\n        }\n        ref = next(ref);\n      }\n\n      for (int i = 0; i < MAX_ATTEMPTS; ++i) {\n        if (ref < Math.max(base, off - MAX_DISTANCE + 1) || ref > off) {\n          break;\n        }\n        if (buf[ref + match.len] == buf[off + match.len] && readIntEquals(buf, ref, off)) {\n          final int matchLen = MIN_MATCH + commonBytes(buf, ref + MIN_MATCH, off + MIN_MATCH, matchLimit);\n          if (matchLen > match.len) {\n            match.ref = ref;\n            match.len = matchLen;\n          }\n        }\n        ref = next(ref);\n      }\n\n      if (repl != 0) {\n        int ptr = off;\n        final int end = off + repl - (MIN_MATCH - 1);\n        while (ptr < end - delta) {\n          chainTable[ptr & MASK] = (short) delta; // pre load\n          ++ptr;\n        }\n        do {\n          chainTable[ptr & MASK] = (short) delta;\n          hashTable[hashHC(readInt(buf, ptr))] = ptr;\n          ++ptr;\n        } while (ptr < end);\n        nextToUpdate = end;\n      }\n\n      return match.len != 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ce9a95ee9b66c59103cc6016c0758c792d1b78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9407318969e8504257b4c5764c65755a043e5404":["b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12ce9a95ee9b66c59103cc6016c0758c792d1b78"],"b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a":["12ce9a95ee9b66c59103cc6016c0758c792d1b78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"12ce9a95ee9b66c59103cc6016c0758c792d1b78":["dd45d4a2ee01a1932d33eec42f5272c2402da679","b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ce9a95ee9b66c59103cc6016c0758c792d1b78","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"b45f1d4d3fa719ae1898e9753cc6b0f30cd4022a":["9407318969e8504257b4c5764c65755a043e5404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}