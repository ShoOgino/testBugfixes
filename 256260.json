{"path":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":null,"sourceOld":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","sourceOld":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3","date":1269092670,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","sourceOld":"  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efab6c3a3f5595b2cc66b1f3ff9d8b5734afb4cf","date":1287096561,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    req.close();\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da2337b0517fb031be221e18e7b8e72c9af96ad3","date":1287097310,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blue','freq':1}, {'word':'blud','freq':1}, {'word':'boue','freq':1}]\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    req.close();\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","bugFix":null,"bugIntro":["61ab4111d25902ca08254bd3935ec801fbd3885f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blue','freq':1}, {'word':'blud','freq':1}, {'word':'boue','freq':1}]\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61ab4111d25902ca08254bd3935ec801fbd3885f","date":1291028825,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blud','freq':1}, {'word':'blue','freq':1}, {'word':'blee','freq':1}]\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blue','freq':1}, {'word':'blud','freq':1}, {'word':'boue','freq':1}]\"\n    );\n  }\n\n","bugFix":["da2337b0517fb031be221e18e7b8e72c9af96ad3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blud','freq':1}, {'word':'blue','freq':1}, {'word':'blee','freq':1}]\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blue','freq':1}, {'word':'blud','freq':1}, {'word':'boue','freq':1}]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blud','freq':1}, {'word':'blue','freq':1}, {'word':'blee','freq':1}]\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"spellCheckCompRH\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(CommonParams.Q, \"bluo\");\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, String.valueOf(5));\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(false));\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    String cmdExec = (String) values.get(\"command\");\n    assertEquals(\"build\",cmdExec);\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    NamedList blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(5,blue.get(\"numFound\"));\n    Collection<String> theSuggestion = (Collection<String>) blue.get(\"suggestion\");\n    assertEquals(5,theSuggestion.size());\n    //we know there are at least 5, but now only get 3\n\n    params.remove(SpellCheckComponent.SPELLCHECK_COUNT);\n    params.remove(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS);\n    params.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"3\");\n    params.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, String.valueOf(true));\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"false\");\n    rsp = new SolrQueryResponse();\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    values = rsp.getValues();\n\n    spellCheck = (NamedList) values.get(\"spellcheck\");\n    suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    blue = (NamedList) suggestions.get(\"bluo\");\n    assertEquals(3, blue.get(\"numFound\"));\n\n    List<SimpleOrderedMap> theSuggestions = (List<SimpleOrderedMap>)blue.get(\"suggestion\");\n    assertEquals(3, theSuggestions.size());\n\n    for (SimpleOrderedMap sug : theSuggestions) {\n      assertNotNull(sug.get(\"word\"));\n      assertNotNull(sug.get(\"freq\"));      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blud','freq':1}, {'word':'blue','freq':1}, {'word':'blee','freq':1}]\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blud','freq':1}, {'word':'blue','freq':1}, {'word':'blee','freq':1}]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blud','freq':1}, {'word':'blue','freq':1}, {'word':'blee','freq':1}]\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blud','freq':1}, {'word':'blue','freq':1}, {'word':'blee','freq':1}]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testExtendedResultsCount().mjava","sourceNew":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blud','freq':1}, {'word':'blue','freq':1}, {'word':'blee','freq':1}]\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testExtendedResultsCount() throws Exception {\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"false\")\n       ,\"/spellcheck/suggestions/[0]=='bluo'\"\n       ,\"/spellcheck/suggestions/[1]/numFound==5\"\n    );\n\n    assertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"bluo\", SpellCheckComponent.SPELLCHECK_COUNT,\"3\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n       ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'blud','freq':1}, {'word':'blue','freq':1}, {'word':'blee','freq':1}]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da2337b0517fb031be221e18e7b8e72c9af96ad3":["efab6c3a3f5595b2cc66b1f3ff9d8b5734afb4cf"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["61ab4111d25902ca08254bd3935ec801fbd3885f","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3","61ab4111d25902ca08254bd3935ec801fbd3885f"],"61ab4111d25902ca08254bd3935ec801fbd3885f":["da2337b0517fb031be221e18e7b8e72c9af96ad3"],"efab6c3a3f5595b2cc66b1f3ff9d8b5734afb4cf":["d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["61ab4111d25902ca08254bd3935ec801fbd3885f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["61ab4111d25902ca08254bd3935ec801fbd3885f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3","da2337b0517fb031be221e18e7b8e72c9af96ad3"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","61ab4111d25902ca08254bd3935ec801fbd3885f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"da2337b0517fb031be221e18e7b8e72c9af96ad3":["61ab4111d25902ca08254bd3935ec801fbd3885f","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"61ab4111d25902ca08254bd3935ec801fbd3885f":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","3bb13258feba31ab676502787ab2e1779f129b7a"],"efab6c3a3f5595b2cc66b1f3ff9d8b5734afb4cf":["da2337b0517fb031be221e18e7b8e72c9af96ad3"],"1da8d55113b689b06716246649de6f62430f15c0":["d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3"],"d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","efab6c3a3f5595b2cc66b1f3ff9d8b5734afb4cf","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}