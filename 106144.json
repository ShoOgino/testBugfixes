{"path":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testWrapper().mjava","commits":[{"id":"1d60e292705ee7b33afc5626438b30e694160930","date":1341229584,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testWrapper().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testWrapper().mjava","sourceNew":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","sourceOld":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testWrapper().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestTwoPhaseCommitTool#testWrapper().mjava","sourceNew":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","sourceOld":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b47e1512544568a22b82c96169d466fae8a4b79e","date":1354519309,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testWrapper().mjava","sourceNew":null,"sourceOld":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTwoPhaseCommitTool#testWrapper().mjava","sourceNew":null,"sourceOld":"  public void testWrapper() throws Exception {\n    // tests that TwoPhaseCommitWrapper delegates prepare/commit w/ commitData\n    TwoPhaseCommitImpl impl = new TwoPhaseCommitImpl(false, false, false);\n    HashMap<String, String> commitData = new HashMap<String, String>();\n    TwoPhaseCommitWrapper wrapper = new TwoPhaseCommitWrapper(impl, commitData);\n\n    wrapper.prepareCommit();\n    assertSame(commitData, impl.prepareCommitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.prepareCommit(new HashMap<String, String>());\n    assertSame(commitData, impl.prepareCommitData);\n\n    wrapper.commit();\n    assertSame(commitData, impl.commitData);\n\n    // wrapper should ignore passed commitData\n    wrapper.commit(new HashMap<String, String>());\n    assertSame(commitData, impl.commitData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d60e292705ee7b33afc5626438b30e694160930":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1d60e292705ee7b33afc5626438b30e694160930"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["1d60e292705ee7b33afc5626438b30e694160930","b47e1512544568a22b82c96169d466fae8a4b79e"],"b47e1512544568a22b82c96169d466fae8a4b79e":["1d60e292705ee7b33afc5626438b30e694160930"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b47e1512544568a22b82c96169d466fae8a4b79e"]},"commit2Childs":{"1d60e292705ee7b33afc5626438b30e694160930":["fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","b47e1512544568a22b82c96169d466fae8a4b79e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d60e292705ee7b33afc5626438b30e694160930","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"b47e1512544568a22b82c96169d466fae8a4b79e":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}