{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readPresenceBytes(Arc[T],BytesReader).mjava","commits":[{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readPresenceBytes(Arc[T],BytesReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads the presence bits of a direct-addressing node, store them in the provided arc {@link Arc#bitTable()}\n   * and returns the number of presence bytes.\n   */\n  private int readPresenceBytes(Arc<T> arc, BytesReader in) throws IOException {\n    int numPresenceBytes = getNumPresenceBytes(arc.numArcs());\n    Arc.BitTable presenceBits = arc.getOrCreateBitTable().setNumLongs((numPresenceBytes + 7) / Long.BYTES);\n    for (int i = 0; i < numPresenceBytes; i++) {\n      // Read the next unsigned byte, shift it to the left, and appends it to the current long.\n      presenceBits.bits[i / Long.BYTES] |= (in.readByte() & 0xFFL) << (i * Byte.SIZE);\n    }\n    assert assertPresenceBytesAreValid(arc);\n    return numPresenceBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readPresenceBytes(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readPresenceBytes(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Reads the presence bits of a direct-addressing node.\n   * Actually we don't read them here, we just keep the pointer to the bit-table start and we skip them.\n   */\n  private void readPresenceBytes(Arc<T> arc, BytesReader in) throws IOException {\n    assert arc.bytesPerArc() > 0;\n    assert arc.nodeFlags() == ARCS_FOR_DIRECT_ADDRESSING;\n    arc.bitTableStart = in.getPosition();\n    in.skipBytes(getNumPresenceBytes(arc.numArcs()));\n  }\n\n","sourceOld":"  /**\n   * Reads the presence bits of a direct-addressing node, store them in the provided arc {@link Arc#bitTable()}\n   * and returns the number of presence bytes.\n   */\n  private int readPresenceBytes(Arc<T> arc, BytesReader in) throws IOException {\n    int numPresenceBytes = getNumPresenceBytes(arc.numArcs());\n    Arc.BitTable presenceBits = arc.getOrCreateBitTable().setNumLongs((numPresenceBytes + 7) / Long.BYTES);\n    for (int i = 0; i < numPresenceBytes; i++) {\n      // Read the next unsigned byte, shift it to the left, and appends it to the current long.\n      presenceBits.bits[i / Long.BYTES] |= (in.readByte() & 0xFFL) << (i * Byte.SIZE);\n    }\n    assert assertPresenceBytesAreValid(arc);\n    return numPresenceBytes;\n  }\n\n","bugFix":["71d31a7d5773508492505519bb5230b87c8937ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["71d31a7d5773508492505519bb5230b87c8937ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"]},"commit2Childs":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71d31a7d5773508492505519bb5230b87c8937ad"],"71d31a7d5773508492505519bb5230b87c8937ad":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}