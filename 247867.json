{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","commits":[{"id":"d642fe6577db47788146c0fc4fe14240ab1718b7","date":1376680349,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","pathOld":"/dev/null","sourceNew":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n    \n    if (base.startsWith(\".\"));\n    base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    \n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n    \n    int splits = path.split(File.separator).length;\n    \n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\" + File.separator);\n    }   \n    \n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5427fb60c73ccd0add23a712f1b2011aac9e9f52","5d8a378f0b3d0bc9105166d088f9823dd9f8c1cc","97de7a071dc54330fdeebd4a3ee4cc74e5036b38"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97de7a071dc54330fdeebd4a3ee4cc74e5036b38","date":1376709654,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","sourceNew":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n    \n    if (base.startsWith(\".\"));\n    base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    \n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n    \n    int splits = path.split(\"\\\\\" + File.separator).length;\n    \n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\" + File.separator);\n    }   \n    \n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","sourceOld":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n    \n    if (base.startsWith(\".\"));\n    base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    \n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n    \n    int splits = path.split(File.separator).length;\n    \n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\" + File.separator);\n    }   \n    \n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","bugFix":["d642fe6577db47788146c0fc4fe14240ab1718b7"],"bugIntro":["5d8a378f0b3d0bc9105166d088f9823dd9f8c1cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","pathOld":"/dev/null","sourceNew":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n    \n    if (base.startsWith(\".\"));\n    base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    \n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n    \n    int splits = path.split(\"\\\\\" + File.separator).length;\n    \n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\" + File.separator);\n    }   \n    \n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","pathOld":"/dev/null","sourceNew":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n    \n    if (base.startsWith(\".\"));\n    base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    \n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n    \n    int splits = path.split(\"\\\\\" + File.separator).length;\n    \n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\" + File.separator);\n    }   \n    \n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5427fb60c73ccd0add23a712f1b2011aac9e9f52","date":1394981162,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","sourceNew":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n    \n    if (base.startsWith(\".\")) {\n      base = base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    }\n\n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n    \n    int splits = path.split(\"\\\\\" + File.separator).length;\n    \n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\").append(File.separator);\n    }   \n    \n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","sourceOld":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n    \n    if (base.startsWith(\".\"));\n    base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    \n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n    \n    int splits = path.split(\"\\\\\" + File.separator).length;\n    \n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\" + File.separator);\n    }   \n    \n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","bugFix":["d642fe6577db47788146c0fc4fe14240ab1718b7"],"bugIntro":["5d8a378f0b3d0bc9105166d088f9823dd9f8c1cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","sourceNew":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n\n    if (base.startsWith(\".\")) {\n      base = base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    }\n\n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n\n    int splits = path.split(\"\\\\\" + File.separator).length;\n\n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\").append(File.separator);\n    }\n\n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","sourceOld":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n    \n    if (base.startsWith(\".\")) {\n      base = base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    }\n\n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n    \n    int splits = path.split(\"\\\\\" + File.separator).length;\n    \n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\").append(File.separator);\n    }   \n    \n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","bugFix":null,"bugIntro":["5d8a378f0b3d0bc9105166d088f9823dd9f8c1cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d8a378f0b3d0bc9105166d088f9823dd9f8c1cc","date":1427456199,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","sourceNew":"  private File getRelativeSolrHomePath(File solrHome) {\n    final Path solrHomePath = solrHome.toPath();\n    final Path curDirPath = new File(\"\").getAbsoluteFile().toPath();\n    \n    if (!solrHomePath.getRoot().equals(curDirPath.getRoot())) {\n      // root of current directory and solrHome are not the same, therefore cannot relativize\n      return solrHome;\n    }\n    \n    final Path root = solrHomePath.getRoot();\n    \n    // relativize current directory to root: /tmp/foo -> /tmp/foo/../..\n    final File relativizedCurDir = new File(curDirPath.toFile(), curDirPath.relativize(root).toString());\n    \n    // exclude the root from solrHome: /tmp/foo/solrHome -> tmp/foo/solrHome\n    final Path solrHomeRelativeToRoot = root.relativize(solrHomePath);\n    \n    // create the relative solrHome: /tmp/foo/../../tmp/foo/solrHome\n    return new File(relativizedCurDir, solrHomeRelativeToRoot.toString()).getAbsoluteFile();\n  }\n\n","sourceOld":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n\n    if (base.startsWith(\".\")) {\n      base = base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    }\n\n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n\n    int splits = path.split(\"\\\\\" + File.separator).length;\n\n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\").append(File.separator);\n    }\n\n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","bugFix":["d642fe6577db47788146c0fc4fe14240ab1718b7","97de7a071dc54330fdeebd4a3ee4cc74e5036b38","5427fb60c73ccd0add23a712f1b2011aac9e9f52","abb23fcc2461782ab204e61213240feb77d355aa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#getRelativeSolrHomePath(File).mjava","sourceNew":"  private File getRelativeSolrHomePath(File solrHome) {\n    final Path solrHomePath = solrHome.toPath();\n    final Path curDirPath = new File(\"\").getAbsoluteFile().toPath();\n    \n    if (!solrHomePath.getRoot().equals(curDirPath.getRoot())) {\n      // root of current directory and solrHome are not the same, therefore cannot relativize\n      return solrHome;\n    }\n    \n    final Path root = solrHomePath.getRoot();\n    \n    // relativize current directory to root: /tmp/foo -> /tmp/foo/../..\n    final File relativizedCurDir = new File(curDirPath.toFile(), curDirPath.relativize(root).toString());\n    \n    // exclude the root from solrHome: /tmp/foo/solrHome -> tmp/foo/solrHome\n    final Path solrHomeRelativeToRoot = root.relativize(solrHomePath);\n    \n    // create the relative solrHome: /tmp/foo/../../tmp/foo/solrHome\n    return new File(relativizedCurDir, solrHomeRelativeToRoot.toString()).getAbsoluteFile();\n  }\n\n","sourceOld":"  private File getRelativeSolrHomePath(File solrHome) {\n    String path = SolrResourceLoader.normalizeDir(new File(\".\").getAbsolutePath());\n    String base = new File(solrHome.getPath()).getAbsolutePath();\n\n    if (base.startsWith(\".\")) {\n      base = base.replaceFirst(\"\\\\.\", new File(\".\").getName());\n    }\n\n    if (path.endsWith(File.separator + \".\")) {\n      path = path.substring(0, path.length() - 2);\n    }\n\n    int splits = path.split(\"\\\\\" + File.separator).length;\n\n    StringBuilder p = new StringBuilder();\n    for (int i = 0; i < splits - 2; i++) {\n      p.append(\"..\").append(File.separator);\n    }\n\n    String prefix = FilenameUtils.getPrefix(path);\n    if (base.startsWith(prefix)) {\n      base = base.substring(prefix.length());\n    }\n\n    solrHome = new File(p.toString() + base);\n    return solrHome;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5427fb60c73ccd0add23a712f1b2011aac9e9f52":["97de7a071dc54330fdeebd4a3ee4cc74e5036b38"],"d642fe6577db47788146c0fc4fe14240ab1718b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["abb23fcc2461782ab204e61213240feb77d355aa","5d8a378f0b3d0bc9105166d088f9823dd9f8c1cc"],"abb23fcc2461782ab204e61213240feb77d355aa":["5427fb60c73ccd0add23a712f1b2011aac9e9f52"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97de7a071dc54330fdeebd4a3ee4cc74e5036b38"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97de7a071dc54330fdeebd4a3ee4cc74e5036b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d8a378f0b3d0bc9105166d088f9823dd9f8c1cc":["abb23fcc2461782ab204e61213240feb77d355aa"],"97de7a071dc54330fdeebd4a3ee4cc74e5036b38":["d642fe6577db47788146c0fc4fe14240ab1718b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d8a378f0b3d0bc9105166d088f9823dd9f8c1cc"]},"commit2Childs":{"5427fb60c73ccd0add23a712f1b2011aac9e9f52":["abb23fcc2461782ab204e61213240feb77d355aa"],"d642fe6577db47788146c0fc4fe14240ab1718b7":["97de7a071dc54330fdeebd4a3ee4cc74e5036b38"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"abb23fcc2461782ab204e61213240feb77d355aa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5d8a378f0b3d0bc9105166d088f9823dd9f8c1cc"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d642fe6577db47788146c0fc4fe14240ab1718b7","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"5d8a378f0b3d0bc9105166d088f9823dd9f8c1cc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97de7a071dc54330fdeebd4a3ee4cc74e5036b38":["5427fb60c73ccd0add23a712f1b2011aac9e9f52","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}