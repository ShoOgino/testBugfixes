{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","commits":[{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testNodeTraverse().mjava","sourceNew":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while(c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      c = c.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNodeTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Node prevN = null;\n    Node n = trie.getWorldNode();\n    assertEquals(0,n.getLevel());\n    assertEquals(ctx.getWorldBounds(),n.getShape());\n    while(n.getLevel() < trie.getMaxLevels()) {\n      prevN = n;\n      n = n.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevN.getLevel()+1,n.getLevel());\n      Rectangle prevNShape = (Rectangle) prevN.getShape();\n      Shape s = n.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","sourceNew":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>(c.getSubCells());\n      c = subCells.get(random().nextInt(subCells.size()-1));\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while(c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      c = c.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","sourceNew":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>(c.getSubCells());\n      c = subCells.get(random().nextInt(subCells.size()-1));\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while(c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      c = c.getSubCells().iterator().next();//TODO random which one?\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","sourceNew":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>();\n      CellIterator subCellsIter = c.getNextLevelCells(null);\n      while (subCellsIter.hasNext()) {\n        subCells.add(subCellsIter.next());\n      }\n      c = subCells.get(random().nextInt(subCells.size()-1));\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>(c.getSubCells());\n      c = subCells.get(random().nextInt(subCells.size()-1));\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","sourceNew":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>();\n      CellIterator subCellsIter = c.getNextLevelCells(null);\n      while (subCellsIter.hasNext()) {\n        subCells.add(subCellsIter.next());\n      }\n      c = subCells.get(random().nextInt(subCells.size()-1));\n\n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>();\n      CellIterator subCellsIter = c.getNextLevelCells(null);\n      while (subCellsIter.hasNext()) {\n        subCells.add(subCellsIter.next());\n      }\n      c = subCells.get(random().nextInt(subCells.size()-1));\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","sourceNew":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>();\n      CellIterator subCellsIter = c.getNextLevelCells(null);\n      while (subCellsIter.hasNext()) {\n        subCells.add(subCellsIter.next());\n      }\n      c = subCells.get(random().nextInt(subCells.size()-1));\n\n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>();\n      CellIterator subCellsIter = c.getNextLevelCells(null);\n      while (subCellsIter.hasNext()) {\n        subCells.add(subCellsIter.next());\n      }\n      c = subCells.get(random().nextInt(subCells.size()-1));\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","112d77ac8d3e10a362516ad834c9a11d35c94234"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["8259c159da2de2e8528524fb76b244b46cbded59","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["8259c159da2de2e8528524fb76b244b46cbded59"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"8259c159da2de2e8528524fb76b244b46cbded59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8259c159da2de2e8528524fb76b244b46cbded59"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"8259c159da2de2e8528524fb76b244b46cbded59":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}