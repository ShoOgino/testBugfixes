{"path":"lucene/core/src/java/org/apache/lucene/util/hash/MurmurHash2#hash(byte[],int,int,int).mjava","commits":[{"id":"0274c27988a26cb0cda3a0d15b282221b1b453f0","date":1343923460,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/hash/MurmurHash2#hash(byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static int hash(byte[] data, int seed, int offset, int len) {\r\n    int m = 0x5bd1e995;\r\n    int r = 24;\r\n    int h = seed ^ len;\r\n    int len_4 = len >> 2;\r\n    for (int i = 0; i < len_4; i++) {\r\n      int i_4 = offset + (i << 2);\r\n      int k = data[i_4 + 3];\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 2] & 0xff);\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 1] & 0xff);\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 0] & 0xff);\r\n      k *= m;\r\n      k ^= k >>> r;\r\n      k *= m;\r\n      h *= m;\r\n      h ^= k;\r\n    }\r\n    int len_m = len_4 << 2;\r\n    int left = len - len_m;\r\n    if (left != 0) {\r\n      if (left >= 3) {\r\n        h ^= data[offset + len - 3] << 16;\r\n      }\r\n      if (left >= 2) {\r\n        h ^= data[offset + len - 2] << 8;\r\n      }\r\n      if (left >= 1) {\r\n        h ^= data[offset + len - 1];\r\n      }\r\n      h *= m;\r\n    }\r\n    h ^= h >>> 13;\r\n    h *= m;\r\n    h ^= h >>> 15;\r\n    return h;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/hash/MurmurHash2#hash(byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static int hash(byte[] data, int seed, int offset, int len) {\r\n    int m = 0x5bd1e995;\r\n    int r = 24;\r\n    int h = seed ^ len;\r\n    int len_4 = len >> 2;\r\n    for (int i = 0; i < len_4; i++) {\r\n      int i_4 = offset + (i << 2);\r\n      int k = data[i_4 + 3];\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 2] & 0xff);\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 1] & 0xff);\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 0] & 0xff);\r\n      k *= m;\r\n      k ^= k >>> r;\r\n      k *= m;\r\n      h *= m;\r\n      h ^= k;\r\n    }\r\n    int len_m = len_4 << 2;\r\n    int left = len - len_m;\r\n    if (left != 0) {\r\n      if (left >= 3) {\r\n        h ^= data[offset + len - 3] << 16;\r\n      }\r\n      if (left >= 2) {\r\n        h ^= data[offset + len - 2] << 8;\r\n      }\r\n      if (left >= 1) {\r\n        h ^= data[offset + len - 1];\r\n      }\r\n      h *= m;\r\n    }\r\n    h ^= h >>> 13;\r\n    h *= m;\r\n    h ^= h >>> 15;\r\n    return h;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/hash/MurmurHash2#hash(byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static int hash(byte[] data, int seed, int offset, int len) {\r\n    int m = 0x5bd1e995;\r\n    int r = 24;\r\n    int h = seed ^ len;\r\n    int len_4 = len >> 2;\r\n    for (int i = 0; i < len_4; i++) {\r\n      int i_4 = offset + (i << 2);\r\n      int k = data[i_4 + 3];\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 2] & 0xff);\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 1] & 0xff);\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 0] & 0xff);\r\n      k *= m;\r\n      k ^= k >>> r;\r\n      k *= m;\r\n      h *= m;\r\n      h ^= k;\r\n    }\r\n    int len_m = len_4 << 2;\r\n    int left = len - len_m;\r\n    if (left != 0) {\r\n      if (left >= 3) {\r\n        h ^= data[offset + len - 3] << 16;\r\n      }\r\n      if (left >= 2) {\r\n        h ^= data[offset + len - 2] << 8;\r\n      }\r\n      if (left >= 1) {\r\n        h ^= data[offset + len - 1];\r\n      }\r\n      h *= m;\r\n    }\r\n    h ^= h >>> 13;\r\n    h *= m;\r\n    h ^= h >>> 15;\r\n    return h;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d681ca1a1c487b2501ef9bde8602a65c4c717a46","date":1346078839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/hash/MurmurHash2#hash(byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/hash/MurmurHash2#hash(byte[],int,int,int).mjava","sourceNew":"  public static int hash(byte[] data, int seed, int offset, int len) {\n    int m = 0x5bd1e995;\n    int r = 24;\n    int h = seed ^ len;\n    int len_4 = len >> 2;\n    for (int i = 0; i < len_4; i++) {\n      int i_4 = offset + (i << 2);\n      int k = data[i_4 + 3];\n      k = k << 8;\n      k = k | (data[i_4 + 2] & 0xff);\n      k = k << 8;\n      k = k | (data[i_4 + 1] & 0xff);\n      k = k << 8;\n      k = k | (data[i_4 + 0] & 0xff);\n      k *= m;\n      k ^= k >>> r;\n      k *= m;\n      h *= m;\n      h ^= k;\n    }\n    int len_m = len_4 << 2;\n    int left = len - len_m;\n    if (left != 0) {\n      if (left >= 3) {\n        h ^= data[offset + len - 3] << 16;\n      }\n      if (left >= 2) {\n        h ^= data[offset + len - 2] << 8;\n      }\n      if (left >= 1) {\n        h ^= data[offset + len - 1];\n      }\n      h *= m;\n    }\n    h ^= h >>> 13;\n    h *= m;\n    h ^= h >>> 15;\n    return h;\n  }\n\n","sourceOld":"  public static int hash(byte[] data, int seed, int offset, int len) {\r\n    int m = 0x5bd1e995;\r\n    int r = 24;\r\n    int h = seed ^ len;\r\n    int len_4 = len >> 2;\r\n    for (int i = 0; i < len_4; i++) {\r\n      int i_4 = offset + (i << 2);\r\n      int k = data[i_4 + 3];\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 2] & 0xff);\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 1] & 0xff);\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 0] & 0xff);\r\n      k *= m;\r\n      k ^= k >>> r;\r\n      k *= m;\r\n      h *= m;\r\n      h ^= k;\r\n    }\r\n    int len_m = len_4 << 2;\r\n    int left = len - len_m;\r\n    if (left != 0) {\r\n      if (left >= 3) {\r\n        h ^= data[offset + len - 3] << 16;\r\n      }\r\n      if (left >= 2) {\r\n        h ^= data[offset + len - 2] << 8;\r\n      }\r\n      if (left >= 1) {\r\n        h ^= data[offset + len - 1];\r\n      }\r\n      h *= m;\r\n    }\r\n    h ^= h >>> 13;\r\n    h *= m;\r\n    h ^= h >>> 15;\r\n    return h;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/hash/MurmurHash2#hash(byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/hash/MurmurHash2#hash(byte[],int,int,int).mjava","sourceNew":"  public static int hash(byte[] data, int seed, int offset, int len) {\n    int m = 0x5bd1e995;\n    int r = 24;\n    int h = seed ^ len;\n    int len_4 = len >> 2;\n    for (int i = 0; i < len_4; i++) {\n      int i_4 = offset + (i << 2);\n      int k = data[i_4 + 3];\n      k = k << 8;\n      k = k | (data[i_4 + 2] & 0xff);\n      k = k << 8;\n      k = k | (data[i_4 + 1] & 0xff);\n      k = k << 8;\n      k = k | (data[i_4 + 0] & 0xff);\n      k *= m;\n      k ^= k >>> r;\n      k *= m;\n      h *= m;\n      h ^= k;\n    }\n    int len_m = len_4 << 2;\n    int left = len - len_m;\n    if (left != 0) {\n      if (left >= 3) {\n        h ^= data[offset + len - 3] << 16;\n      }\n      if (left >= 2) {\n        h ^= data[offset + len - 2] << 8;\n      }\n      if (left >= 1) {\n        h ^= data[offset + len - 1];\n      }\n      h *= m;\n    }\n    h ^= h >>> 13;\n    h *= m;\n    h ^= h >>> 15;\n    return h;\n  }\n\n","sourceOld":"  public static int hash(byte[] data, int seed, int offset, int len) {\r\n    int m = 0x5bd1e995;\r\n    int r = 24;\r\n    int h = seed ^ len;\r\n    int len_4 = len >> 2;\r\n    for (int i = 0; i < len_4; i++) {\r\n      int i_4 = offset + (i << 2);\r\n      int k = data[i_4 + 3];\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 2] & 0xff);\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 1] & 0xff);\r\n      k = k << 8;\r\n      k = k | (data[i_4 + 0] & 0xff);\r\n      k *= m;\r\n      k ^= k >>> r;\r\n      k *= m;\r\n      h *= m;\r\n      h ^= k;\r\n    }\r\n    int len_m = len_4 << 2;\r\n    int left = len - len_m;\r\n    if (left != 0) {\r\n      if (left >= 3) {\r\n        h ^= data[offset + len - 3] << 16;\r\n      }\r\n      if (left >= 2) {\r\n        h ^= data[offset + len - 2] << 8;\r\n      }\r\n      if (left >= 1) {\r\n        h ^= data[offset + len - 1];\r\n      }\r\n      h *= m;\r\n    }\r\n    h ^= h >>> 13;\r\n    h *= m;\r\n    h ^= h >>> 15;\r\n    return h;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","date":1346918556,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/MurmurHash2#hash(byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/hash/MurmurHash2#hash(byte[],int,int,int).mjava","sourceNew":"  public static int hash(byte[] data, int seed, int offset, int len) {\n    int m = 0x5bd1e995;\n    int r = 24;\n    int h = seed ^ len;\n    int len_4 = len >> 2;\n    for (int i = 0; i < len_4; i++) {\n      int i_4 = offset + (i << 2);\n      int k = data[i_4 + 3];\n      k = k << 8;\n      k = k | (data[i_4 + 2] & 0xff);\n      k = k << 8;\n      k = k | (data[i_4 + 1] & 0xff);\n      k = k << 8;\n      k = k | (data[i_4 + 0] & 0xff);\n      k *= m;\n      k ^= k >>> r;\n      k *= m;\n      h *= m;\n      h ^= k;\n    }\n    int len_m = len_4 << 2;\n    int left = len - len_m;\n    if (left != 0) {\n      if (left >= 3) {\n        h ^= data[offset + len - 3] << 16;\n      }\n      if (left >= 2) {\n        h ^= data[offset + len - 2] << 8;\n      }\n      if (left >= 1) {\n        h ^= data[offset + len - 1];\n      }\n      h *= m;\n    }\n    h ^= h >>> 13;\n    h *= m;\n    h ^= h >>> 15;\n    return h;\n  }\n\n","sourceOld":"  public static int hash(byte[] data, int seed, int offset, int len) {\n    int m = 0x5bd1e995;\n    int r = 24;\n    int h = seed ^ len;\n    int len_4 = len >> 2;\n    for (int i = 0; i < len_4; i++) {\n      int i_4 = offset + (i << 2);\n      int k = data[i_4 + 3];\n      k = k << 8;\n      k = k | (data[i_4 + 2] & 0xff);\n      k = k << 8;\n      k = k | (data[i_4 + 1] & 0xff);\n      k = k << 8;\n      k = k | (data[i_4 + 0] & 0xff);\n      k *= m;\n      k ^= k >>> r;\n      k *= m;\n      h *= m;\n      h ^= k;\n    }\n    int len_m = len_4 << 2;\n    int left = len - len_m;\n    if (left != 0) {\n      if (left >= 3) {\n        h ^= data[offset + len - 3] << 16;\n      }\n      if (left >= 2) {\n        h ^= data[offset + len - 2] << 8;\n      }\n      if (left >= 1) {\n        h ^= data[offset + len - 1];\n      }\n      h *= m;\n    }\n    h ^= h >>> 13;\n    h *= m;\n    h ^= h >>> 15;\n    return h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d681ca1a1c487b2501ef9bde8602a65c4c717a46":["0274c27988a26cb0cda3a0d15b282221b1b453f0"],"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["d681ca1a1c487b2501ef9bde8602a65c4c717a46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0274c27988a26cb0cda3a0d15b282221b1b453f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0274c27988a26cb0cda3a0d15b282221b1b453f0"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0274c27988a26cb0cda3a0d15b282221b1b453f0"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","d681ca1a1c487b2501ef9bde8602a65c4c717a46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30"]},"commit2Childs":{"d681ca1a1c487b2501ef9bde8602a65c4c717a46":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","05a14b2611ead08655a2b2bdc61632eb31316e57"],"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0274c27988a26cb0cda3a0d15b282221b1b453f0","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"0274c27988a26cb0cda3a0d15b282221b1b453f0":["d681ca1a1c487b2501ef9bde8602a65c4c717a46","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8fd5be977c105554c6a7b68afcdbc511439723ab","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}