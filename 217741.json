{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testParseWildcardAndPhraseQueries().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testParseWildcardAndPhraseQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testParseWildcardAndPhraseQueries().mjava","sourceNew":"  public void testParseWildcardAndPhraseQueries() throws ParseException {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = qp.parse(queryString);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = qp.parse(qtxt);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n  }\n\n","sourceOld":"  public void testParseWildcardAndPhraseQueries() throws ParseException {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = qp.parse(queryString);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = qp.parse(qtxt);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5629050969c1e696c5dc14e8639f3e733e8e33c","date":1313606044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testParseWildcardAndPhraseQueries().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testParseWildcardAndPhraseQueries().mjava","sourceNew":"  public void testParseWildcardAndPhraseQueries() throws ParseException {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = qp.parse(queryString);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = qp.parse(qtxt);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n  }\n\n","sourceOld":"  public void testParseWildcardAndPhraseQueries() throws ParseException {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new MockAnalyzer(random));\n    qp.setAllowLeadingWildcard(true);\n\n    String prefixQueries[][] = {\n        {\"a*\", \"ab*\", \"abc*\",},\n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"},\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"},\n    };\n\n    String wildcardQueries[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"},\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"},\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"},\n    };\n\n     // test queries that must be prefix queries\n    for (int i = 0; i < prefixQueries.length; i++) {\n      for (int j = 0; j < prefixQueries[i].length; j++) {\n        String queryString = prefixQueries[i][j];\n        Query q = qp.parse(queryString);\n        assertEquals(PrefixQuery.class, q.getClass());\n      }\n    }\n\n    // test queries that must be wildcard queries\n    for (int i = 0; i < wildcardQueries.length; i++) {\n      for (int j = 0; j < wildcardQueries[i].length; j++) {\n        String qtxt = wildcardQueries[i][j];\n        Query q = qp.parse(qtxt);\n        assertEquals(WildcardQuery.class, q.getClass());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5629050969c1e696c5dc14e8639f3e733e8e33c"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}