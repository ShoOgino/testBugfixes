{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","commits":[{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper[Scorer]).mjava","sourceNew":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    float scoreSum = 0;\n    float scoreMax = 0;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      final float subScore = w.scorer.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier; \n  }\n\n","sourceOld":"  @Override\n  protected float score(DisiWrapper<Scorer> topList) throws IOException {\n    float scoreSum = 0;\n    float scoreMax = 0;\n    for (DisiWrapper<Scorer> w = topList; w != null; w = w.next) {\n      final float subScore = w.iterator.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988","date":1476202055,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","sourceNew":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    float scoreSum = 0;\n    float scoreMax = Float.NEGATIVE_INFINITY;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      final float subScore = w.scorer.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier; \n  }\n\n","sourceOld":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    float scoreSum = 0;\n    float scoreMax = 0;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      final float subScore = w.scorer.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","sourceNew":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    float scoreSum = 0;\n    float scoreMax = Float.NEGATIVE_INFINITY;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      final float subScore = w.scorer.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier; \n  }\n\n","sourceOld":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    float scoreSum = 0;\n    float scoreMax = 0;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      final float subScore = w.scorer.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","sourceNew":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    double scoreSum = 0;\n    float scoreMax = Float.NEGATIVE_INFINITY;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      final float subScore = w.scorer.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return (float) (scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier); \n  }\n\n","sourceOld":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    float scoreSum = 0;\n    float scoreMax = Float.NEGATIVE_INFINITY;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      final float subScore = w.scorer.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","sourceNew":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    double scoreSum = 0;\n    float scoreMax = Float.NEGATIVE_INFINITY;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      final float subScore = w.scorer.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return (float) (scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier); \n  }\n\n","sourceOld":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    float scoreSum = 0;\n    float scoreMax = Float.NEGATIVE_INFINITY;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      final float subScore = w.scorer.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4874ce841615411ddc4f5998fc9db9a533827976","date":1514294366,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score(DisiWrapper).mjava","sourceNew":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    float scoreMax = 0;\n    double otherScoreSum = 0;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      float subScore = w.scorer.score();\n      if (subScore >= scoreMax) {\n        otherScoreSum += scoreMax;\n        scoreMax = subScore;\n      } else {\n        otherScoreSum += subScore;\n      }\n    }\n    return (float) (scoreMax + otherScoreSum * tieBreakerMultiplier);\n  }\n\n","sourceOld":"  @Override\n  protected float score(DisiWrapper topList) throws IOException {\n    double scoreSum = 0;\n    float scoreMax = Float.NEGATIVE_INFINITY;\n    for (DisiWrapper w = topList; w != null; w = w.next) {\n      final float subScore = w.scorer.score();\n      scoreSum += subScore;\n      if (subScore > scoreMax) {\n        scoreMax = subScore;\n      }\n    }\n    return (float) (scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"4874ce841615411ddc4f5998fc9db9a533827976":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4874ce841615411ddc4f5998fc9db9a533827976"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["4874ce841615411ddc4f5998fc9db9a533827976"],"4874ce841615411ddc4f5998fc9db9a533827976":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}