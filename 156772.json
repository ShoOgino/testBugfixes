{"path":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#getArray().mjava","commits":[{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#getArray().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Object getArray() {\n      if (!hasArray()) {\n        return null;\n      }\n      try {\n        Class<?> componentType = null;\n        Object[] arrays = new Object[slices.length];\n        int numDocs = 0;\n        for (int i = 0; i < slices.length; i++) {\n          DocValuesSlice slice = slices[i];\n          Source source = slice.docValues.getSource();\n          Object array = null;\n          if (!(source instanceof EmptySource)) {\n            // EmptySource is skipped - marks a gap in the array\n            array = source.getArray();\n          }\n          numDocs += slice.length;\n          if (array != null) {\n            if (componentType == null) {\n              componentType = array.getClass().getComponentType();\n            }\n            assert componentType == array.getClass().getComponentType();\n          }\n          arrays[i] = array;\n        }\n        assert componentType != null;\n        synchronized (this) {\n          if (cachedArray != null) {\n            return cachedArray;\n          }\n          final Object globalArray = Array.newInstance(componentType, numDocs);\n\n          for (int i = 0; i < slices.length; i++) {\n            DocValuesSlice slice = slices[i];\n            if (arrays[i] != null) {\n              assert slice.length == Array.getLength(arrays[i]);\n              System.arraycopy(arrays[i], 0, globalArray, slice.start,\n                  slice.length);\n            }\n          }\n          return cachedArray = globalArray;\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"load failed\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#getArray().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#getArray().mjava","sourceNew":"    @Override\n    public Object getArray() {\n      if (!hasArray()) {\n        return null;\n      }\n      try {\n        Class<?> componentType = null;\n        Object[] arrays = new Object[slices.length];\n        int numDocs = 0;\n        for (int i = 0; i < slices.length; i++) {\n          DocValuesSlice slice = slices[i];\n          Source source = slice.docValues.getSource();\n          Object array = null;\n          if (!(source instanceof EmptySource)) {\n            // EmptySource is skipped - marks a gap in the array\n            array = source.getArray();\n          }\n          numDocs += slice.length;\n          if (array != null) {\n            if (componentType == null) {\n              componentType = array.getClass().getComponentType();\n            }\n            assert componentType == array.getClass().getComponentType();\n          }\n          arrays[i] = array;\n        }\n        assert componentType != null;\n        synchronized (this) {\n          if (cachedArray != null) {\n            return cachedArray;\n          }\n          final Object globalArray = Array.newInstance(componentType, numDocs);\n\n          for (int i = 0; i < slices.length; i++) {\n            DocValuesSlice slice = slices[i];\n            if (arrays[i] != null) {\n              assert slice.length == Array.getLength(arrays[i]);\n              System.arraycopy(arrays[i], 0, globalArray, slice.start,\n                  slice.length);\n            }\n          }\n          return cachedArray = globalArray;\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"load failed\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Object getArray() {\n      if (!hasArray()) {\n        return null;\n      }\n      try {\n        Class<?> componentType = null;\n        Object[] arrays = new Object[slices.length];\n        int numDocs = 0;\n        for (int i = 0; i < slices.length; i++) {\n          DocValuesSlice slice = slices[i];\n          Source source = slice.docValues.getSource();\n          Object array = null;\n          if (!(source instanceof EmptySource)) {\n            // EmptySource is skipped - marks a gap in the array\n            array = source.getArray();\n          }\n          numDocs += slice.length;\n          if (array != null) {\n            if (componentType == null) {\n              componentType = array.getClass().getComponentType();\n            }\n            assert componentType == array.getClass().getComponentType();\n          }\n          arrays[i] = array;\n        }\n        assert componentType != null;\n        synchronized (this) {\n          if (cachedArray != null) {\n            return cachedArray;\n          }\n          final Object globalArray = Array.newInstance(componentType, numDocs);\n\n          for (int i = 0; i < slices.length; i++) {\n            DocValuesSlice slice = slices[i];\n            if (arrays[i] != null) {\n              assert slice.length == Array.getLength(arrays[i]);\n              System.arraycopy(arrays[i], 0, globalArray, slice.start,\n                  slice.length);\n            }\n          }\n          return cachedArray = globalArray;\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"load failed\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}