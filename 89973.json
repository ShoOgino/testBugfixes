{"path":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Return the priority that merge threads run at. */\n  public synchronized void setMergeThreadPriority(int pri) {\n    mergeThreadPriority = pri;\n\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++) {\n      MergeThread merge = (MergeThread) mergeThreads.get(i);\n      try {\n        merge.setPriority(pri);\n      } catch (NullPointerException npe) {\n        // Strangely, Sun's JDK 1.5 on Linux sometimes\n        // throws NPE out of here...\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d5f48f93ebe46929b99824596327a9dc6d6130d9","290c401c31db375e771805c3ba7ac5f64c7370dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","sourceNew":"  /** Return the priority that merge threads run at. */\n  public synchronized void setMergeThreadPriority(int pri) {\n    mergeThreadPriority = pri;\n\n    final int numThreads = mergeThreadCount();\n    for(int i=0;i<numThreads;i++) {\n      MergeThread merge = (MergeThread) mergeThreads.get(i);\n      try {\n        merge.setPriority(pri);\n      } catch (NullPointerException npe) {\n        // Strangely, Sun's JDK 1.5 on Linux sometimes\n        // throws NPE out of here...\n      }\n    }\n  }\n\n","sourceOld":"  /** Return the priority that merge threads run at. */\n  public synchronized void setMergeThreadPriority(int pri) {\n    mergeThreadPriority = pri;\n\n    final int numThreads = mergeThreads.size();\n    for(int i=0;i<numThreads;i++) {\n      MergeThread merge = (MergeThread) mergeThreads.get(i);\n      try {\n        merge.setPriority(pri);\n      } catch (NullPointerException npe) {\n        // Strangely, Sun's JDK 1.5 on Linux sometimes\n        // throws NPE out of here...\n      }\n    }\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5f48f93ebe46929b99824596327a9dc6d6130d9","date":1193648456,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","sourceNew":"  /** Return the priority that merge threads run at. */\n  public synchronized void setMergeThreadPriority(int pri) {\n    if (pri > Thread.MAX_PRIORITY || pri < Thread.MIN_PRIORITY)\n      throw new IllegalArgumentException(\"priority must be in range \" + Thread.MIN_PRIORITY + \" .. \" + Thread.MAX_PRIORITY + \" inclusive\");\n    mergeThreadPriority = pri;\n\n    final int numThreads = mergeThreadCount();\n    for(int i=0;i<numThreads;i++) {\n      MergeThread merge = (MergeThread) mergeThreads.get(i);\n      merge.setThreadPriority(pri);\n    }\n  }\n\n","sourceOld":"  /** Return the priority that merge threads run at. */\n  public synchronized void setMergeThreadPriority(int pri) {\n    mergeThreadPriority = pri;\n\n    final int numThreads = mergeThreadCount();\n    for(int i=0;i<numThreads;i++) {\n      MergeThread merge = (MergeThread) mergeThreads.get(i);\n      try {\n        merge.setPriority(pri);\n      } catch (NullPointerException npe) {\n        // Strangely, Sun's JDK 1.5 on Linux sometimes\n        // throws NPE out of here...\n      }\n    }\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","sourceNew":"  /** Return the priority that merge threads run at. */\n  public synchronized void setMergeThreadPriority(int pri) {\n    if (pri > Thread.MAX_PRIORITY || pri < Thread.MIN_PRIORITY)\n      throw new IllegalArgumentException(\"priority must be in range \" + Thread.MIN_PRIORITY + \" .. \" + Thread.MAX_PRIORITY + \" inclusive\");\n    mergeThreadPriority = pri;\n\n    final int numThreads = mergeThreadCount();\n    for(int i=0;i<numThreads;i++) {\n      MergeThread merge = mergeThreads.get(i);\n      merge.setThreadPriority(pri);\n    }\n  }\n\n","sourceOld":"  /** Return the priority that merge threads run at. */\n  public synchronized void setMergeThreadPriority(int pri) {\n    if (pri > Thread.MAX_PRIORITY || pri < Thread.MIN_PRIORITY)\n      throw new IllegalArgumentException(\"priority must be in range \" + Thread.MIN_PRIORITY + \" .. \" + Thread.MAX_PRIORITY + \" inclusive\");\n    mergeThreadPriority = pri;\n\n    final int numThreads = mergeThreadCount();\n    for(int i=0;i<numThreads;i++) {\n      MergeThread merge = (MergeThread) mergeThreads.get(i);\n      merge.setThreadPriority(pri);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de0e4c7f15d10d2c193c9fa2cbfb8dd37f282fec","date":1258377983,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","sourceNew":"  /** Set the priority that merge threads run at. */\n  public synchronized void setMergeThreadPriority(int pri) {\n    if (pri > Thread.MAX_PRIORITY || pri < Thread.MIN_PRIORITY)\n      throw new IllegalArgumentException(\"priority must be in range \" + Thread.MIN_PRIORITY + \" .. \" + Thread.MAX_PRIORITY + \" inclusive\");\n    mergeThreadPriority = pri;\n\n    final int numThreads = mergeThreadCount();\n    for(int i=0;i<numThreads;i++) {\n      MergeThread merge = mergeThreads.get(i);\n      merge.setThreadPriority(pri);\n    }\n  }\n\n","sourceOld":"  /** Return the priority that merge threads run at. */\n  public synchronized void setMergeThreadPriority(int pri) {\n    if (pri > Thread.MAX_PRIORITY || pri < Thread.MIN_PRIORITY)\n      throw new IllegalArgumentException(\"priority must be in range \" + Thread.MIN_PRIORITY + \" .. \" + Thread.MAX_PRIORITY + \" inclusive\");\n    mergeThreadPriority = pri;\n\n    final int numThreads = mergeThreadCount();\n    for(int i=0;i<numThreads;i++) {\n      MergeThread merge = mergeThreads.get(i);\n      merge.setThreadPriority(pri);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa","date":1261431504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","sourceNew":"  /** Set the base priority that merge threads run at.\n   *  Note that CMS may increase priority of some merge\n   *  threads beyond this base priority.  It's best not to\n   *  set this any higher than\n   *  Thread.MAX_PRIORITY-maxThreadCount, so that CMS has\n   *  room to set relative priority among threads.  */\n  public synchronized void setMergeThreadPriority(int pri) {\n    if (pri > Thread.MAX_PRIORITY || pri < Thread.MIN_PRIORITY)\n      throw new IllegalArgumentException(\"priority must be in range \" + Thread.MIN_PRIORITY + \" .. \" + Thread.MAX_PRIORITY + \" inclusive\");\n    mergeThreadPriority = pri;\n    updateMergeThreads();\n  }\n\n","sourceOld":"  /** Set the priority that merge threads run at. */\n  public synchronized void setMergeThreadPriority(int pri) {\n    if (pri > Thread.MAX_PRIORITY || pri < Thread.MIN_PRIORITY)\n      throw new IllegalArgumentException(\"priority must be in range \" + Thread.MIN_PRIORITY + \" .. \" + Thread.MAX_PRIORITY + \" inclusive\");\n    mergeThreadPriority = pri;\n\n    final int numThreads = mergeThreadCount();\n    for(int i=0;i<numThreads;i++) {\n      MergeThread merge = mergeThreads.get(i);\n      merge.setThreadPriority(pri);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","pathOld":"src/java/org/apache/lucene/index/ConcurrentMergeScheduler#setMergeThreadPriority(int).mjava","sourceNew":"  /** Set the base priority that merge threads run at.\n   *  Note that CMS may increase priority of some merge\n   *  threads beyond this base priority.  It's best not to\n   *  set this any higher than\n   *  Thread.MAX_PRIORITY-maxThreadCount, so that CMS has\n   *  room to set relative priority among threads.  */\n  public synchronized void setMergeThreadPriority(int pri) {\n    if (pri > Thread.MAX_PRIORITY || pri < Thread.MIN_PRIORITY)\n      throw new IllegalArgumentException(\"priority must be in range \" + Thread.MIN_PRIORITY + \" .. \" + Thread.MAX_PRIORITY + \" inclusive\");\n    mergeThreadPriority = pri;\n    updateMergeThreads();\n  }\n\n","sourceOld":"  /** Set the base priority that merge threads run at.\n   *  Note that CMS may increase priority of some merge\n   *  threads beyond this base priority.  It's best not to\n   *  set this any higher than\n   *  Thread.MAX_PRIORITY-maxThreadCount, so that CMS has\n   *  room to set relative priority among threads.  */\n  public synchronized void setMergeThreadPriority(int pri) {\n    if (pri > Thread.MAX_PRIORITY || pri < Thread.MIN_PRIORITY)\n      throw new IllegalArgumentException(\"priority must be in range \" + Thread.MIN_PRIORITY + \" .. \" + Thread.MAX_PRIORITY + \" inclusive\");\n    mergeThreadPriority = pri;\n    updateMergeThreads();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["d5f48f93ebe46929b99824596327a9dc6d6130d9"],"d5f48f93ebe46929b99824596327a9dc6d6130d9":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa":["de0e4c7f15d10d2c193c9fa2cbfb8dd37f282fec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"de0e4c7f15d10d2c193c9fa2cbfb8dd37f282fec":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8984893e6e8e4eaf80ab863dafae092a2e9b0eaa"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["de0e4c7f15d10d2c193c9fa2cbfb8dd37f282fec"],"d5f48f93ebe46929b99824596327a9dc6d6130d9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"8984893e6e8e4eaf80ab863dafae092a2e9b0eaa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["d5f48f93ebe46929b99824596327a9dc6d6130d9"],"de0e4c7f15d10d2c193c9fa2cbfb8dd37f282fec":["8984893e6e8e4eaf80ab863dafae092a2e9b0eaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}