{"path":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","commits":[{"id":"ee3a275f925be62184fad78d647fa70e27ac7cea","date":1301416659,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49","0bf41419d452997826ec5f17684993377be77f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a540670bcd877e5818e2f2a9fadfcf9c0534e16d","date":1322478204,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bf41419d452997826ec5f17684993377be77f49","date":1386629618,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_CURRENT, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","bugFix":["ee3a275f925be62184fad78d647fa70e27ac7cea"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_CURRENT, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    analyzer = new ICUCollationKeyAnalyzer(Version.LATEST, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_CURRENT, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3","date":1417215914,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    analyzer = new ICUCollationKeyAnalyzer(collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    analyzer = new ICUCollationKeyAnalyzer(Version.LATEST, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  @SuppressWarnings(\"deprecation\")\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    analyzer = new ICUCollationKeyAnalyzer(collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    analyzer = new ICUCollationKeyAnalyzer(collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    analyzer = new ICUCollationKeyAnalyzer(collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  @SuppressWarnings(\"deprecation\")\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    String alternate = args.remove(\"alternate\");\n    String caseLevel = args.remove(\"caseLevel\");\n    String caseFirst = args.remove(\"caseFirst\");\n    String numeric = args.remove(\"numeric\");\n    String variableTop = args.remove(\"variableTop\");\n\n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    \n    // expert options: concrete subclasses are always a RuleBasedCollator\n    RuleBasedCollator rbc = (RuleBasedCollator) collator;\n    if (alternate != null) {\n      if (alternate.equalsIgnoreCase(\"shifted\")) {\n        rbc.setAlternateHandlingShifted(true);\n      } else if (alternate.equalsIgnoreCase(\"non-ignorable\")) {\n        rbc.setAlternateHandlingShifted(false);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid alternate: \" + alternate);\n      }\n    }\n    if (caseLevel != null) {\n      rbc.setCaseLevel(Boolean.parseBoolean(caseLevel));\n    }\n    if (caseFirst != null) {\n      if (caseFirst.equalsIgnoreCase(\"lower\")) {\n        rbc.setLowerCaseFirst(true);\n      } else if (caseFirst.equalsIgnoreCase(\"upper\")) {\n        rbc.setUpperCaseFirst(true);\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid caseFirst: \" + caseFirst);\n      }\n    }\n    if (numeric != null) {\n      rbc.setNumericCollation(Boolean.parseBoolean(numeric));\n    }\n    if (variableTop != null) {\n      rbc.setVariableTop(variableTop);\n    }\n\n    analyzer = new ICUCollationKeyAnalyzer(collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee3a275f925be62184fad78d647fa70e27ac7cea"],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["057a1793765d068ea9302f1a29e21734ee58d41e"],"057a1793765d068ea9302f1a29e21734ee58d41e":["0bf41419d452997826ec5f17684993377be77f49"],"0bf41419d452997826ec5f17684993377be77f49":["a540670bcd877e5818e2f2a9fadfcf9c0534e16d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","ee3a275f925be62184fad78d647fa70e27ac7cea"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ee3a275f925be62184fad78d647fa70e27ac7cea","ee3a275f925be62184fad78d647fa70e27ac7cea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a540670bcd877e5818e2f2a9fadfcf9c0534e16d","0bf41419d452997826ec5f17684993377be77f49"],"a540670bcd877e5818e2f2a9fadfcf9c0534e16d":["ee3a275f925be62184fad78d647fa70e27ac7cea"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee3a275f925be62184fad78d647fa70e27ac7cea"],"ee3a275f925be62184fad78d647fa70e27ac7cea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"057a1793765d068ea9302f1a29e21734ee58d41e":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"0bf41419d452997826ec5f17684993377be77f49":["057a1793765d068ea9302f1a29e21734ee58d41e","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","ee3a275f925be62184fad78d647fa70e27ac7cea"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a540670bcd877e5818e2f2a9fadfcf9c0534e16d":["0bf41419d452997826ec5f17684993377be77f49","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"45669a651c970812a680841b97a77cce06af559f":[],"ee3a275f925be62184fad78d647fa70e27ac7cea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","a540670bcd877e5818e2f2a9fadfcf9c0534e16d","45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","74f45af4339b0daf7a95c820ab88c1aea74fbce0","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}