{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      tvx.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      tvd.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      tvf.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      tvx.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      tvd.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      tvf.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e43f282bea25b8cc26e4a842d98deafd617e9b","date":1337759516,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      CodecUtil.writeHeader(tvx, CODEC_NAME_INDEX, VERSION_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      CodecUtil.writeHeader(tvd, CODEC_NAME_DOCS, VERSION_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      CodecUtil.writeHeader(tvf, CODEC_NAME_FIELDS, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      tvx.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      tvd.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      tvf.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","sourceNew":"  public Lucene40TermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      CodecUtil.writeHeader(tvx, CODEC_NAME_INDEX, VERSION_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      CodecUtil.writeHeader(tvd, CODEC_NAME_DOCS, VERSION_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      CodecUtil.writeHeader(tvf, CODEC_NAME_FIELDS, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      tvx.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      tvd.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      tvf.writeInt(Lucene40TermVectorsReader.FORMAT_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40TermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      CodecUtil.writeHeader(tvx, CODEC_NAME_INDEX, VERSION_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      CodecUtil.writeHeader(tvd, CODEC_NAME_DOCS, VERSION_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      CodecUtil.writeHeader(tvf, CODEC_NAME_FIELDS, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  public Lucene40TermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      CodecUtil.writeHeader(tvx, CODEC_NAME_INDEX, VERSION_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      CodecUtil.writeHeader(tvd, CODEC_NAME_DOCS, VERSION_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      CodecUtil.writeHeader(tvf, CODEC_NAME_FIELDS, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#Lucene40TermVectorsWriter(Directory,String,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40TermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      CodecUtil.writeHeader(tvx, CODEC_NAME_INDEX, VERSION_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      CodecUtil.writeHeader(tvd, CODEC_NAME_DOCS, VERSION_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      CodecUtil.writeHeader(tvf, CODEC_NAME_FIELDS, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40TermVectorsWriter(Directory directory, String segment, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segment = segment;\n    boolean success = false;\n    try {\n      // Open files for TermVector storage\n      tvx = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_INDEX_EXTENSION), context);\n      CodecUtil.writeHeader(tvx, CODEC_NAME_INDEX, VERSION_CURRENT);\n      tvd = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_DOCUMENTS_EXTENSION), context);\n      CodecUtil.writeHeader(tvd, CODEC_NAME_DOCS, VERSION_CURRENT);\n      tvf = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", Lucene40TermVectorsReader.VECTORS_FIELDS_EXTENSION), context);\n      CodecUtil.writeHeader(tvf, CODEC_NAME_FIELDS, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      success = true;\n    } finally {\n      if (!success) {\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"519435fc0d6082a1b8081f9492b714f716877437":["32e43f282bea25b8cc26e4a842d98deafd617e9b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["519435fc0d6082a1b8081f9492b714f716877437"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22a2e66dfda83847e80095b8693c660742ab3e9c"]},"commit2Childs":{"519435fc0d6082a1b8081f9492b714f716877437":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3599646b4d4c346cf74d334813488b8b337b5bf5","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["519435fc0d6082a1b8081f9492b714f716877437","3599646b4d4c346cf74d334813488b8b337b5bf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}