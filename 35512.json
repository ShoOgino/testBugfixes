{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArraySortEvaluator#evaluate(Tuple).mjava","commits":[{"id":"53532a40300123386304e8ffd97c1df9cf57ab94","date":1496675957,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArraySortEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Array sort evaluator expects 1 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = new ArrayList();\n    numbers2.addAll(numbers1);\n    Collections.sort(numbers2, new Comparator<Number>() {\n      @Override\n      public int compare(Number o1, Number o2) {\n        Double d1 = o1.doubleValue();\n        Double d2 = o2.doubleValue();\n        return d1.compareTo(d2);\n      }\n    });\n    return numbers2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArraySortEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Array sort evaluator expects 1 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = new ArrayList();\n    numbers2.addAll(numbers1);\n    Collections.sort(numbers2, new Comparator<Number>() {\n      @Override\n      public int compare(Number o1, Number o2) {\n        Double d1 = o1.doubleValue();\n        Double d2 = o2.doubleValue();\n        return d1.compareTo(d2);\n      }\n    });\n    return numbers2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2ca4206e5497c29b07a997ea7fc47d3bac0a352","date":1497801058,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArraySortEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Array sort evaluator expects 1 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = new ArrayList();\n    numbers2.addAll(numbers1);\n    Collections.sort(numbers2, new Comparator<Number>() {\n      @Override\n      public int compare(Number o1, Number o2) {\n        Double d1 = o1.doubleValue();\n        Double d2 = o2.doubleValue();\n        return d1.compareTo(d2);\n      }\n    });\n    return numbers2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ArraySortEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public List<Number> evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"Array sort evaluator expects 1 parameters found: \"+subEvaluators.size());\n    }\n\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = new ArrayList();\n    numbers2.addAll(numbers1);\n    Collections.sort(numbers2, new Comparator<Number>() {\n      @Override\n      public int compare(Number o1, Number o2) {\n        Double d1 = o1.doubleValue();\n        Double d2 = o2.doubleValue();\n        return d1.compareTo(d2);\n      }\n    });\n    return numbers2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53532a40300123386304e8ffd97c1df9cf57ab94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53532a40300123386304e8ffd97c1df9cf57ab94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["53532a40300123386304e8ffd97c1df9cf57ab94"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","53532a40300123386304e8ffd97c1df9cf57ab94","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53532a40300123386304e8ffd97c1df9cf57ab94":["e9017cf144952056066919f1ebc7897ff9bd71b1","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}