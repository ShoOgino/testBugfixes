{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestFastWriter#doRandomWrites().mjava","commits":[{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastWriter#doRandomWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestFastWriter#doRandomWrites().mjava","sourceNew":"  public void doRandomWrites() throws Exception {\n    int bufSize = ( rand.nextBoolean() ? rand.nextInt(10) : rand.nextInt(20000) )+1;\n    MemWriter out = new MemWriter(new char[bufSize], rand);\n\n    int hash = 0;\n    long written = 0;\n    int iter = rand.nextInt(20)+1;\n    for (int i=0; i<iter; i++) {\n      int which = rand.nextInt(3);\n\n\n      int off = rand.nextInt(arr.length);\n      int len = off < arr.length ? rand.nextInt(arr.length - off) : 0;\n\n\n\n      if (which == 0) {\n        out.write(arr, off, len);\n      } else if (which == 1) {\n        out.write(s, off, len);\n      } else {\n        len = 1;\n        out.write(arr[off]);\n      }\n\n      hash = incHash(hash, arr, off, len);\n      written += len;\n    }\n\n    out.close();\n\n    int hash2 = 0;\n    for (char[] buffer : out.buffers) {\n      hash2 = incHash(hash2, buffer, 0, buffer.length);\n    }\n\n    assertEquals(hash, hash2);\n  }\n\n","sourceOld":"  public void doRandomWrites() throws Exception {\n    int bufSize = ( rand.nextBoolean() ? rand.nextInt(10) : rand.nextInt(20000) )+1;\n    MemWriter out = new MemWriter(new char[bufSize], rand);\n\n    int hash = 0;\n    long written = 0;\n    int iter = rand.nextInt(20)+1;\n    for (int i=0; i<iter; i++) {\n      int which = rand.nextInt(3);\n\n\n      int off = rand.nextInt(arr.length);\n      int len = off < arr.length ? rand.nextInt(arr.length - off) : 0;\n\n\n\n      if (which == 0) {\n        out.write(arr, off, len);\n      } else if (which == 1) {\n        out.write(s, off, len);\n      } else {\n        len = 1;\n        out.write(arr[off]);\n      }\n\n      hash = incHash(hash, arr, off, len);\n      written += len;\n    }\n\n    out.close();\n\n    int hash2 = 0;\n    for (char[] buffer : out.buffers) {\n      hash2 = incHash(hash2, buffer, 0, buffer.length);\n    }\n\n    assertEquals(hash, hash2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":1,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastWriter#doRandomWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestFastWriter#doRandomWrites().mjava","sourceNew":"  public void doRandomWrites() throws Exception {\n    int bufSize = ( rand.nextBoolean() ? rand.nextInt(10) : rand.nextInt(20000) )+1;\n    MemWriter out = new MemWriter(new char[bufSize], rand);\n\n    int hash = 0;\n    long written = 0;\n    int iter = rand.nextInt(20)+1;\n    for (int i=0; i<iter; i++) {\n      int which = rand.nextInt(3);\n\n\n      int off = rand.nextInt(arr.length);\n      int len = off < arr.length ? rand.nextInt(arr.length - off) : 0;\n\n\n\n      if (which == 0) {\n        out.write(arr, off, len);\n      } else if (which == 1) {\n        out.write(s, off, len);\n      } else {\n        len = 1;\n        out.write(arr[off]);\n      }\n\n      hash = incHash(hash, arr, off, len);\n      written += len;\n    }\n\n    out.close();\n\n    int hash2 = 0;\n    for (char[] buffer : out.buffers) {\n      hash2 = incHash(hash2, buffer, 0, buffer.length);\n    }\n\n    assertEquals(hash, hash2);\n  }\n\n","sourceOld":"  public void doRandomWrites() throws Exception {\n    int bufSize = ( rand.nextBoolean() ? rand.nextInt(10) : rand.nextInt(20000) )+1;\n    MemWriter out = new MemWriter(new char[bufSize], rand);\n\n    int hash = 0;\n    long written = 0;\n    int iter = rand.nextInt(20)+1;\n    for (int i=0; i<iter; i++) {\n      int which = rand.nextInt(3);\n\n\n      int off = rand.nextInt(arr.length);\n      int len = off < arr.length ? rand.nextInt(arr.length - off) : 0;\n\n\n\n      if (which == 0) {\n        out.write(arr, off, len);\n      } else if (which == 1) {\n        out.write(s, off, len);\n      } else {\n        len = 1;\n        out.write(arr[off]);\n      }\n\n      hash = incHash(hash, arr, off, len);\n      written += len;\n    }\n\n    out.close();\n\n    int hash2 = 0;\n    for (char[] buffer : out.buffers) {\n      hash2 = incHash(hash2, buffer, 0, buffer.length);\n    }\n\n    assertEquals(hash, hash2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":1,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastWriter#doRandomWrites().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestFastWriter#doRandomWrites().mjava","sourceNew":"  public void doRandomWrites() throws Exception {\n    int bufSize = ( rand.nextBoolean() ? rand.nextInt(10) : rand.nextInt(20000) )+1;\n    MemWriter out = new MemWriter(new char[bufSize], rand);\n\n    int hash = 0;\n    long written = 0;\n    int iter = rand.nextInt(20)+1;\n    for (int i=0; i<iter; i++) {\n      int which = rand.nextInt(3);\n\n\n      int off = rand.nextInt(arr.length);\n      int len = off < arr.length ? rand.nextInt(arr.length - off) : 0;\n\n\n\n      if (which == 0) {\n        out.write(arr, off, len);\n      } else if (which == 1) {\n        out.write(s, off, len);\n      } else {\n        len = 1;\n        out.write(arr[off]);\n      }\n\n      hash = incHash(hash, arr, off, len);\n      written += len;\n    }\n\n    out.close();\n\n    int hash2 = 0;\n    for (char[] buffer : out.buffers) {\n      hash2 = incHash(hash2, buffer, 0, buffer.length);\n    }\n\n    assertEquals(hash, hash2);\n  }\n\n","sourceOld":"  public void doRandomWrites() throws Exception {\n    int bufSize = ( rand.nextBoolean() ? rand.nextInt(10) : rand.nextInt(20000) )+1;\n    MemWriter out = new MemWriter(new char[bufSize], rand);\n\n    int hash = 0;\n    long written = 0;\n    int iter = rand.nextInt(20)+1;\n    for (int i=0; i<iter; i++) {\n      int which = rand.nextInt(3);\n\n\n      int off = rand.nextInt(arr.length);\n      int len = off < arr.length ? rand.nextInt(arr.length - off) : 0;\n\n\n\n      if (which == 0) {\n        out.write(arr, off, len);\n      } else if (which == 1) {\n        out.write(s, off, len);\n      } else {\n        len = 1;\n        out.write(arr[off]);\n      }\n\n      hash = incHash(hash, arr, off, len);\n      written += len;\n    }\n\n    out.close();\n\n    int hash2 = 0;\n    for (char[] buffer : out.buffers) {\n      hash2 = incHash(hash2, buffer, 0, buffer.length);\n    }\n\n    assertEquals(hash, hash2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"],"26dad91f15019714a045b4d8c5f40162b2058b54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26dad91f15019714a045b4d8c5f40162b2058b54"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"26dad91f15019714a045b4d8c5f40162b2058b54":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","26dad91f15019714a045b4d8c5f40162b2058b54","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}