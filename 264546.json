{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","commits":[{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',  node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23fecd2040c33e9e27a569a3ff574967c556eec5","date":1530017326,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","sourceNew":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',  node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',node:'#ANY' , type: TLOG } ,{ replica :'<51%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","sourceOld":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',  node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',  node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',node:'#ANY' , type: TLOG } ,{ replica :'<51%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',  node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',node:'#ANY' , type: TLOG } ,{ replica :'<51%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","date":1532604765,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","sourceNew":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}},{'core_node2':{'type':'NRT'}},{'core_node3':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':3}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(1.0d, violations.get(0).replicaCountDelta, 0.01);\n    assertEquals(1.53d, ((RangeVal) violations.get(0).getClause().getReplica().val).actual);\n\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',node:'#ANY' , type: TLOG } ,{ replica :'<51%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","sourceOld":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',  node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',node:'#ANY' , type: TLOG } ,{ replica :'<51%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52316373036b9f161a08896e7c9ebf4389790a47","date":1533187246,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","sourceNew":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}},{'core_node2':{'type':'NRT'}},{'core_node3':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':3}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"10.0.0.6:8983_solr\")){\n        assertEquals(1.0d, violation.replicaCountDelta, 0.01);\n        assertEquals(1.53d, ((RangeVal) violation.getClause().getReplica().val).actual);\n      } else if(violation.node.equals(\"10.0.0.6:7574_solr\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.01);\n      }\n\n    }\n\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',node:'#ANY' , type: TLOG } ,{ replica :'<51%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","sourceOld":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}},{'core_node2':{'type':'NRT'}},{'core_node3':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':3}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(1, violations.size());\n    assertEquals(1.0d, violations.get(0).replicaCountDelta, 0.01);\n    assertEquals(1.53d, ((RangeVal) violations.get(0).getClause().getReplica().val).actual);\n\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',node:'#ANY' , type: TLOG } ,{ replica :'<51%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","sourceNew":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}},{'core_node2':{'type':'NRT'}},{'core_node3':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':3}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"10.0.0.6:8983_solr\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.01);\n        assertEquals(1.53d, ((RangeVal) violation.getClause().getReplica().val).actual);\n      } else if (violation.node.equals(\"10.0.0.6:7574_solr\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.01);\n      }\n\n    }\n\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',node:'#ANY' , type: TLOG } ,{ replica :'<51%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","sourceOld":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}},{'core_node2':{'type':'NRT'}},{'core_node3':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':3}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if(violation.node.equals(\"10.0.0.6:8983_solr\")){\n        assertEquals(1.0d, violation.replicaCountDelta, 0.01);\n        assertEquals(1.53d, ((RangeVal) violation.getClause().getReplica().val).actual);\n      } else if(violation.node.equals(\"10.0.0.6:7574_solr\")){\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.01);\n      }\n\n    }\n\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',node:'#ANY' , type: TLOG } ,{ replica :'<51%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff","date":1534173061,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","sourceNew":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}},{'core_node2':{'type':'NRT'}},{'core_node3':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':3}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"10.0.0.6:8983_solr\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.01);\n        assertEquals(1.53d, ((RangeVal) violation.getClause().getReplica().val).actual);\n      } else if (violation.node.equals(\"10.0.0.6:7574_solr\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.01);\n      }\n\n    }\n\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'50%',node:'#ANY' , type: TLOG } ,{ replica :'50%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","sourceOld":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}},{'core_node2':{'type':'NRT'}},{'core_node3':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':3}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"10.0.0.6:8983_solr\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.01);\n        assertEquals(1.53d, ((RangeVal) violation.getClause().getReplica().val).actual);\n      } else if (violation.node.equals(\"10.0.0.6:7574_solr\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.01);\n      }\n\n    }\n\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<51%',node:'#ANY' , type: TLOG } ,{ replica :'<51%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","sourceNew":"  public void testReplicaPercentage() {\n    List<Map> l = (List<Map>) loadFromResource(\"testReplicaPercentage.json\");\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(0)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"10.0.0.6:8983_solr\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.01);\n        assertEquals(1.53d, ((RangeVal) violation.getClause().getReplica().val).actual);\n      } else if (violation.node.equals(\"10.0.0.6:7574_solr\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.01);\n      }\n\n    }\n\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(Utils.getDeepCopy(l.get(1), 6)));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(1)));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'50%',node:'#ANY' , type: TLOG } ,{ replica :'50%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(2)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","sourceOld":"  public void testReplicaPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}},{'core_node2':{'type':'NRT'}},{'core_node3':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':3}}}\";\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"10.0.0.6:8983_solr\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.01);\n        assertEquals(1.53d, ((RangeVal) violation.getClause().getReplica().val).actual);\n      } else if (violation.node.equals(\"10.0.0.6:7574_solr\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.01);\n      }\n\n    }\n\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard2':[{'core_node2':{'type':'NRT'}}],\" +\n        \"        'shard1':[{'core_node1':{'type':'NRT'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n\n    dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{'mycoll1':{\" +\n        \"        'shard1':[{'core_node4':{'type':'PULL'}}],\" +\n        \"        'shard1':[{'core_node3':{'type':'PULL'}}],\" +\n        \"        'shard3':[{'core_node2':{'type':'TLOG'}}],\" +\n        \"        'shard2':[{'core_node1':{'type':'TLOG'}}]}}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0},\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':2}}}\";\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'50%',node:'#ANY' , type: TLOG } ,{ replica :'50%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(dataproviderdata));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testReplicaPercentage() {\n    List<Map> l = (List<Map>) loadFromResource(\"testReplicaPercentage.json\");\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(0)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"10.0.0.6:8983_solr\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.01);\n        assertEquals(1.53d, ((RangeVal) violation.getClause().getReplica().val).actual);\n      } else if (violation.node.equals(\"10.0.0.6:7574_solr\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.01);\n      }\n\n    }\n\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(Utils.getDeepCopy(l.get(1), 6)));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(1)));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'50%',node:'#ANY' , type: TLOG } ,{ replica :'50%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(2)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","sourceOld":"  public void testReplicaPercentage() {\n    List<Map> l = (List<Map>) loadFromResource(\"testReplicaPercentage.json\");\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(0)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"10.0.0.6:8983_solr\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.01);\n        assertEquals(1.53d, ((RangeVal) violation.getClause().getReplica().val).actual);\n      } else if (violation.node.equals(\"10.0.0.6:7574_solr\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.01);\n      }\n\n    }\n\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(Utils.getDeepCopy(l.get(1), 6)));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(1)));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'50%',node:'#ANY' , type: TLOG } ,{ replica :'50%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(2)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaPercentage().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testReplicaPercentage() {\n    List<Map> l = (List<Map>) loadFromResource(\"testReplicaPercentage.json\");\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard:'#EACH', node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(0)));\n    List<Violation> violations = session.getViolations();\n    assertEquals(2, violations.size());\n    for (Violation violation : violations) {\n      if (violation.node.equals(\"10.0.0.6:8983_solr\")) {\n        assertEquals(1.0d, violation.replicaCountDelta, 0.01);\n        assertEquals(1.53d, ((RangeVal) violation.getClause().getReplica().val).actual);\n      } else if (violation.node.equals(\"10.0.0.6:7574_solr\")) {\n        assertEquals(-1.0d, violation.replicaCountDelta, 0.01);\n      }\n\n    }\n\n\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(Utils.getDeepCopy(l.get(1), 6)));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'51%', shard: '#EACH' , node:'#ANY'}],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(1)));\n    violations = session.getViolations();\n    assertEquals(0, violations.size());\n    autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'50%',node:'#ANY' , type: TLOG } ,{ replica :'50%',node:'#ANY' , type: PULL } ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n    autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    session = autoScalingConfig.getPolicy().createSession(cloudManagerWithData(l.get(2)));\n    violations = session.getViolations();\n    assertEquals(2, violations.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["f5a27e78e3d29dee02bab19ded25336471e96882"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"52316373036b9f161a08896e7c9ebf4389790a47":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["23fecd2040c33e9e27a569a3ff574967c556eec5"],"23fecd2040c33e9e27a569a3ff574967c556eec5":["9837f40c922407d857991971de6def18eda0857b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23fecd2040c33e9e27a569a3ff574967c556eec5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["52316373036b9f161a08896e7c9ebf4389790a47"],"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"9837f40c922407d857991971de6def18eda0857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a27e78e3d29dee02bab19ded25336471e96882":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23fecd2040c33e9e27a569a3ff574967c556eec5"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52316373036b9f161a08896e7c9ebf4389790a47":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733":["52316373036b9f161a08896e7c9ebf4389790a47"],"23fecd2040c33e9e27a569a3ff574967c556eec5":["7b9f478d4eb5c08e4b0a9717fe37bd99f09ea733","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["29944148cc0dc98687ff45e8a1eaa937a9bcf9ff"],"29944148cc0dc98687ff45e8a1eaa937a9bcf9ff":["f5a27e78e3d29dee02bab19ded25336471e96882"],"9837f40c922407d857991971de6def18eda0857b":["23fecd2040c33e9e27a569a3ff574967c556eec5"],"f5a27e78e3d29dee02bab19ded25336471e96882":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}