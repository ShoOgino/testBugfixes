{"path":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testMultiValued().mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), 1024, 1024*1024);\n    Codec codec = TestUtil.alwaysDocValuesFormat(new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap));\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numPoints;docID++) {\n      Document doc = new Document();\n      lats[2*docID] = randomLat();\n      lons[2*docID] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID], lons[2*docID]));\n      lats[2*docID+1] = randomLat();\n      lons[2*docID+1] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID+1], lons[2*docID+1]));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      double lat0 = randomLat();\n      double lat1 = randomLat();\n      double lon0 = randomLon();\n      double lon1 = randomLon();\n\n      if (lat1 < lat0) {\n        double x = lat0;\n        lat0 = lat1;\n        lat1 = x;\n      }\n\n      if (lon1 < lon0) {\n        double x = lon0;\n        lon0 = lon1;\n        lon1 = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n      }\n\n      Query query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        boolean expected = rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc1, lonDoc1) ||\n          rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc2, lonDoc2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" latDoc1=\" + latDoc1 + \" lonDoc1=\" + lonDoc1 + \" latDoc2=\" + latDoc2 + \" lonDoc2=\" + lonDoc2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b3980532cdc35cdfb96433cd6b16aa8cce067112"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3980532cdc35cdfb96433cd6b16aa8cce067112","date":1434039188,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testMultiValued().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    Codec codec = TestUtil.alwaysDocValuesFormat(new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap));\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numPoints;docID++) {\n      Document doc = new Document();\n      lats[2*docID] = randomLat();\n      lons[2*docID] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID], lons[2*docID]));\n      lats[2*docID+1] = randomLat();\n      lons[2*docID+1] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID+1], lons[2*docID+1]));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      double lat0 = randomLat();\n      double lat1 = randomLat();\n      double lon0 = randomLon();\n      double lon1 = randomLon();\n\n      if (lat1 < lat0) {\n        double x = lat0;\n        lat0 = lat1;\n        lat1 = x;\n      }\n\n      if (lon1 < lon0) {\n        double x = lon0;\n        lon0 = lon1;\n        lon1 = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n      }\n\n      Query query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        boolean expected = rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc1, lonDoc1) ||\n          rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc2, lonDoc2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" latDoc1=\" + latDoc1 + \" lonDoc1=\" + lonDoc1 + \" latDoc2=\" + latDoc2 + \" lonDoc2=\" + lonDoc2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), 1024, 1024*1024);\n    Codec codec = TestUtil.alwaysDocValuesFormat(new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap));\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numPoints;docID++) {\n      Document doc = new Document();\n      lats[2*docID] = randomLat();\n      lons[2*docID] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID], lons[2*docID]));\n      lats[2*docID+1] = randomLat();\n      lons[2*docID+1] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID+1], lons[2*docID+1]));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      double lat0 = randomLat();\n      double lat1 = randomLat();\n      double lon0 = randomLon();\n      double lon1 = randomLon();\n\n      if (lat1 < lat0) {\n        double x = lat0;\n        lat0 = lat1;\n        lat1 = x;\n      }\n\n      if (lon1 < lon0) {\n        double x = lon0;\n        lon0 = lon1;\n        lon1 = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n      }\n\n      Query query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        boolean expected = rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc1, lonDoc1) ||\n          rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc2, lonDoc2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" latDoc1=\" + latDoc1 + \" lonDoc1=\" + lonDoc1 + \" latDoc2=\" + latDoc2 + \" lonDoc2=\" + lonDoc2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f","date":1439766922,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testMultiValued().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numPoints;docID++) {\n      Document doc = new Document();\n      lats[2*docID] = randomLat();\n      lons[2*docID] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID], lons[2*docID]));\n      lats[2*docID+1] = randomLat();\n      lons[2*docID+1] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID+1], lons[2*docID+1]));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      double lat0 = randomLat();\n      double lat1 = randomLat();\n      double lon0 = randomLon();\n      double lon1 = randomLon();\n\n      if (lat1 < lat0) {\n        double x = lat0;\n        lat0 = lat1;\n        lat1 = x;\n      }\n\n      if (lon1 < lon0) {\n        double x = lon0;\n        lon0 = lon1;\n        lon1 = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n      }\n\n      Query query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        boolean expected = rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc1, lonDoc1) ||\n          rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc2, lonDoc2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" latDoc1=\" + latDoc1 + \" lonDoc1=\" + lonDoc1 + \" latDoc2=\" + latDoc2 + \" lonDoc2=\" + lonDoc2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    Codec codec = TestUtil.alwaysDocValuesFormat(new BKDTreeDocValuesFormat(maxPointsInLeaf, maxPointsSortInHeap));\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numPoints;docID++) {\n      Document doc = new Document();\n      lats[2*docID] = randomLat();\n      lons[2*docID] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID], lons[2*docID]));\n      lats[2*docID+1] = randomLat();\n      lons[2*docID+1] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID+1], lons[2*docID+1]));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      double lat0 = randomLat();\n      double lat1 = randomLat();\n      double lon0 = randomLon();\n      double lon1 = randomLon();\n\n      if (lat1 < lat0) {\n        double x = lat0;\n        lat0 = lat1;\n        lat1 = x;\n      }\n\n      if (lon1 < lon0) {\n        double x = lon0;\n        lon0 = lon1;\n        lon1 = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n      }\n\n      Query query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        boolean expected = rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc1, lonDoc1) ||\n          rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc2, lonDoc2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" latDoc1=\" + latDoc1 + \" lonDoc1=\" + lonDoc1 + \" latDoc2=\" + latDoc2 + \" lonDoc2=\" + lonDoc2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testMultiValued().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testMultiValued().mjava","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numPoints;docID++) {\n      Document doc = new Document();\n      lats[2*docID] = randomLat();\n      lons[2*docID] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID], lons[2*docID]));\n      lats[2*docID+1] = randomLat();\n      lons[2*docID+1] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID+1], lons[2*docID+1]));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      double lat0 = randomLat();\n      double lat1 = randomLat();\n      double lon0 = randomLon();\n      double lon1 = randomLon();\n\n      if (lat1 < lat0) {\n        double x = lat0;\n        lat0 = lat1;\n        lat1 = x;\n      }\n\n      if (lon1 < lon0) {\n        double x = lon0;\n        lon0 = lon1;\n        lon1 = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n      }\n\n      Query query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        boolean expected = rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc1, lonDoc1) ||\n          rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc2, lonDoc2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" latDoc1=\" + latDoc1 + \" lonDoc1=\" + lonDoc1 + \" latDoc2=\" + latDoc2 + \" lonDoc2=\" + lonDoc2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numPoints;docID++) {\n      Document doc = new Document();\n      lats[2*docID] = randomLat();\n      lons[2*docID] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID], lons[2*docID]));\n      lats[2*docID+1] = randomLat();\n      lons[2*docID+1] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID+1], lons[2*docID+1]));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      double lat0 = randomLat();\n      double lat1 = randomLat();\n      double lon0 = randomLon();\n      double lon1 = randomLon();\n\n      if (lat1 < lat0) {\n        double x = lat0;\n        lat0 = lat1;\n        lat1 = x;\n      }\n\n      if (lon1 < lon0) {\n        double x = lon0;\n        lon0 = lon1;\n        lon1 = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n      }\n\n      Query query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        boolean expected = rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc1, lonDoc1) ||\n          rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc2, lonDoc2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" latDoc1=\" + latDoc1 + \" lonDoc1=\" + lonDoc1 + \" latDoc2=\" + latDoc2 + \" lonDoc2=\" + lonDoc2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":4,"author":"Nick Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/bkdtree/TestBKDTree#testMultiValued().mjava","sourceNew":null,"sourceOld":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(10000);\n    // Every doc has 2 points:\n    double[] lats = new double[2*numPoints];\n    double[] lons = new double[2*numPoints];\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    Codec codec = TestUtil.alwaysDocValuesFormat(getDocValuesFormat());\n    iwc.setCodec(codec);\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int docID=0;docID<numPoints;docID++) {\n      Document doc = new Document();\n      lats[2*docID] = randomLat();\n      lons[2*docID] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID], lons[2*docID]));\n      lats[2*docID+1] = randomLat();\n      lons[2*docID+1] = randomLon();\n      doc.add(new BKDPointField(\"point\", lats[2*docID+1], lons[2*docID+1]));\n      w.addDocument(doc);\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n    // We can't wrap with \"exotic\" readers because the BKD query must see the BKDDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int iters = atLeast(100);\n    for (int iter=0;iter<iters;iter++) {\n      double lat0 = randomLat();\n      double lat1 = randomLat();\n      double lon0 = randomLon();\n      double lon1 = randomLon();\n\n      if (lat1 < lat0) {\n        double x = lat0;\n        lat0 = lat1;\n        lat1 = x;\n      }\n\n      if (lon1 < lon0) {\n        double x = lon0;\n        lon0 = lon1;\n        lon1 = x;\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" lat=\" + lat0 + \" TO \" + lat1 + \" lon=\" + lon0 + \" TO \" + lon1);\n      }\n\n      Query query = new BKDPointInBBoxQuery(\"point\", lat0, lat1, lon0, lon1);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<lats.length/2;docID++) {\n        double latDoc1 = lats[2*docID];\n        double lonDoc1 = lons[2*docID];\n        double latDoc2 = lats[2*docID+1];\n        double lonDoc2 = lons[2*docID+1];\n        boolean expected = rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc1, lonDoc1) ||\n          rectContainsPointEnc(lat0, lat1, lon0, lon1, latDoc2, lonDoc2);\n\n        if (hits.get(docID) != expected) {\n          fail(\"docID=\" + docID + \" latDoc1=\" + latDoc1 + \" lonDoc1=\" + lonDoc1 + \" latDoc2=\" + latDoc2 + \" lonDoc2=\" + lonDoc2 + \" expected \" + expected + \" but got: \" + hits.get(docID));\n        }\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3980532cdc35cdfb96433cd6b16aa8cce067112":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f":["b3980532cdc35cdfb96433cd6b16aa8cce067112"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b3980532cdc35cdfb96433cd6b16aa8cce067112":["89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["b3980532cdc35cdfb96433cd6b16aa8cce067112"],"89a0e70ecaf27e127004b7fbfad2e02d52ea1f8f":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}