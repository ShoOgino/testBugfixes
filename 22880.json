{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#createSlicer(String,IOContext).mjava","commits":[{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#createSlicer(String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    ensureOpen();\n    assert !openForWrite;\n    final String id = IndexFileNames.stripSegmentName(name);\n    final FileEntry entry = entries.get(id);\n    if (entry == null) {\n      throw new IOException(\"No sub-file with id \" + id + \" found (fileName=\" + name + \" files: \" + entries.keySet() + \")\");\n    }\n    return new IndexInputSlicer() {\n      @Override\n      public void close() throws IOException {\n      }\n      \n      @Override\n      public IndexInput openSlice(long offset, long length) throws IOException {\n        return handle.openSlice(entry.offset + offset, length);\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(0, entry.length);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    ensureOpen();\n    assert !openForWrite;\n    final String id = IndexFileNames.stripSegmentName(name);\n    final FileEntry entry = entries.get(id);\n    if (entry == null) {\n      throw new IOException(\"No sub-file with id \" + id + \" found (fileName=\" + name + \" files: \" + entries.keySet() + \")\");\n    }\n    return new IndexInputSlicer() {\n      @Override\n      public void close() throws IOException {\n      }\n      \n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        return handle.openSlice(sliceDescription, entry.offset + offset, length);\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(\"full-slice\", 0, entry.length);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    ensureOpen();\n    assert !openForWrite;\n    final String id = IndexFileNames.stripSegmentName(name);\n    final FileEntry entry = entries.get(id);\n    if (entry == null) {\n      throw new IOException(\"No sub-file with id \" + id + \" found (fileName=\" + name + \" files: \" + entries.keySet() + \")\");\n    }\n    return new IndexInputSlicer() {\n      @Override\n      public void close() throws IOException {\n      }\n      \n      @Override\n      public IndexInput openSlice(long offset, long length) throws IOException {\n        return handle.openSlice(entry.offset + offset, length);\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(0, entry.length);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5090f41e198d9dd9374e99981f940b111973af2","date":1325969785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    ensureOpen();\n    assert !openForWrite;\n    final String id = IndexFileNames.stripSegmentName(name);\n    final FileEntry entry = entries.get(id);\n    if (entry == null) {\n      throw new FileNotFoundException(\"No sub-file with id \" + id + \" found (fileName=\" + name + \" files: \" + entries.keySet() + \")\");\n    }\n    return new IndexInputSlicer() {\n      @Override\n      public void close() throws IOException {\n      }\n      \n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        return handle.openSlice(sliceDescription, entry.offset + offset, length);\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(\"full-slice\", 0, entry.length);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    ensureOpen();\n    assert !openForWrite;\n    final String id = IndexFileNames.stripSegmentName(name);\n    final FileEntry entry = entries.get(id);\n    if (entry == null) {\n      throw new IOException(\"No sub-file with id \" + id + \" found (fileName=\" + name + \" files: \" + entries.keySet() + \")\");\n    }\n    return new IndexInputSlicer() {\n      @Override\n      public void close() throws IOException {\n      }\n      \n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        return handle.openSlice(sliceDescription, entry.offset + offset, length);\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(\"full-slice\", 0, entry.length);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    ensureOpen();\n    assert !openForWrite;\n    final String id = IndexFileNames.stripSegmentName(name);\n    final FileEntry entry = entries.get(id);\n    if (entry == null) {\n      throw new FileNotFoundException(\"No sub-file with id \" + id + \" found (fileName=\" + name + \" files: \" + entries.keySet() + \")\");\n    }\n    return new IndexInputSlicer() {\n      @Override\n      public void close() throws IOException {\n      }\n      \n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        return handle.openSlice(sliceDescription, entry.offset + offset, length);\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(\"full-slice\", 0, entry.length);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name, IOContext context)\n      throws IOException {\n    ensureOpen();\n    assert !openForWrite;\n    final String id = IndexFileNames.stripSegmentName(name);\n    final FileEntry entry = entries.get(id);\n    if (entry == null) {\n      throw new FileNotFoundException(\"No sub-file with id \" + id + \" found (fileName=\" + name + \" files: \" + entries.keySet() + \")\");\n    }\n    return new IndexInputSlicer() {\n      @Override\n      public void close() throws IOException {\n      }\n      \n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        return handle.openSlice(sliceDescription, entry.offset + offset, length);\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(\"full-slice\", 0, entry.length);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"67aadace85f701c87a4e0721eedcda25d8415a70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e5090f41e198d9dd9374e99981f940b111973af2"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["67aadace85f701c87a4e0721eedcda25d8415a70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5090f41e198d9dd9374e99981f940b111973af2":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"67aadace85f701c87a4e0721eedcda25d8415a70":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["e5090f41e198d9dd9374e99981f940b111973af2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67aadace85f701c87a4e0721eedcda25d8415a70"],"e5090f41e198d9dd9374e99981f940b111973af2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}