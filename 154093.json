{"path":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","commits":[{"id":"15e716649e2bd79a98b5e68c464154ea4c44677a","date":1523975212,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testForceMergeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    // Internally, forceMergeDeletes will call flush to flush pending updates\n    // Thus, we will have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.maxDoc());\n    assertEquals(1, writer.segmentInfos.asList().size());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    // Internally, forceMergeDeletes will call flush to flush pending updates\n    // Thus, we will have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.maxDoc());\n    assertEquals(1, writer.segmentInfos.asList().size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f","date":1525347515,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.forceMergeDeletes(true); // Internally, forceMergeDeletes will call flush to flush pending updates\n    // Thus, we will have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    assertEquals(1, writer.segmentInfos.asList().size());\n    assertEquals(1, writer.numDocs());\n    assertEquals(1, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    // Internally, forceMergeDeletes will call flush to flush pending updates\n    // Thus, we will have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.maxDoc());\n    assertEquals(1, writer.segmentInfos.asList().size());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["36d13f271b6649357e07f71f7e46559479f69b5b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a90cc8c90aa53ddf51fbd15019989ac269514a3","date":1531845066,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.flush(false, true); // flush pending updates but don't trigger a merge, we run forceMergeDeletes below\n    // Now we have have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.segmentInfos.asList().size());\n    assertEquals(1, writer.numDocs());\n    assertEquals(1, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.forceMergeDeletes(true); // Internally, forceMergeDeletes will call flush to flush pending updates\n    // Thus, we will have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    assertEquals(1, writer.segmentInfos.asList().size());\n    assertEquals(1, writer.numDocs());\n    assertEquals(1, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.flush(false, true); // flush pending updates but don't trigger a merge, we run forceMergeDeletes below\n    // Now we have have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.segmentInfos.asList().size());\n    assertEquals(1, writer.numDocs());\n    assertEquals(1, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.forceMergeDeletes(true); // Internally, forceMergeDeletes will call flush to flush pending updates\n    // Thus, we will have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    assertEquals(1, writer.segmentInfos.asList().size());\n    assertEquals(1, writer.numDocs());\n    assertEquals(1, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"631ea3d1607299c59f33edef140ffc19a81f07a0","date":1532450367,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.flush(false, true); // flush pending updates but don't trigger a merge, we run forceMergeDeletes below\n    // Now we have have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    assertEquals(1, writer.numDocs());\n    assertEquals(1, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.flush(false, true); // flush pending updates but don't trigger a merge, we run forceMergeDeletes below\n    // Now we have have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.segmentInfos.asList().size());\n    assertEquals(1, writer.numDocs());\n    assertEquals(1, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["36d13f271b6649357e07f71f7e46559479f69b5b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.flush(false, true); // flush pending updates but don't trigger a merge, we run forceMergeDeletes below\n    // Now we have have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    assertEquals(1, writer.getDocStats().numDocs);\n    assertEquals(1, writer.getDocStats().maxDoc);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.flush(false, true); // flush pending updates but don't trigger a merge, we run forceMergeDeletes below\n    // Now we have have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    assertEquals(1, writer.numDocs());\n    assertEquals(1, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesRetentionMergePolicy#testForceMergeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.flush(false, true); // flush pending updates but don't trigger a merge, we run forceMergeDeletes below\n    // Now we have have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.cloneSegmentInfos().size());\n    assertEquals(1, writer.getDocStats().numDocs);\n    assertEquals(1, writer.getDocStats().maxDoc);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    config.setMergePolicy(newMergePolicy(random(), false)); // no mock MP it might not select segments for force merge\n    if (random().nextBoolean()) {\n      config.setMergePolicy(new SoftDeletesRetentionMergePolicy(\"soft_delete\",\n          () -> new MatchNoDocsQuery(), config.getMergePolicy()));\n    }\n    IndexWriter writer = new IndexWriter(dir, config);\n    // The first segment includes d1 and d2\n    for (int i = 0; i < 2; i++) {\n      Document d = new Document();\n      d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n      writer.addDocument(d);\n    }\n    writer.flush();\n    // The second segment includes only the tombstone\n    Document tombstone = new Document();\n    tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n    writer.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    writer.flush(false, true); // flush pending updates but don't trigger a merge, we run forceMergeDeletes below\n    // Now we have have two segments - both having soft-deleted documents.\n    // We expect any MP to merge these segments into one segment\n    // when calling forceMergeDeletes.\n    writer.forceMergeDeletes(true);\n    assertEquals(1, writer.listOfSegmentCommitInfos().size());\n    assertEquals(1, writer.getDocStats().numDocs);\n    assertEquals(1, writer.getDocStats().maxDoc);\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"631ea3d1607299c59f33edef140ffc19a81f07a0":["4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["631ea3d1607299c59f33edef140ffc19a81f07a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"631ea3d1607299c59f33edef140ffc19a81f07a0":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","631ea3d1607299c59f33edef140ffc19a81f07a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}