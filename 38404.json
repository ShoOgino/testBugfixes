{"path":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsageWithQuery().mjava","commits":[{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName, new TermQuery(new Term(textFieldName, \"it\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsageWithQuery().mjava","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n      checkCorrectClassification(new SimpleNaiveBayesClassifier(leafReader, analyzer, query, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName, new TermQuery(new Term(textFieldName, \"it\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsageWithQuery().mjava","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n      checkCorrectClassification(new SimpleNaiveBayesClassifier(leafReader, analyzer, query, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n      checkCorrectClassification(new SimpleNaiveBayesClassifier(leafReader, analyzer, query, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f8d8e15ecfa84c99e8f3345e369358453e9f53","date":1491555560,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsageWithQuery().mjava","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      TermQuery query = new TermQuery(new Term(textFieldName, \"a\"));\n      SimpleNaiveBayesClassifier classifier = new SimpleNaiveBayesClassifier(leafReader, analyzer, query, categoryFieldName, textFieldName);\n      checkCorrectClassification(classifier, TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(classifier, POLITICS_INPUT, POLITICS_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n      checkCorrectClassification(new SimpleNaiveBayesClassifier(leafReader, analyzer, query, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsageWithQuery().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsageWithQuery().mjava","sourceNew":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      TermQuery query = new TermQuery(new Term(textFieldName, \"a\"));\n      SimpleNaiveBayesClassifier classifier = new SimpleNaiveBayesClassifier(leafReader, analyzer, query, categoryFieldName, textFieldName);\n      checkCorrectClassification(classifier, TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(classifier, POLITICS_INPUT, POLITICS_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsageWithQuery() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      TermQuery query = new TermQuery(new Term(textFieldName, \"it\"));\n      checkCorrectClassification(new SimpleNaiveBayesClassifier(leafReader, analyzer, query, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"f8f8d8e15ecfa84c99e8f3345e369358453e9f53":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8f8d8e15ecfa84c99e8f3345e369358453e9f53"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f8f8d8e15ecfa84c99e8f3345e369358453e9f53"],"f8f8d8e15ecfa84c99e8f3345e369358453e9f53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}