{"path":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","sourceNew":"  /**\n   * 在字典库中查找单词对应的char数组为charArray的字符串。返回该单词在单词序列中的位置\n   * \n   * @param knownHashIndex 已知单词第一个字符charArray[0]在hash表中的位置，如果未计算，可以用函数int\n   *        findInTable(char[] charArray) 代替\n   * @param charArray 查找单词对应的char数组\n   * @return 单词在单词数组中的位置，如果没找到则返回-1\n   */\n  private int findInTable(short knownHashIndex, char[] charArray) {\n    if (charArray == null || charArray.length == 0)\n      return -1;\n\n    char[][] items = wordItem_charArrayTable[wordIndexTable[knownHashIndex]];\n    int start = 0, end = items.length - 1;\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArray(items[mid], 0, charArray, 1);\n\n      if (cmpResult == 0)\n        return mid;// find it\n      else if (cmpResult < 0)\n        start = mid + 1;\n      else if (cmpResult > 0)\n        end = mid - 1;\n\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * 在字典库中查找单词对应的char数组为charArray的字符串。返回该单词在单词序列中的位置\n   * \n   * @param knownHashIndex 已知单词第一个字符charArray[0]在hash表中的位置，如果未计算，可以用函数int\n   *        findInTable(char[] charArray) 代替\n   * @param charArray 查找单词对应的char数组\n   * @return 单词在单词数组中的位置，如果没找到则返回-1\n   */\n  private int findInTable(short knownHashIndex, char[] charArray) {\n    if (charArray == null || charArray.length == 0)\n      return -1;\n\n    char[][] items = wordItem_charArrayTable[wordIndexTable[knownHashIndex]];\n    int start = 0, end = items.length - 1;\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArray(items[mid], 0, charArray, 1);\n\n      if (cmpResult == 0)\n        return mid;// find it\n      else if (cmpResult < 0)\n        start = mid + 1;\n      else if (cmpResult > 0)\n        end = mid - 1;\n\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55fa7b85159e79f79dfdca119db7f0f4cb6a2a74","date":1254579885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","sourceNew":"  /**\n   * Look up the text string corresponding with the word char array, \n   * and return the position of the word list.\n   * \n   * @param knownHashIndex already figure out position of the first word \n   *   symbol charArray[0] in hash table. If not calculated yet, can be \n   *   replaced with function int findInTable(char[] charArray).\n   * @param charArray look up the char array corresponding with the word.\n   * @return word location in word array.  If not found, then return -1.\n   */\n  private int findInTable(short knownHashIndex, char[] charArray) {\n    if (charArray == null || charArray.length == 0)\n      return -1;\n\n    char[][] items = wordItem_charArrayTable[wordIndexTable[knownHashIndex]];\n    int start = 0, end = items.length - 1;\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArray(items[mid], 0, charArray, 1);\n\n      if (cmpResult == 0)\n        return mid;// find it\n      else if (cmpResult < 0)\n        start = mid + 1;\n      else if (cmpResult > 0)\n        end = mid - 1;\n\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * 在字典库中查找单词对应的char数组为charArray的字符串。返回该单词在单词序列中的位置\n   * \n   * @param knownHashIndex 已知单词第一个字符charArray[0]在hash表中的位置，如果未计算，可以用函数int\n   *        findInTable(char[] charArray) 代替\n   * @param charArray 查找单词对应的char数组\n   * @return 单词在单词数组中的位置，如果没找到则返回-1\n   */\n  private int findInTable(short knownHashIndex, char[] charArray) {\n    if (charArray == null || charArray.length == 0)\n      return -1;\n\n    char[][] items = wordItem_charArrayTable[wordIndexTable[knownHashIndex]];\n    int start = 0, end = items.length - 1;\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArray(items[mid], 0, charArray, 1);\n\n      if (cmpResult == 0)\n        return mid;// find it\n      else if (cmpResult < 0)\n        start = mid + 1;\n      else if (cmpResult > 0)\n        end = mid - 1;\n\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#findInTable(short,char[]).mjava","sourceNew":"  /**\n   * Look up the text string corresponding with the word char array, \n   * and return the position of the word list.\n   * \n   * @param knownHashIndex already figure out position of the first word \n   *   symbol charArray[0] in hash table. If not calculated yet, can be \n   *   replaced with function int findInTable(char[] charArray).\n   * @param charArray look up the char array corresponding with the word.\n   * @return word location in word array.  If not found, then return -1.\n   */\n  private int findInTable(short knownHashIndex, char[] charArray) {\n    if (charArray == null || charArray.length == 0)\n      return -1;\n\n    char[][] items = wordItem_charArrayTable[wordIndexTable[knownHashIndex]];\n    int start = 0, end = items.length - 1;\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArray(items[mid], 0, charArray, 1);\n\n      if (cmpResult == 0)\n        return mid;// find it\n      else if (cmpResult < 0)\n        start = mid + 1;\n      else if (cmpResult > 0)\n        end = mid - 1;\n\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Look up the text string corresponding with the word char array, \n   * and return the position of the word list.\n   * \n   * @param knownHashIndex already figure out position of the first word \n   *   symbol charArray[0] in hash table. If not calculated yet, can be \n   *   replaced with function int findInTable(char[] charArray).\n   * @param charArray look up the char array corresponding with the word.\n   * @return word location in word array.  If not found, then return -1.\n   */\n  private int findInTable(short knownHashIndex, char[] charArray) {\n    if (charArray == null || charArray.length == 0)\n      return -1;\n\n    char[][] items = wordItem_charArrayTable[wordIndexTable[knownHashIndex]];\n    int start = 0, end = items.length - 1;\n    int mid = (start + end) / 2, cmpResult;\n\n    // Binary search for the index of idArray\n    while (start <= end) {\n      cmpResult = Utility.compareArray(items[mid], 0, charArray, 1);\n\n      if (cmpResult == 0)\n        return mid;// find it\n      else if (cmpResult < 0)\n        start = mid + 1;\n      else if (cmpResult > 0)\n        end = mid - 1;\n\n      mid = (start + end) / 2;\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55fa7b85159e79f79dfdca119db7f0f4cb6a2a74":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55fa7b85159e79f79dfdca119db7f0f4cb6a2a74"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["55fa7b85159e79f79dfdca119db7f0f4cb6a2a74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"55fa7b85159e79f79dfdca119db7f0f4cb6a2a74":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}