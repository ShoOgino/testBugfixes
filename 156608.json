{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}