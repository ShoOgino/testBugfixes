{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d94d6afa51157e490fc169e192a154ffc4cdad0b","date":1283184289,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode || node instanceof RegexpQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode || node instanceof RegexpQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c1fe1aedb70da4139fd9f2f7e92e572017fd083","date":1309827452,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode || node instanceof RegexpQueryNode) {\n      \n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler().get(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD);\n\n      if (rewriteMethod == null) {\n        // This should not happen, this configuration is set in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_TERM_REWRITE_METHOD should be set on the QueryConfigHandler\");\n      }\n\n      // use a TAG to take the value to the Builder\n      node.setTag(MultiTermRewriteMethodProcessor.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode || node instanceof RegexpQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode || node instanceof RegexpQueryNode) {\n      \n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler().get(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD);\n\n      if (rewriteMethod == null) {\n        // This should not happen, this configuration is set in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_TERM_REWRITE_METHOD should be set on the QueryConfigHandler\");\n      }\n\n      // use a TAG to take the value to the Builder\n      node.setTag(MultiTermRewriteMethodProcessor.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode || node instanceof RegexpQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode || node instanceof RegexpQueryNode) {\n      \n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler().get(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD);\n\n      if (rewriteMethod == null) {\n        // This should not happen, this configuration is set in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_TERM_REWRITE_METHOD should be set on the QueryConfigHandler\");\n      }\n\n      // use a TAG to take the value to the Builder\n      node.setTag(MultiTermRewriteMethodProcessor.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode || node instanceof RegexpQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d","date":1310245513,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof AbstractRangeQueryNode || node instanceof RegexpQueryNode) {\n      \n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler().get(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD);\n\n      if (rewriteMethod == null) {\n        // This should not happen, this configuration is set in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_TERM_REWRITE_METHOD should be set on the QueryConfigHandler\");\n      }\n\n      // use a TAG to take the value to the Builder\n      node.setTag(MultiTermRewriteMethodProcessor.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode || node instanceof RegexpQueryNode) {\n      \n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler().get(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD);\n\n      if (rewriteMethod == null) {\n        // This should not happen, this configuration is set in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_TERM_REWRITE_METHOD should be set on the QueryConfigHandler\");\n      }\n\n      // use a TAG to take the value to the Builder\n      node.setTag(MultiTermRewriteMethodProcessor.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof AbstractRangeQueryNode || node instanceof RegexpQueryNode) {\n      \n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler().get(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD);\n\n      if (rewriteMethod == null) {\n        // This should not happen, this configuration is set in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_TERM_REWRITE_METHOD should be set on the QueryConfigHandler\");\n      }\n\n      // use a TAG to take the value to the Builder\n      node.setTag(MultiTermRewriteMethodProcessor.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof AbstractRangeQueryNode || node instanceof RegexpQueryNode) {\n      \n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler().get(ConfigurationKeys.MULTI_TERM_REWRITE_METHOD);\n\n      if (rewriteMethod == null) {\n        // This should not happen, this configuration is set in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"StandardQueryConfigHandler.ConfigurationKeys.MULTI_TERM_REWRITE_METHOD should be set on the QueryConfigHandler\");\n      }\n\n      // use a TAG to take the value to the Builder\n      node.setTag(MultiTermRewriteMethodProcessor.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d"],"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","d94d6afa51157e490fc169e192a154ffc4cdad0b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["d94d6afa51157e490fc169e192a154ffc4cdad0b","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["d94d6afa51157e490fc169e192a154ffc4cdad0b","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e86426ca0513cfc495c3a2c0bb0c7abe03988d":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["a7e86426ca0513cfc495c3a2c0bb0c7abe03988d","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d94d6afa51157e490fc169e192a154ffc4cdad0b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}