{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean).mjava","sourceNew":"  private IndexSearcher(IndexReader r, boolean closeReader, ExecutorService executor) {\n    reader = r;\n    this.executor = executor;\n    this.closeReader = closeReader;\n\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    gatherSubReaders(subReadersList, reader);\n    subReaders = subReadersList.toArray(new IndexReader[subReadersList.size()]);\n    docStarts = new int[subReaders.length];\n    subSearchers = new IndexSearcher[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n      if (subReaders[i] == r) {\n        subSearchers[i] = this;\n      } else {\n        subSearchers[i] = new IndexSearcher(subReaders[i]);\n      }\n    }\n  }\n\n","sourceOld":"  private IndexSearcher(IndexReader r, boolean closeReader) {\n    reader = r;\n    this.closeReader = closeReader;\n\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    gatherSubReaders(subReadersList, reader);\n    subReaders = subReadersList.toArray(new IndexReader[subReadersList.size()]);\n    docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  private IndexSearcher(IndexReader r, boolean closeReader, ExecutorService executor) {\n    reader = r;\n    this.executor = executor;\n    this.closeReader = closeReader;\n\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    gatherSubReaders(subReadersList, reader);\n    subReaders = subReadersList.toArray(new IndexReader[subReadersList.size()]);\n    docStarts = new int[subReaders.length];\n    subSearchers = new IndexSearcher[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n      if (subReaders[i] == r) {\n        subSearchers[i] = this;\n      } else {\n        subSearchers[i] = new IndexSearcher(subReaders[i]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","sourceNew":"  // convinience ctor for other IR based ctors\n  private IndexSearcher(IndexReader reader, boolean closeReader, ExecutorService executor) {\n    this(reader.getTopReaderContext(), closeReader, executor);\n  }\n\n","sourceOld":"  private IndexSearcher(IndexReader r, boolean closeReader, ExecutorService executor) {\n    reader = r;\n    this.executor = executor;\n    this.closeReader = closeReader;\n\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    gatherSubReaders(subReadersList, reader);\n    subReaders = subReadersList.toArray(new IndexReader[subReadersList.size()]);\n    docStarts = new int[subReaders.length];\n    subSearchers = new IndexSearcher[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n      if (subReaders[i] == r) {\n        subSearchers[i] = this;\n      } else {\n        subSearchers[i] = new IndexSearcher(subReaders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd61444f11a793823175dad412c45c70f3aca0d4","date":1294280590,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","sourceNew":"  // convenience ctor for other IR based ctors\n  private IndexSearcher(IndexReader reader, boolean closeReader, ExecutorService executor) {\n    this(reader.getTopReaderContext(), closeReader, executor);\n  }\n\n","sourceOld":"  // convinience ctor for other IR based ctors\n  private IndexSearcher(IndexReader reader, boolean closeReader, ExecutorService executor) {\n    this(reader.getTopReaderContext(), closeReader, executor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  // convenience ctor for other IR based ctors\n  private IndexSearcher(IndexReader reader, boolean closeReader, ExecutorService executor) {\n    this(reader.getTopReaderContext(), closeReader, executor);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","sourceNew":"  // convenience ctor for other IR based ctors\n  private IndexSearcher(IndexReader reader, boolean closeReader, ExecutorService executor) {\n    this(reader.getTopReaderContext(), closeReader, executor);\n  }\n\n","sourceOld":"  private IndexSearcher(IndexReader r, boolean closeReader, ExecutorService executor) {\n    reader = r;\n    this.executor = executor;\n    this.closeReader = closeReader;\n\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    gatherSubReaders(subReadersList, reader);\n    subReaders = subReadersList.toArray(new IndexReader[subReadersList.size()]);\n    docStarts = new int[subReaders.length];\n    subSearchers = new IndexSearcher[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n      if (subReaders[i] == r) {\n        subSearchers[i] = this;\n      } else {\n        subSearchers[i] = new IndexSearcher(subReaders[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReader,boolean,ExecutorService).mjava","sourceNew":null,"sourceOld":"  // convenience ctor for other IR based ctors\n  private IndexSearcher(IndexReader reader, boolean closeReader, ExecutorService executor) {\n    this(reader.getTopReaderContext(), closeReader, executor);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","cd61444f11a793823175dad412c45c70f3aca0d4"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["cd61444f11a793823175dad412c45c70f3aca0d4"],"cd61444f11a793823175dad412c45c70f3aca0d4":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cd61444f11a793823175dad412c45c70f3aca0d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["cd61444f11a793823175dad412c45c70f3aca0d4"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd61444f11a793823175dad412c45c70f3aca0d4":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3a0403b45dfe384fae4a1b6e96c3265d000c498","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}