{"path":"src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#incrementToken().mjava","commits":[{"id":"4bb9e6bedabb32b626ec01144759078072e88c61","date":1250187052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    for(;;) {\n\n      if (!remainingTokens.isEmpty()) {\n        clearAttributes(); restoreState(remainingTokens.removeFirst());\n        return true;\n      }\n\n      if (!input.incrementToken()) return false;\n\n      int len = termAtt.termLength();\n      if (len==0) return true; // pass through zero length terms\n      \n      int firstAlternativeIncrement = inject ? 0 : posAtt.getPositionIncrement();\n\n      String v = new String(termAtt.termBuffer(), 0, len);\n      String primaryPhoneticValue = encoder.doubleMetaphone(v);\n      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);\n\n      // a flag to lazily save state if needed... this avoids a save/restore when only\n      // one token will be generated.\n      boolean saveState=inject;\n\n      if (primaryPhoneticValue!=null && primaryPhoneticValue.length() > 0 && !primaryPhoneticValue.equals(v)) {\n        if (saveState) {\n          remainingTokens.addLast(captureState());\n        }\n        posAtt.setPositionIncrement( firstAlternativeIncrement );\n        firstAlternativeIncrement = 0;\n        termAtt.setTermBuffer(primaryPhoneticValue);\n        saveState = true;\n      }\n\n      if (alternatePhoneticValue!=null && alternatePhoneticValue.length() > 0\n              && !alternatePhoneticValue.equals(primaryPhoneticValue)\n              && !primaryPhoneticValue.equals(v)) {\n        if (saveState) {\n          remainingTokens.addLast(captureState());\n          saveState = false;\n        }\n        posAtt.setPositionIncrement( firstAlternativeIncrement );\n        termAtt.setTermBuffer(alternatePhoneticValue);\n        saveState = true;\n      }\n\n      // Just one token to return, so no need to capture/restore\n      // any state, simply return it.\n      if (remainingTokens.isEmpty()) {\n        return true;\n      }\n\n      if (saveState) {\n        remainingTokens.addLast(captureState());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["be29e0e2cef1fd569147732e48caf8538790339b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be29e0e2cef1fd569147732e48caf8538790339b","date":1250443738,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    for(;;) {\n\n      if (!remainingTokens.isEmpty()) {\n        // clearAttributes();  // not currently necessary\n        restoreState(remainingTokens.removeFirst());\n        return true;\n      }\n\n      if (!input.incrementToken()) return false;\n\n      int len = termAtt.termLength();\n      if (len==0) return true; // pass through zero length terms\n      \n      int firstAlternativeIncrement = inject ? 0 : posAtt.getPositionIncrement();\n\n      String v = new String(termAtt.termBuffer(), 0, len);\n      String primaryPhoneticValue = encoder.doubleMetaphone(v);\n      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);\n\n      // a flag to lazily save state if needed... this avoids a save/restore when only\n      // one token will be generated.\n      boolean saveState=inject;\n\n      if (primaryPhoneticValue!=null && primaryPhoneticValue.length() > 0 && !primaryPhoneticValue.equals(v)) {\n        if (saveState) {\n          remainingTokens.addLast(captureState());\n        }\n        posAtt.setPositionIncrement( firstAlternativeIncrement );\n        firstAlternativeIncrement = 0;\n        termAtt.setTermBuffer(primaryPhoneticValue);\n        saveState = true;\n      }\n\n      if (alternatePhoneticValue!=null && alternatePhoneticValue.length() > 0\n              && !alternatePhoneticValue.equals(primaryPhoneticValue)\n              && !primaryPhoneticValue.equals(v)) {\n        if (saveState) {\n          remainingTokens.addLast(captureState());\n          saveState = false;\n        }\n        posAtt.setPositionIncrement( firstAlternativeIncrement );\n        termAtt.setTermBuffer(alternatePhoneticValue);\n        saveState = true;\n      }\n\n      // Just one token to return, so no need to capture/restore\n      // any state, simply return it.\n      if (remainingTokens.isEmpty()) {\n        return true;\n      }\n\n      if (saveState) {\n        remainingTokens.addLast(captureState());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    for(;;) {\n\n      if (!remainingTokens.isEmpty()) {\n        clearAttributes(); restoreState(remainingTokens.removeFirst());\n        return true;\n      }\n\n      if (!input.incrementToken()) return false;\n\n      int len = termAtt.termLength();\n      if (len==0) return true; // pass through zero length terms\n      \n      int firstAlternativeIncrement = inject ? 0 : posAtt.getPositionIncrement();\n\n      String v = new String(termAtt.termBuffer(), 0, len);\n      String primaryPhoneticValue = encoder.doubleMetaphone(v);\n      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);\n\n      // a flag to lazily save state if needed... this avoids a save/restore when only\n      // one token will be generated.\n      boolean saveState=inject;\n\n      if (primaryPhoneticValue!=null && primaryPhoneticValue.length() > 0 && !primaryPhoneticValue.equals(v)) {\n        if (saveState) {\n          remainingTokens.addLast(captureState());\n        }\n        posAtt.setPositionIncrement( firstAlternativeIncrement );\n        firstAlternativeIncrement = 0;\n        termAtt.setTermBuffer(primaryPhoneticValue);\n        saveState = true;\n      }\n\n      if (alternatePhoneticValue!=null && alternatePhoneticValue.length() > 0\n              && !alternatePhoneticValue.equals(primaryPhoneticValue)\n              && !primaryPhoneticValue.equals(v)) {\n        if (saveState) {\n          remainingTokens.addLast(captureState());\n          saveState = false;\n        }\n        posAtt.setPositionIncrement( firstAlternativeIncrement );\n        termAtt.setTermBuffer(alternatePhoneticValue);\n        saveState = true;\n      }\n\n      // Just one token to return, so no need to capture/restore\n      // any state, simply return it.\n      if (remainingTokens.isEmpty()) {\n        return true;\n      }\n\n      if (saveState) {\n        remainingTokens.addLast(captureState());\n      }\n    }\n  }\n\n","bugFix":["4bb9e6bedabb32b626ec01144759078072e88c61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/DoubleMetaphoneFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    for(;;) {\n\n      if (!remainingTokens.isEmpty()) {\n        // clearAttributes();  // not currently necessary\n        restoreState(remainingTokens.removeFirst());\n        return true;\n      }\n\n      if (!input.incrementToken()) return false;\n\n      int len = termAtt.termLength();\n      if (len==0) return true; // pass through zero length terms\n      \n      int firstAlternativeIncrement = inject ? 0 : posAtt.getPositionIncrement();\n\n      String v = new String(termAtt.termBuffer(), 0, len);\n      String primaryPhoneticValue = encoder.doubleMetaphone(v);\n      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);\n\n      // a flag to lazily save state if needed... this avoids a save/restore when only\n      // one token will be generated.\n      boolean saveState=inject;\n\n      if (primaryPhoneticValue!=null && primaryPhoneticValue.length() > 0 && !primaryPhoneticValue.equals(v)) {\n        if (saveState) {\n          remainingTokens.addLast(captureState());\n        }\n        posAtt.setPositionIncrement( firstAlternativeIncrement );\n        firstAlternativeIncrement = 0;\n        termAtt.setTermBuffer(primaryPhoneticValue);\n        saveState = true;\n      }\n\n      if (alternatePhoneticValue!=null && alternatePhoneticValue.length() > 0\n              && !alternatePhoneticValue.equals(primaryPhoneticValue)\n              && !primaryPhoneticValue.equals(v)) {\n        if (saveState) {\n          remainingTokens.addLast(captureState());\n          saveState = false;\n        }\n        posAtt.setPositionIncrement( firstAlternativeIncrement );\n        termAtt.setTermBuffer(alternatePhoneticValue);\n        saveState = true;\n      }\n\n      // Just one token to return, so no need to capture/restore\n      // any state, simply return it.\n      if (remainingTokens.isEmpty()) {\n        return true;\n      }\n\n      if (saveState) {\n        remainingTokens.addLast(captureState());\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    for(;;) {\n\n      if (!remainingTokens.isEmpty()) {\n        // clearAttributes();  // not currently necessary\n        restoreState(remainingTokens.removeFirst());\n        return true;\n      }\n\n      if (!input.incrementToken()) return false;\n\n      int len = termAtt.termLength();\n      if (len==0) return true; // pass through zero length terms\n      \n      int firstAlternativeIncrement = inject ? 0 : posAtt.getPositionIncrement();\n\n      String v = new String(termAtt.termBuffer(), 0, len);\n      String primaryPhoneticValue = encoder.doubleMetaphone(v);\n      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);\n\n      // a flag to lazily save state if needed... this avoids a save/restore when only\n      // one token will be generated.\n      boolean saveState=inject;\n\n      if (primaryPhoneticValue!=null && primaryPhoneticValue.length() > 0 && !primaryPhoneticValue.equals(v)) {\n        if (saveState) {\n          remainingTokens.addLast(captureState());\n        }\n        posAtt.setPositionIncrement( firstAlternativeIncrement );\n        firstAlternativeIncrement = 0;\n        termAtt.setTermBuffer(primaryPhoneticValue);\n        saveState = true;\n      }\n\n      if (alternatePhoneticValue!=null && alternatePhoneticValue.length() > 0\n              && !alternatePhoneticValue.equals(primaryPhoneticValue)\n              && !primaryPhoneticValue.equals(v)) {\n        if (saveState) {\n          remainingTokens.addLast(captureState());\n          saveState = false;\n        }\n        posAtt.setPositionIncrement( firstAlternativeIncrement );\n        termAtt.setTermBuffer(alternatePhoneticValue);\n        saveState = true;\n      }\n\n      // Just one token to return, so no need to capture/restore\n      // any state, simply return it.\n      if (remainingTokens.isEmpty()) {\n        return true;\n      }\n\n      if (saveState) {\n        remainingTokens.addLast(captureState());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4bb9e6bedabb32b626ec01144759078072e88c61":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"be29e0e2cef1fd569147732e48caf8538790339b":["4bb9e6bedabb32b626ec01144759078072e88c61"],"ad94625fb8d088209f46650c8097196fec67f00c":["be29e0e2cef1fd569147732e48caf8538790339b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4bb9e6bedabb32b626ec01144759078072e88c61":["be29e0e2cef1fd569147732e48caf8538790339b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4bb9e6bedabb32b626ec01144759078072e88c61"],"be29e0e2cef1fd569147732e48caf8538790339b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}