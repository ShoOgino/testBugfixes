{"path":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#getNumberOfNodesWithSameTagVal(Condition,Map[String,Map[String,Object]],Map[String,Map[String,Integer]],String,Condition,Phase).mjava","commits":[{"id":"ec4fc24ecd353171e03bd016c1681cd97476015f","date":1432214672,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#getNumberOfNodesWithSameTagVal(Condition,Map[String,Map[String,Object]],Map[String,Map[String,Integer]],String,Condition,Phase).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#getNumberOfNodesWithSameTagVal(Condition,Map[String,Map[String,Object]],Map[String,Set[String]],String,Condition,Phase).mjava","sourceNew":"  private int getNumberOfNodesWithSameTagVal(Condition shardCondition,\n                                             Map<String, Map<String, Object>> nodeVsTags,\n                                             Map<String, Map<String,Integer>> shardVsNodeSet,\n                                             String shardName,\n                                             Condition tagCondition,\n                                             Phase phase) {\n\n    int countMatchingThisTagValue = 0;\n    for (Map.Entry<String, Map<String,Integer>> entry : shardVsNodeSet.entrySet()) {\n      //check if this shard is relevant. either it is a ANY Wild card (**)\n      // or this shard is same as the shard in question\n      if (shardCondition.val.equals(WILD_WILD_CARD) || entry.getKey().equals(shardName)) {\n        Map<String,Integer> nodesInThisShard = shardVsNodeSet.get(shardCondition.val.equals(WILD_WILD_CARD) ? entry.getKey() : shardName);\n        if (nodesInThisShard != null) {\n          for (Map.Entry<String,Integer> aNode : nodesInThisShard.entrySet()) {\n            Object obj = nodeVsTags.get(aNode.getKey()).get(tag.name);\n            if (tagCondition.canMatch(obj, phase)) countMatchingThisTagValue += aNode.getValue();\n          }\n        }\n      }\n    }\n    return countMatchingThisTagValue;\n  }\n\n","sourceOld":"  private int getNumberOfNodesWithSameTagVal(Condition shardCondition,\n                                             Map<String, Map<String, Object>> nodeVsTags,\n                                             Map<String, Set<String>> shardVsNodeSet,\n                                             String shardName,\n                                             Condition tagCondition,\n                                             Phase phase) {\n\n    int countMatchingThisTagValue = 0;\n    for (Map.Entry<String, Set<String>> entry : shardVsNodeSet.entrySet()) {\n      //check if this shard is relevant. either it is a ANY Wild card (**)\n      // or this shard is same as the shard in question\n      if (shardCondition.val.equals(WILD_WILD_CARD) || entry.getKey().equals(shardName)) {\n        Set<String> nodesInThisShard = shardVsNodeSet.get(shardCondition.val.equals(WILD_WILD_CARD) ? entry.getKey() : shardName);\n        if (nodesInThisShard != null) {\n          for (String aNode : nodesInThisShard) {\n            Object obj = nodeVsTags.get(aNode).get(tag.name);\n            if (tagCondition.canMatch(obj, phase)) countMatchingThisTagValue++;\n          }\n        }\n      }\n    }\n    return countMatchingThisTagValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132","date":1457088757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#getNumberOfNodesWithSameTagVal(Condition,Map[String,Map[String,Object]],Map[String,Map[String,Integer]],String,Condition,Phase).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/Rule#getNumberOfNodesWithSameTagVal(Condition,Map[String,Map[String,Object]],Map[String,Map[String,Integer]],String,Condition,Phase).mjava","sourceNew":"  private int getNumberOfNodesWithSameTagVal(Condition shardCondition,\n                                             Map<String, Map<String, Object>> nodeVsTags,\n                                             Map<String, Map<String,Integer>> shardVsNodeSet,\n                                             String shardName,\n                                             Condition tagCondition,\n                                             Phase phase) {\n\n    int countMatchingThisTagValue = 0;\n    for (Map.Entry<String, Map<String,Integer>> entry : shardVsNodeSet.entrySet()) {\n      //check if this shard is relevant. either it is a ANY Wild card (**)\n      // or this shard is same as the shard in question\n      if (shardCondition.val.equals(WILD_WILD_CARD) || entry.getKey().equals(shardName)) {\n        Map<String,Integer> nodesInThisShard = shardVsNodeSet.get(shardCondition.val.equals(WILD_WILD_CARD) ? entry.getKey() : shardName);\n        if (nodesInThisShard != null) {\n          for (Map.Entry<String,Integer> aNode : nodesInThisShard.entrySet()) {\n            Map<String, Object> tagValues = nodeVsTags.get(aNode.getKey());\n            if(tagValues == null) continue;\n            Object obj = tagValues.get(tag.name);\n            if (tagCondition.canMatch(obj, phase)) countMatchingThisTagValue += aNode.getValue();\n          }\n        }\n      }\n    }\n    return countMatchingThisTagValue;\n  }\n\n","sourceOld":"  private int getNumberOfNodesWithSameTagVal(Condition shardCondition,\n                                             Map<String, Map<String, Object>> nodeVsTags,\n                                             Map<String, Map<String,Integer>> shardVsNodeSet,\n                                             String shardName,\n                                             Condition tagCondition,\n                                             Phase phase) {\n\n    int countMatchingThisTagValue = 0;\n    for (Map.Entry<String, Map<String,Integer>> entry : shardVsNodeSet.entrySet()) {\n      //check if this shard is relevant. either it is a ANY Wild card (**)\n      // or this shard is same as the shard in question\n      if (shardCondition.val.equals(WILD_WILD_CARD) || entry.getKey().equals(shardName)) {\n        Map<String,Integer> nodesInThisShard = shardVsNodeSet.get(shardCondition.val.equals(WILD_WILD_CARD) ? entry.getKey() : shardName);\n        if (nodesInThisShard != null) {\n          for (Map.Entry<String,Integer> aNode : nodesInThisShard.entrySet()) {\n            Object obj = nodeVsTags.get(aNode.getKey()).get(tag.name);\n            if (tagCondition.canMatch(obj, phase)) countMatchingThisTagValue += aNode.getValue();\n          }\n        }\n      }\n    }\n    return countMatchingThisTagValue;\n  }\n\n","bugFix":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132"]},"commit2Childs":{"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}