{"path":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(IndexOutput,String,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(IndexOutput,String,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void writeHeader(IndexOutput out, String codec, int version)\n    throws IOException {\n    final long start = out.getFilePointer();\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    // We require this so we can easily pre-compute header length\n    if (out.getFilePointer()-start != codec.length()+9) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","date":1281277545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(IndexOutput,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(IndexOutput,String,int).mjava","sourceNew":"  public static IndexOutput writeHeader(IndexOutput out, String codec, int version)\n    throws IOException {\n    final long start = out.getFilePointer();\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    // We require this so we can easily pre-compute header length\n    if (out.getFilePointer()-start != codec.length()+9) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n\n    return out;\n  }\n\n","sourceOld":"  public static void writeHeader(IndexOutput out, String codec, int version)\n    throws IOException {\n    final long start = out.getFilePointer();\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    // We require this so we can easily pre-compute header length\n    if (out.getFilePointer()-start != codec.length()+9) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(IndexOutput,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(IndexOutput,String,int).mjava","sourceNew":"  public static IndexOutput writeHeader(IndexOutput out, String codec, int version)\n    throws IOException {\n    final long start = out.getFilePointer();\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    // We require this so we can easily pre-compute header length\n    if (out.getFilePointer()-start != codec.length()+9) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n\n    return out;\n  }\n\n","sourceOld":"  public static void writeHeader(IndexOutput out, String codec, int version)\n    throws IOException {\n    final long start = out.getFilePointer();\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    // We require this so we can easily pre-compute header length\n    if (out.getFilePointer()-start != codec.length()+9) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","date":1301994806,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(DataOutput,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(IndexOutput,String,int).mjava","sourceNew":"  public static DataOutput writeHeader(DataOutput out, String codec, int version)\n    throws IOException {\n    BytesRef bytes = new BytesRef(codec);\n    if (bytes.length != codec.length() || bytes.length >= 128) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    return out;\n  }\n\n","sourceOld":"  public static IndexOutput writeHeader(IndexOutput out, String codec, int version)\n    throws IOException {\n    final long start = out.getFilePointer();\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    // We require this so we can easily pre-compute header length\n    if (out.getFilePointer()-start != codec.length()+9) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n\n    return out;\n  }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072","5f6bd27530a2846413fe2d00030493c0e2d3a072","5f6bd27530a2846413fe2d00030493c0e2d3a072","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(DataOutput,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(IndexOutput,String,int).mjava","sourceNew":"  public static DataOutput writeHeader(DataOutput out, String codec, int version)\n    throws IOException {\n    BytesRef bytes = new BytesRef(codec);\n    if (bytes.length != codec.length() || bytes.length >= 128) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    return out;\n  }\n\n","sourceOld":"  public static IndexOutput writeHeader(IndexOutput out, String codec, int version)\n    throws IOException {\n    final long start = out.getFilePointer();\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    // We require this so we can easily pre-compute header length\n    if (out.getFilePointer()-start != codec.length()+9) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(IndexOutput,String,int).mjava","sourceNew":null,"sourceOld":"  public static IndexOutput writeHeader(IndexOutput out, String codec, int version)\n    throws IOException {\n    final long start = out.getFilePointer();\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    // We require this so we can easily pre-compute header length\n    if (out.getFilePointer()-start != codec.length()+9) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/CodecUtil#writeHeader(IndexOutput,String,int).mjava","sourceNew":null,"sourceOld":"  public static IndexOutput writeHeader(IndexOutput out, String codec, int version)\n    throws IOException {\n    final long start = out.getFilePointer();\n    out.writeInt(CODEC_MAGIC);\n    out.writeString(codec);\n    out.writeInt(version);\n\n    // We require this so we can easily pre-compute header length\n    if (out.getFilePointer()-start != codec.length()+9) {\n      throw new IllegalArgumentException(\"codec must be simple ASCII, less than 128 characters in length [got \" + codec + \"]\");\n    }\n\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a3776dccca01c11e7046323cfad46a3b4a471233":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"]},"commit2Childs":{"03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8":["a3776dccca01c11e7046323cfad46a3b4a471233","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["03b152509ee3fa8cf52abb8a4a0cfe7287c59fc8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}