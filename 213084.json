{"path":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","commits":[{"id":"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","date":1294448351,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[Object]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<Object> spellInfo) {\n    NamedList<Object> sugg = (NamedList<Object>) spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n\t\t\t\t\t\tNamedList expandedCollation = (NamedList) o;\n\t\t\t\t\t\tString collationQuery = (String) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections = (NamedList<String>) expandedCollation\n\t\t\t\t\t\t\t\t.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"/dev/null","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"/dev/null","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse#SpellCheckResponse(NamedList[NamedList[Object]]).mjava","sourceNew":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","sourceOld":"  public SpellCheckResponse(NamedList<NamedList<Object>> spellInfo) {\n    NamedList<Object> sugg = spellInfo.get(\"suggestions\");\n    if (sugg == null) {\n      correctlySpelled = true;\n      return;\n    }\n    for (int i = 0; i < sugg.size(); i++) {\n      String n = sugg.getName(i);\n      if (\"correctlySpelled\".equals(n)) {\n        correctlySpelled = (Boolean) sugg.getVal(i);\n\t\t\t} else if (\"collationInternalRank\".equals(n)){\n\t\t\t\t//continue;\n\t\t\t} else if (\"collation\".equals(n)) {\n\t\t\t\tList<Object> collationInfo = sugg.getAll(n);\n\t\t\t\tcollations = new ArrayList<Collation>(collationInfo.size());\n\t\t\t\tfor (Object o : collationInfo) {\n\t\t\t\t\tif (o instanceof String) {\n\t\t\t\t\t\tcollations.add(new Collation()\n\t\t\t\t\t\t\t\t.setCollationQueryString((String) sugg.getVal(i)));\n\t\t\t\t\t} else if (o instanceof NamedList) {\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<Object> expandedCollation = (NamedList<Object>) o;\n\t\t\t\t\t\tString collationQuery \n              = (String) expandedCollation.get(\"collationQuery\");\n\t\t\t\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n            @SuppressWarnings(\"unchecked\")\n\t\t\t\t\t\tNamedList<String> misspellingsAndCorrections \n              = (NamedList<String>) expandedCollation.get(\"misspellingsAndCorrections\");\n\n\t\t\t\t\t\tCollation collation = new Collation();\n\t\t\t\t\t\tcollation.setCollationQueryString(collationQuery);\n\t\t\t\t\t\tcollation.setNumberOfHits(hits);\n\n\t\t\t\t\t\tfor (int ii = 0; ii < misspellingsAndCorrections.size(); ii++) {\n\t\t\t\t\t\t\tString misspelling = misspellingsAndCorrections.getName(ii);\n\t\t\t\t\t\t\tString correction = misspellingsAndCorrections.getVal(ii);\n\t\t\t\t\t\t\tcollation.addMisspellingsAndCorrection(new Correction(\n\t\t\t\t\t\t\t\t\tmisspelling, correction));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcollations.add(collation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new AssertionError(\n\t\t\t\t\t\t\t\t\"Should get Lists of Strings or List of NamedLists here.\");\n\t\t\t\t\t}\n\t\t\t\t} \t\n      } else {\n        @SuppressWarnings(\"unchecked\")\n        Suggestion s = new Suggestion(n, (NamedList<Object>) sugg.getVal(i));\n        suggestionMap.put(n, s);\n        suggestions.add(s);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"c26f00b574427b55127e869b935845554afde1fa":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"fbd02ee70d00f41133d28f0c1f8e9f68168c50d3":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","fbd02ee70d00f41133d28f0c1f8e9f68168c50d3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}