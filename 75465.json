{"path":"src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.AnalysisContext#AnalysisContext(String,FieldType,Analyzer,Set[String]).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.AnalysisContext#AnalysisContext(String,FieldType,Analyzer,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Constructs a new AnalysisContext with a given field tpe, analyzer and termsToMatch. During the analysis processs,\n     * The produced tokens will be compaired to the termes in the {@codce termsToMatch} set. When found, these tokens\n     * will be marked as a match.\n     *\n     * @param fieldName    The name of the field the analysis is performed on (may be {@code null}).\n     * @param fieldType    The type of the field the analysis is performed on.\n     * @param analyzer     The analyzer to be used.\n     * @param termsToMatch Holds all the terms that should match during the analysis process.\n     */\n    public AnalysisContext(String fieldName, FieldType fieldType, Analyzer analyzer, Set<String> termsToMatch) {\n      this.fieldName = fieldName;\n      this.fieldType = fieldType;\n      this.analyzer = analyzer;\n      this.termsToMatch = termsToMatch;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c1e32df11d451c5548a0b1fb4f5609088ef0cf","date":1255111670,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.AnalysisContext#AnalysisContext(String,FieldType,Analyzer,Set[String]).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.AnalysisContext#AnalysisContext(String,FieldType,Analyzer,Set[String]).mjava","sourceNew":"    /**\n     * Constructs a new AnalysisContext with a given field tpe, analyzer and\n     * termsToMatch. During the analysis processs, The produced tokens will be \n     * compaired to the termes in the {@code termsToMatch} set. When found, \n     * these tokens will be marked as a match.\n     *\n     * @param fieldName    The name of the field the analysis is performed on \n     *                     (may be {@code null}).\n     * @param fieldType    The type of the field the analysis is performed on.\n     * @param analyzer     The analyzer to be used.\n     * @param termsToMatch Holds all the terms that should match during the \n     *                     analysis process.\n     */\n    public AnalysisContext(String fieldName, FieldType fieldType, Analyzer analyzer, Set<String> termsToMatch) {\n      this.fieldName = fieldName;\n      this.fieldType = fieldType;\n      this.analyzer = analyzer;\n      this.termsToMatch = termsToMatch;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new AnalysisContext with a given field tpe, analyzer and termsToMatch. During the analysis processs,\n     * The produced tokens will be compaired to the termes in the {@codce termsToMatch} set. When found, these tokens\n     * will be marked as a match.\n     *\n     * @param fieldName    The name of the field the analysis is performed on (may be {@code null}).\n     * @param fieldType    The type of the field the analysis is performed on.\n     * @param analyzer     The analyzer to be used.\n     * @param termsToMatch Holds all the terms that should match during the analysis process.\n     */\n    public AnalysisContext(String fieldName, FieldType fieldType, Analyzer analyzer, Set<String> termsToMatch) {\n      this.fieldName = fieldName;\n      this.fieldType = fieldType;\n      this.analyzer = analyzer;\n      this.termsToMatch = termsToMatch;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.AnalysisContext#AnalysisContext(String,FieldType,Analyzer,Set[String]).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.AnalysisContext#AnalysisContext(String,FieldType,Analyzer,Set[String]).mjava","sourceNew":"    /**\n     * Constructs a new AnalysisContext with a given field tpe, analyzer and\n     * termsToMatch. During the analysis processs, The produced tokens will be \n     * compaired to the termes in the {@code termsToMatch} set. When found, \n     * these tokens will be marked as a match.\n     *\n     * @param fieldName    The name of the field the analysis is performed on \n     *                     (may be {@code null}).\n     * @param fieldType    The type of the field the analysis is performed on.\n     * @param analyzer     The analyzer to be used.\n     * @param termsToMatch Holds all the terms that should match during the \n     *                     analysis process.\n     */\n    public AnalysisContext(String fieldName, FieldType fieldType, Analyzer analyzer, Set<String> termsToMatch) {\n      this.fieldName = fieldName;\n      this.fieldType = fieldType;\n      this.analyzer = analyzer;\n      this.termsToMatch = termsToMatch;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new AnalysisContext with a given field tpe, analyzer and\n     * termsToMatch. During the analysis processs, The produced tokens will be \n     * compaired to the termes in the {@code termsToMatch} set. When found, \n     * these tokens will be marked as a match.\n     *\n     * @param fieldName    The name of the field the analysis is performed on \n     *                     (may be {@code null}).\n     * @param fieldType    The type of the field the analysis is performed on.\n     * @param analyzer     The analyzer to be used.\n     * @param termsToMatch Holds all the terms that should match during the \n     *                     analysis process.\n     */\n    public AnalysisContext(String fieldName, FieldType fieldType, Analyzer analyzer, Set<String> termsToMatch) {\n      this.fieldName = fieldName;\n      this.fieldType = fieldType;\n      this.analyzer = analyzer;\n      this.termsToMatch = termsToMatch;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c1e32df11d451c5548a0b1fb4f5609088ef0cf":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["38c1e32df11d451c5548a0b1fb4f5609088ef0cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38c1e32df11d451c5548a0b1fb4f5609088ef0cf":["ad94625fb8d088209f46650c8097196fec67f00c"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["38c1e32df11d451c5548a0b1fb4f5609088ef0cf"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}