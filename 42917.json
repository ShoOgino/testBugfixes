{"path":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    //System.out.println(\"preflexrw\");\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor, false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d","date":1279972526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    boolean unicodeSortOrder;\n    if (termSortOrder == null) {\n      unicodeSortOrder = true;\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        //System.out.println(trace[i].getClassName());\n        if (\"org.apache.lucene.index.IndexWriter\".equals(trace[i].getClassName())) {\n          unicodeSortOrder = false;\n          break;\n        }\n      }\n      //System.out.println(\"PRW: \" + unicodeSortOrder);\n    } else {\n      unicodeSortOrder = termSortOrder.equals(\"codepoint\");\n    }\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor, unicodeSortOrder);\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    //System.out.println(\"preflexrw\");\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399a364d374f2132b6d9ff9fd7f997a9f2ef734f","date":1279978822,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCaseJ4.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    boolean unicodeSortOrder;\n    if (termSortOrder == null) {\n      unicodeSortOrder = true;\n\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        //System.out.println(trace[i].getClassName());\n        if (\"org.apache.lucene.index.IndexWriter\".equals(trace[i].getClassName())) {\n          unicodeSortOrder = false;\n          break;\n        }\n      }\n      //System.out.println(\"PRW: \" + unicodeSortOrder);\n    } else {\n      unicodeSortOrder = termSortOrder.equals(\"codepoint\");\n    }\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor, unicodeSortOrder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCaseJ4.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCaseJ4.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCaseJ4.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCaseJ4.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflexrw/PreFlexRWCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // Whenever IW opens readers, eg for merging, we have to\n    // keep terms order in UTF16:\n\n    return new PreFlexFields(state.dir, state.fieldInfos, state.segmentInfo, state.readBufferSize, state.termsIndexDivisor) {\n      @Override\n      protected boolean sortTermsByUnicode() {\n        // We carefully peek into stack track above us: if\n        // we are part of a \"merge\", we must sort by UTF16:\n        boolean unicodeSortOrder = true;\n\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          //System.out.println(trace[i].getClassName());\n          if (\"merge\".equals(trace[i].getMethodName())) {\n            unicodeSortOrder = false;\n            if (LuceneTestCase.VERBOSE) {\n              System.out.println(\"NOTE: PreFlexRW codec: forcing legacy UTF16 term sort order\");\n            }\n            break;\n          }\n        }\n\n        return unicodeSortOrder;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","399a364d374f2132b6d9ff9fd7f997a9f2ef734f"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["43b04c27924fe393e38e9f0986e32c634f261859","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399a364d374f2132b6d9ff9fd7f997a9f2ef734f":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["43b04c27924fe393e38e9f0986e32c634f261859"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["163fe85a71d778fd2b7747f65ca27b54829e2e57"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","43b04c27924fe393e38e9f0986e32c634f261859"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"399a364d374f2132b6d9ff9fd7f997a9f2ef734f":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43b04c27924fe393e38e9f0986e32c634f261859":["29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["399a364d374f2132b6d9ff9fd7f997a9f2ef734f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}