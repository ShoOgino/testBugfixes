{"path":"lucene/src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","sourceNew":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @param positionIncrement the distance from the prior term\n   * @see org.apache.lucene.index.TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @param positionIncrement the distance from the prior term\n   * @see org.apache.lucene.index.TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"444ad7e7387cb262e7c9515d0847b4082e7227a3","date":1283181885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","sourceNew":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @param positionIncrement the distance from the prior term\n   * @see org.apache.lucene.index.DocsAndPositionsEnum\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @param positionIncrement the distance from the prior term\n   * @see org.apache.lucene.index.TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","sourceNew":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @param positionIncrement the distance from the prior term\n   * @see org.apache.lucene.index.DocsAndPositionsEnum\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @param positionIncrement the distance from the prior term\n   * @see org.apache.lucene.index.TermPositions\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/Token#setPositionIncrement(int).mjava","sourceNew":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @param positionIncrement the distance from the prior term\n   * @see org.apache.lucene.index.DocsAndPositionsEnum\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /** Set the position increment.  This determines the position of this token\n   * relative to the previous Token in a {@link TokenStream}, used in phrase\n   * searching.\n   *\n   * <p>The default value is one.\n   *\n   * <p>Some common uses for this are:<ul>\n   *\n   * <li>Set it to zero to put multiple terms in the same position.  This is\n   * useful if, e.g., a word has multiple stems.  Searches for phrases\n   * including either stem will match.  In this case, all but the first stem's\n   * increment should be set to zero: the increment of the first instance\n   * should be one.  Repeating a token with an increment of zero can also be\n   * used to boost the scores of matches on that token.\n   *\n   * <li>Set it to values greater than one to inhibit exact phrase matches.\n   * If, for example, one does not want phrases to match across removed stop\n   * words, then one could build a stop word filter that removes stop words and\n   * also sets the increment to the number of stop words removed before each\n   * non-stop word.  Then exact phrase queries will only match when the terms\n   * occur with no intervening stop words.\n   *\n   * </ul>\n   * @param positionIncrement the distance from the prior term\n   * @see org.apache.lucene.index.DocsAndPositionsEnum\n   */\n  public void setPositionIncrement(int positionIncrement) {\n    if (positionIncrement < 0)\n      throw new IllegalArgumentException\n        (\"Increment must be zero or greater: \" + positionIncrement);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444ad7e7387cb262e7c9515d0847b4082e7227a3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["444ad7e7387cb262e7c9515d0847b4082e7227a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","444ad7e7387cb262e7c9515d0847b4082e7227a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"444ad7e7387cb262e7c9515d0847b4082e7227a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["444ad7e7387cb262e7c9515d0847b4082e7227a3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}