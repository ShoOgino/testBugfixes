{"path":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testQtUpdateFails().mjava","commits":[{"id":"e2238da841c6da38e6ed909d35da8f4c0ea3147b","date":1499346175,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testQtUpdateFails().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testQtUpdateFails().mjava","sourceNew":"  // SOLR-3161\n  @Test\n  public void testQtUpdateFails() throws Exception {\n    enableStreamBody(true);\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"echoHandler\",\"true\");\n    //sneaky sneaky\n    query.add(\"qt\",\"/update\");\n    query.add(CommonParams.STREAM_BODY,\"<delete><query>*:*</query></delete>\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/select\";\n      }\n    };\n    try {\n      queryRequest.process(getSolrClient());\n      fail();\n    } catch (SolrException se) {\n      assertTrue(se.getMessage(), se.getMessage().contains(\"Bad contentType for search handler :text/xml\"));\n    }\n  }\n\n","sourceOld":"  /** SOLR-3161\n   * Technically stream.body isn't remote streaming, but there wasn't a better place for this test method. */\n  @Test(expected = SolrException.class)\n  public void testQtUpdateFails() throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"echoHandler\",\"true\");\n    //sneaky sneaky\n    query.add(\"qt\",\"/update\");\n    query.add(\"stream.body\",\"<delete><query>*:*</query></delete>\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/select\";\n      }\n    };\n    QueryResponse rsp = queryRequest.process(getSolrClient());\n    //!! should *fail* above for security purposes\n    String handler = (String) rsp.getHeader().get(\"handler\");\n    System.out.println(handler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestStreamBody#testQtUpdateFails().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestRemoteStreaming#testQtUpdateFails().mjava","sourceNew":"  // SOLR-3161\n  @Test\n  public void testQtUpdateFails() throws Exception {\n    enableStreamBody(true);\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"echoHandler\",\"true\");\n    //sneaky sneaky\n    query.add(\"qt\",\"/update\");\n    query.add(CommonParams.STREAM_BODY,\"<delete><query>*:*</query></delete>\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/select\";\n      }\n    };\n    try {\n      queryRequest.process(getSolrClient());\n      fail();\n    } catch (SolrException se) {\n      assertTrue(se.getMessage(), se.getMessage().contains(\"Bad contentType for search handler :text/xml\"));\n    }\n  }\n\n","sourceOld":"  /** SOLR-3161\n   * Technically stream.body isn't remote streaming, but there wasn't a better place for this test method. */\n  @Test(expected = SolrException.class)\n  public void testQtUpdateFails() throws SolrServerException, IOException {\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );//for anything\n    query.add(\"echoHandler\",\"true\");\n    //sneaky sneaky\n    query.add(\"qt\",\"/update\");\n    query.add(\"stream.body\",\"<delete><query>*:*</query></delete>\");\n\n    QueryRequest queryRequest = new QueryRequest(query) {\n      @Override\n      public String getPath() { //don't let superclass substitute qt for the path\n        return \"/select\";\n      }\n    };\n    QueryResponse rsp = queryRequest.process(getSolrClient());\n    //!! should *fail* above for security purposes\n    String handler = (String) rsp.getHeader().get(\"handler\");\n    System.out.println(handler);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2238da841c6da38e6ed909d35da8f4c0ea3147b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2238da841c6da38e6ed909d35da8f4c0ea3147b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2238da841c6da38e6ed909d35da8f4c0ea3147b"]},"commit2Childs":{"e2238da841c6da38e6ed909d35da8f4c0ea3147b":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2238da841c6da38e6ed909d35da8f4c0ea3147b","e73d8d559120669b47658108d818b637df5456ea"],"e73d8d559120669b47658108d818b637df5456ea":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}