{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","sourceNew":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation;\n    rowsPermutation = (Matrix.Column.Row[]) permutations.next();\n    List currentPermutationRows = new ArrayList();\n    List currentPermuationTokens = new ArrayList();\n    for (int i = 0; i < rowsPermutation.length; i++) {\n      Matrix.Column.Row row = rowsPermutation[i];\n      for (Iterator iterator = row.getTokens().iterator(); iterator.hasNext();) {\n        currentPermuationTokens.add(iterator.next());\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","sourceOld":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation;\n    rowsPermutation = (Matrix.Column.Row[]) permutations.next();\n    List currentPermutationRows = new ArrayList();\n    List currentPermuationTokens = new ArrayList();\n    for (int i = 0; i < rowsPermutation.length; i++) {\n      Matrix.Column.Row row = rowsPermutation[i];\n      for (Iterator iterator = row.getTokens().iterator(); iterator.hasNext();) {\n        currentPermuationTokens.add(iterator.next());\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d7af7923eb20ee09475be28bf8053f8af5be53","date":1254575831,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","sourceNew":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation = permutations.next();\n    List<Matrix.Column.Row> currentPermutationRows = new ArrayList<Matrix.Column.Row>();\n    List<Token> currentPermuationTokens = new ArrayList<Token>();\n    for (Matrix.Column.Row row : rowsPermutation) {\n      for (Token token : row.getTokens()) {\n        currentPermuationTokens.add(token);\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","sourceOld":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation;\n    rowsPermutation = (Matrix.Column.Row[]) permutations.next();\n    List currentPermutationRows = new ArrayList();\n    List currentPermuationTokens = new ArrayList();\n    for (int i = 0; i < rowsPermutation.length; i++) {\n      Matrix.Column.Row row = rowsPermutation[i];\n      for (Iterator iterator = row.getTokens().iterator(); iterator.hasNext();) {\n        currentPermuationTokens.add(iterator.next());\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#nextTokensPermutation().mjava","sourceNew":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation = permutations.next();\n    List<Matrix.Column.Row> currentPermutationRows = new ArrayList<Matrix.Column.Row>();\n    List<Token> currentPermuationTokens = new ArrayList<Token>();\n    for (Matrix.Column.Row row : rowsPermutation) {\n      for (Token token : row.getTokens()) {\n        currentPermuationTokens.add(token);\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","sourceOld":"  /**\n   * get next permutation of row combinations,\n   * creates list of all tokens in the row and\n   * an index from each such token to what row they exist in.\n   * finally resets the current (next) shingle size and offset.\n   */\n  private void nextTokensPermutation() {\n    Matrix.Column.Row[] rowsPermutation = permutations.next();\n    List<Matrix.Column.Row> currentPermutationRows = new ArrayList<Matrix.Column.Row>();\n    List<Token> currentPermuationTokens = new ArrayList<Token>();\n    for (Matrix.Column.Row row : rowsPermutation) {\n      for (Token token : row.getTokens()) {\n        currentPermuationTokens.add(token);\n        currentPermutationRows.add(row);\n      }\n    }\n    this.currentPermuationTokens = currentPermuationTokens;\n    this.currentPermutationRows = currentPermutationRows;\n\n    currentPermutationTokensStartOffset = 0;\n    currentShingleLength = minimumShingleSize - 1;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0d7af7923eb20ee09475be28bf8053f8af5be53":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0d7af7923eb20ee09475be28bf8053f8af5be53"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["b0d7af7923eb20ee09475be28bf8053f8af5be53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"b0d7af7923eb20ee09475be28bf8053f8af5be53":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}