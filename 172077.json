{"path":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","commits":[{"id":"c5158914667813eb64c75413b45b3f3247bbd1fb","date":1362969766,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeprecations() throws Exception {\n    Version values[] = Version.values();\n    // all but the latest version should be deprecated\n    for (int i = 0; i < values.length-2; i++) {\n      assertTrue(values[i].name() + \" should be deprecated\", \n          Version.class.getField(values[i].name()).isAnnotationPresent(Deprecated.class));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab121f5dfcdf667ea0f6b06ca452f6bf3b581a8","date":1362972701,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","sourceNew":"  public void testDeprecations() throws Exception {\n    Version values[] = Version.values();\n    // all but the latest version should be deprecated\n    for (int i = 0; i < values.length-2; i++) {\n      assertNotNull(values[i].name() + \" should be deprecated\", \n          Version.class.getField(values[i].name()).getAnnotation(Deprecated.class));\n    }\n  }\n\n","sourceOld":"  public void testDeprecations() throws Exception {\n    Version values[] = Version.values();\n    // all but the latest version should be deprecated\n    for (int i = 0; i < values.length-2; i++) {\n      assertTrue(values[i].name() + \" should be deprecated\", \n          Version.class.getField(values[i].name()).isAnnotationPresent(Deprecated.class));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b74a6c31926c1cb18872281c650f27634912543","date":1363015458,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","sourceNew":"  public void testDeprecations() throws Exception {\n    Version values[] = Version.values();\n    // all but the latest version should be deprecated\n    for (int i = 0; i < values.length; i++) {\n      if (i + 1 == values.length) {\n        assertSame(\"Last constant must be LUCENE_CURRENT\", Version.LUCENE_CURRENT, values[i]);\n      }\n      // TODO: Use isAnnotationPresent once bug in Java 8 is fixed (LUCENE-4808)\n      final Annotation ann = Version.class.getField(values[i].name()).getAnnotation(Deprecated.class);\n      if (i + 2 != values.length) {\n        assertNotNull(values[i].name() + \" should be deprecated\", ann);\n      } else {\n        assertNull(values[i].name() + \" should not be deprecated\", ann);\n      }\n    }\n  }\n\n","sourceOld":"  public void testDeprecations() throws Exception {\n    Version values[] = Version.values();\n    // all but the latest version should be deprecated\n    for (int i = 0; i < values.length-2; i++) {\n      assertNotNull(values[i].name() + \" should be deprecated\", \n          Version.class.getField(values[i].name()).getAnnotation(Deprecated.class));\n    }\n  }\n\n","bugFix":null,"bugIntro":["879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28094f07cf25226845218c321b25452aabb75388","date":1363017551,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","sourceNew":"  public void testDeprecations() throws Exception {\n    Version values[] = Version.values();\n    // all but the latest version should be deprecated\n    for (int i = 0; i < values.length; i++) {\n      if (i + 1 == values.length) {\n        assertSame(\"Last constant must be LUCENE_CURRENT\", Version.LUCENE_CURRENT, values[i]);\n      }\n      // TODO: Use isAnnotationPresent once bug in Java 8 is fixed (LUCENE-4808)\n      final Deprecated ann = Version.class.getField(values[i].name()).getAnnotation(Deprecated.class);\n      if (i + 2 != values.length) {\n        assertNotNull(values[i].name() + \" should be deprecated\", ann);\n      } else {\n        assertNull(values[i].name() + \" should not be deprecated\", ann);\n      }\n    }\n  }\n\n","sourceOld":"  public void testDeprecations() throws Exception {\n    Version values[] = Version.values();\n    // all but the latest version should be deprecated\n    for (int i = 0; i < values.length; i++) {\n      if (i + 1 == values.length) {\n        assertSame(\"Last constant must be LUCENE_CURRENT\", Version.LUCENE_CURRENT, values[i]);\n      }\n      // TODO: Use isAnnotationPresent once bug in Java 8 is fixed (LUCENE-4808)\n      final Annotation ann = Version.class.getField(values[i].name()).getAnnotation(Deprecated.class);\n      if (i + 2 != values.length) {\n        assertNotNull(values[i].name() + \" should be deprecated\", ann);\n      } else {\n        assertNull(values[i].name() + \" should not be deprecated\", ann);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5","date":1363992115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","sourceNew":"  public void testDeprecations() throws Exception {\n    Version values[] = Version.values();\n    // all but the latest version should be deprecated\n    for (int i = 0; i < values.length; i++) {\n      if (i + 1 == values.length) {\n        assertSame(\"Last constant must be LUCENE_CURRENT\", Version.LUCENE_CURRENT, values[i]);\n      }\n      final boolean dep = Version.class.getField(values[i].name()).isAnnotationPresent(Deprecated.class);\n      if (i + 2 != values.length) {\n        assertTrue(values[i].name() + \" should be deprecated\", dep);\n      } else {\n        assertFalse(values[i].name() + \" should not be deprecated\", dep);\n      }\n    }\n  }\n\n","sourceOld":"  public void testDeprecations() throws Exception {\n    Version values[] = Version.values();\n    // all but the latest version should be deprecated\n    for (int i = 0; i < values.length; i++) {\n      if (i + 1 == values.length) {\n        assertSame(\"Last constant must be LUCENE_CURRENT\", Version.LUCENE_CURRENT, values[i]);\n      }\n      // TODO: Use isAnnotationPresent once bug in Java 8 is fixed (LUCENE-4808)\n      final Deprecated ann = Version.class.getField(values[i].name()).getAnnotation(Deprecated.class);\n      if (i + 2 != values.length) {\n        assertNotNull(values[i].name() + \" should be deprecated\", ann);\n      } else {\n        assertNull(values[i].name() + \" should not be deprecated\", ann);\n      }\n    }\n  }\n\n","bugFix":["9b74a6c31926c1cb18872281c650f27634912543","28094f07cf25226845218c321b25452aabb75388"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","sourceNew":"  public void testDeprecations() throws Exception {\n    // all but the latest version should be deprecated\n    for (Field field : Version.class.getDeclaredFields()) {\n      if (Modifier.isStatic(field.getModifiers()) && field.getType() == Version.class) {\n        Version v = (Version)field.get(Version.class);\n        final boolean dep = field.isAnnotationPresent(Deprecated.class);\n        if (v.equals(Version.LATEST) && field.getName().equals(\"LUCENE_CURRENT\") == false) {\n          assertFalse(field.getName() + \" should not be deprecated\", dep);\n        } else {\n          assertTrue(field.getName() + \" should be deprecated\", dep);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testDeprecations() throws Exception {\n    Version values[] = Version.values();\n    // all but the latest version should be deprecated\n    for (int i = 0; i < values.length; i++) {\n      if (i + 1 == values.length) {\n        assertSame(\"Last constant must be LUCENE_CURRENT\", Version.LUCENE_CURRENT, values[i]);\n      }\n      final boolean dep = Version.class.getField(values[i].name()).isAnnotationPresent(Deprecated.class);\n      if (i + 2 != values.length) {\n        assertTrue(values[i].name() + \" should be deprecated\", dep);\n      } else {\n        assertFalse(values[i].name() + \" should not be deprecated\", dep);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a","date":1410373276,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testDeprecations().mjava","sourceNew":"  public void testDeprecations() throws Exception {\n    // all but the latest version should be deprecated\n    boolean atLeastOne = false;\n    for (Field field : Version.class.getDeclaredFields()) {\n      if (Modifier.isStatic(field.getModifiers()) && field.getType() == Version.class) {\n        atLeastOne = true;\n        Version v = (Version)field.get(Version.class);\n        final boolean dep = field.isAnnotationPresent(Deprecated.class);\n        if (v.equals(Version.LATEST) && field.getName().equals(\"LUCENE_CURRENT\") == false) {\n          assertFalse(field.getName() + \" should not be deprecated\", dep);\n        } else {\n          assertTrue(field.getName() + \" should be deprecated\", dep);\n        }\n      }\n    }\n    assertTrue(atLeastOne);\n  }\n\n","sourceOld":"  public void testDeprecations() throws Exception {\n    // all but the latest version should be deprecated\n    for (Field field : Version.class.getDeclaredFields()) {\n      if (Modifier.isStatic(field.getModifiers()) && field.getType() == Version.class) {\n        Version v = (Version)field.get(Version.class);\n        final boolean dep = field.isAnnotationPresent(Deprecated.class);\n        if (v.equals(Version.LATEST) && field.getName().equals(\"LUCENE_CURRENT\") == false) {\n          assertFalse(field.getName() + \" should not be deprecated\", dep);\n        } else {\n          assertTrue(field.getName() + \" should be deprecated\", dep);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5":["28094f07cf25226845218c321b25452aabb75388"],"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a":["057a1793765d068ea9302f1a29e21734ee58d41e"],"9ab121f5dfcdf667ea0f6b06ca452f6bf3b581a8":["c5158914667813eb64c75413b45b3f3247bbd1fb"],"c5158914667813eb64c75413b45b3f3247bbd1fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b74a6c31926c1cb18872281c650f27634912543":["9ab121f5dfcdf667ea0f6b06ca452f6bf3b581a8"],"057a1793765d068ea9302f1a29e21734ee58d41e":["879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a"],"28094f07cf25226845218c321b25452aabb75388":["9b74a6c31926c1cb18872281c650f27634912543"]},"commit2Childs":{"879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5":["057a1793765d068ea9302f1a29e21734ee58d41e"],"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ab121f5dfcdf667ea0f6b06ca452f6bf3b581a8":["9b74a6c31926c1cb18872281c650f27634912543"],"c5158914667813eb64c75413b45b3f3247bbd1fb":["9ab121f5dfcdf667ea0f6b06ca452f6bf3b581a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5158914667813eb64c75413b45b3f3247bbd1fb"],"9b74a6c31926c1cb18872281c650f27634912543":["28094f07cf25226845218c321b25452aabb75388"],"057a1793765d068ea9302f1a29e21734ee58d41e":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a"],"28094f07cf25226845218c321b25452aabb75388":["879f774d3d719fff4f9f8bd6b0a98dc2025f8ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}