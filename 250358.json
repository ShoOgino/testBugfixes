{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next(Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return null;\n      if (pos+gramSize > inLen)\n        return null;\n    }\n\n    int oldPos = pos;\n    pos++;\n    return reusableToken.reinit(inStr, oldPos, gramSize, oldPos, oldPos+gramSize);\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next() throws IOException {\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return null;\n      if (pos+gramSize > inLen)\n        return null;\n    }\n    String gram = inStr.substring(pos, pos+gramSize);\n    int oldPos = pos;\n    pos++;\n    return new Token(gram, oldPos, oldPos+gramSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2","date":1245784531,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next(Token).mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return null;\n      if (pos+gramSize > inLen)\n        return null;\n    }\n\n    int oldPos = pos;\n    pos++;\n    return reusableToken.reinit(inStr, oldPos, gramSize, input.correctOffset(oldPos), input.correctOffset(oldPos+gramSize));\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return null;\n      if (pos+gramSize > inLen)\n        return null;\n    }\n\n    int oldPos = pos;\n    pos++;\n    return reusableToken.reinit(inStr, oldPos, gramSize, oldPos, oldPos+gramSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#next(Token).mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return null;\n      if (pos+gramSize > inLen)\n        return null;\n    }\n\n    int oldPos = pos;\n    pos++;\n    return reusableToken.reinit(inStr, oldPos, gramSize, input.correctOffset(oldPos), input.correctOffset(oldPos+gramSize));\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return null;\n      if (pos+gramSize > inLen)\n        return null;\n    }\n\n    int oldPos = pos;\n    pos++;\n    return reusableToken.reinit(inStr, oldPos, gramSize, input.correctOffset(oldPos), input.correctOffset(oldPos+gramSize));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}