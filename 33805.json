{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","commits":[{"id":"1b51bf16b2321204d381cc1154f0c975f5e8b9a2","date":1491806707,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void zkSetPolicies(ZkStateReader reader, String policyName, Map<String, Object> policyProperties) throws KeeperException, InterruptedException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (policyProperties != null) {\n        policies.put(policyName, policyProperties);\n      } else {\n        policies.remove(policyName);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","date":1493709133,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","sourceNew":"  private void zkSetPolicies(ZkStateReader reader, String policyBeRemoved, Map<String, Object> newPolicies) throws KeeperException, InterruptedException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (newPolicies != null) {\n        policies.putAll(newPolicies);\n      } else {\n        policies.remove(policyBeRemoved);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  private void zkSetPolicies(ZkStateReader reader, String policyName, Map<String, Object> policyProperties) throws KeeperException, InterruptedException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (policyProperties != null) {\n        policies.put(policyName, policyProperties);\n      } else {\n        policies.remove(policyName);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d913bcce36d9d659d239969d07e20d245a5690d9","date":1496064789,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","sourceNew":"  private void zkSetPolicies(ZkStateReader reader, String policyBeRemoved, Map<String, Object> newPolicies) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (newPolicies != null) {\n        policies.putAll(newPolicies);\n      } else {\n        policies.remove(policyBeRemoved);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      verifyAutoScalingConf(loaded.getProperties());\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  private void zkSetPolicies(ZkStateReader reader, String policyBeRemoved, Map<String, Object> newPolicies) throws KeeperException, InterruptedException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (newPolicies != null) {\n        policies.putAll(newPolicies);\n      } else {\n        policies.remove(policyBeRemoved);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void zkSetPolicies(ZkStateReader reader, String policyBeRemoved, Map<String, Object> newPolicies) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (newPolicies != null) {\n        policies.putAll(newPolicies);\n      } else {\n        policies.remove(policyBeRemoved);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      verifyAutoScalingConf(loaded.getProperties());\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void zkSetPolicies(ZkStateReader reader, String policyBeRemoved, Map<String, Object> newPolicies) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (newPolicies != null) {\n        policies.putAll(newPolicies);\n      } else {\n        policies.remove(policyBeRemoved);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      verifyAutoScalingConf(loaded.getProperties());\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void zkSetPolicies(ZkStateReader reader, String policyBeRemoved, Map<String, Object> newPolicies) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (newPolicies != null) {\n        policies.putAll(newPolicies);\n      } else {\n        policies.remove(policyBeRemoved);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      verifyAutoScalingConf(loaded.getProperties());\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private void zkSetPolicies(ZkStateReader reader, String policyBeRemoved, Map<String, Object> newPolicies) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (newPolicies != null) {\n        policies.putAll(newPolicies);\n      } else {\n        policies.remove(policyBeRemoved);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      verifyAutoScalingConf(loaded.getProperties());\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private void zkSetPolicies(ZkStateReader reader, String policyBeRemoved, Map<String, Object> newPolicies) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (newPolicies != null) {\n        policies.putAll(newPolicies);\n      } else {\n        policies.remove(policyBeRemoved);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      verifyAutoScalingConf(loaded.getProperties());\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#zkSetPolicies(ZkStateReader,String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private void zkSetPolicies(ZkStateReader reader, String policyBeRemoved, Map<String, Object> newPolicies) throws KeeperException, InterruptedException, IOException {\n    while (true) {\n      Stat stat = new Stat();\n      ZkNodeProps loaded = null;\n      byte[] data = reader.getZkClient().getData(SOLR_AUTOSCALING_CONF_PATH, null, stat, true);\n      loaded = ZkNodeProps.load(data);\n      Map<String, Object> policies = (Map<String, Object>) loaded.get(\"policies\");\n      if (policies == null) policies = new HashMap<>(1);\n      if (newPolicies != null) {\n        policies.putAll(newPolicies);\n      } else {\n        policies.remove(policyBeRemoved);\n      }\n      loaded = loaded.plus(\"policies\", policies);\n      verifyAutoScalingConf(loaded.getProperties());\n      try {\n        reader.getZkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(loaded), stat.getVersion(), true);\n      } catch (KeeperException.BadVersionException bve) {\n        // somebody else has changed the configuration so we must retry\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d913bcce36d9d659d239969d07e20d245a5690d9":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63"],"1b51bf16b2321204d381cc1154f0c975f5e8b9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["d913bcce36d9d659d239969d07e20d245a5690d9"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["1b51bf16b2321204d381cc1154f0c975f5e8b9a2"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","1b51bf16b2321204d381cc1154f0c975f5e8b9a2","28288370235ed02234a64753cdbf0c6ec096304a"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"d913bcce36d9d659d239969d07e20d245a5690d9":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"1b51bf16b2321204d381cc1154f0c975f5e8b9a2":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["d913bcce36d9d659d239969d07e20d245a5690d9"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}