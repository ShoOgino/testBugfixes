{"path":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#MergeRateLimiter(MergePolicy.OneMerge).mjava","commits":[{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#MergeRateLimiter(MergePolicy.OneMerge).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor. */\n  public MergeRateLimiter(MergePolicy.OneMerge merge) {\n    this.merge = merge;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25a4e90766dbbec3fc8ead1763d12a0b7f2f28d2","date":1421139739,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#MergeRateLimiter(MergePolicy.OneMerge).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#MergeRateLimiter(MergePolicy.OneMerge).mjava","sourceNew":"  /** Sole constructor. */\n  public MergeRateLimiter(MergePolicy.OneMerge merge) {\n    this.merge = merge;\n\n    // Initially no IO limit; use setter here so minPauseCheckBytes is set:\n    setMBPerSec(Double.POSITIVE_INFINITY);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public MergeRateLimiter(MergePolicy.OneMerge merge) {\n    this.merge = merge;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1ee9437ba5a8297220428d48a6bb823d1fcd57b","date":1489137809,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#MergeRateLimiter(OneMergeProgress).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#MergeRateLimiter(MergePolicy.OneMerge).mjava","sourceNew":"  /** Sole constructor. */\n  public MergeRateLimiter(OneMergeProgress mergeProgress) {\n    // Initially no IO limit; use setter here so minPauseCheckBytes is set:\n    this.mergeProgress = mergeProgress;\n    setMBPerSec(Double.POSITIVE_INFINITY);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public MergeRateLimiter(MergePolicy.OneMerge merge) {\n    this.merge = merge;\n\n    // Initially no IO limit; use setter here so minPauseCheckBytes is set:\n    setMBPerSec(Double.POSITIVE_INFINITY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25a4e90766dbbec3fc8ead1763d12a0b7f2f28d2":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["25a4e90766dbbec3fc8ead1763d12a0b7f2f28d2"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"]},"commit2Childs":{"25a4e90766dbbec3fc8ead1763d12a0b7f2f28d2":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["25a4e90766dbbec3fc8ead1763d12a0b7f2f28d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}