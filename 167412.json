{"path":"solr/src/java/org/apache/solr/analysis/TrimFilter#incrementToken().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/TrimFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.setTermBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setTermLength(0);\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/TrimFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.setTermBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setTermLength(0);\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/TrimFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.setTermBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setTermLength(0);\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.setTermBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setTermLength(0);\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/TrimFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.setTermBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setTermLength(0);\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d085fb336a7208eea2214e5ffcc803960819b60b","date":1270981894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/TrimFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int len = termAtt.termLength();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.setTermBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setTermLength(0);\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"384e84fe86b09273dea9bb358ff47fc7781f3f17","date":1272992848,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"384e84fe86b09273dea9bb358ff47fc7781f3f17":["d085fb336a7208eea2214e5ffcc803960819b60b"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d085fb336a7208eea2214e5ffcc803960819b60b":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["384e84fe86b09273dea9bb358ff47fc7781f3f17"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["d085fb336a7208eea2214e5ffcc803960819b60b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"384e84fe86b09273dea9bb358ff47fc7781f3f17":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d085fb336a7208eea2214e5ffcc803960819b60b":["384e84fe86b09273dea9bb358ff47fc7781f3f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}