{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoEncodingUtils#testEncodeDecode().mjava","commits":[{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoEncodingUtils#testEncodeDecode().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n\n      long enc = GeoEncodingUtils.mortonHash(lat, lon);\n      double latEnc = GeoEncodingUtils.mortonUnhashLat(enc);\n      double lonEnc = GeoEncodingUtils.mortonUnhashLon(enc);\n\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, GeoEncodingUtils.TOLERANCE);\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, GeoEncodingUtils.TOLERANCE);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    boolean small = random().nextBoolean();\n    for(int iter=0;iter<iters;iter++) {\n      double lat = randomLat(small);\n      double lon = randomLon(small);\n\n      long enc = GeoEncodingUtils.mortonHash(lat, lon);\n      double latEnc = GeoEncodingUtils.mortonUnhashLat(enc);\n      double lonEnc = GeoEncodingUtils.mortonUnhashLon(enc);\n\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, GeoEncodingUtils.TOLERANCE);\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, GeoEncodingUtils.TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04790b6d5ac688a34672cd16c57da76c190979be","date":1460130940,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoEncodingUtils#testEncodeDecode().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoEncodingUtils#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n\n      long enc = GeoEncodingUtils.mortonHash(lat, lon);\n      double latEnc = GeoEncodingUtils.mortonUnhashLat(enc);\n      double lonEnc = GeoEncodingUtils.mortonUnhashLon(enc);\n\n      // todo remove tolerance\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, 1e-6);\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, 1e-6);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n\n      long enc = GeoEncodingUtils.mortonHash(lat, lon);\n      double latEnc = GeoEncodingUtils.mortonUnhashLat(enc);\n      double lonEnc = GeoEncodingUtils.mortonUnhashLon(enc);\n\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, GeoEncodingUtils.TOLERANCE);\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, GeoEncodingUtils.TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e22901dc90e04fa99e87ab1d7608963c0c78bc","date":1460145210,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoEncodingUtils#testEncodeDecode().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoEncodingUtils#testEncodeDecode().mjava","sourceNew":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n\n      long enc = GeoEncodingUtils.mortonHash(lat, lon);\n      double latEnc = GeoEncodingUtils.mortonUnhashLat(enc);\n      double lonEnc = GeoEncodingUtils.mortonUnhashLon(enc);\n\n      // todo remove tolerance\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, 1e-6);\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, 1e-6);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n\n      long enc = GeoEncodingUtils.mortonHash(lat, lon);\n      double latEnc = GeoEncodingUtils.mortonUnhashLat(enc);\n      double lonEnc = GeoEncodingUtils.mortonUnhashLon(enc);\n\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, GeoEncodingUtils.TOLERANCE);\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, GeoEncodingUtils.TOLERANCE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"065f36185d91a7d825ce7adac5b0d8df5cb4f73f","date":1461251676,"type":4,"author":"nknize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoEncodingUtils#testEncodeDecode().mjava","sourceNew":null,"sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n\n      long enc = GeoEncodingUtils.mortonHash(lat, lon);\n      double latEnc = GeoEncodingUtils.mortonUnhashLat(enc);\n      double lonEnc = GeoEncodingUtils.mortonUnhashLon(enc);\n\n      // todo remove tolerance\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, 1e-6);\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, 1e-6);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoEncodingUtils#testEncodeDecode().mjava","sourceNew":null,"sourceOld":"  public void testEncodeDecode() throws Exception {\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n\n      long enc = GeoEncodingUtils.mortonHash(lat, lon);\n      double latEnc = GeoEncodingUtils.mortonUnhashLat(enc);\n      double lonEnc = GeoEncodingUtils.mortonUnhashLon(enc);\n\n      // todo remove tolerance\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, 1e-6);\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, 1e-6);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"065f36185d91a7d825ce7adac5b0d8df5cb4f73f":["17e22901dc90e04fa99e87ab1d7608963c0c78bc"],"17e22901dc90e04fa99e87ab1d7608963c0c78bc":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","04790b6d5ac688a34672cd16c57da76c190979be"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["17e22901dc90e04fa99e87ab1d7608963c0c78bc","065f36185d91a7d825ce7adac5b0d8df5cb4f73f"],"04790b6d5ac688a34672cd16c57da76c190979be":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"]},"commit2Childs":{"065f36185d91a7d825ce7adac5b0d8df5cb4f73f":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"17e22901dc90e04fa99e87ab1d7608963c0c78bc":["065f36185d91a7d825ce7adac5b0d8df5cb4f73f","ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04790b6d5ac688a34672cd16c57da76c190979be":["17e22901dc90e04fa99e87ab1d7608963c0c78bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["17e22901dc90e04fa99e87ab1d7608963c0c78bc","04790b6d5ac688a34672cd16c57da76c190979be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}