{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","commits":[{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores) throws Exception {\n\n    // TODO: swap in caching, all groups collector here\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = query.weight(topSearcher);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      final TermFirstPassGroupingCollector c = new TermFirstPassGroupingCollector(\"group\", groupSort, groupOffset+topNGroups);\n      subSearchers[shardIDX].search(w, c);\n      final Collection<SearchGroup<BytesRef>> topGroups = c.getTopGroups(0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" sort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\"  merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    \" + groupToString(group.groupValue) + \" sort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n        final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TermSecondPassGroupingCollector c = new TermSecondPassGroupingCollector(\"group\", mergedTopGroups, groupSort, docSort,\n                                                                                      docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, c);\n        shardTopGroups[shardIDX] = c.getTopGroups(0);\n      }\n\n      return TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee1e819608b23c90528e2c6771658ac019b65372","date":1308251015,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores) throws Exception {\n\n    // TODO: swap in caching, all groups collector here\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      final TermFirstPassGroupingCollector c = new TermFirstPassGroupingCollector(\"group\", groupSort, groupOffset+topNGroups);\n      subSearchers[shardIDX].search(w, c);\n      final Collection<SearchGroup<BytesRef>> topGroups = c.getTopGroups(0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" sort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\"  merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    \" + groupToString(group.groupValue) + \" sort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n        final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TermSecondPassGroupingCollector c = new TermSecondPassGroupingCollector(\"group\", mergedTopGroups, groupSort, docSort,\n                                                                                      docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, c);\n        shardTopGroups[shardIDX] = c.getTopGroups(0);\n      }\n\n      return TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores) throws Exception {\n\n    // TODO: swap in caching, all groups collector here\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = query.weight(topSearcher);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      final TermFirstPassGroupingCollector c = new TermFirstPassGroupingCollector(\"group\", groupSort, groupOffset+topNGroups);\n      subSearchers[shardIDX].search(w, c);\n      final Collection<SearchGroup<BytesRef>> topGroups = c.getTopGroups(0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" sort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\"  merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    \" + groupToString(group.groupValue) + \" sort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n        final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TermSecondPassGroupingCollector c = new TermSecondPassGroupingCollector(\"group\", mergedTopGroups, groupSort, docSort,\n                                                                                      docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, c);\n        shardTopGroups[shardIDX] = c.getTopGroups(0);\n      }\n\n      return TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores) throws Exception {\n\n    // TODO: swap in caching, all groups collector here\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      final TermFirstPassGroupingCollector c = new TermFirstPassGroupingCollector(\"group\", groupSort, groupOffset+topNGroups);\n      subSearchers[shardIDX].search(w, c);\n      final Collection<SearchGroup<BytesRef>> topGroups = c.getTopGroups(0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" sort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\"  merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    \" + groupToString(group.groupValue) + \" sort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n        final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TermSecondPassGroupingCollector c = new TermSecondPassGroupingCollector(\"group\", mergedTopGroups, groupSort, docSort,\n                                                                                      docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, c);\n        shardTopGroups[shardIDX] = c.getTopGroups(0);\n      }\n\n      return TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cb194976386e349893169fee3c2aa6de3a83fd1","date":1317819143,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores) throws Exception {\n\n    // TODO: swap in caching, all groups collector here\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      final TermFirstPassGroupingCollector c = new TermFirstPassGroupingCollector(\"group\", groupSort, groupOffset+topNGroups);\n      subSearchers[shardIDX].search(w, c);\n      final Collection<SearchGroup<BytesRef>> topGroups = c.getTopGroups(0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\"  merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n        final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TermSecondPassGroupingCollector c = new TermSecondPassGroupingCollector(\"group\", mergedTopGroups, groupSort, docSort,\n                                                                                      docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, c);\n        shardTopGroups[shardIDX] = c.getTopGroups(0);\n      }\n\n      return TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores) throws Exception {\n\n    // TODO: swap in caching, all groups collector here\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      final TermFirstPassGroupingCollector c = new TermFirstPassGroupingCollector(\"group\", groupSort, groupOffset+topNGroups);\n      subSearchers[shardIDX].search(w, c);\n      final Collection<SearchGroup<BytesRef>> topGroups = c.getTopGroups(0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" sort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\"  merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    \" + groupToString(group.groupValue) + \" sort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n        final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TermSecondPassGroupingCollector c = new TermSecondPassGroupingCollector(\"group\", mergedTopGroups, groupSort, docSort,\n                                                                                      docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, c);\n        shardTopGroups[shardIDX] = c.getTopGroups(0);\n      }\n\n      return TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","date":1317931776,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores) throws Exception {\n\n    // TODO: swap in caching, all groups collector here\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      final AbstractFirstPassGroupingCollector c = createRandomFirstPassCollector(\"group\", groupSort, groupOffset+topNGroups);\n      firstPassGroupingCollectors.add(c);\n      subSearchers[shardIDX].search(w, c);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(c, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\"  merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n        final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector c = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, c);\n        shardTopGroups[shardIDX] = getTopGroups(c, 0);\n      }\n\n      return TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores) throws Exception {\n\n    // TODO: swap in caching, all groups collector here\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      final TermFirstPassGroupingCollector c = new TermFirstPassGroupingCollector(\"group\", groupSort, groupOffset+topNGroups);\n      subSearchers[shardIDX].search(w, c);\n      final Collection<SearchGroup<BytesRef>> topGroups = c.getTopGroups(0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\"  merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n        final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TermSecondPassGroupingCollector c = new TermSecondPassGroupingCollector(\"group\", mergedTopGroups, groupSort, docSort,\n                                                                                      docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, c);\n        shardTopGroups[shardIDX] = c.getTopGroups(0);\n      }\n\n      return TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4739c84c362b9673ab5ed3e038ff760c718c30c8","date":1322161679,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    AbstractFirstPassGroupingCollector firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowMultiReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores) throws Exception {\n\n    // TODO: swap in caching, all groups collector here\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      final AbstractFirstPassGroupingCollector c = createRandomFirstPassCollector(\"group\", groupSort, groupOffset+topNGroups);\n      firstPassGroupingCollectors.add(c);\n      subSearchers[shardIDX].search(w, c);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(c, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\"  merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n        final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector c = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, c);\n        shardTopGroups[shardIDX] = getTopGroups(c, 0);\n      }\n\n      return TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["85d41890f2bad879e6a04c6dd7d2cf276f973994","d4d69c535930b5cce125cff868d40f6373dc27d4","0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee1e819608b23c90528e2c6771658ac019b65372"],"7cb194976386e349893169fee3c2aa6de3a83fd1":["ee1e819608b23c90528e2c6771658ac019b65372"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee1e819608b23c90528e2c6771658ac019b65372":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["7cb194976386e349893169fee3c2aa6de3a83fd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4739c84c362b9673ab5ed3e038ff760c718c30c8"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"7cb194976386e349893169fee3c2aa6de3a83fd1":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee1e819608b23c90528e2c6771658ac019b65372":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","7cb194976386e349893169fee3c2aa6de3a83fd1"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["ee1e819608b23c90528e2c6771658ac019b65372"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}