{"path":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#getPackedPoints().mjava","commits":[{"id":"ac96418b176c9862b22cd43a6c5b7be58b3b245e","date":1464870809,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#getPackedPoints().mjava","pathOld":"/dev/null","sourceNew":"  public Collection<byte[]> getPackedPoints() {\n    return new AbstractCollection<byte[]>() {\n\n      @Override\n      public Iterator<byte[]> iterator() {\n        int size = (int) sortedPackedPoints.size();\n        PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();\n        return new Iterator<byte[]>() {\n\n          int upto = 0;\n\n          @Override\n          public boolean hasNext() {\n            return upto < size;\n          }\n\n          @Override\n          public byte[] next() {\n            if (upto == size) {\n              throw new NoSuchElementException();\n            }\n\n            upto++;\n            BytesRef next = iterator.next();\n            return Arrays.copyOfRange(next.bytes, next.offset, next.length);\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return (int) sortedPackedPoints.size();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#getPackedPoints().mjava","pathOld":"/dev/null","sourceNew":"  public Collection<byte[]> getPackedPoints() {\n    return new AbstractCollection<byte[]>() {\n\n      @Override\n      public Iterator<byte[]> iterator() {\n        int size = (int) sortedPackedPoints.size();\n        PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();\n        return new Iterator<byte[]>() {\n\n          int upto = 0;\n\n          @Override\n          public boolean hasNext() {\n            return upto < size;\n          }\n\n          @Override\n          public byte[] next() {\n            if (upto == size) {\n              throw new NoSuchElementException();\n            }\n\n            upto++;\n            BytesRef next = iterator.next();\n            return Arrays.copyOfRange(next.bytes, next.offset, next.length);\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return (int) sortedPackedPoints.size();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#getPackedPoints().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#getPackedPoints().mjava","sourceNew":"  public Collection<byte[]> getPackedPoints() {\n    return new AbstractCollection<byte[]>() {\n\n      @Override\n      public Iterator<byte[]> iterator() {\n        int size = (int) sortedPackedPoints.size();\n        PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();\n        return new Iterator<byte[]>() {\n\n          int upto = 0;\n\n          @Override\n          public boolean hasNext() {\n            return upto < size;\n          }\n\n          @Override\n          public byte[] next() {\n            if (upto == size) {\n              throw new NoSuchElementException();\n            }\n\n            upto++;\n            BytesRef next = iterator.next();\n            return BytesRef.deepCopyOf(next).bytes;\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return (int) sortedPackedPoints.size();\n      }\n    };\n  }\n\n","sourceOld":"  public Collection<byte[]> getPackedPoints() {\n    return new AbstractCollection<byte[]>() {\n\n      @Override\n      public Iterator<byte[]> iterator() {\n        int size = (int) sortedPackedPoints.size();\n        PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();\n        return new Iterator<byte[]>() {\n\n          int upto = 0;\n\n          @Override\n          public boolean hasNext() {\n            return upto < size;\n          }\n\n          @Override\n          public byte[] next() {\n            if (upto == size) {\n              throw new NoSuchElementException();\n            }\n\n            upto++;\n            BytesRef next = iterator.next();\n            return Arrays.copyOfRange(next.bytes, next.offset, next.length);\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return (int) sortedPackedPoints.size();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#getPackedPoints().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#getPackedPoints().mjava","sourceNew":"  public Collection<byte[]> getPackedPoints() {\n    return new AbstractCollection<byte[]>() {\n\n      @Override\n      public Iterator<byte[]> iterator() {\n        int size = (int) sortedPackedPoints.size();\n        PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();\n        return new Iterator<byte[]>() {\n\n          int upto = 0;\n\n          @Override\n          public boolean hasNext() {\n            return upto < size;\n          }\n\n          @Override\n          public byte[] next() {\n            if (upto == size) {\n              throw new NoSuchElementException();\n            }\n\n            upto++;\n            BytesRef next = iterator.next();\n            return BytesRef.deepCopyOf(next).bytes;\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return (int) sortedPackedPoints.size();\n      }\n    };\n  }\n\n","sourceOld":"  public Collection<byte[]> getPackedPoints() {\n    return new AbstractCollection<byte[]>() {\n\n      @Override\n      public Iterator<byte[]> iterator() {\n        int size = (int) sortedPackedPoints.size();\n        PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();\n        return new Iterator<byte[]>() {\n\n          int upto = 0;\n\n          @Override\n          public boolean hasNext() {\n            return upto < size;\n          }\n\n          @Override\n          public byte[] next() {\n            if (upto == size) {\n              throw new NoSuchElementException();\n            }\n\n            upto++;\n            BytesRef next = iterator.next();\n            return Arrays.copyOfRange(next.bytes, next.offset, next.length);\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return (int) sortedPackedPoints.size();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#getPackedPoints().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointInSetQuery#getPackedPoints().mjava","sourceNew":"  public Collection<byte[]> getPackedPoints() {\n    return new AbstractCollection<byte[]>() {\n\n      @Override\n      public Iterator<byte[]> iterator() {\n        int size = (int) sortedPackedPoints.size();\n        PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();\n        return new Iterator<byte[]>() {\n\n          int upto = 0;\n\n          @Override\n          public boolean hasNext() {\n            return upto < size;\n          }\n\n          @Override\n          public byte[] next() {\n            if (upto == size) {\n              throw new NoSuchElementException();\n            }\n\n            upto++;\n            BytesRef next = iterator.next();\n            return BytesRef.deepCopyOf(next).bytes;\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return (int) sortedPackedPoints.size();\n      }\n    };\n  }\n\n","sourceOld":"  public Collection<byte[]> getPackedPoints() {\n    return new AbstractCollection<byte[]>() {\n\n      @Override\n      public Iterator<byte[]> iterator() {\n        int size = (int) sortedPackedPoints.size();\n        PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();\n        return new Iterator<byte[]>() {\n\n          int upto = 0;\n\n          @Override\n          public boolean hasNext() {\n            return upto < size;\n          }\n\n          @Override\n          public byte[] next() {\n            if (upto == size) {\n              throw new NoSuchElementException();\n            }\n\n            upto++;\n            BytesRef next = iterator.next();\n            return Arrays.copyOfRange(next.bytes, next.offset, next.length);\n          }\n        };\n      }\n\n      @Override\n      public int size() {\n        return (int) sortedPackedPoints.size();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac96418b176c9862b22cd43a6c5b7be58b3b245e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["ac96418b176c9862b22cd43a6c5b7be58b3b245e","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["ac96418b176c9862b22cd43a6c5b7be58b3b245e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac96418b176c9862b22cd43a6c5b7be58b3b245e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ac96418b176c9862b22cd43a6c5b7be58b3b245e","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"ac96418b176c9862b22cd43a6c5b7be58b3b245e":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac96418b176c9862b22cd43a6c5b7be58b3b245e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}