{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","commits":[{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient);\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getCloudState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getShards().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getCloudState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getCloudState().getSlice(\"collection1\", \"s1\").getShards().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7875fce026a0a335830cfc75abc3eb009eff9a73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient);\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getShards().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getShards().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient);\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getCloudState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getShards().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getCloudState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getCloudState().getSlice(\"collection1\", \"s1\").getShards().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient);\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getShards().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getShards().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient);\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getCloudState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getShards().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getCloudState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getCloudState().getSlice(\"collection1\", \"s1\").getShards().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient);\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getShards().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getShards().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient);\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getCloudState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getShards().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getCloudState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getCloudState().getSlice(\"collection1\", \"s1\").getShards().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient);\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient);\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getShards().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getShards().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient);\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["a5093a9e893633cc091cf2f729d7863671c2b715"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(ZkStateReader.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(ZkStateReader.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d48cfd089cba66f9745d8043e8e971b60514418d","date":1449003177,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(collection, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(collection, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(collection, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(\"collection1\", \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(\"collection1\", \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(\"collection1\", \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(collection, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(collection, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(collection, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(collection, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(collection, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(collection, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(collection, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(collection, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(collection, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getInQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(collection, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(collection, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(collection, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(COLLECTION, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(COLLECTION, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(COLLECTION, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(collection, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(collection, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(collection, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(COLLECTION, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(COLLECTION, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(COLLECTION, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(collection, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(collection, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(collection, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(COLLECTION, \"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(COLLECTION, \"shard1\"));\n      assertEquals(3, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(COLLECTION, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(COLLECTION, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(COLLECTION, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(COLLECTION, \"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(COLLECTION, \"shard1\"));\n      assertEquals(3, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(COLLECTION, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(COLLECTION, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(COLLECTION, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(COLLECTION, \"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(COLLECTION, \"shard1\"));\n      assertEquals(3, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"s1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(COLLECTION, \"s1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(COLLECTION, \"s1\"));\n      assertEquals(3, reader.getClusterState().getSlice(COLLECTION, \"s1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        DocCollection dc = reader.getClusterState().getCollectionOrNull(COLLECTION);\n        Slice s = dc == null? null : dc.getSlice(\"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(COLLECTION, \"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(COLLECTION, \"shard1\"));\n      assertEquals(3, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        DocCollection dc = reader.getClusterState().getCollectionOrNull(COLLECTION);\n        Slice s = dc == null? null : dc.getSlice(\"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        Slice s = reader.getClusterState().getSlice(COLLECTION, \"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getSlice(COLLECTION, \"shard1\"));\n      assertEquals(3, reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      ZkDistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        DocCollection dc = reader.getClusterState().getCollectionOrNull(COLLECTION);\n        Slice s = dc == null? null : dc.getSlice(\"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        DocCollection dc = reader.getClusterState().getCollectionOrNull(COLLECTION);\n        Slice s = dc == null? null : dc.getSlice(\"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      ZkDistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        DocCollection dc = reader.getClusterState().getCollectionOrNull(COLLECTION);\n        Slice s = dc == null? null : dc.getSlice(\"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        DocCollection dc = reader.getClusterState().getCollectionOrNull(COLLECTION);\n        Slice s = dc == null? null : dc.getSlice(\"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        DocCollection dc = reader.getClusterState().getCollectionOrNull(COLLECTION);\n        Slice s = dc == null? null : dc.getSlice(\"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      ZkDistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Overseer.Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        DocCollection dc = reader.getClusterState().getCollectionOrNull(COLLECTION);\n        Slice s = dc == null? null : dc.getSlice(\"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = overseers.get(0).getStateUpdateQueue();\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      reader.waitForState(COLLECTION, 1000, TimeUnit.MILLISECONDS,\n          (liveNodes, collectionState) -> collectionState != null && collectionState.getSlice(\"shard1\") != null\n              && collectionState.getSlice(\"shard1\").getReplicas().size() == 3);\n      \n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n    String zkDir = createTempDir().toFile().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = Overseer.getStateUpdateQueue(zkClient);\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      for(int i=0;i<100;i++) {\n        DocCollection dc = reader.getClusterState().getCollectionOrNull(COLLECTION);\n        Slice s = dc == null? null : dc.getSlice(\"shard1\");\n        if(s!=null && s.getReplicasMap().size()==3) break;\n        Thread.sleep(100);\n      }\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["fa64435b5902ce266c23755a4a00691a3285dab8","344b0840364d990b29b97467bfcc766ff8325d11","a5093a9e893633cc091cf2f729d7863671c2b715","f4abec28b874149a7223e32cc7a01704c27790de","19498030e0adab22f604f935cae3c03dcf0952a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      //submit to proper queue\n      queue = overseers.get(0).getStateUpdateQueue();\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n\n      reader.waitForState(COLLECTION, 1000, TimeUnit.MILLISECONDS,\n          (liveNodes, collectionState) -> collectionState != null && collectionState.getSlice(\"shard1\") != null\n              && collectionState.getSlice(\"shard1\").getReplicas().size() == 3);\n\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      //submit to proper queue\n      queue = overseers.get(0).getStateUpdateQueue();\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      \n      reader.waitForState(COLLECTION, 1000, TimeUnit.MILLISECONDS,\n          (liveNodes, collectionState) -> collectionState != null && collectionState.getSlice(\"shard1\") != null\n              && collectionState.getSlice(\"shard1\").getReplicas().size() == 3);\n      \n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testReplay().mjava","sourceNew":"  @Test\n  public void testReplay() throws Exception{\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + COLLECTION, true);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      //submit to proper queue\n      queue = overseers.get(0).getStateUpdateQueue();\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n\n      reader.waitForState(COLLECTION, 1000, TimeUnit.MILLISECONDS,\n          (liveNodes, collectionState) -> collectionState != null && collectionState.getSlice(\"shard1\") != null\n              && collectionState.getSlice(\"shard1\").getReplicas().size() == 3);\n\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReplay() throws Exception{\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      //prepopulate work queue with some items to emulate previous overseer died before persisting state\n      DistributedQueue queue = Overseer.getInternalWorkQueue(zkClient, new Stats());\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core2\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      //submit to proper queue\n      queue = overseers.get(0).getStateUpdateQueue();\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core3\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      queue.offer(Utils.toJSON(m));\n\n      reader.waitForState(COLLECTION, 1000, TimeUnit.MILLISECONDS,\n          (liveNodes, collectionState) -> collectionState != null && collectionState.getSlice(\"shard1\") != null\n              && collectionState.getSlice(\"shard1\").getReplicas().size() == 3);\n\n      assertNotNull(reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\"));\n      assertEquals(3, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap().size());\n    } finally {\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["d48cfd089cba66f9745d8043e8e971b60514418d","19498030e0adab22f604f935cae3c03dcf0952a6"],"5de502b5478255493125e7e801411ba17a6682ec":["af2638813028b254a88b418ebeafb541afb49653"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9f45f67a018421da088ea39274f23ad5d339b97d","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"344b0840364d990b29b97467bfcc766ff8325d11":["28288370235ed02234a64753cdbf0c6ec096304a"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["af2638813028b254a88b418ebeafb541afb49653"],"d48cfd089cba66f9745d8043e8e971b60514418d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"9f45f67a018421da088ea39274f23ad5d339b97d":["fa64435b5902ce266c23755a4a00691a3285dab8"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["f4abec28b874149a7223e32cc7a01704c27790de"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","7875fce026a0a335830cfc75abc3eb009eff9a73"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["9f45f67a018421da088ea39274f23ad5d339b97d"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5de502b5478255493125e7e801411ba17a6682ec"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6f20fd35e3055a0c5b387df0b986a68d65d86441","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a5093a9e893633cc091cf2f729d7863671c2b715"],"19498030e0adab22f604f935cae3c03dcf0952a6":["d48cfd089cba66f9745d8043e8e971b60514418d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","344b0840364d990b29b97467bfcc766ff8325d11"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a5093a9e893633cc091cf2f729d7863671c2b715":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["344b0840364d990b29b97467bfcc766ff8325d11"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"5de502b5478255493125e7e801411ba17a6682ec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"d48cfd089cba66f9745d8043e8e971b60514418d":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"9f45f67a018421da088ea39274f23ad5d339b97d":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5093a9e893633cc091cf2f729d7863671c2b715"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fa64435b5902ce266c23755a4a00691a3285dab8":["9f45f67a018421da088ea39274f23ad5d339b97d"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["d48cfd089cba66f9745d8043e8e971b60514418d"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"f4abec28b874149a7223e32cc7a01704c27790de":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["344b0840364d990b29b97467bfcc766ff8325d11"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","6240b74b884c5587f2a4062dd27d6c32bf228889"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8fd5be977c105554c6a7b68afcdbc511439723ab","6240b74b884c5587f2a4062dd27d6c32bf228889","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}