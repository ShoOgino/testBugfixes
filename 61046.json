{"path":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final LeafFieldComparator comparators[] = new LeafFieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i).getLeafComparator(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"0ad30c6a479e764150a3316e57263319775f1df2":["901e951cec2e6af4e503209a6721c8834db23279","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["901e951cec2e6af4e503209a6721c8834db23279","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["901e951cec2e6af4e503209a6721c8834db23279","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["901e951cec2e6af4e503209a6721c8834db23279","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"901e951cec2e6af4e503209a6721c8834db23279":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["901e951cec2e6af4e503209a6721c8834db23279"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}