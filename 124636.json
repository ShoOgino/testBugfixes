{"path":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","commits":[{"id":"c4af295203b0d5a28a999d9f5b50fed2b130396d","date":1269287493,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findMergesForOptimize(null, 0, null));\n    assertNull(mp.findMergesToExpungeDeletes(null));\n    assertFalse(mp.useCompoundDocStore(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findMergesForOptimize(null, 0, null));\n    assertNull(mp.findMergesToExpungeDeletes(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findMergesForOptimize(null, 0, null));\n    assertNull(mp.findMergesToExpungeDeletes(null));\n    assertFalse(mp.useCompoundDocStore(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findMergesForOptimize(null, 0, null));\n    assertNull(mp.findMergesToExpungeDeletes(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findMergesForOptimize(null, 0, null));\n    assertNull(mp.findMergesToExpungeDeletes(null));\n    assertFalse(mp.useCompoundDocStore(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findMergesForOptimize(null, 0, null));\n    assertNull(mp.findMergesToExpungeDeletes(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findMergesForOptimize(null, 0, null));\n    assertNull(mp.findMergesToExpungeDeletes(null));\n    assertFalse(mp.useCompoundDocStore(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findMergesToExpungeDeletes(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findMergesForOptimize(null, 0, null));\n    assertNull(mp.findMergesToExpungeDeletes(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findMergesToExpungeDeletes(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["c4af295203b0d5a28a999d9f5b50fed2b130396d","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c4af295203b0d5a28a999d9f5b50fed2b130396d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["c4af295203b0d5a28a999d9f5b50fed2b130396d"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["c4af295203b0d5a28a999d9f5b50fed2b130396d"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4af295203b0d5a28a999d9f5b50fed2b130396d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"c4af295203b0d5a28a999d9f5b50fed2b130396d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":[],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}