{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#visit(Cell,Bits).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#visit(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#visit(Cell,Bits).mjava","sourceNew":"    /** This is the primary algorithm; recursive.  Returns null if finds none. */\n    private SmallDocSet visit(Cell cell, Bits acceptContains) throws IOException {\n\n      if (thisTerm == null)//signals all done\n        return null;\n\n      // Get the AND of all child results (into combinedSubResults)\n      SmallDocSet combinedSubResults = null;\n      //   Optimization: use null subCellsFilter when we know cell is within the query shape.\n      Shape subCellsFilter = queryShape;\n      if (cell.getLevel() != 0 && ((cell.getShapeRel() == null || cell.getShapeRel() == SpatialRelation.WITHIN))) {\n        subCellsFilter = null;\n        assert cell.getShape().relate(queryShape) == SpatialRelation.WITHIN;\n      }\n      CellIterator subCells = cell.getNextLevelCells(subCellsFilter);\n      while (subCells.hasNext()) {\n        Cell subCell = subCells.next();\n        if (!seek(subCell)) {\n          combinedSubResults = null;\n        } else if (subCell.getLevel() == detailLevel) {\n          combinedSubResults = getDocs(subCell, acceptContains);\n        } else if (!multiOverlappingIndexedShapes &&\n            subCell.getShapeRel() == SpatialRelation.WITHIN) {\n          combinedSubResults = getLeafDocs(subCell, acceptContains);\n        } else {\n          //OR the leaf docs with all child results\n          SmallDocSet leafDocs = getLeafDocs(subCell, acceptContains);\n          SmallDocSet subDocs = visit(subCell, acceptContains); //recursion\n          combinedSubResults = union(leafDocs, subDocs);\n        }\n\n        if (combinedSubResults == null)\n          break;\n        acceptContains = combinedSubResults;//has the 'AND' effect on next iteration\n      }\n\n      return combinedSubResults;\n    }\n\n","sourceOld":"    /** This is the primary algorithm; recursive.  Returns null if finds none. */\n    private SmallDocSet visit(Cell cell, Bits acceptContains) throws IOException {\n\n      if (thisTerm == null)//signals all done\n        return null;\n\n      // Get the AND of all child results (into combinedSubResults)\n      SmallDocSet combinedSubResults = null;\n      //   Optimization: use null subCellsFilter when we know cell is within the query shape.\n      Shape subCellsFilter = queryShape;\n      if (cell.getLevel() != 0 && ((cell.getShapeRel() == null || cell.getShapeRel() == SpatialRelation.WITHIN))) {\n        subCellsFilter = null;\n        assert cell.getShape().relate(queryShape) == SpatialRelation.WITHIN;\n      }\n      CellIterator subCells = cell.getNextLevelCells(subCellsFilter);\n      while (subCells.hasNext()) {\n        Cell subCell = subCells.next();\n        if (!seek(subCell)) {\n          combinedSubResults = null;\n        } else if (subCell.getLevel() == detailLevel) {\n          combinedSubResults = getDocs(subCell, acceptContains);\n        } else if (!multiOverlappingIndexedShapes &&\n            subCell.getShapeRel() == SpatialRelation.WITHIN) {\n          combinedSubResults = getLeafDocs(subCell, acceptContains);\n        } else {\n          //OR the leaf docs with all child results\n          SmallDocSet leafDocs = getLeafDocs(subCell, acceptContains);\n          SmallDocSet subDocs = visit(subCell, acceptContains); //recursion\n          combinedSubResults = union(leafDocs, subDocs);\n        }\n\n        if (combinedSubResults == null)\n          break;\n        acceptContains = combinedSubResults;//has the 'AND' effect on next iteration\n      }\n\n      return combinedSubResults;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#visit(Cell,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/ContainsPrefixTreeQuery.ContainsVisitor#visit(Cell,Bits).mjava","sourceNew":"    /** This is the primary algorithm; recursive.  Returns null if finds none. */\n    private SmallDocSet visit(Cell cell, Bits acceptContains) throws IOException {\n\n      if (thisTerm == null)//signals all done\n        return null;\n\n      // Get the AND of all child results (into combinedSubResults)\n      SmallDocSet combinedSubResults = null;\n      //   Optimization: use null subCellsFilter when we know cell is within the query shape.\n      Shape subCellsFilter = queryShape;\n      if (cell.getLevel() != 0 && ((cell.getShapeRel() == null || cell.getShapeRel() == SpatialRelation.WITHIN))) {\n        subCellsFilter = null;\n        assert cell.getShape().relate(queryShape) == SpatialRelation.WITHIN;\n      }\n      CellIterator subCells = cell.getNextLevelCells(subCellsFilter);\n      while (subCells.hasNext()) {\n        Cell subCell = subCells.next();\n        if (!seek(subCell)) {\n          combinedSubResults = null;\n        } else if (subCell.getLevel() == detailLevel) {\n          combinedSubResults = getDocs(subCell, acceptContains);\n        } else if (!multiOverlappingIndexedShapes &&\n            subCell.getShapeRel() == SpatialRelation.WITHIN) {\n          combinedSubResults = getLeafDocs(subCell, acceptContains);\n        } else {\n          //OR the leaf docs with all child results\n          SmallDocSet leafDocs = getLeafDocs(subCell, acceptContains);\n          SmallDocSet subDocs = visit(subCell, acceptContains); //recursion\n          combinedSubResults = union(leafDocs, subDocs);\n        }\n\n        if (combinedSubResults == null)\n          break;\n        acceptContains = combinedSubResults;//has the 'AND' effect on next iteration\n      }\n\n      return combinedSubResults;\n    }\n\n","sourceOld":"    /** This is the primary algorithm; recursive.  Returns null if finds none. */\n    private SmallDocSet visit(Cell cell, Bits acceptContains) throws IOException {\n\n      if (thisTerm == null)//signals all done\n        return null;\n\n      // Get the AND of all child results (into combinedSubResults)\n      SmallDocSet combinedSubResults = null;\n      //   Optimization: use null subCellsFilter when we know cell is within the query shape.\n      Shape subCellsFilter = queryShape;\n      if (cell.getLevel() != 0 && ((cell.getShapeRel() == null || cell.getShapeRel() == SpatialRelation.WITHIN))) {\n        subCellsFilter = null;\n        assert cell.getShape().relate(queryShape) == SpatialRelation.WITHIN;\n      }\n      CellIterator subCells = cell.getNextLevelCells(subCellsFilter);\n      while (subCells.hasNext()) {\n        Cell subCell = subCells.next();\n        if (!seek(subCell)) {\n          combinedSubResults = null;\n        } else if (subCell.getLevel() == detailLevel) {\n          combinedSubResults = getDocs(subCell, acceptContains);\n        } else if (!multiOverlappingIndexedShapes &&\n            subCell.getShapeRel() == SpatialRelation.WITHIN) {\n          combinedSubResults = getLeafDocs(subCell, acceptContains);\n        } else {\n          //OR the leaf docs with all child results\n          SmallDocSet leafDocs = getLeafDocs(subCell, acceptContains);\n          SmallDocSet subDocs = visit(subCell, acceptContains); //recursion\n          combinedSubResults = union(leafDocs, subDocs);\n        }\n\n        if (combinedSubResults == null)\n          break;\n        acceptContains = combinedSubResults;//has the 'AND' effect on next iteration\n      }\n\n      return combinedSubResults;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}