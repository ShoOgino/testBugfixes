{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleLimitSysouts#checkCaptureStreams().mjava","commits":[{"id":"15f78d4c3703bdf31ef64dc18dd5d5c7996bcd0a","date":1398846443,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleLimitSysouts#checkCaptureStreams().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleDisallowSysouts#checkCaptureStreams().mjava","sourceNew":"  /**\n   * Ensures {@link System#out} and {@link System#err} point to delegate streams.\n   */\n  public static void checkCaptureStreams() {\n    // Make sure we still hold the right references to wrapper streams.\n    if (System.out != capturedSystemOut.printStream) {\n      throw new AssertionError(\"Something has changed System.out to: \" + System.out.getClass().getName());\n    }\n    if (System.err != capturedSystemErr.printStream) {\n      throw new AssertionError(\"Something has changed System.err to: \" + System.err.getClass().getName());\n    }\n  }\n\n","sourceOld":"  /**\n   * Ensures {@link System#out} and {@link System#err} point to delegate streams.\n   */\n  public static void checkCaptureStreams() {\n    // Make sure we still hold the right references to wrapper streams.\n    if (System.out != capturedSystemOut.printStream) {\n      throw new AssertionError(\"Something has changed System.out to: \" + System.out.getClass().getName());\n    }\n    if (System.err != capturedSystemErr.printStream) {\n      throw new AssertionError(\"Something has changed System.err to: \" + System.err.getClass().getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d524d41bd211f811312cf6639e3792dae4df6cbb","date":1398850727,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleLimitSysouts#checkCaptureStreams().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensures {@link System#out} and {@link System#err} point to delegate streams.\n   */\n  public static void checkCaptureStreams() {\n    // Make sure we still hold the right references to wrapper streams.\n    if (System.out != capturedSystemOut.printStream) {\n      throw new AssertionError(\"Something has changed System.out to: \" + System.out.getClass().getName());\n    }\n    if (System.err != capturedSystemErr.printStream) {\n      throw new AssertionError(\"Something has changed System.err to: \" + System.err.getClass().getName());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfe2b54165f74178623f51c845867b200635c934","date":1545167024,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleLimitSysouts#checkCaptureStreams().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleLimitSysouts#checkCaptureStreams().mjava","sourceNew":"  /**\n   * Ensures {@link System#out} and {@link System#err} point to delegate streams.\n   */\n  public static void checkCaptureStreams() {\n    // Make sure we still hold the right references to wrapper streams.\n    if (System.out != capturedSystemOut) {\n      throw new AssertionError(\"Something has changed System.out to: \" + System.out.getClass().getName());\n    }\n    if (System.err != capturedSystemErr) {\n      throw new AssertionError(\"Something has changed System.err to: \" + System.err.getClass().getName());\n    }\n  }\n\n","sourceOld":"  /**\n   * Ensures {@link System#out} and {@link System#err} point to delegate streams.\n   */\n  public static void checkCaptureStreams() {\n    // Make sure we still hold the right references to wrapper streams.\n    if (System.out != capturedSystemOut.printStream) {\n      throw new AssertionError(\"Something has changed System.out to: \" + System.out.getClass().getName());\n    }\n    if (System.err != capturedSystemErr.printStream) {\n      throw new AssertionError(\"Something has changed System.err to: \" + System.err.getClass().getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfe2b54165f74178623f51c845867b200635c934":["d524d41bd211f811312cf6639e3792dae4df6cbb"],"d524d41bd211f811312cf6639e3792dae4df6cbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15f78d4c3703bdf31ef64dc18dd5d5c7996bcd0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15f78d4c3703bdf31ef64dc18dd5d5c7996bcd0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfe2b54165f74178623f51c845867b200635c934"]},"commit2Childs":{"cfe2b54165f74178623f51c845867b200635c934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d524d41bd211f811312cf6639e3792dae4df6cbb":["cfe2b54165f74178623f51c845867b200635c934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d524d41bd211f811312cf6639e3792dae4df6cbb","15f78d4c3703bdf31ef64dc18dd5d5c7996bcd0a"],"15f78d4c3703bdf31ef64dc18dd5d5c7996bcd0a":["d524d41bd211f811312cf6639e3792dae4df6cbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}