{"path":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeResource#getDynamicFieldsWithFieldType(FieldType).mjava","commits":[{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeResource#getDynamicFieldsWithFieldType(FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/FieldTypeResource#getDynamicFieldsWithFieldType(FieldType).mjava","sourceNew":"  /**\n   * Returns a dynamic field list using the given field type by iterating over all\n   * dynamic fields defined in the schema. \n   */\n  @Override\n  protected List<String> getDynamicFieldsWithFieldType(FieldType fieldType) {\n    List<String> dynamicFields = new ArrayList<String>();\n    for (SchemaField prototype : getSchema().getDynamicFieldPrototypes()) {\n      if (prototype.getType().getTypeName().equals(fieldType.getTypeName())) {\n        dynamicFields.add(prototype.getName());\n      }\n    }\n    return dynamicFields; // Don't sort these - they're matched in order\n  }\n\n","sourceOld":"  /**\n   * Returns a dynamic field list using the given field type by iterating over all\n   * dynamic fields defined in the schema. \n   */\n  @Override\n  protected List<String> getDynamicFieldsWithFieldType(FieldType fieldType) {\n    List<String> dynamicFields = new ArrayList<String>();\n    for (SchemaField prototype : getSchema().getDynamicFieldPrototypes()) {\n      if (prototype.getType().getTypeName().equals(fieldType.getTypeName())) {\n        dynamicFields.add(prototype.getName());\n      }\n    }\n    return dynamicFields; // Don't sort these - they're matched in order\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeResource#getDynamicFieldsWithFieldType(FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeResource#getDynamicFieldsWithFieldType(FieldType).mjava","sourceNew":"  /**\n   * Returns a dynamic field list using the given field type by iterating over all\n   * dynamic fields defined in the schema. \n   */\n  @Override\n  protected List<String> getDynamicFieldsWithFieldType(FieldType fieldType) {\n    List<String> dynamicFields = new ArrayList<>();\n    for (SchemaField prototype : getSchema().getDynamicFieldPrototypes()) {\n      if (prototype.getType().getTypeName().equals(fieldType.getTypeName())) {\n        dynamicFields.add(prototype.getName());\n      }\n    }\n    return dynamicFields; // Don't sort these - they're matched in order\n  }\n\n","sourceOld":"  /**\n   * Returns a dynamic field list using the given field type by iterating over all\n   * dynamic fields defined in the schema. \n   */\n  @Override\n  protected List<String> getDynamicFieldsWithFieldType(FieldType fieldType) {\n    List<String> dynamicFields = new ArrayList<String>();\n    for (SchemaField prototype : getSchema().getDynamicFieldPrototypes()) {\n      if (prototype.getType().getTypeName().equals(fieldType.getTypeName())) {\n        dynamicFields.add(prototype.getName());\n      }\n    }\n    return dynamicFields; // Don't sort these - they're matched in order\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeResource#getDynamicFieldsWithFieldType(FieldType).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a dynamic field list using the given field type by iterating over all\n   * dynamic fields defined in the schema. \n   */\n  @Override\n  protected List<String> getDynamicFieldsWithFieldType(FieldType fieldType) {\n    List<String> dynamicFields = new ArrayList<>();\n    for (SchemaField prototype : getSchema().getDynamicFieldPrototypes()) {\n      if (prototype.getType().getTypeName().equals(fieldType.getTypeName())) {\n        dynamicFields.add(prototype.getName());\n      }\n    }\n    return dynamicFields; // Don't sort these - they're matched in order\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f494bc636a1302995e4930fdccd371eeda452f87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f494bc636a1302995e4930fdccd371eeda452f87"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}