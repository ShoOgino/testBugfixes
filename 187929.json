{"path":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#getOldestAccessedItems(int).mjava","commits":[{"id":"cf0b1b21012d341c80a1f3975cf88823f0fe95a9","date":1316016056,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#getOldestAccessedItems(int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ConcurrentLRUCache#getOldestAccessedItems(int).mjava","sourceNew":"  /**\n   * Returns 'n' number of oldest accessed entries present in this cache.\n   *\n   * This uses a TreeSet to collect the 'n' oldest items ordered by ascending last access time\n   *  and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   * @param n the number of oldest items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getOldestAccessedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<K, V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy < tree.first().lastAccessedCopy) {\n            tree.remove(tree.first());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns 'n' number of oldest accessed entries present in this cache.\n   *\n   * This uses a TreeSet to collect the 'n' oldest items ordered by ascending last access time\n   *  and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   * @param n the number of oldest items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getOldestAccessedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<K, V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy < tree.first().lastAccessedCopy) {\n            tree.remove(tree.first());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#getOldestAccessedItems(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#getOldestAccessedItems(int).mjava","sourceNew":"  /**\n   * Returns 'n' number of oldest accessed entries present in this cache.\n   *\n   * This uses a TreeSet to collect the 'n' oldest items ordered by ascending last access time\n   *  and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   * @param n the number of oldest items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getOldestAccessedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<>();\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy < tree.first().lastAccessedCopy) {\n            tree.remove(tree.first());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns 'n' number of oldest accessed entries present in this cache.\n   *\n   * This uses a TreeSet to collect the 'n' oldest items ordered by ascending last access time\n   *  and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   * @param n the number of oldest items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getOldestAccessedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<K, V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K,V>> tree = new TreeSet<CacheEntry<K,V>>();\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K,V>> entry : map.entrySet()) {\n        CacheEntry<K,V> ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy < tree.first().lastAccessedCopy) {\n            tree.remove(tree.first());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf0b1b21012d341c80a1f3975cf88823f0fe95a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cf0b1b21012d341c80a1f3975cf88823f0fe95a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"cf0b1b21012d341c80a1f3975cf88823f0fe95a9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf0b1b21012d341c80a1f3975cf88823f0fe95a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}