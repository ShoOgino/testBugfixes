{"path":"backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testDateRange().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testDateRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer());\n    \n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n                               endDateExpected.getTime(), null);\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n                               endDateExpected.getTime(), null);\n    \n    // set default date resolution to MILLISECOND \n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testDateRange().mjava","pathOld":"backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer());\n    \n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n                               endDateExpected.getTime(), null);\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n                               endDateExpected.getTime(), null);\n    \n    // set default date resolution to MILLISECOND \n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer());\n    \n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n                               endDateExpected.getTime(), null);\n    \n    // set a field specific date resolution\n    qp.setDateResolution(monthField, DateTools.Resolution.MONTH);\n    \n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n                               endDateExpected.getTime(), null);\n    \n    // set default date resolution to MILLISECOND \n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n    \n    // set second field specific date resolution    \n    qp.setDateResolution(hourField, DateTools.Resolution.HOUR);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate, \n            endDateExpected.getTime(), DateTools.Resolution.HOUR);  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}