{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)));\n    int count = 0;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.buffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().getData(), \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)));\n    int count = 0;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.buffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().getData(), \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)));\n    int count = 0;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.buffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().bytes, \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)));\n    int count = 0;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.buffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().getData(), \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(whitespaceMockTokenizer(test)));\n    int count = 0;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.buffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().bytes, \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(new MockTokenizer(new StringReader(test), MockTokenizer.WHITESPACE, false)));\n    int count = 0;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.buffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().bytes, \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(whitespaceMockTokenizer(test)));\n    int count = 0;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.buffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = payloadAtt.getPayload().utf8ToString();\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()));\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(whitespaceMockTokenizer(test)));\n    int count = 0;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.buffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().bytes, \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(whitespaceMockTokenizer(test)));\n    int count = 0;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.buffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = payloadAtt.getPayload().utf8ToString();\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()));\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TypeAsPayloadTokenFilter nptf = new TypeAsPayloadTokenFilter(new WordTokenFilter(whitespaceMockTokenizer(test)));\n    int count = 0;\n    CharTermAttribute termAtt = nptf.getAttribute(CharTermAttribute.class);\n    TypeAttribute typeAtt = nptf.getAttribute(TypeAttribute.class);\n    PayloadAttribute payloadAtt = nptf.getAttribute(PayloadAttribute.class);\n    nptf.reset();\n    while (nptf.incrementToken()) {\n      assertTrue(typeAtt.type() + \" is not null and it should be\", typeAtt.type().equals(String.valueOf(Character.toUpperCase(termAtt.buffer()[0]))));\n      assertTrue(\"nextToken.getPayload() is null and it shouldn't be\", payloadAtt.getPayload() != null);\n      String type = new String(payloadAtt.getPayload().bytes, \"UTF-8\");\n      assertTrue(type + \" is not equal to \" + typeAtt.type(), type.equals(typeAtt.type()) == true);\n      count++;\n    }\n\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7d89d7e4e5101347833eea558851bf4209218619":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}