{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","commits":[{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","sourceNew":"  public Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.type == type) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx == -1) return null;\n\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, r.remove(idx));\n\n  }\n\n","sourceOld":"  Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.type == type) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx == -1) return null;\n\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, r.remove(idx));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","pathOld":"/dev/null","sourceNew":"  public Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.type == type) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx == -1) return null;\n\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, r.remove(idx));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","pathOld":"/dev/null","sourceNew":"  public Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.type == type) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx == -1) return null;\n\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, r.remove(idx));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","sourceNew":"  public Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.getType() == type) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx == -1) return null;\n\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, r.remove(idx));\n\n  }\n\n","sourceOld":"  public Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.type == type) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx == -1) return null;\n\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, r.remove(idx));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","sourceNew":"  // this simulates removing a replica from a node\n  public Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = session.copy().getNode(this.node);\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.getType() == type) {\n        idx = i;\n        break;\n      }\n    }\n    if (idx == -1) return null;\n    ReplicaInfo removed = r.remove(idx);\n    for (Cell cell : row.cells) {\n      cell.type.projectRemoveReplica(cell, removed);\n    }\n    return new Pair(row, removed);\n\n  }\n\n","sourceOld":"  public Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = copy();\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.getType() == type) {\n        idx = i;\n        break;\n      }\n    }\n    if(idx == -1) return null;\n\n    for (Cell cell : row.cells) {\n      if (cell.name.equals(\"cores\")) {\n        cell.val = cell.val == null ? 0 : ((Number) cell.val).longValue() - 1;\n      }\n    }\n    return new Pair(row, r.remove(idx));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","sourceNew":"  public Row removeReplica(String coll, String shard, Replica.Type type) {\n    return removeReplica(coll,shard, type, 0);\n\n  }\n\n","sourceOld":"  // this simulates removing a replica from a node\n  public Pair<Row, ReplicaInfo> removeReplica(String coll, String shard, Replica.Type type) {\n    Row row = session.copy().getNode(this.node);\n    Map<String, List<ReplicaInfo>> c = row.collectionVsShardVsReplicas.get(coll);\n    if (c == null) return null;\n    List<ReplicaInfo> r = c.get(shard);\n    if (r == null) return null;\n    int idx = -1;\n    for (int i = 0; i < r.size(); i++) {\n      ReplicaInfo info = r.get(i);\n      if (type == null || info.getType() == type) {\n        idx = i;\n        break;\n      }\n    }\n    if (idx == -1) return null;\n    ReplicaInfo removed = r.remove(idx);\n    for (Cell cell : row.cells) {\n      cell.type.projectRemoveReplica(cell, removed);\n    }\n    return new Pair(row, removed);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","sourceNew":"  public Row removeReplica(String coll, String shard, Replica.Type type) {\n    return removeReplica(coll, shard, type, 0);\n\n  }\n\n","sourceOld":"  public Row removeReplica(String coll, String shard, Replica.Type type) {\n    return removeReplica(coll,shard, type, 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Row#removeReplica(String,String,Replica.Type).mjava","sourceNew":null,"sourceOld":"  public Row removeReplica(String coll, String shard, Replica.Type type) {\n    return removeReplica(coll, shard, type, 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["27639bb5e041490ce599065875dd2f6d8beef62a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"27639bb5e041490ce599065875dd2f6d8beef62a":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","98f11c416d30e556e0004a9a84960702d12d35b1"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["3f504512a03d978990cbff30db0522b354e846db"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["27639bb5e041490ce599065875dd2f6d8beef62a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"98f11c416d30e556e0004a9a84960702d12d35b1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"27639bb5e041490ce599065875dd2f6d8beef62a":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}