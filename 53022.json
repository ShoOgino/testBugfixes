{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","commits":[{"id":"58fec4cc4751826a310393076ec744b4e159eb33","date":1456164038,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    synchronized (fingerprintLock) {\n      if (fingerprint == null) {\n        fingerprint = IndexFingerprint.getFingerprint(this, maxVersion);\n      }\n    }\n\n    return fingerprint;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["64854a99013527fd026dca4dd078247b6614263b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    synchronized (fingerprintLock) {\n      if (fingerprint == null) {\n        fingerprint = IndexFingerprint.getFingerprint(this, maxVersion);\n      }\n    }\n\n    return fingerprint;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","date":1471849333,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    \n    // TODO what happens if updates came out of order, would cached fingerprint still be valid?\n    // May be caching fingerprint may lead more problems\n    IndexFingerprint fingerprint = maxVersionFingerprintCache.get(maxVersionFingerprintCache);\n    if(fingerprint == null) {\n      synchronized (fingerprintLock) {\n        if (maxVersionFingerprintCache.get(maxVersionFingerprintCache) == null) {\n          log.info(\"Fingerprint for max version: \" + maxVersion + \" not found in cache\" );\n          maxVersionFingerprintCache.put(maxVersion, IndexFingerprint.getFingerprint(this, maxVersion));\n        }\n        fingerprint = maxVersionFingerprintCache.get(maxVersion) ;\n      }\n    }\n\n    return fingerprint;\n  }\n\n","sourceOld":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    synchronized (fingerprintLock) {\n      if (fingerprint == null) {\n        fingerprint = IndexFingerprint.getFingerprint(this, maxVersion);\n      }\n    }\n\n    return fingerprint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c44372be2a3138e289243c1034efe35306140a55","date":1471888059,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    IndexFingerprint fingerprint = maxVersionFingerprintCache.get(maxVersion);\n    if (fingerprint != null) return fingerprint;\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    synchronized (maxVersionFingerprintCache) {\n      fingerprint = maxVersionFingerprintCache.get(maxVersionFingerprintCache);\n      if (fingerprint != null) return fingerprint;\n      fingerprint = IndexFingerprint.getFingerprint(this, maxVersion);\n      maxVersionFingerprintCache.put(maxVersion, fingerprint);\n      return fingerprint;\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    \n    // TODO what happens if updates came out of order, would cached fingerprint still be valid?\n    // May be caching fingerprint may lead more problems\n    IndexFingerprint fingerprint = maxVersionFingerprintCache.get(maxVersionFingerprintCache);\n    if(fingerprint == null) {\n      synchronized (fingerprintLock) {\n        if (maxVersionFingerprintCache.get(maxVersionFingerprintCache) == null) {\n          log.info(\"Fingerprint for max version: \" + maxVersion + \" not found in cache\" );\n          maxVersionFingerprintCache.put(maxVersion, IndexFingerprint.getFingerprint(this, maxVersion));\n        }\n        fingerprint = maxVersionFingerprintCache.get(maxVersion) ;\n      }\n    }\n\n    return fingerprint;\n  }\n\n","bugFix":null,"bugIntro":["64854a99013527fd026dca4dd078247b6614263b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    IndexFingerprint fingerprint = maxVersionFingerprintCache.get(maxVersion);\n    if (fingerprint != null) return fingerprint;\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    synchronized (maxVersionFingerprintCache) {\n      fingerprint = maxVersionFingerprintCache.get(maxVersionFingerprintCache);\n      if (fingerprint != null) return fingerprint;\n      fingerprint = IndexFingerprint.getFingerprint(this, maxVersion);\n      maxVersionFingerprintCache.put(maxVersion, fingerprint);\n      return fingerprint;\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    synchronized (fingerprintLock) {\n      if (fingerprint == null) {\n        fingerprint = IndexFingerprint.getFingerprint(this, maxVersion);\n      }\n    }\n\n    return fingerprint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64854a99013527fd026dca4dd078247b6614263b","date":1474437593,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final SolrIndexSearcher searcher = this;\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return maxVersionFingerprintCache.computeIfAbsent(maxVersion, key -> {\n        try {\n          return IndexFingerprint.getFingerprint(searcher, key);\n        } catch (IOException e) {\n          exception.set(e);\n          return null;\n        }\n      });\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    IndexFingerprint fingerprint = maxVersionFingerprintCache.get(maxVersion);\n    if (fingerprint != null) return fingerprint;\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    synchronized (maxVersionFingerprintCache) {\n      fingerprint = maxVersionFingerprintCache.get(maxVersionFingerprintCache);\n      if (fingerprint != null) return fingerprint;\n      fingerprint = IndexFingerprint.getFingerprint(this, maxVersion);\n      maxVersionFingerprintCache.put(maxVersion, fingerprint);\n      return fingerprint;\n    }\n  }\n\n","bugFix":["c44372be2a3138e289243c1034efe35306140a55","58fec4cc4751826a310393076ec744b4e159eb33"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final SolrIndexSearcher searcher = this;\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return maxVersionFingerprintCache.computeIfAbsent(maxVersion, key -> {\n        try {\n          return IndexFingerprint.getFingerprint(searcher, key);\n        } catch (IOException e) {\n          exception.set(e);\n          return null;\n        }\n      });\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    IndexFingerprint fingerprint = maxVersionFingerprintCache.get(maxVersion);\n    if (fingerprint != null) return fingerprint;\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    synchronized (maxVersionFingerprintCache) {\n      fingerprint = maxVersionFingerprintCache.get(maxVersionFingerprintCache);\n      if (fingerprint != null) return fingerprint;\n      fingerprint = IndexFingerprint.getFingerprint(this, maxVersion);\n      maxVersionFingerprintCache.put(maxVersion, fingerprint);\n      return fingerprint;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05569170a222447d3aec8fad773feedf4429fdd5","date":1476800012,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return maxVersionFingerprintCache.computeIfAbsent(maxVersion, key -> {\n        try {\n          return computeFromPerSegmentIndexFingerprint(maxVersion);\n        } catch (IOException e) {\n          exception.set(e);\n          return null;\n        }\n      });\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final SolrIndexSearcher searcher = this;\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return maxVersionFingerprintCache.computeIfAbsent(maxVersion, key -> {\n        try {\n          return IndexFingerprint.getFingerprint(searcher, key);\n        } catch (IOException e) {\n          exception.set(e);\n          return null;\n        }\n      });\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b437b84da5e49daf1197c9cd533015490cdcb2c2","date":1476818430,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final SolrIndexSearcher searcher = this;\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return maxVersionFingerprintCache.computeIfAbsent(maxVersion, key -> {\n        try {\n          return IndexFingerprint.getFingerprint(searcher, key);\n        } catch (IOException e) {\n          exception.set(e);\n          return null;\n        }\n      });\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return maxVersionFingerprintCache.computeIfAbsent(maxVersion, key -> {\n        try {\n          return computeFromPerSegmentIndexFingerprint(maxVersion);\n        } catch (IOException e) {\n          exception.set(e);\n          return null;\n        }\n      });\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final SolrIndexSearcher searcher = this;\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return maxVersionFingerprintCache.computeIfAbsent(maxVersion, key -> {\n        try {\n          return IndexFingerprint.getFingerprint(searcher, key);\n        } catch (IOException e) {\n          exception.set(e);\n          return null;\n        }\n      });\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    // possibly expensive, so prevent more than one thread from calculating it for this searcher\n    synchronized (fingerprintLock) {\n      if (fingerprint == null) {\n        fingerprint = IndexFingerprint.getFingerprint(this, maxVersion);\n      }\n    }\n\n    return fingerprint;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11122ff28c20e6e4e02cb1366eaa029a92f69ce","date":1477307742,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final SolrIndexSearcher searcher = this;\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return searcher.getTopReaderContext().leaves().stream()\n          .map(ctx -> {\n            try {\n              return searcher.getCore().getIndexFingerprint(searcher, ctx, maxVersion);\n            } catch (IOException e) {\n              exception.set(e);\n              return null;\n            }\n          })\n          .filter(java.util.Objects::nonNull)\n          .reduce(new IndexFingerprint(maxVersion), IndexFingerprint::reduce);\n\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final SolrIndexSearcher searcher = this;\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return maxVersionFingerprintCache.computeIfAbsent(maxVersion, key -> {\n        try {\n          return IndexFingerprint.getFingerprint(searcher, key);\n        } catch (IOException e) {\n          exception.set(e);\n          return null;\n        }\n      });\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getIndexFingerprint(long).mjava","sourceNew":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final SolrIndexSearcher searcher = this;\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return searcher.getTopReaderContext().leaves().stream()\n          .map(ctx -> {\n            try {\n              return searcher.getCore().getIndexFingerprint(searcher, ctx, maxVersion);\n            } catch (IOException e) {\n              exception.set(e);\n              return null;\n            }\n          })\n          .filter(java.util.Objects::nonNull)\n          .reduce(new IndexFingerprint(maxVersion), IndexFingerprint::reduce);\n\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","sourceOld":"  /** @lucene.internal\n   * gets a cached version of the IndexFingerprint for this searcher\n   **/\n  public IndexFingerprint getIndexFingerprint(long maxVersion) throws IOException {\n    final SolrIndexSearcher searcher = this;\n    final AtomicReference<IOException> exception = new AtomicReference<>();\n    try {\n      return maxVersionFingerprintCache.computeIfAbsent(maxVersion, key -> {\n        try {\n          return IndexFingerprint.getFingerprint(searcher, key);\n        } catch (IOException e) {\n          exception.set(e);\n          return null;\n        }\n      });\n    } finally {\n      if (exception.get() != null) throw exception.get();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"419a8f52c6635419beb951255cacbbb281044c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58fec4cc4751826a310393076ec744b4e159eb33"],"05569170a222447d3aec8fad773feedf4429fdd5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["419a8f52c6635419beb951255cacbbb281044c57","b437b84da5e49daf1197c9cd533015490cdcb2c2"],"b11122ff28c20e6e4e02cb1366eaa029a92f69ce":["b437b84da5e49daf1197c9cd533015490cdcb2c2"],"b437b84da5e49daf1197c9cd533015490cdcb2c2":["05569170a222447d3aec8fad773feedf4429fdd5"],"58fec4cc4751826a310393076ec744b4e159eb33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c44372be2a3138e289243c1034efe35306140a55":["4c835cc1a7b07477a469cdb1bf6c67bc05b85c07"],"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","64854a99013527fd026dca4dd078247b6614263b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"64854a99013527fd026dca4dd078247b6614263b":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["419a8f52c6635419beb951255cacbbb281044c57","c44372be2a3138e289243c1034efe35306140a55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b11122ff28c20e6e4e02cb1366eaa029a92f69ce"]},"commit2Childs":{"419a8f52c6635419beb951255cacbbb281044c57":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"05569170a222447d3aec8fad773feedf4429fdd5":["b437b84da5e49daf1197c9cd533015490cdcb2c2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"b11122ff28c20e6e4e02cb1366eaa029a92f69ce":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58fec4cc4751826a310393076ec744b4e159eb33":["419a8f52c6635419beb951255cacbbb281044c57"],"b437b84da5e49daf1197c9cd533015490cdcb2c2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b11122ff28c20e6e4e02cb1366eaa029a92f69ce"],"c44372be2a3138e289243c1034efe35306140a55":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["c44372be2a3138e289243c1034efe35306140a55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["419a8f52c6635419beb951255cacbbb281044c57","58fec4cc4751826a310393076ec744b4e159eb33"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["05569170a222447d3aec8fad773feedf4429fdd5"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"64854a99013527fd026dca4dd078247b6614263b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","64854a99013527fd026dca4dd078247b6614263b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}