{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = newDirectory();\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.shutdown();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMaxBufferedDocs(2)\n          .setMergedSegmentWarmer(warmer)\n          .setMergeScheduler(new ConcurrentMergeScheduler())\n          .setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.shutdown();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergedSegmentWarmer(warmer).\n            setMergeScheduler(new ConcurrentMergeScheduler()).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.shutdown();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMaxBufferedDocs(2)\n          .setMergedSegmentWarmer(warmer)\n          .setMergeScheduler(new ConcurrentMergeScheduler())\n          .setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMaxBufferedDocs(2)\n          .setMergedSegmentWarmer(warmer)\n          .setMergeScheduler(new ConcurrentMergeScheduler())\n          .setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.shutdown();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd","date":1417101195,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMaxBufferedDocs(2)\n          .setMergedSegmentWarmer(warmer)\n          .setMergeScheduler(new ConcurrentMergeScheduler())\n          .setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = TEST_NIGHTLY ? atLeast(100) : atLeast(10);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMaxBufferedDocs(2)\n          .setMergedSegmentWarmer(warmer)\n          .setMergeScheduler(new ConcurrentMergeScheduler())\n          .setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = atLeast(100);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dcdf0501ecb64dde73646fe1f7533c1586deac1","date":1507107556,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    AtomicInteger warmCount = new AtomicInteger();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMaxBufferedDocs(2)\n          .setMergedSegmentWarmer((leafReader) -> warmCount.incrementAndGet())\n          .setMergeScheduler(new ConcurrentMergeScheduler())\n          .setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = TEST_NIGHTLY ? atLeast(100) : atLeast(10);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmCount.get() > 0);\n    final int count = warmCount.get();\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmCount.get() > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMaxBufferedDocs(2)\n          .setMergedSegmentWarmer(warmer)\n          .setMergeScheduler(new ConcurrentMergeScheduler())\n          .setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = TEST_NIGHTLY ? atLeast(100) : atLeast(10);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    AtomicInteger warmCount = new AtomicInteger();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMaxBufferedDocs(2)\n          .setMaxFullFlushMergeWaitMillis(0)\n          .setMergedSegmentWarmer((leafReader) -> warmCount.incrementAndGet())\n          .setMergeScheduler(new ConcurrentMergeScheduler())\n          .setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = TEST_NIGHTLY ? atLeast(100) : atLeast(10);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmCount.get() > 0);\n    final int count = warmCount.get();\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmCount.get() > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    // Enroll warmer\n    AtomicInteger warmCount = new AtomicInteger();\n    IndexWriter writer = new IndexWriter(\n        dir1,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n          .setMaxBufferedDocs(2)\n          .setMergedSegmentWarmer((leafReader) -> warmCount.incrementAndGet())\n          .setMergeScheduler(new ConcurrentMergeScheduler())\n          .setMergePolicy(newLogMergePolicy())\n    );\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n    \n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n    int num = TEST_NIGHTLY ? atLeast(100) : atLeast(10);\n    for (int i = 0; i < num; i++) {\n      writer.addDocument(DocHelper.createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n\n    assertTrue(warmCount.get() > 0);\n    final int count = warmCount.get();\n\n    writer.addDocument(DocHelper.createDocument(17, \"test\", 4));\n    writer.forceMerge(1);\n    assertTrue(warmCount.get() > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dcdf0501ecb64dde73646fe1f7533c1586deac1":["aee6e14aa025a22ed06b7e38e12bcc15ec251fbd"],"527cc14542789f47d75da436cb4287d1ab887e34":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["527cc14542789f47d75da436cb4287d1ab887e34"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["3dcdf0501ecb64dde73646fe1f7533c1586deac1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"]},"commit2Childs":{"3dcdf0501ecb64dde73646fe1f7533c1586deac1":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"527cc14542789f47d75da436cb4287d1ab887e34":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["aee6e14aa025a22ed06b7e38e12bcc15ec251fbd"],"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd":["3dcdf0501ecb64dde73646fe1f7533c1586deac1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["527cc14542789f47d75da436cb4287d1ab887e34"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}