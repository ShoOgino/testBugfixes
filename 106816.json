{"path":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","commits":[{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#publishCoresAsDown().mjava","sourceNew":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n      } catch (KeeperException e) {\n        CoreContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        CoreContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  protected void publishCoresAsDown() {\n    List<SolrCore> cores = solrCores.getCores();\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n      } catch (KeeperException e) {\n        CoreContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        CoreContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","sourceNew":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n      } catch (KeeperException e) {\n        CoreContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        CoreContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n      } catch (KeeperException e) {\n        CoreContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        CoreContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","sourceNew":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n      } catch (KeeperException e) {\n        CoreContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        CoreContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.DOWN);\n      } catch (KeeperException e) {\n        CoreContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        CoreContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","sourceNew":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n      } catch (KeeperException e) {\n        ZkContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        ZkContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n      } catch (KeeperException e) {\n        CoreContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        CoreContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","sourceNew":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n      } catch (KeeperException e) {\n        ZkContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        ZkContainer.log.error(\"\", e);\n      } catch (Exception e) {\n        ZkContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n      } catch (KeeperException e) {\n        ZkContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        ZkContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","sourceNew":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n      } catch (KeeperException e) {\n        ZkContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        ZkContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n      } catch (KeeperException e) {\n        ZkContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        ZkContainer.log.error(\"\", e);\n      } catch (Exception e) {\n        ZkContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","sourceNew":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n      } catch (KeeperException e) {\n        ZkContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        ZkContainer.log.error(\"\", e);\n      } catch (Exception e) {\n        ZkContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n      } catch (KeeperException e) {\n        ZkContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        ZkContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28ba172425e443e0f08a49de6d73586c418d7251","date":1523970991,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#publishCoresAsDown(List[SolrCore]).mjava","sourceNew":null,"sourceOld":"  public void publishCoresAsDown(List<SolrCore> cores) {\n    \n    for (SolrCore core : cores) {\n      try {\n        zkController.publish(core.getCoreDescriptor(), Replica.State.DOWN);\n      } catch (KeeperException e) {\n        ZkContainer.log.error(\"\", e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        ZkContainer.log.error(\"\", e);\n      } catch (Exception e) {\n        ZkContainer.log.error(\"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["2d4e985daefcb892b529223b478c47985fc3c483"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"2d4e985daefcb892b529223b478c47985fc3c483":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"28ba172425e443e0f08a49de6d73586c418d7251":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28ba172425e443e0f08a49de6d73586c418d7251"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["2d4e985daefcb892b529223b478c47985fc3c483"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["28ba172425e443e0f08a49de6d73586c418d7251"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"2d4e985daefcb892b529223b478c47985fc3c483":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"28ba172425e443e0f08a49de6d73586c418d7251":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b869898f50ca80263bac2e3ae0949f7700e5c977","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}