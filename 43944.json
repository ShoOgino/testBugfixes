{"path":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testURI().mjava","commits":[{"id":"7cdb1eacea4a0c2cd48979ed446ae0a34059ddf4","date":1429232696,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testURI().mjava","pathOld":"/dev/null","sourceNew":"  public void testURI() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    URI uri = f1.toUri();\n    Path f2 = fs.provider().getPath(uri);\n    assertEquals(f1, f2);\n    \n    Path f3 = wrapped.resolve(\"中国\");\n    URI uri2 = f3.toUri();\n    Path f4 = fs.provider().getPath(uri2);\n    assertEquals(f3, f4);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cb99b9f0e9ac866f3a7aa8a8f654c0b604de041","date":1429236539,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testURI().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testURI().mjava","sourceNew":"  public void testURI() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    URI uri = f1.toUri();\n    Path f2 = fs.provider().getPath(uri);\n    assertEquals(f1, f2);\n    \n    assumeTrue(Charset.defaultCharset().name() + \" can't encode chinese\", \n               Charset.defaultCharset().newEncoder().canEncode(\"中国\"));\n    Path f3 = wrapped.resolve(\"中国\");\n    URI uri2 = f3.toUri();\n    Path f4 = fs.provider().getPath(uri2);\n    assertEquals(f3, f4);\n  }\n\n","sourceOld":"  public void testURI() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    URI uri = f1.toUri();\n    Path f2 = fs.provider().getPath(uri);\n    assertEquals(f1, f2);\n    \n    Path f3 = wrapped.resolve(\"中国\");\n    URI uri2 = f3.toUri();\n    Path f4 = fs.provider().getPath(uri2);\n    assertEquals(f3, f4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testURI().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testURI().mjava","sourceNew":"  public void testURI() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    URI uri = f1.toUri();\n    Path f2 = fs.provider().getPath(uri);\n    assertEquals(f1, f2);\n    \n    assumeTrue(Charset.defaultCharset().name() + \" can't encode chinese\", \n               Charset.defaultCharset().newEncoder().canEncode(\"中国\"));\n    Path f3 = wrapped.resolve(\"中国\");\n    URI uri2 = f3.toUri();\n    Path f4 = fs.provider().getPath(uri2);\n    assertEquals(f3, f4);\n  }\n\n","sourceOld":"  public void testURI() throws IOException {\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new FilterFileSystemProvider(\"test://\", dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n\n    Path f1 = wrapped.resolve(\"file1\");\n    URI uri = f1.toUri();\n    Path f2 = fs.provider().getPath(uri);\n    assertEquals(f1, f2);\n    \n    assumeTrue(Charset.defaultCharset().name() + \" can't encode chinese\", \n               Charset.defaultCharset().newEncoder().canEncode(\"中国\"));\n    Path f3 = wrapped.resolve(\"中国\");\n    URI uri2 = f3.toUri();\n    Path f4 = fs.provider().getPath(uri2);\n    assertEquals(f3, f4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cdb1eacea4a0c2cd48979ed446ae0a34059ddf4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["7cb99b9f0e9ac866f3a7aa8a8f654c0b604de041"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"7cb99b9f0e9ac866f3a7aa8a8f654c0b604de041":["7cdb1eacea4a0c2cd48979ed446ae0a34059ddf4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cdb1eacea4a0c2cd48979ed446ae0a34059ddf4"],"7cdb1eacea4a0c2cd48979ed446ae0a34059ddf4":["7cb99b9f0e9ac866f3a7aa8a8f654c0b604de041"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cb99b9f0e9ac866f3a7aa8a8f654c0b604de041":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}