{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnum#Lucene40IntersectTermsEnum(Lucene40FieldReader,CompiledAutomaton,BytesRef).mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnum#Lucene40IntersectTermsEnum(Lucene40FieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public Lucene40IntersectTermsEnum(Lucene40FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new Lucene40IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new Lucene40IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final Lucene40IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnum#Lucene40IntersectTermsEnum(Lucene40FieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public Lucene40IntersectTermsEnum(Lucene40FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new Lucene40IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new Lucene40IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final Lucene40IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40IntersectTermsEnum#Lucene40IntersectTermsEnum(Lucene40FieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":null,"sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public Lucene40IntersectTermsEnum(Lucene40FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new Lucene40IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new Lucene40IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final Lucene40IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}