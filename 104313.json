{"path":"solr/core/src/java/org/apache/solr/search/join/BlockJoinDocSetFacetComponent#process(ResponseBuilder).mjava","commits":[{"id":"dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d","date":1450976696,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinDocSetFacetComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final BlockJoinParentQParser.AllParentsAware bjq = \n        (BlockJoinParentQParser.AllParentsAware) rb.req.getContext().get(bjqKey);\n    if(bjq!=null){\n      final DocSet parentResult = rb.getResults().docSet;\n      final BitDocSet allParentsBitsDocSet = rb.req.getSearcher().getDocSetBits(bjq.getParentQuery());\n      final DocSet allChildren = BlockJoin.toChildren(parentResult, \n          allParentsBitsDocSet,\n          rb.req.getSearcher().getDocSetBits( new MatchAllDocsQuery() ), \n          QueryContext.newContext(rb.req.getSearcher()));\n      \n      final DocSet childQueryDocSet = rb.req.getSearcher().getDocSet(bjq.getChildQuery());\n      final DocSet selectedChildren = allChildren.intersection(childQueryDocSet);\n      \n      // don't include parent into facet counts\n      //childResult = childResult.union(parentResult);// just to mimic the current logic\n      \n      final List<LeafReaderContext> leaves = rb.req.getSearcher().getIndexReader().leaves();\n      \n      Filter filter = selectedChildren.getTopFilter();\n\n      final BlockJoinFacetCollector facetCounter = new NoDelegateFacetCollector(rb.req);\n      \n      for (int subIdx = 0; subIdx < leaves.size(); subIdx++) {\n        LeafReaderContext subCtx = leaves.get(subIdx);\n        DocIdSet dis = filter.getDocIdSet(subCtx, null); // solr docsets already exclude any deleted docs\n        \n        AggregatableDocIter iter = new SegmentChildren(subCtx, dis, allParentsBitsDocSet);\n        \n        if (iter.hasNext()){\n          facetCounter.doSetNextReader(subCtx);\n          facetCounter.countFacets(iter);\n        }\n      }\n      facetCounter.finish();\n      \n      rb.req.getContext().put(COLLECTOR_CONTEXT_PARAM,facetCounter);\n      super.process(rb);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7368def5a7dda562981cf936054217291690b88","date":1471606585,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinDocSetFacetComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinDocSetFacetComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final BlockJoinParentQParser.AllParentsAware bjq = \n        (BlockJoinParentQParser.AllParentsAware) rb.req.getContext().get(bjqKey);\n    if(bjq!=null){\n      final DocSet parentResult = rb.getResults().docSet;\n      final BitDocSet allParentsBitsDocSet = rb.req.getSearcher().getDocSetBits(bjq.getParentQuery());\n      final DocSet allChildren = BlockJoin.toChildren(parentResult, \n          allParentsBitsDocSet,\n          rb.req.getSearcher().getDocSetBits( new MatchAllDocsQuery() ), \n          QueryContext.newContext(rb.req.getSearcher()));\n      \n      final DocSet childQueryDocSet = rb.req.getSearcher().getDocSet(bjq.getChildQuery());\n      final DocSet selectedChildren = allChildren.intersection(childQueryDocSet);\n      \n      // don't include parent into facet counts\n      //childResult = childResult.union(parentResult);// just to mimic the current logic\n      \n      final List<LeafReaderContext> leaves = rb.req.getSearcher().getIndexReader().leaves();\n      \n      Filter filter = selectedChildren.getTopFilter();\n\n      final BlockJoinFacetAccsHolder facetCounter = new BlockJoinFacetAccsHolder(rb.req);\n      \n      for (int subIdx = 0; subIdx < leaves.size(); subIdx++) {\n        LeafReaderContext subCtx = leaves.get(subIdx);\n        DocIdSet dis = filter.getDocIdSet(subCtx, null); // solr docsets already exclude any deleted docs\n        \n        AggregatableDocIter iter = new SegmentChildren(subCtx, dis, allParentsBitsDocSet);\n        \n        if (iter.hasNext()){\n          facetCounter.doSetNextReader(subCtx);\n          facetCounter.countFacets(iter);\n        }\n      }\n      facetCounter.finish();\n      \n      rb.req.getContext().put(COLLECTOR_CONTEXT_PARAM,facetCounter);\n      super.process(rb);\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final BlockJoinParentQParser.AllParentsAware bjq = \n        (BlockJoinParentQParser.AllParentsAware) rb.req.getContext().get(bjqKey);\n    if(bjq!=null){\n      final DocSet parentResult = rb.getResults().docSet;\n      final BitDocSet allParentsBitsDocSet = rb.req.getSearcher().getDocSetBits(bjq.getParentQuery());\n      final DocSet allChildren = BlockJoin.toChildren(parentResult, \n          allParentsBitsDocSet,\n          rb.req.getSearcher().getDocSetBits( new MatchAllDocsQuery() ), \n          QueryContext.newContext(rb.req.getSearcher()));\n      \n      final DocSet childQueryDocSet = rb.req.getSearcher().getDocSet(bjq.getChildQuery());\n      final DocSet selectedChildren = allChildren.intersection(childQueryDocSet);\n      \n      // don't include parent into facet counts\n      //childResult = childResult.union(parentResult);// just to mimic the current logic\n      \n      final List<LeafReaderContext> leaves = rb.req.getSearcher().getIndexReader().leaves();\n      \n      Filter filter = selectedChildren.getTopFilter();\n\n      final BlockJoinFacetCollector facetCounter = new NoDelegateFacetCollector(rb.req);\n      \n      for (int subIdx = 0; subIdx < leaves.size(); subIdx++) {\n        LeafReaderContext subCtx = leaves.get(subIdx);\n        DocIdSet dis = filter.getDocIdSet(subCtx, null); // solr docsets already exclude any deleted docs\n        \n        AggregatableDocIter iter = new SegmentChildren(subCtx, dis, allParentsBitsDocSet);\n        \n        if (iter.hasNext()){\n          facetCounter.doSetNextReader(subCtx);\n          facetCounter.countFacets(iter);\n        }\n      }\n      facetCounter.finish();\n      \n      rb.req.getContext().put(COLLECTOR_CONTEXT_PARAM,facetCounter);\n      super.process(rb);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinDocSetFacetComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinDocSetFacetComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final BlockJoinParentQParser.AllParentsAware bjq = \n        (BlockJoinParentQParser.AllParentsAware) rb.req.getContext().get(bjqKey);\n    if(bjq!=null){\n      final DocSet parentResult = rb.getResults().docSet;\n      final BitDocSet allParentsBitsDocSet = rb.req.getSearcher().getDocSetBits(bjq.getParentQuery());\n      final DocSet allChildren = BlockJoin.toChildren(parentResult, \n          allParentsBitsDocSet,\n          rb.req.getSearcher().getDocSetBits( new MatchAllDocsQuery() ), \n          QueryContext.newContext(rb.req.getSearcher()));\n      \n      final DocSet childQueryDocSet = rb.req.getSearcher().getDocSet(bjq.getChildQuery());\n      final DocSet selectedChildren = allChildren.intersection(childQueryDocSet);\n      \n      // don't include parent into facet counts\n      //childResult = childResult.union(parentResult);// just to mimic the current logic\n      \n      final List<LeafReaderContext> leaves = rb.req.getSearcher().getIndexReader().leaves();\n      \n      Filter filter = selectedChildren.getTopFilter();\n\n      final BlockJoinFacetAccsHolder facetCounter = new BlockJoinFacetAccsHolder(rb.req);\n      \n      for (int subIdx = 0; subIdx < leaves.size(); subIdx++) {\n        LeafReaderContext subCtx = leaves.get(subIdx);\n        DocIdSet dis = filter.getDocIdSet(subCtx, null); // solr docsets already exclude any deleted docs\n        \n        AggregatableDocIter iter = new SegmentChildren(subCtx, dis, allParentsBitsDocSet);\n        \n        if (iter.hasNext()){\n          facetCounter.doSetNextReader(subCtx);\n          facetCounter.countFacets(iter);\n        }\n      }\n      facetCounter.finish();\n      \n      rb.req.getContext().put(COLLECTOR_CONTEXT_PARAM,facetCounter);\n      super.process(rb);\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final BlockJoinParentQParser.AllParentsAware bjq = \n        (BlockJoinParentQParser.AllParentsAware) rb.req.getContext().get(bjqKey);\n    if(bjq!=null){\n      final DocSet parentResult = rb.getResults().docSet;\n      final BitDocSet allParentsBitsDocSet = rb.req.getSearcher().getDocSetBits(bjq.getParentQuery());\n      final DocSet allChildren = BlockJoin.toChildren(parentResult, \n          allParentsBitsDocSet,\n          rb.req.getSearcher().getDocSetBits( new MatchAllDocsQuery() ), \n          QueryContext.newContext(rb.req.getSearcher()));\n      \n      final DocSet childQueryDocSet = rb.req.getSearcher().getDocSet(bjq.getChildQuery());\n      final DocSet selectedChildren = allChildren.intersection(childQueryDocSet);\n      \n      // don't include parent into facet counts\n      //childResult = childResult.union(parentResult);// just to mimic the current logic\n      \n      final List<LeafReaderContext> leaves = rb.req.getSearcher().getIndexReader().leaves();\n      \n      Filter filter = selectedChildren.getTopFilter();\n\n      final BlockJoinFacetCollector facetCounter = new NoDelegateFacetCollector(rb.req);\n      \n      for (int subIdx = 0; subIdx < leaves.size(); subIdx++) {\n        LeafReaderContext subCtx = leaves.get(subIdx);\n        DocIdSet dis = filter.getDocIdSet(subCtx, null); // solr docsets already exclude any deleted docs\n        \n        AggregatableDocIter iter = new SegmentChildren(subCtx, dis, allParentsBitsDocSet);\n        \n        if (iter.hasNext()){\n          facetCounter.doSetNextReader(subCtx);\n          facetCounter.countFacets(iter);\n        }\n      }\n      facetCounter.finish();\n      \n      rb.req.getContext().put(COLLECTOR_CONTEXT_PARAM,facetCounter);\n      super.process(rb);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/BlockJoinDocSetFacetComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinDocSetFacetComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final BlockJoinParentQParser.AllParentsAware bjq = \n        (BlockJoinParentQParser.AllParentsAware) rb.req.getContext().get(bjqKey);\n    if(bjq!=null){\n      final DocSet parentResult = rb.getResults().docSet;\n      final BitDocSet allParentsBitsDocSet = rb.req.getSearcher().getDocSetBits(bjq.getParentQuery());\n      final DocSet allChildren = BlockJoin.toChildren(parentResult, \n          allParentsBitsDocSet,\n          rb.req.getSearcher().getDocSetBits( new MatchAllDocsQuery() ), \n          QueryContext.newContext(rb.req.getSearcher()));\n      \n      final DocSet childQueryDocSet = rb.req.getSearcher().getDocSet(bjq.getChildQuery());\n      final DocSet selectedChildren = allChildren.intersection(childQueryDocSet);\n      \n      // don't include parent into facet counts\n      //childResult = childResult.union(parentResult);// just to mimic the current logic\n      \n      final List<LeafReaderContext> leaves = rb.req.getSearcher().getIndexReader().leaves();\n      \n      Filter filter = selectedChildren.getTopFilter();\n\n      final BlockJoinFacetAccsHolder facetCounter = new BlockJoinFacetAccsHolder(rb.req);\n      \n      for (int subIdx = 0; subIdx < leaves.size(); subIdx++) {\n        LeafReaderContext subCtx = leaves.get(subIdx);\n        DocIdSet dis = filter.getDocIdSet(subCtx, null); // solr docsets already exclude any deleted docs\n        \n        AggregatableDocIter iter = new SegmentChildren(subCtx, dis, allParentsBitsDocSet);\n        \n        if (iter.hasNext()){\n          facetCounter.doSetNextReader(subCtx);\n          facetCounter.countFacets(iter);\n        }\n      }\n      facetCounter.finish();\n      \n      rb.req.getContext().put(COLLECTOR_CONTEXT_PARAM,facetCounter);\n      super.process(rb);\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final BlockJoinParentQParser.AllParentsAware bjq = \n        (BlockJoinParentQParser.AllParentsAware) rb.req.getContext().get(bjqKey);\n    if(bjq!=null){\n      final DocSet parentResult = rb.getResults().docSet;\n      final BitDocSet allParentsBitsDocSet = rb.req.getSearcher().getDocSetBits(bjq.getParentQuery());\n      final DocSet allChildren = BlockJoin.toChildren(parentResult, \n          allParentsBitsDocSet,\n          rb.req.getSearcher().getDocSetBits( new MatchAllDocsQuery() ), \n          QueryContext.newContext(rb.req.getSearcher()));\n      \n      final DocSet childQueryDocSet = rb.req.getSearcher().getDocSet(bjq.getChildQuery());\n      final DocSet selectedChildren = allChildren.intersection(childQueryDocSet);\n      \n      // don't include parent into facet counts\n      //childResult = childResult.union(parentResult);// just to mimic the current logic\n      \n      final List<LeafReaderContext> leaves = rb.req.getSearcher().getIndexReader().leaves();\n      \n      Filter filter = selectedChildren.getTopFilter();\n\n      final BlockJoinFacetCollector facetCounter = new NoDelegateFacetCollector(rb.req);\n      \n      for (int subIdx = 0; subIdx < leaves.size(); subIdx++) {\n        LeafReaderContext subCtx = leaves.get(subIdx);\n        DocIdSet dis = filter.getDocIdSet(subCtx, null); // solr docsets already exclude any deleted docs\n        \n        AggregatableDocIter iter = new SegmentChildren(subCtx, dis, allParentsBitsDocSet);\n        \n        if (iter.hasNext()){\n          facetCounter.doSetNextReader(subCtx);\n          facetCounter.countFacets(iter);\n        }\n      }\n      facetCounter.finish();\n      \n      rb.req.getContext().put(COLLECTOR_CONTEXT_PARAM,facetCounter);\n      super.process(rb);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00a778ad8ad6c2c04607538d2f36fee001239eef","date":1576657013,"type":4,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinDocSetFacetComponent#process(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final BlockJoinParentQParser.AllParentsAware bjq = \n        (BlockJoinParentQParser.AllParentsAware) rb.req.getContext().get(bjqKey);\n    if(bjq!=null){\n      final DocSet parentResult = rb.getResults().docSet;\n      final BitDocSet allParentsBitsDocSet = rb.req.getSearcher().getDocSetBits(bjq.getParentQuery());\n      final DocSet allChildren = BlockJoin.toChildren(parentResult, \n          allParentsBitsDocSet,\n          rb.req.getSearcher().getDocSetBits( new MatchAllDocsQuery() ), \n          QueryContext.newContext(rb.req.getSearcher()));\n      \n      final DocSet childQueryDocSet = rb.req.getSearcher().getDocSet(bjq.getChildQuery());\n      final DocSet selectedChildren = allChildren.intersection(childQueryDocSet);\n      \n      // don't include parent into facet counts\n      //childResult = childResult.union(parentResult);// just to mimic the current logic\n      \n      final List<LeafReaderContext> leaves = rb.req.getSearcher().getIndexReader().leaves();\n      \n      Filter filter = selectedChildren.getTopFilter();\n\n      final BlockJoinFacetAccsHolder facetCounter = new BlockJoinFacetAccsHolder(rb.req);\n      \n      for (int subIdx = 0; subIdx < leaves.size(); subIdx++) {\n        LeafReaderContext subCtx = leaves.get(subIdx);\n        DocIdSet dis = filter.getDocIdSet(subCtx, null); // solr docsets already exclude any deleted docs\n        \n        AggregatableDocIter iter = new SegmentChildren(subCtx, dis, allParentsBitsDocSet);\n        \n        if (iter.hasNext()){\n          facetCounter.doSetNextReader(subCtx);\n          facetCounter.countFacets(iter);\n        }\n      }\n      facetCounter.finish();\n      \n      rb.req.getContext().put(COLLECTOR_CONTEXT_PARAM,facetCounter);\n      super.process(rb);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/join/BlockJoinDocSetFacetComponent#process(ResponseBuilder).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    final BlockJoinParentQParser.AllParentsAware bjq = \n        (BlockJoinParentQParser.AllParentsAware) rb.req.getContext().get(bjqKey);\n    if(bjq!=null){\n      final DocSet parentResult = rb.getResults().docSet;\n      final BitDocSet allParentsBitsDocSet = rb.req.getSearcher().getDocSetBits(bjq.getParentQuery());\n      final DocSet allChildren = BlockJoin.toChildren(parentResult, \n          allParentsBitsDocSet,\n          rb.req.getSearcher().getDocSetBits( new MatchAllDocsQuery() ), \n          QueryContext.newContext(rb.req.getSearcher()));\n      \n      final DocSet childQueryDocSet = rb.req.getSearcher().getDocSet(bjq.getChildQuery());\n      final DocSet selectedChildren = allChildren.intersection(childQueryDocSet);\n      \n      // don't include parent into facet counts\n      //childResult = childResult.union(parentResult);// just to mimic the current logic\n      \n      final List<LeafReaderContext> leaves = rb.req.getSearcher().getIndexReader().leaves();\n      \n      Filter filter = selectedChildren.getTopFilter();\n\n      final BlockJoinFacetAccsHolder facetCounter = new BlockJoinFacetAccsHolder(rb.req);\n      \n      for (int subIdx = 0; subIdx < leaves.size(); subIdx++) {\n        LeafReaderContext subCtx = leaves.get(subIdx);\n        DocIdSet dis = filter.getDocIdSet(subCtx, null); // solr docsets already exclude any deleted docs\n        \n        AggregatableDocIter iter = new SegmentChildren(subCtx, dis, allParentsBitsDocSet);\n        \n        if (iter.hasNext()){\n          facetCounter.doSetNextReader(subCtx);\n          facetCounter.countFacets(iter);\n        }\n      }\n      facetCounter.finish();\n      \n      rb.req.getContext().put(COLLECTOR_CONTEXT_PARAM,facetCounter);\n      super.process(rb);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["403d05f7f8d69b65659157eff1bc1d2717f04c66","00a778ad8ad6c2c04607538d2f36fee001239eef"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d","c7368def5a7dda562981cf936054217291690b88"],"c7368def5a7dda562981cf936054217291690b88":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"00a778ad8ad6c2c04607538d2f36fee001239eef":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00a778ad8ad6c2c04607538d2f36fee001239eef"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["246314af59d76a47fccc31e9494eefee01ec9c00","00a778ad8ad6c2c04607538d2f36fee001239eef","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c7368def5a7dda562981cf936054217291690b88":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d"],"dbb4b815ac37f3938a2f7c18c2e7a5267ed50a1d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","c7368def5a7dda562981cf936054217291690b88","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"00a778ad8ad6c2c04607538d2f36fee001239eef":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}