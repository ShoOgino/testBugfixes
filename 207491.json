{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","pathOld":"/dev/null","sourceNew":"    /** Compute longitude/latitude bounds for the shape.\n    *@param bounds is the optional input bounds object.  If this is null,\n    * a bounds object will be created.  Otherwise, the input object will be modified.\n    *@return a Bounds object describing the shape's bounds.  If the bounds cannot\n    * be computed, then return a Bounds object with noLongitudeBound,\n    * noTopLatitudeBound, and noBottomLatitudeBound.\n    */\n    @Override\n    public Bounds getBounds(Bounds bounds)\n    {\n        bounds = super.getBounds(bounds);\n        for (SegmentEndpoint pathPoint : points) {\n            pathPoint.getBounds(bounds);\n        }\n        for (PathSegment pathSegment : segments) {\n            pathSegment.getBounds(bounds);\n        }\n        return bounds;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4762743d2f10f32ae47dc222ef92e0807ffe2ab8","date":1429841956,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","sourceNew":"    /** Compute longitude/latitude bounds for the shape.\n    *@param bounds is the optional input bounds object.  If this is null,\n    * a bounds object will be created.  Otherwise, the input object will be modified.\n    *@return a Bounds object describing the shape's bounds.  If the bounds cannot\n    * be computed, then return a Bounds object with noLongitudeBound,\n    * noTopLatitudeBound, and noBottomLatitudeBound.\n    */\n    @Override\n    public Bounds getBounds(Bounds bounds)\n    {\n        bounds = super.getBounds(bounds);\n        // For building bounds, order matters.  We want to traverse\n        // never more than 180 degrees longitude at a pop or we risk having the\n        // bounds object get itself inverted.  So do the edges first.\n        for (PathSegment pathSegment : segments) {\n            pathSegment.getBounds(bounds);\n        }\n        for (SegmentEndpoint pathPoint : points) {\n            pathPoint.getBounds(bounds);\n        }\n        return bounds;\n    }\n\n","sourceOld":"    /** Compute longitude/latitude bounds for the shape.\n    *@param bounds is the optional input bounds object.  If this is null,\n    * a bounds object will be created.  Otherwise, the input object will be modified.\n    *@return a Bounds object describing the shape's bounds.  If the bounds cannot\n    * be computed, then return a Bounds object with noLongitudeBound,\n    * noTopLatitudeBound, and noBottomLatitudeBound.\n    */\n    @Override\n    public Bounds getBounds(Bounds bounds)\n    {\n        bounds = super.getBounds(bounds);\n        for (SegmentEndpoint pathPoint : points) {\n            pathPoint.getBounds(bounds);\n        }\n        for (PathSegment pathSegment : segments) {\n            pathSegment.getBounds(bounds);\n        }\n        return bounds;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","sourceNew":"  /**\n   * Compute longitude/latitude bounds for the shape.\n   *\n   * @param bounds is the optional input bounds object.  If this is null,\n   *               a bounds object will be created.  Otherwise, the input object will be modified.\n   * @return a Bounds object describing the shape's bounds.  If the bounds cannot\n   * be computed, then return a Bounds object with noLongitudeBound,\n   * noTopLatitudeBound, and noBottomLatitudeBound.\n   */\n  @Override\n  public Bounds getBounds(Bounds bounds) {\n    bounds = super.getBounds(bounds);\n    // For building bounds, order matters.  We want to traverse\n    // never more than 180 degrees longitude at a pop or we risk having the\n    // bounds object get itself inverted.  So do the edges first.\n    for (PathSegment pathSegment : segments) {\n      pathSegment.getBounds(bounds);\n    }\n    for (SegmentEndpoint pathPoint : points) {\n      pathPoint.getBounds(bounds);\n    }\n    return bounds;\n  }\n\n","sourceOld":"    /** Compute longitude/latitude bounds for the shape.\n    *@param bounds is the optional input bounds object.  If this is null,\n    * a bounds object will be created.  Otherwise, the input object will be modified.\n    *@return a Bounds object describing the shape's bounds.  If the bounds cannot\n    * be computed, then return a Bounds object with noLongitudeBound,\n    * noTopLatitudeBound, and noBottomLatitudeBound.\n    */\n    @Override\n    public Bounds getBounds(Bounds bounds)\n    {\n        bounds = super.getBounds(bounds);\n        // For building bounds, order matters.  We want to traverse\n        // never more than 180 degrees longitude at a pop or we risk having the\n        // bounds object get itself inverted.  So do the edges first.\n        for (PathSegment pathSegment : segments) {\n            pathSegment.getBounds(bounds);\n        }\n        for (SegmentEndpoint pathPoint : points) {\n            pathPoint.getBounds(bounds);\n        }\n        return bounds;\n    }\n\n","bugFix":null,"bugIntro":["9908748d960ccb7706a20e81289a656237780b6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute longitude/latitude bounds for the shape.\n   *\n   * @param bounds is the optional input bounds object.  If this is null,\n   *               a bounds object will be created.  Otherwise, the input object will be modified.\n   * @return a Bounds object describing the shape's bounds.  If the bounds cannot\n   * be computed, then return a Bounds object with noLongitudeBound,\n   * noTopLatitudeBound, and noBottomLatitudeBound.\n   */\n  @Override\n  public Bounds getBounds(Bounds bounds) {\n    bounds = super.getBounds(bounds);\n    // For building bounds, order matters.  We want to traverse\n    // never more than 180 degrees longitude at a pop or we risk having the\n    // bounds object get itself inverted.  So do the edges first.\n    for (PathSegment pathSegment : segments) {\n      pathSegment.getBounds(bounds);\n    }\n    for (SegmentEndpoint pathPoint : points) {\n      pathPoint.getBounds(bounds);\n    }\n    return bounds;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","sourceNew":"  /**\n   * Compute longitude/latitude bounds for the shape.\n   *\n   * @param bounds is the optional input bounds object.  If this is null,\n   *               a bounds object will be created.  Otherwise, the input object will be modified.\n   * @return a Bounds object describing the shape's bounds.  If the bounds cannot\n   * be computed, then return a Bounds object with noLongitudeBound,\n   * noTopLatitudeBound, and noBottomLatitudeBound.\n   */\n  @Override\n  public Bounds getBounds(Bounds bounds) {\n    bounds = super.getBounds(bounds);\n    // For building bounds, order matters.  We want to traverse\n    // never more than 180 degrees longitude at a pop or we risk having the\n    // bounds object get itself inverted.  So do the edges first.\n    for (PathSegment pathSegment : segments) {\n      pathSegment.getBounds(planetModel, bounds);\n    }\n    for (SegmentEndpoint pathPoint : endPoints) {\n      pathPoint.getBounds(planetModel, bounds);\n    }\n    return bounds;\n  }\n\n","sourceOld":"  /**\n   * Compute longitude/latitude bounds for the shape.\n   *\n   * @param bounds is the optional input bounds object.  If this is null,\n   *               a bounds object will be created.  Otherwise, the input object will be modified.\n   * @return a Bounds object describing the shape's bounds.  If the bounds cannot\n   * be computed, then return a Bounds object with noLongitudeBound,\n   * noTopLatitudeBound, and noBottomLatitudeBound.\n   */\n  @Override\n  public Bounds getBounds(Bounds bounds) {\n    bounds = super.getBounds(bounds);\n    // For building bounds, order matters.  We want to traverse\n    // never more than 180 degrees longitude at a pop or we risk having the\n    // bounds object get itself inverted.  So do the edges first.\n    for (PathSegment pathSegment : segments) {\n      pathSegment.getBounds(bounds);\n    }\n    for (SegmentEndpoint pathPoint : points) {\n      pathPoint.getBounds(bounds);\n    }\n    return bounds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","sourceNew":"  /**\n   * Compute longitude/latitude bounds for the shape.\n   *\n   * @param bounds is the optional input bounds object.  If this is null,\n   *               a bounds object will be created.  Otherwise, the input object will be modified.\n   * @return a Bounds object describing the shape's bounds.  If the bounds cannot\n   * be computed, then return a Bounds object with noLongitudeBound,\n   * noTopLatitudeBound, and noBottomLatitudeBound.\n   */\n  @Override\n  public Bounds getBounds(Bounds bounds) {\n    bounds = super.getBounds(bounds);\n    // For building bounds, order matters.  We want to traverse\n    // never more than 180 degrees longitude at a pop or we risk having the\n    // bounds object get itself inverted.  So do the edges first.\n    for (PathSegment pathSegment : segments) {\n      pathSegment.getBounds(planetModel, bounds);\n    }\n    for (SegmentEndpoint pathPoint : endPoints) {\n      pathPoint.getBounds(planetModel, bounds);\n    }\n    return bounds;\n  }\n\n","sourceOld":"  /**\n   * Compute longitude/latitude bounds for the shape.\n   *\n   * @param bounds is the optional input bounds object.  If this is null,\n   *               a bounds object will be created.  Otherwise, the input object will be modified.\n   * @return a Bounds object describing the shape's bounds.  If the bounds cannot\n   * be computed, then return a Bounds object with noLongitudeBound,\n   * noTopLatitudeBound, and noBottomLatitudeBound.\n   */\n  @Override\n  public Bounds getBounds(Bounds bounds) {\n    bounds = super.getBounds(bounds);\n    // For building bounds, order matters.  We want to traverse\n    // never more than 180 degrees longitude at a pop or we risk having the\n    // bounds object get itself inverted.  So do the edges first.\n    for (PathSegment pathSegment : segments) {\n      pathSegment.getBounds(bounds);\n    }\n    for (SegmentEndpoint pathPoint : points) {\n      pathPoint.getBounds(bounds);\n    }\n    return bounds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9908748d960ccb7706a20e81289a656237780b6c","date":1435716223,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","sourceNew":"  @Override\n  public Bounds getBounds(Bounds bounds) {\n    bounds = super.getBounds(bounds);\n    // For building bounds, order matters.  We want to traverse\n    // never more than 180 degrees longitude at a pop or we risk having the\n    // bounds object get itself inverted.  So do the edges first.\n    for (PathSegment pathSegment : segments) {\n      pathSegment.getBounds(planetModel, bounds);\n    }\n    for (SegmentEndpoint pathPoint : endPoints) {\n      pathPoint.getBounds(planetModel, bounds);\n    }\n    return bounds;\n  }\n\n","sourceOld":"  /**\n   * Compute longitude/latitude bounds for the shape.\n   *\n   * @param bounds is the optional input bounds object.  If this is null,\n   *               a bounds object will be created.  Otherwise, the input object will be modified.\n   * @return a Bounds object describing the shape's bounds.  If the bounds cannot\n   * be computed, then return a Bounds object with noLongitudeBound,\n   * noTopLatitudeBound, and noBottomLatitudeBound.\n   */\n  @Override\n  public Bounds getBounds(Bounds bounds) {\n    bounds = super.getBounds(bounds);\n    // For building bounds, order matters.  We want to traverse\n    // never more than 180 degrees longitude at a pop or we risk having the\n    // bounds object get itself inverted.  So do the edges first.\n    for (PathSegment pathSegment : segments) {\n      pathSegment.getBounds(planetModel, bounds);\n    }\n    for (SegmentEndpoint pathPoint : endPoints) {\n      pathPoint.getBounds(planetModel, bounds);\n    }\n    return bounds;\n  }\n\n","bugFix":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath#getBounds(Bounds).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath#getBounds(Bounds).mjava","sourceNew":"  @Override\n  public Bounds getBounds(Bounds bounds) {\n    bounds = super.getBounds(bounds);\n    // For building bounds, order matters.  We want to traverse\n    // never more than 180 degrees longitude at a pop or we risk having the\n    // bounds object get itself inverted.  So do the edges first.\n    for (PathSegment pathSegment : segments) {\n      pathSegment.getBounds(planetModel, bounds);\n    }\n    for (SegmentEndpoint pathPoint : endPoints) {\n      pathPoint.getBounds(planetModel, bounds);\n    }\n    return bounds;\n  }\n\n","sourceOld":"  @Override\n  public Bounds getBounds(Bounds bounds) {\n    bounds = super.getBounds(bounds);\n    // For building bounds, order matters.  We want to traverse\n    // never more than 180 degrees longitude at a pop or we risk having the\n    // bounds object get itself inverted.  So do the edges first.\n    for (PathSegment pathSegment : segments) {\n      pathSegment.getBounds(planetModel, bounds);\n    }\n    for (SegmentEndpoint pathPoint : endPoints) {\n      pathPoint.getBounds(planetModel, bounds);\n    }\n    return bounds;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["9908748d960ccb7706a20e81289a656237780b6c"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["4762743d2f10f32ae47dc222ef92e0807ffe2ab8"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"4762743d2f10f32ae47dc222ef92e0807ffe2ab8":["851e4197476b684154a7b65f996f535522e67400"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"9908748d960ccb7706a20e81289a656237780b6c":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["9908748d960ccb7706a20e81289a656237780b6c"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"4762743d2f10f32ae47dc222ef92e0807ffe2ab8":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"851e4197476b684154a7b65f996f535522e67400":["4762743d2f10f32ae47dc222ef92e0807ffe2ab8"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"9908748d960ccb7706a20e81289a656237780b6c":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}