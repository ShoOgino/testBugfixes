{"path":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","commits":[{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(HttpClient,PostMethod).mjava","sourceNew":"  private NamedList getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return new NamedListCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private NamedList getNamedListResponse(HttpClient client, PostMethod method) throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return new NamedListCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2307281f021c98102266052f57b7938614dbb30d","date":1229692925,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","sourceNew":"  private NamedList getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return (NamedList) new NamedListCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private NamedList getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return new NamedListCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18a1b51b47d1035bf90ecfc7d16c739fe983647a","date":1229928361,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","sourceNew":"  private NamedList getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return (NamedList) new JavaBinCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private NamedList getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return (NamedList) new NamedListCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9","date":1239612124,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","sourceNew":"  private NamedList getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = myHttpClient.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return (NamedList) new JavaBinCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private NamedList getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return (NamedList) new JavaBinCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","sourceNew":"  private NamedList getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = myHttpClient.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return (NamedList) new JavaBinCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private NamedList getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = myHttpClient.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return (NamedList) new JavaBinCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["2307281f021c98102266052f57b7938614dbb30d"],"ad94625fb8d088209f46650c8097196fec67f00c":["7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9"],"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"2307281f021c98102266052f57b7938614dbb30d":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9":["ad94625fb8d088209f46650c8097196fec67f00c"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["2307281f021c98102266052f57b7938614dbb30d"],"2307281f021c98102266052f57b7938614dbb30d":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}