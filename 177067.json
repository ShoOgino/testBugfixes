{"path":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","commits":[{"id":"20349324eb18d1565d301e59be543989f38743d3","date":1258494398,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","pathOld":"/dev/null","sourceNew":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21","c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21","c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21","c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21","c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21","c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","pathOld":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","sourceNew":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","sourceOld":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"20349324eb18d1565d301e59be543989f38743d3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["20349324eb18d1565d301e59be543989f38743d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"20349324eb18d1565d301e59be543989f38743d3":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["20349324eb18d1565d301e59be543989f38743d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}