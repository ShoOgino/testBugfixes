{"path":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","sourceNew":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre>\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   * @param clockTime\n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","sourceOld":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre>\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   * @param clockTime\n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8471c0f357621e859602d44e1af230581b739319","date":1347468766,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","sourceNew":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre class=\"prettyprint\">\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   * @param clockTime\n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","sourceOld":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre>\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   * @param clockTime\n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","sourceNew":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre class=\"prettyprint\">\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","sourceOld":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre class=\"prettyprint\">\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   * @param clockTime\n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#setBaseline(long).mjava","sourceNew":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre class=\"prettyprint\">\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * @see #setBaseline() \n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","sourceOld":"  /**\n   * Sets the baseline for this collector. By default the collectors baseline is \n   * initialized once the first reader is passed to the collector. \n   * To include operations executed in prior to the actual document collection\n   * set the baseline through this method in your prelude.\n   * <p>\n   * Example usage:\n   * <pre class=\"prettyprint\">\n   *   Counter clock = ...;\n   *   long baseline = clock.get();\n   *   // ... prepare search\n   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);\n   *   collector.setBaseline(baseline);\n   *   indexSearcher.search(query, collector);\n   * </pre>\n   * </p>\n   * @see #setBaseline() \n   */\n  public void setBaseline(long clockTime) {\n    t0 = clockTime;\n    timeout = t0 + ticksAllowed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["8471c0f357621e859602d44e1af230581b739319"],"8471c0f357621e859602d44e1af230581b739319":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14600834a1fbc7c12faf344466e00cca8cc67de4"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"8471c0f357621e859602d44e1af230581b739319":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8471c0f357621e859602d44e1af230581b739319"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}