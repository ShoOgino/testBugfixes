{"path":"lucene/core/src/java/org/apache/lucene/util/CloseableThreadLocal#set(T).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CloseableThreadLocal#set(T).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CloseableThreadLocal#set(T).mjava","sourceNew":"  public void set(T object) {\n\n    t.set(new WeakReference<T>(object));\n\n    synchronized(hardRefs) {\n      hardRefs.put(Thread.currentThread(), object);\n\n      // Purge dead threads\n      for (Iterator<Thread> it = hardRefs.keySet().iterator(); it.hasNext();) {\n        final Thread t = it.next();\n        if (!t.isAlive())\n          it.remove();\n      }\n    }\n  }\n\n","sourceOld":"  public void set(T object) {\n\n    t.set(new WeakReference<T>(object));\n\n    synchronized(hardRefs) {\n      hardRefs.put(Thread.currentThread(), object);\n\n      // Purge dead threads\n      for (Iterator<Thread> it = hardRefs.keySet().iterator(); it.hasNext();) {\n        final Thread t = it.next();\n        if (!t.isAlive())\n          it.remove();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ebb4b4370532662eb5f3238d02b002836b38b2","date":1331733267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CloseableThreadLocal#set(T).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CloseableThreadLocal#set(T).mjava","sourceNew":"  public void set(T object) {\n\n    t.set(new WeakReference<T>(object));\n\n    synchronized(hardRefs) {\n      hardRefs.put(Thread.currentThread(), object);\n      maybePurge();\n    }\n  }\n\n","sourceOld":"  public void set(T object) {\n\n    t.set(new WeakReference<T>(object));\n\n    synchronized(hardRefs) {\n      hardRefs.put(Thread.currentThread(), object);\n\n      // Purge dead threads\n      for (Iterator<Thread> it = hardRefs.keySet().iterator(); it.hasNext();) {\n        final Thread t = it.next();\n        if (!t.isAlive())\n          it.remove();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CloseableThreadLocal#set(T).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CloseableThreadLocal#set(T).mjava","sourceNew":"  public void set(T object) {\n\n    t.set(new WeakReference<>(object));\n\n    synchronized(hardRefs) {\n      hardRefs.put(Thread.currentThread(), object);\n      maybePurge();\n    }\n  }\n\n","sourceOld":"  public void set(T object) {\n\n    t.set(new WeakReference<T>(object));\n\n    synchronized(hardRefs) {\n      hardRefs.put(Thread.currentThread(), object);\n      maybePurge();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["09ebb4b4370532662eb5f3238d02b002836b38b2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ebb4b4370532662eb5f3238d02b002836b38b2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["09ebb4b4370532662eb5f3238d02b002836b38b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"09ebb4b4370532662eb5f3238d02b002836b38b2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}