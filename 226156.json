{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23a0c01b88b402e48665c92a39f695ef24e62359","date":1344592305,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    coordinator = new Coordinator(maxCoord, disableCoord);\n    \n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    coordinator = new Coordinator(maxCoord, disableCoord);\n    \n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    coordinator = new Coordinator(maxCoord, disableCoord);\n    \n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","date":1400613895,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    coordinator = new Coordinator(maxCoord, disableCoord);\n    \n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    coordinator = new Coordinator(maxCoord, disableCoord);\n    \n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    this.minNrShouldMatch = minNrShouldMatch;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    coordinator = new Coordinator(maxCoord, disableCoord);\n    \n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","23a0c01b88b402e48665c92a39f695ef24e62359"],"23a0c01b88b402e48665c92a39f695ef24e62359":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["23a0c01b88b402e48665c92a39f695ef24e62359"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["23a0c01b88b402e48665c92a39f695ef24e62359","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","23a0c01b88b402e48665c92a39f695ef24e62359"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["23a0c01b88b402e48665c92a39f695ef24e62359","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"23a0c01b88b402e48665c92a39f695ef24e62359":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","b7605579001505896d48b07160075a5c8b8e128e","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","23a0c01b88b402e48665c92a39f695ef24e62359","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7605579001505896d48b07160075a5c8b8e128e":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","b7605579001505896d48b07160075a5c8b8e128e","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}