{"path":"solr/core/src/test/org/apache/solr/handler/admin/DaemonStreamApiTest#setUp().mjava","commits":[{"id":"d5fc8ecbf23873760f4072d6643a3d2e97597030","date":1555542126,"type":0,"author":"erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/DaemonStreamApiTest#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    cluster = new MiniSolrCloudCluster(1, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + CHECKPOINT_COLL;\n\n    cluster.uploadConfigSet(configset(\"cloud-minimal\"), CONF_NAME);\n    // create a single shard, single replica collection. This is necessary until SOLR-13245 since the commands\n    // don't look in all replicas.\n    CollectionAdminRequest.createCollection(SOURCE_COLL, CONF_NAME, 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(TARGET_COLL, CONF_NAME, 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(CHECKPOINT_COLL, CONF_NAME, 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    for (int idx = 0; idx < numDaemons; ++idx) {\n      String name = DAEMON_ROOT + idx;\n      daemonNames.add(name);\n    }\n    daemonOfInterest = daemonNames.get(random().nextInt(numDaemons));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/DaemonStreamApiTest#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/DaemonStreamApiTest#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    cluster = new MiniSolrCloudCluster(1, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + CHECKPOINT_COLL;\n\n    cluster.uploadConfigSet(configset(\"cloud-minimal\"), CONF_NAME);\n    // create a single shard, single replica collection. This is necessary until SOLR-13245 since the commands\n    // don't look in all replicas.\n    CollectionAdminRequest.createCollection(SOURCE_COLL, CONF_NAME, 1, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(TARGET_COLL, CONF_NAME, 1, 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(CHECKPOINT_COLL, CONF_NAME, 1, 1)\n        .process(cluster.getSolrClient());\n\n    for (int idx = 0; idx < numDaemons; ++idx) {\n      String name = DAEMON_ROOT + idx;\n      daemonNames.add(name);\n    }\n    daemonOfInterest = daemonNames.get(random().nextInt(numDaemons));\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    cluster = new MiniSolrCloudCluster(1, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + CHECKPOINT_COLL;\n\n    cluster.uploadConfigSet(configset(\"cloud-minimal\"), CONF_NAME);\n    // create a single shard, single replica collection. This is necessary until SOLR-13245 since the commands\n    // don't look in all replicas.\n    CollectionAdminRequest.createCollection(SOURCE_COLL, CONF_NAME, 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(TARGET_COLL, CONF_NAME, 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createCollection(CHECKPOINT_COLL, CONF_NAME, 1, 1)\n        .setMaxShardsPerNode(1)\n        .process(cluster.getSolrClient());\n\n    for (int idx = 0; idx < numDaemons; ++idx) {\n      String name = DAEMON_ROOT + idx;\n      daemonNames.add(name);\n    }\n    daemonOfInterest = daemonNames.get(random().nextInt(numDaemons));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d5fc8ecbf23873760f4072d6643a3d2e97597030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["d5fc8ecbf23873760f4072d6643a3d2e97597030"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5fc8ecbf23873760f4072d6643a3d2e97597030"],"d5fc8ecbf23873760f4072d6643a3d2e97597030":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}