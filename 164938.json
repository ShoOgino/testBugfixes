{"path":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","commits":[{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"/dev/null","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new WAH8DocIdSet.Builder().add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10000);\n      WAH8DocIdSet.Builder b = new WAH8DocIdSet.Builder();\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f85a977dd90fc68c1d697165d08724050ba90d27"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"/dev/null","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new WAH8DocIdSet.Builder().add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10000);\n      WAH8DocIdSet.Builder b = new WAH8DocIdSet.Builder();\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","date":1412674810,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10000);\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","sourceOld":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new WAH8DocIdSet.Builder().add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10000);\n      WAH8DocIdSet.Builder b = new WAH8DocIdSet.Builder();\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10000);\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","sourceOld":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new WAH8DocIdSet.Builder().add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10000);\n      WAH8DocIdSet.Builder b = new WAH8DocIdSet.Builder();\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f85a977dd90fc68c1d697165d08724050ba90d27","date":1413879586,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10);\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","sourceOld":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10000);\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","bugFix":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10);\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","sourceOld":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10000);\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b5c8ac03c21a6fee5a00482c4c0cb5a2331a43e","date":1413965922,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(1000); doc < maxDoc; doc += 1 + random().nextInt(1000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","sourceOld":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      final int baseInc = 2 + random().nextInt(10);\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(10000); doc < maxDoc; doc += baseInc + random().nextInt(2000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(1000); doc < maxDoc; doc += 1 + random().nextInt(1000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitDocIdSet);\n    assertEquals(new FixedBitDocIdSet(ref), result);\n  }\n\n","sourceOld":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(1000); doc < maxDoc; doc += 1 + random().nextInt(1000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitSet);\n    assertEquals(ref, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(1000); doc < maxDoc; doc += 1 + random().nextInt(1000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof BitDocIdSet);\n    assertEquals(new BitDocIdSet(ref), result);\n  }\n\n","sourceOld":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(1000); doc < maxDoc; doc += 1 + random().nextInt(1000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof FixedBitDocIdSet);\n    assertEquals(new FixedBitDocIdSet(ref), result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(1000); doc < maxDoc; doc += 1 + random().nextInt(1000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof BitDocIdSet);\n    assertEquals(new BitDocIdSet(ref), result);\n  }\n\n","sourceOld":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(1000); doc < maxDoc; doc += 1 + random().nextInt(1000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof BitDocIdSet);\n    assertEquals(new BitDocIdSet(ref), result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e91a2d9ed80172872da0f517870da6756289554","date":1436431140,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestDocIdSetBuilder#testDense().mjava","sourceNew":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    DocIdSetBuilder builder = new DocIdSetBuilder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numIterators; ++i) {\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(1000); doc < maxDoc; doc += 1 + random().nextInt(100)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.add(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof BitDocIdSet);\n    assertEquals(new BitDocIdSet(ref), result);\n  }\n\n","sourceOld":"  public void testDense() throws IOException {\n    final int maxDoc = 1000000 + random().nextInt(1000000);\n    BitDocIdSet.Builder builder = new BitDocIdSet.Builder(maxDoc);\n    final int numIterators = 1 + random().nextInt(10);\n    final FixedBitSet ref = new FixedBitSet(maxDoc);\n    if (random().nextBoolean()) {\n      // try upgrades\n      final int doc = random().nextInt(maxDoc);\n      ref.set(doc);\n      builder.or(new RoaringDocIdSet.Builder(maxDoc).add(doc).build().iterator());\n    }\n    for (int i = 0; i < numIterators; ++i) {\n      RoaringDocIdSet.Builder b = new RoaringDocIdSet.Builder(maxDoc);\n      for (int doc = random().nextInt(1000); doc < maxDoc; doc += 1 + random().nextInt(1000)) {\n        b.add(doc);\n        ref.set(doc);\n      }\n      builder.or(b.build().iterator());\n    }\n    DocIdSet result = builder.build();\n    assertTrue(result instanceof BitDocIdSet);\n    assertEquals(new BitDocIdSet(ref), result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"f85a977dd90fc68c1d697165d08724050ba90d27":["0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55980207f1977bd1463465de1659b821347e2fa8","f85a977dd90fc68c1d697165d08724050ba90d27"],"0e91a2d9ed80172872da0f517870da6756289554":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["0b5c8ac03c21a6fee5a00482c4c0cb5a2331a43e"],"0b5c8ac03c21a6fee5a00482c4c0cb5a2331a43e":["f85a977dd90fc68c1d697165d08724050ba90d27"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e91a2d9ed80172872da0f517870da6756289554"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["0e91a2d9ed80172872da0f517870da6756289554"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["55980207f1977bd1463465de1659b821347e2fa8","f85a977dd90fc68c1d697165d08724050ba90d27"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"f85a977dd90fc68c1d697165d08724050ba90d27":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","0b5c8ac03c21a6fee5a00482c4c0cb5a2331a43e"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"0e91a2d9ed80172872da0f517870da6756289554":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0b5c8ac03c21a6fee5a00482c4c0cb5a2331a43e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}