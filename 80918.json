{"path":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","commits":[{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeDirectory(CacheValue).mjava","sourceNew":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.info(\"looking to close \" + cacheValue.path + \" \" + cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.info(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error removing directory\", t);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n    return cl;\n  }\n\n","sourceOld":"  private void closeDirectory(CacheValue cacheValue) {\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    \n    cacheValue.closeDirectoryCalled = true;\n    \n    if (cacheValue.deleteOnClose) {\n      \n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>();\n      cacheValues.addAll(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and all our sub children are not already closed,\n        // get a sub path to close us later\n        if (otherCacheValue.path.startsWith(cacheValue.path) && !otherCacheValue.closeDirectoryCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          break;\n        }\n      }\n    }\n    \n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        try {\n          log.info(\"Removing directory: \" + val.path);\n          removeDirectory(val);\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error removing directory\", t);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    for (CacheValue val : cacheValue.closeEntries) {\n      try {\n        log.info(\"Closing directory: \" + val.path);\n        val.directory.close();\n      } catch (Throwable t) {\n        SolrException.log(log, \"Error closing directory\", t);\n      }\n      \n    }\n\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","sourceNew":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.info(\"looking to close \" + cacheValue.path + \" \" + cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.info(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","sourceOld":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.info(\"looking to close \" + cacheValue.path + \" \" + cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing preClose for directory\", t);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.info(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error removing directory\", t);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Throwable t) {\n          SolrException.log(log, \"Error executing postClose for directory\", t);\n        }\n      }\n    }\n    return cl;\n  }\n\n","bugFix":["fa419b45716f9ae7d885562c4f38a014be0d2c1a","3a4780bc0c0c5d86e6998d8e9ae0928ec3016205"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","sourceNew":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.info(\"looking to close \" + cacheValue.path + \" \" + cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.info(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","sourceOld":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.info(\"looking to close \" + cacheValue.path + \" \" + cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<CacheValue>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.info(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","sourceNew":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.debug(\"looking to close {} {}\", cacheValue.path, cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.debug(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory \" + val.path + \" before core close\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","sourceOld":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.info(\"looking to close \" + cacheValue.path + \" \" + cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.info(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","sourceNew":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.debug(\"looking to close {} {}\", cacheValue.path, cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.debug(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory \" + val.path + \" before core close\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","sourceOld":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.info(\"looking to close \" + cacheValue.path + \" \" + cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.info(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","sourceNew":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.debug(\"looking to close {} {}\", cacheValue.path, cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.debug(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory \" + val.path + \" before core close\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","sourceOld":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.info(\"looking to close \" + cacheValue.path + \" \" + cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.info(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","sourceNew":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.debug(\"looking to close {} {}\", cacheValue.path, cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n\n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.debug(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory \" + val.path + \" before core close\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","sourceOld":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.debug(\"looking to close {} {}\", cacheValue.path, cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n      \n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.debug(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory \" + val.path + \" before core close\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n    \n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#closeCacheValue(CacheValue).mjava","sourceNew":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.debug(\"looking to close {} {}\", cacheValue.path, cacheValue.closeEntries);\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n\n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.debug(\"Removing directory before core close: {}\", val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory \" + val.path + \" before core close\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","sourceOld":"  // be sure this is called with the this sync lock\n  // returns true if we closed the cacheValue, false if it will be closed later\n  private boolean closeCacheValue(CacheValue cacheValue) {\n    log.debug(\"looking to close {} {}\", cacheValue.path, cacheValue.closeEntries.toString());\n    List<CloseListener> listeners = closeListeners.remove(cacheValue.directory);\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.preClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing preClose for directory\", e);\n        }\n      }\n    }\n    cacheValue.closeCacheValueCalled = true;\n    if (cacheValue.deleteOnClose) {\n      // see if we are a subpath\n      Collection<CacheValue> values = byPathCache.values();\n\n      Collection<CacheValue> cacheValues = new ArrayList<>(values);\n      cacheValues.remove(cacheValue);\n      for (CacheValue otherCacheValue : cacheValues) {\n        // if we are a parent path and a sub path is not already closed, get a sub path to close us later\n        if (isSubPath(cacheValue, otherCacheValue) && !otherCacheValue.closeCacheValueCalled) {\n          // we let the sub dir remove and close us\n          if (!otherCacheValue.deleteAfterCoreClose && cacheValue.deleteAfterCoreClose) {\n            otherCacheValue.deleteAfterCoreClose = true;\n          }\n          otherCacheValue.removeEntries.addAll(cacheValue.removeEntries);\n          otherCacheValue.closeEntries.addAll(cacheValue.closeEntries);\n          cacheValue.closeEntries.clear();\n          cacheValue.removeEntries.clear();\n          return false;\n        }\n      }\n    }\n\n    boolean cl = false;\n    for (CacheValue val : cacheValue.closeEntries) {\n      close(val);\n      if (val == cacheValue) {\n        cl = true;\n      }\n    }\n\n    for (CacheValue val : cacheValue.removeEntries) {\n      if (!val.deleteAfterCoreClose) {\n        log.debug(\"Removing directory before core close: \" + val.path);\n        try {\n          removeDirectory(val);\n        } catch (Exception e) {\n          SolrException.log(log, \"Error removing directory \" + val.path + \" before core close\", e);\n        }\n      } else {\n        removeEntries.add(val);\n      }\n    }\n\n    if (listeners != null) {\n      for (CloseListener listener : listeners) {\n        try {\n          listener.postClose();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error executing postClose for directory\", e);\n        }\n      }\n    }\n    return cl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a5d615d62cd8aff3690943d765e46942551f98b6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"058801f8673d53a5abac8088204860ec29a40f0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"140be51d03394488536f4aacedace29f9b318347":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a5d615d62cd8aff3690943d765e46942551f98b6"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["058801f8673d53a5abac8088204860ec29a40f0d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5d615d62cd8aff3690943d765e46942551f98b6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"058801f8673d53a5abac8088204860ec29a40f0d":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["058801f8673d53a5abac8088204860ec29a40f0d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2668c99990e4c94a78bac005aa682b7c5986d23a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}