{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,float,float).mjava","commits":[{"id":"fbc431f993cb68e5cd7af59f2d7c081ff1290b33","date":1479540505,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,float,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         float freq, float docLen) {\n    if (stats.getBoost() != 1.0f) {\n      subs.add(Explanation.match(stats.getBoost(), \"boost\"));\n    }\n\n    subs.add(Explanation.match(this.k, \"k\"));\n    subs.add(Explanation.match(this.s, \"s\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen\"));\n    subs.add(Explanation.match(tf(stats, freq, docLen), \"tf\"));\n    subs.add(Explanation.match(ln(stats, freq, docLen), \"ln\"));\n    subs.add(Explanation.match(tfln(stats, freq, docLen), \"tfln\"));\n    subs.add(Explanation.match(idf(stats, freq, docLen), \"idf\"));\n    subs.add(Explanation.match(gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd70af1186a18d10a788433cc33be44327a83ce7","date":1479767946,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,float,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         float freq, float docLen) {\n    if (stats.getBoost() != 1.0f) {\n      subs.add(Explanation.match(stats.getBoost(), \"boost\"));\n    }\n\n    subs.add(Explanation.match(this.k, \"k\"));\n    subs.add(Explanation.match(this.s, \"s\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen\"));\n    subs.add(Explanation.match(tf(stats, freq, docLen), \"tf\"));\n    subs.add(Explanation.match(ln(stats, freq, docLen), \"ln\"));\n    subs.add(Explanation.match(tfln(stats, freq, docLen), \"tfln\"));\n    subs.add(Explanation.match(idf(stats, freq, docLen), \"idf\"));\n    subs.add(Explanation.match(gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#explain(List[Explanation],BasicStats,int,float,float).mjava","sourceNew":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         double freq, double docLen) {\n    if (stats.getBoost() != 1.0d) {\n      subs.add(Explanation.match((float) stats.getBoost(), \"boost\"));\n    }\n\n    subs.add(Explanation.match(this.k, \"k\"));\n    subs.add(Explanation.match(this.s, \"s\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen\"));\n    subs.add(Explanation.match((float) tf(stats, freq, docLen), \"tf\"));\n    subs.add(Explanation.match((float) ln(stats, freq, docLen), \"ln\"));\n    subs.add(Explanation.match((float) tfln(stats, freq, docLen), \"tfln\"));\n    subs.add(Explanation.match((float) idf(stats, freq, docLen), \"idf\"));\n    subs.add(Explanation.match((float) gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","sourceOld":"  @Override\n  protected void explain(List<Explanation> subs, BasicStats stats, int doc,\n                         float freq, float docLen) {\n    if (stats.getBoost() != 1.0f) {\n      subs.add(Explanation.match(stats.getBoost(), \"boost\"));\n    }\n\n    subs.add(Explanation.match(this.k, \"k\"));\n    subs.add(Explanation.match(this.s, \"s\"));\n    subs.add(Explanation.match(this.queryLen, \"queryLen\"));\n    subs.add(Explanation.match(tf(stats, freq, docLen), \"tf\"));\n    subs.add(Explanation.match(ln(stats, freq, docLen), \"ln\"));\n    subs.add(Explanation.match(tfln(stats, freq, docLen), \"tfln\"));\n    subs.add(Explanation.match(idf(stats, freq, docLen), \"idf\"));\n    subs.add(Explanation.match(gamma(stats, freq, docLen), \"gamma\"));\n    super.explain(subs, stats, doc, freq, docLen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["fbc431f993cb68e5cd7af59f2d7c081ff1290b33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd70af1186a18d10a788433cc33be44327a83ce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbc431f993cb68e5cd7af59f2d7c081ff1290b33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"fbc431f993cb68e5cd7af59f2d7c081ff1290b33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd70af1186a18d10a788433cc33be44327a83ce7","fbc431f993cb68e5cd7af59f2d7c081ff1290b33"],"cd70af1186a18d10a788433cc33be44327a83ce7":[],"fbc431f993cb68e5cd7af59f2d7c081ff1290b33":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","cd70af1186a18d10a788433cc33be44327a83ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd70af1186a18d10a788433cc33be44327a83ce7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}