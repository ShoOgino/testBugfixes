{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"/dev/null","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception, IOException, KeeperException,\n      URISyntaxException {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((CommonsHttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea","29372a57b7e46d222a80429ad6b96413b7319eea","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"/dev/null","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception, IOException, KeeperException,\n      URISyntaxException {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((CommonsHttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"/dev/null","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception, IOException, KeeperException,\n      URISyntaxException {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((CommonsHttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception, IOException, KeeperException,\n      URISyntaxException {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception, IOException, KeeperException,\n      URISyntaxException {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((CommonsHttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea","29372a57b7e46d222a80429ad6b96413b7319eea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception, IOException, KeeperException,\n      URISyntaxException {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea","29372a57b7e46d222a80429ad6b96413b7319eea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception, IOException, KeeperException,\n      URISyntaxException {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ef6348b84bf0f8a649826b69a70ac815ff560e2","date":1343106054,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea","29372a57b7e46d222a80429ad6b96413b7319eea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"217c5e3cedf564c6d370670858e1b1edab16fcac","date":1343114420,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea","29372a57b7e46d222a80429ad6b96413b7319eea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce9115008b2600dda16a6765e06b6b380458c02f","date":1343435746,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    shardToClient.clear();\n    shardToJetty.clear();\n    jettyToInfo.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.client = client;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            clientToInfo.put(csc, shard.getValue());\n            List<SolrServer> list = shardToClient.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<SolrServer>();\n              shardToClient.put(slice.getKey(), list);\n            }\n            list.add(client);\n            \n            if (isLeader) {\n              shardToLeaderClient.put(slice.getKey(), client);\n            }\n            break nextClient;\n          }\n        }\n      }\n    }\n    \n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      assertEquals(slice.getValue().getShards().size(), shardToClient.get(slice.getKey()).size());\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        continue; // If we cannot get the port, this jetty is down\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            jettyToInfo.put(jetty, shard.getValue());\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertTrue(jetties.size() > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":["29372a57b7e46d222a80429ad6b96413b7319eea","29372a57b7e46d222a80429ad6b96413b7319eea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":null,"sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateCloudState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    CloudState cloudState = zkStateReader.getCloudState();\n    Map<String,Slice> slices = cloudState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + cloudState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer]).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys,\n      List<SolrServer> clients) throws Exception {\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    \n    if (slices == null) {\n      throw new RuntimeException(\"No slices found for collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    List<CloudSolrServerClient> theClients = new ArrayList<CloudSolrServerClient>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find ou state by simply matching ports...\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            csc.info = shard.getValue();\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          if (shard.getKey().contains(\":\" + port + \"_\")) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getKey());\n            if (list == null) {\n              list = new ArrayList<CloudJettyRunner>();\n              shardToJetty.put(slice.getKey(), list);\n            }\n            boolean isLeader = shard.getValue().containsKey(\n                ZkStateReader.LEADER_PROP);\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = shard.getValue();\n            cjr.nodeName = shard.getValue().get(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = shard.getKey();\n            cjr.url = shard.getValue().get(ZkStateReader.BASE_URL_PROP) + \"/\" + shard.getValue().get(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getKey(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getKey());\n      assertNotNull(\"Test setup problem: We found no jetties for shard: \" + slice.getKey()\n          + \" just:\" + shardToJetty.keySet(), jetties);\n      assertEquals(slice.getValue().getShards().size(), jetties.size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","217c5e3cedf564c6d370670858e1b1edab16fcac"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3f767f8c99eaedb984df754fe61f21c5de260f94"],"6ef6348b84bf0f8a649826b69a70ac815ff560e2":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["ce9115008b2600dda16a6765e06b6b380458c02f"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ce9115008b2600dda16a6765e06b6b380458c02f"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["6ef6348b84bf0f8a649826b69a70ac815ff560e2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"ce9115008b2600dda16a6765e06b6b380458c02f":["217c5e3cedf564c6d370670858e1b1edab16fcac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","ce9115008b2600dda16a6765e06b6b380458c02f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"6ef6348b84bf0f8a649826b69a70ac815ff560e2":["217c5e3cedf564c6d370670858e1b1edab16fcac"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","6ef6348b84bf0f8a649826b69a70ac815ff560e2","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","2c30e4c1cee08b3b229a77991882594fe7250b66"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","ce9115008b2600dda16a6765e06b6b380458c02f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"ce9115008b2600dda16a6765e06b6b380458c02f":["3f767f8c99eaedb984df754fe61f21c5de260f94","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}