{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set).mjava","sourceNew":"  /**\n   * \n   * @param input the token stream to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   */\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * \n   * @param input the token stream to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   */\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45b06c3ff8a4d9d3d751dd311e51c59303c2719c","date":1250600126,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set).mjava","sourceNew":"  /**\n   * \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   */\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * \n   * @param input the token stream to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   */\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set)} instead.        \n   */\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary) {\n    this(Version.LUCENE_30, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   */\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5","date":1262514702,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set)} instead.        \n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary) {\n    this(Version.LUCENE_30, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set)} instead.        \n   */\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary) {\n    this(Version.LUCENE_30, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set[#]).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set)} instead.        \n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(Version.LUCENE_30, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance.\n   *  \n   * @param input the {@link TokenStream} to process\n   * @param hyphenator the hyphenation pattern tree to use for hyphenation\n   * @param dictionary the word dictionary to match against. If this is a {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it must have set ignoreCase=false and only contain\n   *        lower case strings. \n   * @deprecated use {@link #HyphenationCompoundWordTokenFilter(Version, TokenStream, HyphenationTree, Set)} instead.        \n   */\n  @Deprecated\n  public HyphenationCompoundWordTokenFilter(TokenStream input,\n      HyphenationTree hyphenator, Set dictionary) {\n    this(Version.LUCENE_30, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["5384d626ad24f6a1d56141ba6b0b144d1b2eafc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"]},"commit2Childs":{"5384d626ad24f6a1d56141ba6b0b144d1b2eafc5":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["5384d626ad24f6a1d56141ba6b0b144d1b2eafc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}