{"path":"src/java/org/apache/lucene/search/BooleanQuery#scorer(IndexReader).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#scorer(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  final Scorer scorer(IndexReader reader)\n       throws IOException {\n\n    if (clauses.size() == 1) {\t\t\t  // optimize 1-term queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited)\t\t\t  // just return term scorer\n\treturn c.query.scorer(reader);\n    }\n\n    BooleanScorer result = new BooleanScorer();\n\n    int theMask = 1, thisMask;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.required || c.prohibited) {\n\tthisMask = theMask;\n\ttheMask = theMask << 1;\n      } else\n\tthisMask = 0;\n      \n      Scorer subScorer = c.query.scorer(reader);\n      if (subScorer != null)\n\tresult.add(subScorer, c.required, c.prohibited);\n      else if (c.required)\n\treturn null;\n    }\n    if (theMask == 0)\n      throw new IndexOutOfBoundsException\n\t(\"More than 32 required/prohibited clauses in query.\");\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5337ffb7a239581ddf32eda27914efbd0adc467","date":1002736504,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#scorer(IndexReader).mjava","sourceNew":"  final Scorer scorer(IndexReader reader)\n       throws IOException {\n\n    if (clauses.size() == 1) {\t\t\t  // optimize 1-term queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited)\t\t\t  // just return term scorer\n\treturn c.query.scorer(reader);\n    }\n\n    BooleanScorer result = new BooleanScorer();\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Scorer subScorer = c.query.scorer(reader);\n      if (subScorer != null)\n\tresult.add(subScorer, c.required, c.prohibited);\n      else if (c.required)\n\treturn null;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  final Scorer scorer(IndexReader reader)\n       throws IOException {\n\n    if (clauses.size() == 1) {\t\t\t  // optimize 1-term queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited)\t\t\t  // just return term scorer\n\treturn c.query.scorer(reader);\n    }\n\n    BooleanScorer result = new BooleanScorer();\n\n    int theMask = 1, thisMask;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      if (c.required || c.prohibited) {\n\tthisMask = theMask;\n\ttheMask = theMask << 1;\n      } else\n\tthisMask = 0;\n      \n      Scorer subScorer = c.query.scorer(reader);\n      if (subScorer != null)\n\tresult.add(subScorer, c.required, c.prohibited);\n      else if (c.required)\n\treturn null;\n    }\n    if (theMask == 0)\n      throw new IndexOutOfBoundsException\n\t(\"More than 32 required/prohibited clauses in query.\");\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7454619ea6a0710272c1dd947345cee64489f6","date":1026927484,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#scorer(IndexReader).mjava","sourceNew":"  Scorer scorer(IndexReader reader)\n       throws IOException {\n\n    if (clauses.size() == 1) {\t\t\t  // optimize 1-term queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited)\t\t\t  // just return term scorer\n\treturn c.query.scorer(reader);\n    }\n\n    BooleanScorer result = new BooleanScorer();\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Scorer subScorer = c.query.scorer(reader);\n      if (subScorer != null)\n\tresult.add(subScorer, c.required, c.prohibited);\n      else if (c.required)\n\treturn null;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  final Scorer scorer(IndexReader reader)\n       throws IOException {\n\n    if (clauses.size() == 1) {\t\t\t  // optimize 1-term queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited)\t\t\t  // just return term scorer\n\treturn c.query.scorer(reader);\n    }\n\n    BooleanScorer result = new BooleanScorer();\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Scorer subScorer = c.query.scorer(reader);\n      if (subScorer != null)\n\tresult.add(subScorer, c.required, c.prohibited);\n      else if (c.required)\n\treturn null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery#scorer(IndexReader,Similarity).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#scorer(IndexReader).mjava","sourceNew":"  Scorer scorer(IndexReader reader, Similarity similarity)\n       throws IOException {\n\n    if (clauses.size() == 1) {\t\t\t  // optimize 1-term queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited)\t\t\t  // just return term scorer\n\treturn c.query.scorer(reader, similarity);\n    }\n\n    BooleanScorer result = new BooleanScorer(similarity);\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Scorer subScorer = c.query.scorer(reader, similarity);\n      if (subScorer != null)\n\tresult.add(subScorer, c.required, c.prohibited);\n      else if (c.required)\n\treturn null;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  Scorer scorer(IndexReader reader)\n       throws IOException {\n\n    if (clauses.size() == 1) {\t\t\t  // optimize 1-term queries\n      BooleanClause c = (BooleanClause)clauses.elementAt(0);\n      if (!c.prohibited)\t\t\t  // just return term scorer\n\treturn c.query.scorer(reader);\n    }\n\n    BooleanScorer result = new BooleanScorer();\n\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = (BooleanClause)clauses.elementAt(i);\n      Scorer subScorer = c.query.scorer(reader);\n      if (subScorer != null)\n\tresult.add(subScorer, c.required, c.prohibited);\n      else if (c.required)\n\treturn null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7454619ea6a0710272c1dd947345cee64489f6":["c5337ffb7a239581ddf32eda27914efbd0adc467"],"6f5efa46fb27648cd98137d9898d819e115911bc":["9c7454619ea6a0710272c1dd947345cee64489f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f5efa46fb27648cd98137d9898d819e115911bc"],"c5337ffb7a239581ddf32eda27914efbd0adc467":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["c5337ffb7a239581ddf32eda27914efbd0adc467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"9c7454619ea6a0710272c1dd947345cee64489f6":["6f5efa46fb27648cd98137d9898d819e115911bc"],"6f5efa46fb27648cd98137d9898d819e115911bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5337ffb7a239581ddf32eda27914efbd0adc467":["9c7454619ea6a0710272c1dd947345cee64489f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}