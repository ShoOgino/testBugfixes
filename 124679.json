{"path":"lucene/backwards/src/java/org/apache/lucene/analysis/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","sourceNew":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<SinkTokenStream>(sink));\n  }\n\n","sourceOld":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<SinkTokenStream>(sink));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a","date":1272922845,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/sinks/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","pathOld":"lucene/backwards/src/java/org/apache/lucene/analysis/TeeSinkTokenFilter#addSinkTokenStream(SinkTokenStream).mjava","sourceNew":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<SinkTokenStream>(sink));\n  }\n\n","sourceOld":"  /**\n   * Adds a {@link SinkTokenStream} created by another <code>TeeSinkTokenFilter</code>\n   * to this one. The supplied stream will also receive all consumed tokens.\n   * This method can be used to pass tokens from two different tees to one sink.\n   */\n  public void addSinkTokenStream(final SinkTokenStream sink) {\n    // check that sink has correct factory\n    if (!this.getAttributeFactory().equals(sink.getAttributeFactory())) {\n      throw new IllegalArgumentException(\"The supplied sink is not compatible to this tee\");\n    }\n    // add eventually missing attribute impls to the existing sink\n    for (Iterator<AttributeImpl> it = this.cloneAttributes().getAttributeImplsIterator(); it.hasNext(); ) {\n      sink.addAttributeImpl(it.next());\n    }\n    this.sinks.add(new WeakReference<SinkTokenStream>(sink));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}