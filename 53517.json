{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      }\n      byte[] data = zookeeper.getData(path, null, null, true);\n      zookeeper.delete(path, -1, true);\n      return data;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      }\n      byte[] data = zookeeper.getData(path, null, null, true);\n      zookeeper.delete(path, -1, true);\n      return data;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcf05edaf8d44fa2294eff8746c9f1ae09f03bef","date":1444778526,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      byte[] data = zookeeper.getData(path, null, null, true);\n      zookeeper.delete(path, -1, true);\n      return data;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      }\n      byte[] data = zookeeper.getData(path, null, null, true);\n      zookeeper.delete(path, -1, true);\n      return data;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":["94a5e240cfc05f5af141a42c7a36718fce82667f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7fd147f6ec145b926803480f62aa12e2aad258e","date":1465448343,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      byte[] data = zookeeper.getData(path, null, null, true);\n      zookeeper.delete(path, -1, true);\n      return data;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77c9633f72998c3815ffe21baa5f16d6e50f1e4a","date":1465453043,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      byte[] data = zookeeper.getData(path, null, null, true);\n      zookeeper.delete(path, -1, true);\n      return data;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   * \n   */\n  public byte[] remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      byte[] data = zookeeper.getData(path, null, null, true);\n      zookeeper.delete(path, -1, true);\n      return data;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    TimerContext time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + RESPONSE_PREFIX\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + RESPONSE_PREFIX\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + response_prefix\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + RESPONSE_PREFIX\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        log.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + RESPONSE_PREFIX\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        LOG.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"94a5e240cfc05f5af141a42c7a36718fce82667f","date":1555350816,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + RESPONSE_PREFIX\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n\n      try {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } catch (KeeperException.NoNodeException ignored) {\n        // we must handle the race case where the node no longer exists\n        log.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + RESPONSE_PREFIX\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n      if (zookeeper.exists(responsePath, true)) {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } else {\n        log.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef","9f45f67a018421da088ea39274f23ad5d339b97d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#remove(QueueEvent).mjava","sourceNew":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + RESPONSE_PREFIX\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n\n      try {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } catch (KeeperException.NoNodeException ignored) {\n        // we must handle the race case where the node no longer exists\n        log.info(\"Response ZK path: {} doesn't exist. Requestor may have disconnected from ZooKeeper\", responsePath);\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove the event and save the response into the other path.\n   */\n  public void remove(QueueEvent event) throws KeeperException,\n      InterruptedException {\n    Timer.Context time = stats.time(dir + \"_remove_event\");\n    try {\n      String path = event.getId();\n      String responsePath = dir + \"/\" + RESPONSE_PREFIX\n          + path.substring(path.lastIndexOf(\"-\") + 1);\n\n      try {\n        zookeeper.setData(responsePath, event.getBytes(), true);\n      } catch (KeeperException.NoNodeException ignored) {\n        // we must handle the race case where the node no longer exists\n        log.info(\"Response ZK path: \" + responsePath + \" doesn't exist.\"\n            + \"  Requestor may have disconnected from ZooKeeper\");\n      }\n      try {\n        zookeeper.delete(path, -1, true);\n      } catch (KeeperException.NoNodeException ignored) {\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"5de502b5478255493125e7e801411ba17a6682ec":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef","f7fd147f6ec145b926803480f62aa12e2aad258e"],"ad4957cde742defe6db19689abdc267c5d948066":["94a5e240cfc05f5af141a42c7a36718fce82667f"],"dcf05edaf8d44fa2294eff8746c9f1ae09f03bef":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef","77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94a5e240cfc05f5af141a42c7a36718fce82667f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["5de502b5478255493125e7e801411ba17a6682ec"]},"commit2Childs":{"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","727bb765ff2542275f6d31f67be18d7104bae148"],"5de502b5478255493125e7e801411ba17a6682ec":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["dcf05edaf8d44fa2294eff8746c9f1ae09f03bef"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dcf05edaf8d44fa2294eff8746c9f1ae09f03bef":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f7fd147f6ec145b926803480f62aa12e2aad258e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"94a5e240cfc05f5af141a42c7a36718fce82667f":["ad4957cde742defe6db19689abdc267c5d948066"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["94a5e240cfc05f5af141a42c7a36718fce82667f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}