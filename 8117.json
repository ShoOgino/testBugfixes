{"path":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getSubScorers(Scorer).mjava","commits":[{"id":"26ae065817023d886f3de2bc162e9e1ad71c7a02","date":1485164116,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getSubScorers(Scorer).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","sourceNew":"    private Map<Query, Scorer> getSubScorers(Scorer scorer) throws IOException {\n      Map<Query, Scorer> collected = new HashMap<>();\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          collected.put(scorer.getWeight().getQuery(), scorer);\n        }\n        collected.putAll(getSubScorers(child.child));\n      }\n      return collected;\n    }\n\n","sourceOld":"    public void setSubScorers(Scorer scorer, String relationship) {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d88f2d3d3107907144cec6455db31ccebd65475a","date":1485171003,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#setSubScorers(Scorer,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs.CountingCollector#getSubScorers(Scorer).mjava","sourceNew":"    public void setSubScorers(Scorer scorer, String relationship) {\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          setSubScorers(child.child, child.relationship);\n        }\n      }\n      subScorers.put(scorer.getWeight().getQuery(), scorer);\n    }\n\n","sourceOld":"    private Map<Query, Scorer> getSubScorers(Scorer scorer) throws IOException {\n      Map<Query, Scorer> collected = new HashMap<>();\n      for (ChildScorer child : scorer.getChildren()) {\n        if (scorer instanceof AssertingScorer || relationships.contains(child.relationship)) {\n          collected.put(scorer.getWeight().getQuery(), scorer);\n        }\n        collected.putAll(getSubScorers(child.child));\n      }\n      return collected;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d88f2d3d3107907144cec6455db31ccebd65475a":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d88f2d3d3107907144cec6455db31ccebd65475a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"d88f2d3d3107907144cec6455db31ccebd65475a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["d88f2d3d3107907144cec6455db31ccebd65475a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}