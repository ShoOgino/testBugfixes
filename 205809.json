{"path":"lucene/backwards/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"backwards/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set fileExtensions = new HashSet();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set fileExtensions = new HashSet();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set fileExtensions = new HashSet();\n    fileExtensions.add(\"fdt\");\n    fileExtensions.add(\"fdx\");\n    \n    Directory primaryDir = new MockRAMDirectory();\n    RAMDirectory secondaryDir = new MockRAMDirectory();\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    IndexWriter writer = new IndexWriter(fsd, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = writer.getReader();\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}