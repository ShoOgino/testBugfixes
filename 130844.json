{"path":"contrib/lucli/src/lucli/Lucli#Lucli(String[]).mjava","commits":[{"id":"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a","date":1107704112,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/lucli/Lucli#Lucli(String[]).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/Lucli#Lucli(String[]).mjava","sourceNew":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws ParseException, IOException {\n\t\tString line;\n\n\t\tfullPath = System.getProperty(\"user.home\") +  System.getProperty(\"file.separator\")\n\t\t\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\n\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tif (enableReadline)\n\t\t\torg.gnu.readline.Readline.load(ReadlineLibrary.GnuReadline  );\n\t\telse\n\t\t\torg.gnu.readline.Readline.load(ReadlineLibrary.PureJava  );\n\n\t\tReadline.initReadline(\"lucli\"); // init, set app name, read inputrc\n\n\n\n\t\tReadline.readHistoryFile(fullPath);\n\n\t\t// read history file, if available\n\n\t\tFile history = new File(\".rltest_history\");\n\t\ttry {\n\t\t\tif (history.exists())\n\t\t\t\tReadline.readHistoryFile(history.getName());\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Error reading history file!\");\n\t\t}\n\n\t\t// Set word break characters\n\t\ttry {\n\t\t\tReadline.setWordBreakCharacters(\" \\t;\");\n\t\t}\n\t\tcatch (UnsupportedEncodingException enc) {\n\t\t\tSystem.err.println(\"Could not set word break characters\");\n\t\t\tSystem.exit(0);\n\t\t}\n\n\t\t// set completer with list of words\n\n\t\tReadline.setCompleter(new Completer(commandMap));\n\n\t\t// main input loop\n\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = Readline.readline(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line);\n\t\t\t\t}\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tSystem.err.println(\"caught UnsupportedEncodingException\");\n\t\t\t\tbreak;\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\n\t\texit();\n\t}\n\n","sourceOld":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws ParseException, IOException {\n\t\tString line;\n\n\t\tfullPath = System.getProperty(\"user.home\") +  System.getProperty(\"file.separator\")\n\t\t\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\n\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tif (enableReadline)\n\t\t\torg.gnu.readline.Readline.load(ReadlineLibrary.GnuReadline  );\n\t\telse\n\t\t\torg.gnu.readline.Readline.load(ReadlineLibrary.PureJava  );\n\n\t\tReadline.initReadline(\"lucli\"); // init, set app name, read inputrc\n\n\n\n\t\tReadline.readHistoryFile(fullPath);\n\n\t\t// read history file, if available\n\n\t\tFile history = new File(\".rltest_history\");\n\t\ttry {\n\t\t\tif (history.exists())\n\t\t\t\tReadline.readHistoryFile(history.getName());\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Error reading history file!\");\n\t\t}\n\n\t\t// Set word break characters\n\t\ttry {\n\t\t\tReadline.setWordBreakCharacters(\" \\t;\");\n\t\t}\n\t\tcatch (UnsupportedEncodingException enc) {\n\t\t\tSystem.err.println(\"Could not set word break characters\");\n\t\t\tSystem.exit(0);\n\t\t}\n\n\t\t// set completer with list of words\n\n\t\tReadline.setCompleter(new Completer(commandMap));\n\n\t\t// main input loop\n\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = Readline.readline(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line);\n\t\t\t\t}\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tSystem.err.println(\"caught UnsupportedEncodingException\");\n\t\t\t\tbreak;\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\n\t\texit();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8c39a8ebbb8e79ce163cf3447d30ee883f32f60","date":1111621250,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/lucli/src/lucli/Lucli#Lucli(String[]).mjava","pathOld":"contrib/lucli/src/lucli/Lucli#Lucli(String[]).mjava","sourceNew":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws IOException {\n\t\tString line;\n\n\t\thistoryFile = System.getProperty(\"user.home\") + File.separator\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tConsoleReader cr = new ConsoleReader();\n\t\t//Readline.readHistoryFile(fullPath);\n\t\tcr.setHistory(new History(new File(historyFile)));\n\t\t\n\t\t// set completer with list of words\n    Completor[] comp = new Completor[]{\n            new SimpleCompletor(getCommandsAsArray()),\n            new FileNameCompletor()\n        };\n    cr.addCompletor (new ArgumentCompletor(comp));\n\n\t\t// main input loop\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = cr.readLine(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line, cr);\n\t\t\t\t}\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tenc.printStackTrace(System.err);\n\t\t\t} catch (ParseException pe) {\n\t\t\t\tpe.printStackTrace(System.err);\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws ParseException, IOException {\n\t\tString line;\n\n\t\tfullPath = System.getProperty(\"user.home\") +  System.getProperty(\"file.separator\")\n\t\t\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\n\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tif (enableReadline)\n\t\t\torg.gnu.readline.Readline.load(ReadlineLibrary.GnuReadline  );\n\t\telse\n\t\t\torg.gnu.readline.Readline.load(ReadlineLibrary.PureJava  );\n\n\t\tReadline.initReadline(\"lucli\"); // init, set app name, read inputrc\n\n\n\n\t\tReadline.readHistoryFile(fullPath);\n\n\t\t// read history file, if available\n\n\t\tFile history = new File(\".rltest_history\");\n\t\ttry {\n\t\t\tif (history.exists())\n\t\t\t\tReadline.readHistoryFile(history.getName());\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Error reading history file!\");\n\t\t}\n\n\t\t// Set word break characters\n\t\ttry {\n\t\t\tReadline.setWordBreakCharacters(\" \\t;\");\n\t\t}\n\t\tcatch (UnsupportedEncodingException enc) {\n\t\t\tSystem.err.println(\"Could not set word break characters\");\n\t\t\tSystem.exit(0);\n\t\t}\n\n\t\t// set completer with list of words\n\n\t\tReadline.setCompleter(new Completer(commandMap));\n\n\t\t// main input loop\n\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = Readline.readline(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line);\n\t\t\t\t}\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tSystem.err.println(\"caught UnsupportedEncodingException\");\n\t\t\t\tbreak;\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\n\t\texit();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4df60738409662c962b4ed3201d830cd3c14530","date":1114991851,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/Lucli#Lucli(String[]).mjava","pathOld":"contrib/lucli/src/lucli/Lucli#Lucli(String[]).mjava","sourceNew":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws IOException {\n\t\tString line;\n\n\t\thistoryFile = System.getProperty(\"user.home\") + File.separator\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tConsoleReader cr = new ConsoleReader();\n\t\t//Readline.readHistoryFile(fullPath);\n\t\tcr.setHistory(new History(new File(historyFile)));\n\t\t\n\t\t// set completer with list of words\n    Completor[] comp = new Completor[]{\n            new SimpleCompletor(getCommandsAsArray()),\n            new FileNameCompletor()\n        };\n    cr.addCompletor (new ArgumentCompletor(comp));\n\n\t\t// main input loop\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = cr.readLine(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line, cr);\n\t\t\t\t}\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tenc.printStackTrace(System.err);\n\t\t\t} catch (ParseException pe) {\n\t\t\t\tpe.printStackTrace(System.err);\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws IOException {\n\t\tString line;\n\n\t\thistoryFile = System.getProperty(\"user.home\") + File.separator\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tConsoleReader cr = new ConsoleReader();\n\t\t//Readline.readHistoryFile(fullPath);\n\t\tcr.setHistory(new History(new File(historyFile)));\n\t\t\n\t\t// set completer with list of words\n    Completor[] comp = new Completor[]{\n            new SimpleCompletor(getCommandsAsArray()),\n            new FileNameCompletor()\n        };\n    cr.addCompletor (new ArgumentCompletor(comp));\n\n\t\t// main input loop\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = cr.readLine(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line, cr);\n\t\t\t\t}\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tenc.printStackTrace(System.err);\n\t\t\t} catch (ParseException pe) {\n\t\t\t\tpe.printStackTrace(System.err);\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8c39a8ebbb8e79ce163cf3447d30ee883f32f60":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4df60738409662c962b4ed3201d830cd3c14530"],"a4df60738409662c962b4ed3201d830cd3c14530":["e8c39a8ebbb8e79ce163cf3447d30ee883f32f60"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"],"e8c39a8ebbb8e79ce163cf3447d30ee883f32f60":["a4df60738409662c962b4ed3201d830cd3c14530"],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["e8c39a8ebbb8e79ce163cf3447d30ee883f32f60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a4df60738409662c962b4ed3201d830cd3c14530":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}