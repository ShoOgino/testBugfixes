{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.MAX_VALUE;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","sourceOld":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.MAX_VALUE;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae0a2a645db6ae8e4aca176aefd05f400689d2f4","date":1463569628,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.POSITIVE_INFINITY;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","sourceOld":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.MAX_VALUE;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.POSITIVE_INFINITY;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","sourceOld":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.MAX_VALUE;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.POSITIVE_INFINITY;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","sourceOld":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.MAX_VALUE;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3212aa8c471e908af7dc95808a8f77018d198dc2","date":1502103679,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.POSITIVE_INFINITY;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","sourceOld":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.POSITIVE_INFINITY;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoCompositeMembershipShape#computeOutsideDistance(DistanceStyle,double,double,double).mjava","sourceNew":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.POSITIVE_INFINITY;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","sourceOld":"  @Override\n  public double computeOutsideDistance(final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n    if (isWithin(x,y,z))\n      return 0.0;\n    double distance = Double.POSITIVE_INFINITY;\n    for (GeoMembershipShape shape : shapes) {\n      final double normalDistance = shape.computeOutsideDistance(distanceStyle, x, y, z);\n      if (normalDistance < distance) {\n        distance = normalDistance;\n      }\n    }\n    return distance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["d470c8182e92b264680e34081b75e70a9f2b3c89","3212aa8c471e908af7dc95808a8f77018d198dc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3212aa8c471e908af7dc95808a8f77018d198dc2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["b4e444678504caf66a8060b1d514383aa4feac0c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b4e444678504caf66a8060b1d514383aa4feac0c","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3212aa8c471e908af7dc95808a8f77018d198dc2"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b4e444678504caf66a8060b1d514383aa4feac0c","ae0a2a645db6ae8e4aca176aefd05f400689d2f4"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"3212aa8c471e908af7dc95808a8f77018d198dc2":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4e444678504caf66a8060b1d514383aa4feac0c":["ae0a2a645db6ae8e4aca176aefd05f400689d2f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","3212aa8c471e908af7dc95808a8f77018d198dc2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}