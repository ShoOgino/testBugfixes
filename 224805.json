{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookup(BytesRef).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookup(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public abstract Object lookup(BytesRef indexedId);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookup(BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookup(BytesRef).mjava","sourceNew":"  public Object lookup(BytesRef indexedId) {\n    LogPtr entry;\n    TransactionLog lookupLog;\n\n    synchronized (this) {\n      entry = map.get(indexedId);\n      lookupLog = tlog;  // something found in \"map\" will always be in \"tlog\"\n      // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in map\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      if (entry == null && prevMap != null) {\n        entry = prevMap.get(indexedId);\n        // something found in prevMap will always be found in preMapLog (which could be tlog or prevTlog)\n        lookupLog = prevMapLog;\n        // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in prevMap\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n      if (entry == null && prevMap2 != null) {\n        entry = prevMap2.get(indexedId);\n        // something found in prevMap2 will always be found in preMapLog2 (which could be tlog or prevTlog)\n        lookupLog = prevMapLog2;\n        // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in prevMap2\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n\n      if (entry == null) {\n        return null;\n      }\n      lookupLog.incref();\n    }\n\n    try {\n      // now do the lookup outside of the sync block for concurrency\n      return lookupLog.lookup(entry.pointer);\n    } finally {\n      lookupLog.decref();\n    }\n\n  }\n\n","sourceOld":"  public abstract Object lookup(BytesRef indexedId);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookup(BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookup(BytesRef).mjava","sourceNew":"  public Object lookup(BytesRef indexedId) {\n    LogPtr entry;\n    TransactionLog lookupLog;\n\n    synchronized (this) {\n      entry = map.get(indexedId);\n      lookupLog = tlog;  // something found in \"map\" will always be in \"tlog\"\n      // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in map\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      if (entry == null && prevMap != null) {\n        entry = prevMap.get(indexedId);\n        // something found in prevMap will always be found in preMapLog (which could be tlog or prevTlog)\n        lookupLog = prevMapLog;\n        // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in prevMap\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n      if (entry == null && prevMap2 != null) {\n        entry = prevMap2.get(indexedId);\n        // something found in prevMap2 will always be found in preMapLog2 (which could be tlog or prevTlog)\n        lookupLog = prevMapLog2;\n        // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in prevMap2\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n\n      if (entry == null) {\n        return null;\n      }\n      lookupLog.incref();\n    }\n\n    try {\n      // now do the lookup outside of the sync block for concurrency\n      return lookupLog.lookup(entry.pointer);\n    } finally {\n      lookupLog.decref();\n    }\n\n  }\n\n","sourceOld":"  public abstract Object lookup(BytesRef indexedId);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookup(BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookup(BytesRef).mjava","sourceNew":"  public Object lookup(BytesRef indexedId) {\n    LogPtr entry;\n    TransactionLog lookupLog;\n\n    synchronized (this) {\n      entry = map.get(indexedId);\n      lookupLog = tlog;  // something found in \"map\" will always be in \"tlog\"\n      // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in map\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      if (entry == null && prevMap != null) {\n        entry = prevMap.get(indexedId);\n        // something found in prevMap will always be found in preMapLog (which could be tlog or prevTlog)\n        lookupLog = prevMapLog;\n        // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in prevMap\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n      if (entry == null && prevMap2 != null) {\n        entry = prevMap2.get(indexedId);\n        // something found in prevMap2 will always be found in preMapLog2 (which could be tlog or prevTlog)\n        lookupLog = prevMapLog2;\n        // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in prevMap2\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n\n      if (entry == null) {\n        return null;\n      }\n      lookupLog.incref();\n    }\n\n    try {\n      // now do the lookup outside of the sync block for concurrency\n      return lookupLog.lookup(entry.pointer);\n    } finally {\n      lookupLog.decref();\n    }\n\n  }\n\n","sourceOld":"  public abstract Object lookup(BytesRef indexedId);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookup(BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#lookup(BytesRef).mjava","sourceNew":"  public Object lookup(BytesRef indexedId) {\n    LogPtr entry;\n    TransactionLog lookupLog;\n\n    synchronized (this) {\n      entry = map.get(indexedId);\n      lookupLog = tlog;  // something found in \"map\" will always be in \"tlog\"\n      // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in map\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      if (entry == null && prevMap != null) {\n        entry = prevMap.get(indexedId);\n        // something found in prevMap will always be found in prevMapLog (which could be tlog or prevTlog)\n        lookupLog = prevMapLog;\n        // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in prevMap\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n      if (entry == null && prevMap2 != null) {\n        entry = prevMap2.get(indexedId);\n        // something found in prevMap2 will always be found in prevMapLog2 (which could be tlog or prevTlog)\n        lookupLog = prevMapLog2;\n        // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in prevMap2\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n\n      if (entry == null) {\n        return null;\n      }\n      lookupLog.incref();\n    }\n\n    try {\n      // now do the lookup outside of the sync block for concurrency\n      return lookupLog.lookup(entry.pointer);\n    } finally {\n      lookupLog.decref();\n    }\n\n  }\n\n","sourceOld":"  public Object lookup(BytesRef indexedId) {\n    LogPtr entry;\n    TransactionLog lookupLog;\n\n    synchronized (this) {\n      entry = map.get(indexedId);\n      lookupLog = tlog;  // something found in \"map\" will always be in \"tlog\"\n      // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in map\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      if (entry == null && prevMap != null) {\n        entry = prevMap.get(indexedId);\n        // something found in prevMap will always be found in preMapLog (which could be tlog or prevTlog)\n        lookupLog = prevMapLog;\n        // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in prevMap\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n      if (entry == null && prevMap2 != null) {\n        entry = prevMap2.get(indexedId);\n        // something found in prevMap2 will always be found in preMapLog2 (which could be tlog or prevTlog)\n        lookupLog = prevMapLog2;\n        // SolrCore.verbose(\"TLOG: lookup: for id \",indexedId.utf8ToString(),\"in prevMap2\",System.identityHashCode(map),\"got\",entry,\"lookupLog=\",lookupLog);\n      }\n\n      if (entry == null) {\n        return null;\n      }\n      lookupLog.incref();\n    }\n\n    try {\n      // now do the lookup outside of the sync block for concurrency\n      return lookupLog.lookup(entry.pointer);\n    } finally {\n      lookupLog.decref();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86290366cefc1b9d4eced13b430858c4a4c0421d"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["86290366cefc1b9d4eced13b430858c4a4c0421d","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}