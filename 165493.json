{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy}, for the index in <code>d</code>,\n   * first creating it if it does not already exist.  Text\n   * will be analyzed with <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, deletionPolicy, mfl.getLimit(), null, null);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy}, for the index in <code>d</code>,\n   * first creating it if it does not already exist.  Text\n   * will be analyzed with <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, deletionPolicy, mfl.getLimit(), null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: constructs an IndexWriter with a custom {@link\n   * IndexDeletionPolicy}, for the index in <code>d</code>,\n   * first creating it if it does not already exist.  Text\n   * will be analyzed with <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, deletionPolicy, mfl.getLimit(), null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}