{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter#testMalformed().mjava","commits":[{"id":"17267f9d72c1fe67dc0ee18c3871fe147bfc17f2","date":1341920769,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter#testMalformed().mjava","pathOld":"/dev/null","sourceNew":"  public void testMalformed() throws IOException {\n    // We can't iterate c here, so emit as it is\n    assertAnalyzesTo(keywordAnalyzer, \"abcところゝゝゝゝ\", new String[]{\"abcところcところ\"});\n\n    // We can't iterate c (with dakuten change) here, so emit it as-is\n    assertAnalyzesTo(keywordAnalyzer, \"abcところゞゝゝゝ\", new String[]{\"abcところcところ\"});\n\n    // We can't iterate before beginning of stream, so emit characters as-is\n    assertAnalyzesTo(keywordAnalyzer, \"ところゞゝゝゞゝゞ\", new String[]{\"ところどころゞゝゞ\"});\n\n    // We can't iterate an iteration mark only, so emit as-is\n    assertAnalyzesTo(keywordAnalyzer, \"々\", new String[]{\"々\"});\n    assertAnalyzesTo(keywordAnalyzer, \"ゞ\", new String[]{\"ゞ\"});\n    assertAnalyzesTo(keywordAnalyzer, \"ゞゝ\", new String[]{\"ゞゝ\"});\n\n    // We can't iterate a full stop punctuation mark (because we use it as a flush marker)\n    assertAnalyzesTo(keywordAnalyzer, \"。ゝ\", new String[]{\"。ゝ\"});\n    assertAnalyzesTo(keywordAnalyzer, \"。。ゝゝ\", new String[]{\"。。ゝゝ\"});\n\n    // We can iterate other punctuation marks\n    assertAnalyzesTo(keywordAnalyzer, \"？ゝ\", new String[]{\"？？\"});\n\n    // We can not get a dakuten variant of ぽ -- this is also a corner case test for inside()\n    assertAnalyzesTo(keywordAnalyzer, \"ねやぽゞつむぴ\", new String[]{\"ねやぽぽつむぴ\"});\n    assertAnalyzesTo(keywordAnalyzer, \"ねやぽゝつむぴ\", new String[]{\"ねやぽぽつむぴ\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter#testMalformed().mjava","pathOld":"/dev/null","sourceNew":"  public void testMalformed() throws IOException {\n    // We can't iterate c here, so emit as it is\n    assertAnalyzesTo(keywordAnalyzer, \"abcところゝゝゝゝ\", new String[]{\"abcところcところ\"});\n\n    // We can't iterate c (with dakuten change) here, so emit it as-is\n    assertAnalyzesTo(keywordAnalyzer, \"abcところゞゝゝゝ\", new String[]{\"abcところcところ\"});\n\n    // We can't iterate before beginning of stream, so emit characters as-is\n    assertAnalyzesTo(keywordAnalyzer, \"ところゞゝゝゞゝゞ\", new String[]{\"ところどころゞゝゞ\"});\n\n    // We can't iterate an iteration mark only, so emit as-is\n    assertAnalyzesTo(keywordAnalyzer, \"々\", new String[]{\"々\"});\n    assertAnalyzesTo(keywordAnalyzer, \"ゞ\", new String[]{\"ゞ\"});\n    assertAnalyzesTo(keywordAnalyzer, \"ゞゝ\", new String[]{\"ゞゝ\"});\n\n    // We can't iterate a full stop punctuation mark (because we use it as a flush marker)\n    assertAnalyzesTo(keywordAnalyzer, \"。ゝ\", new String[]{\"。ゝ\"});\n    assertAnalyzesTo(keywordAnalyzer, \"。。ゝゝ\", new String[]{\"。。ゝゝ\"});\n\n    // We can iterate other punctuation marks\n    assertAnalyzesTo(keywordAnalyzer, \"？ゝ\", new String[]{\"？？\"});\n\n    // We can not get a dakuten variant of ぽ -- this is also a corner case test for inside()\n    assertAnalyzesTo(keywordAnalyzer, \"ねやぽゞつむぴ\", new String[]{\"ねやぽぽつむぴ\"});\n    assertAnalyzesTo(keywordAnalyzer, \"ねやぽゝつむぴ\", new String[]{\"ねやぽぽつむぴ\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter#testMalformed().mjava","pathOld":"/dev/null","sourceNew":"  public void testMalformed() throws IOException {\n    // We can't iterate c here, so emit as it is\n    assertAnalyzesTo(keywordAnalyzer, \"abcところゝゝゝゝ\", new String[]{\"abcところcところ\"});\n\n    // We can't iterate c (with dakuten change) here, so emit it as-is\n    assertAnalyzesTo(keywordAnalyzer, \"abcところゞゝゝゝ\", new String[]{\"abcところcところ\"});\n\n    // We can't iterate before beginning of stream, so emit characters as-is\n    assertAnalyzesTo(keywordAnalyzer, \"ところゞゝゝゞゝゞ\", new String[]{\"ところどころゞゝゞ\"});\n\n    // We can't iterate an iteration mark only, so emit as-is\n    assertAnalyzesTo(keywordAnalyzer, \"々\", new String[]{\"々\"});\n    assertAnalyzesTo(keywordAnalyzer, \"ゞ\", new String[]{\"ゞ\"});\n    assertAnalyzesTo(keywordAnalyzer, \"ゞゝ\", new String[]{\"ゞゝ\"});\n\n    // We can't iterate a full stop punctuation mark (because we use it as a flush marker)\n    assertAnalyzesTo(keywordAnalyzer, \"。ゝ\", new String[]{\"。ゝ\"});\n    assertAnalyzesTo(keywordAnalyzer, \"。。ゝゝ\", new String[]{\"。。ゝゝ\"});\n\n    // We can iterate other punctuation marks\n    assertAnalyzesTo(keywordAnalyzer, \"？ゝ\", new String[]{\"？？\"});\n\n    // We can not get a dakuten variant of ぽ -- this is also a corner case test for inside()\n    assertAnalyzesTo(keywordAnalyzer, \"ねやぽゞつむぴ\", new String[]{\"ねやぽぽつむぴ\"});\n    assertAnalyzesTo(keywordAnalyzer, \"ねやぽゝつむぴ\", new String[]{\"ねやぽぽつむぴ\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17267f9d72c1fe67dc0ee18c3871fe147bfc17f2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17267f9d72c1fe67dc0ee18c3871fe147bfc17f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17267f9d72c1fe67dc0ee18c3871fe147bfc17f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17267f9d72c1fe67dc0ee18c3871fe147bfc17f2"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","17267f9d72c1fe67dc0ee18c3871fe147bfc17f2"],"17267f9d72c1fe67dc0ee18c3871fe147bfc17f2":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}