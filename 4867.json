{"path":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","sourceNew":"    /*(non-Javadoc) @see org.apache.lucene.search.Scorer#score() */\n    @Override\n    public float score() throws IOException {\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","sourceOld":"    /*(non-Javadoc) @see org.apache.lucene.search.Scorer#score() */\n    @Override\n    public float score() throws IOException {\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","sourceNew":"    /*(non-Javadoc) @see org.apache.lucene.search.Scorer#score() */\n    @Override\n    public float score() throws IOException {\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","sourceOld":"    /*(non-Javadoc) @see org.apache.lucene.search.Scorer#score() */\n    @Override\n    public float score() throws IOException {\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","sourceNew":"    /*(non-Javadoc) @see org.apache.lucene.search.Scorer#score() */\n    @Override\n    public float score() throws IOException {\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","sourceOld":"    /*(non-Javadoc) @see org.apache.lucene.search.Scorer#score() */\n    @Override\n    public float score() throws IOException {\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35425d74dd6cebe2e074b05228429765e67d1b35","date":1425216299,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","sourceNew":"    @Override\n    public float score() throws IOException {\n      // lazily advance to current doc.\n      int doc = docID();\n      if (doc > valSrcDocID) {\n        for (Scorer valSrcScorer : valSrcScorers) {\n          valSrcScorer.advance(doc);\n        }\n        valSrcDocID = doc;\n      }\n      // TODO: this thing technically takes any Query, so what about when subs don't match?\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","sourceOld":"    /*(non-Javadoc) @see org.apache.lucene.search.Scorer#score() */\n    @Override\n    public float score() throws IOException {\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","sourceNew":"    @Override\n    public float score() throws IOException {\n      // lazily advance to current doc.\n      int doc = docID();\n      if (doc > valSrcDocID) {\n        for (Scorer valSrcScorer : valSrcScorers) {\n          valSrcScorer.advance(doc);\n        }\n        valSrcDocID = doc;\n      }\n      // TODO: this thing technically takes any Query, so what about when subs don't match?\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","sourceOld":"    /*(non-Javadoc) @see org.apache.lucene.search.Scorer#score() */\n    @Override\n    public float score() throws IOException {\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","sourceNew":"    @Override\n    public float score() throws IOException {\n      // lazily advance to current doc.\n      int doc = docID();\n      if (doc > valSrcDocID) {\n        for (Scorer valSrcScorer : valSrcScorers) {\n          valSrcScorer.iterator().advance(doc);\n        }\n        valSrcDocID = doc;\n      }\n      // TODO: this thing technically takes any Query, so what about when subs don't match?\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","sourceOld":"    @Override\n    public float score() throws IOException {\n      // lazily advance to current doc.\n      int doc = docID();\n      if (doc > valSrcDocID) {\n        for (Scorer valSrcScorer : valSrcScorers) {\n          valSrcScorer.advance(doc);\n        }\n        valSrcDocID = doc;\n      }\n      // TODO: this thing technically takes any Query, so what about when subs don't match?\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomScorer#score().mjava","sourceNew":null,"sourceOld":"    @Override\n    public float score() throws IOException {\n      // lazily advance to current doc.\n      int doc = docID();\n      if (doc > valSrcDocID) {\n        for (Scorer valSrcScorer : valSrcScorers) {\n          valSrcScorer.iterator().advance(doc);\n        }\n        valSrcDocID = doc;\n      }\n      // TODO: this thing technically takes any Query, so what about when subs don't match?\n      for (int i = 0; i < valSrcScorers.length; i++) {\n        vScores[i] = valSrcScorers[i].score();\n      }\n      return qWeight * provider.customScore(subQueryScorer.docID(), subQueryScorer.score(), vScores);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35425d74dd6cebe2e074b05228429765e67d1b35":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["19275ba31e621f6da1b83bf13af75233876fd3d4","35425d74dd6cebe2e074b05228429765e67d1b35"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a82662cae660e76ded4de1e9b451633e523d83e1":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["35425d74dd6cebe2e074b05228429765e67d1b35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"35425d74dd6cebe2e074b05228429765e67d1b35":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["35425d74dd6cebe2e074b05228429765e67d1b35","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a82662cae660e76ded4de1e9b451633e523d83e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}