{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","commits":[{"id":"19db42d0b541c39fee97429b55d2cf8755d31856","date":1428461231,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    try {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n      fail(\"didn't get expected exception\");\n    } catch (FakeIOException expected) {\n      // ok\n    } finally {\n      fail.clearDoFail();\n    }\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","sourceNew":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    try {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n      fail(\"didn't get expected exception\");\n    } catch (FakeIOException expected) {\n      // ok\n    } finally {\n      fail.clearDoFail();\n    }\n    \n    dir.close();\n  }\n\n","bugFix":["19db42d0b541c39fee97429b55d2cf8755d31856"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","sourceNew":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","sourceNew":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","sourceNew":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder();\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","sourceNew":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail && callStackContainsAnyOf(\"close\")) {\n          throw new FakeIOException();\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseFieldInfoFormatTestCase#testExceptionOnCloseOutput().mjava","sourceNew":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (doFail && callStackContainsAnyOf(\"close\")) {\n          throw new FakeIOException();\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * Test field infos write that hits exception on close.\n   * make sure we get our exception back, no file handle leaks, etc. \n   */\n  public void testExceptionOnCloseOutput() throws Exception {\n    Failure fail = new Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {\n          if (doFail && \"close\".equals(e.getMethodName())) {\n            throw new FakeIOException();\n          }\n        }\n      }\n    };\n    \n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(fail);\n    Codec codec = getCodec();\n    SegmentInfo segmentInfo = newSegmentInfo(dir, \"_123\");\n    FieldInfos.Builder builder = new FieldInfos.Builder(new FieldInfos.FieldNumbers(null));\n    FieldInfo fi = builder.getOrAdd(\"field\");\n    fi.setIndexOptions(TextField.TYPE_STORED.indexOptions());\n    addAttributes(fi);\n    FieldInfos infos = builder.finish();\n    \n    fail.setDoFail();\n    expectThrows(FakeIOException.class, () -> {\n      codec.fieldInfosFormat().write(dir, segmentInfo, \"\", infos, IOContext.DEFAULT);\n    });\n    fail.clearDoFail();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["05fe562aa248790944d43cdd478f512572835ba0","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["19db42d0b541c39fee97429b55d2cf8755d31856"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"19db42d0b541c39fee97429b55d2cf8755d31856":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["05fe562aa248790944d43cdd478f512572835ba0","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19db42d0b541c39fee97429b55d2cf8755d31856"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"05fe562aa248790944d43cdd478f512572835ba0":["b70042a8a492f7054d480ccdd2be9796510d4327","b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["b70042a8a492f7054d480ccdd2be9796510d4327","2916966cc9815e973c01452a0d76c98c5e0d0926","f592209545c71895260367152601e9200399776d","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"19db42d0b541c39fee97429b55d2cf8755d31856":["05fe562aa248790944d43cdd478f512572835ba0"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}