{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testQueryPerf().mjava","commits":[{"id":"6a1954589d18b0cbcdcf52491997b4b10858f2c4","date":1572243446,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testQueryPerf().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Monster(\"Only useful to verify the performance of serialization+ deserialization\")\n  // ant -Dtestcase=SolrExampleBinaryTest -Dtests.method=testQueryPerf -Dtests.monster=true test\n  public void testQueryPerf() throws Exception {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    ArrayList<SolrInputDocument> docs = new ArrayList<>();\n    int id = 0;\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"apple\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 12, \"price\", .017));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 13, \"price\", 16.04));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"samsung\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 14, \"price\", 12.34));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 24, \"price\", 51.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"nokia\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 28, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 32));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"htc\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 31, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"apple\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 36));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 37, \"price\", 1.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 38, \"price\", 47.98));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", true, \"popularity\", -38));\n    docs.add(makeTestDoc(\"id\", id++, \"cat\", \"b\")); // something not matching all fields\n    client.add(docs);\n    client.commit();\n    //this sets the cache\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\").setRows(20));\n\n    RTimer timer = new RTimer();\n    int count = 10000;\n    log.info(\"Started perf test....\");\n    for(int i=0;i< count; i++){\n      rsp = getSolrClient().query(new SolrQuery(\"*:*\").setRows(20));\n    }\n\n    log.info(\"time taken to execute {} queries is {} ms\",count, timer.getTime());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testQueryPerf().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testQueryPerf().mjava","sourceNew":"  @Test\n  @Monster(\"Only useful to verify the performance of serialization+ deserialization\")\n  // ant -Dtestcase=SolrExampleBinaryTest -Dtests.method=testQueryPerf -Dtests.monster=true test\n  public void testQueryPerf() throws Exception {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    ArrayList<SolrInputDocument> docs = new ArrayList<>();\n    int id = 0;\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"apple\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 12, \"price\", .017));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 13, \"price\", 16.04));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"samsung\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 14, \"price\", 12.34));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 24, \"price\", 51.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"nokia\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 28, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 32));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"htc\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 31, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"apple\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 36));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 37, \"price\", 1.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 38, \"price\", 47.98));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", true, \"popularity\", -38));\n    docs.add(makeTestDoc(\"id\", id++, \"cat\", \"b\")); // something not matching all fields\n    client.add(docs);\n    client.commit();\n    //this sets the cache\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\").setRows(20));\n\n    RTimer timer = new RTimer();\n    int count = 10000;\n    log.info(\"Started perf test....\");\n    for(int i=0;i< count; i++){\n      rsp = getSolrClient().query(new SolrQuery(\"*:*\").setRows(20));\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(\"time taken to execute {} queries is {} ms\", count, timer.getTime());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @Monster(\"Only useful to verify the performance of serialization+ deserialization\")\n  // ant -Dtestcase=SolrExampleBinaryTest -Dtests.method=testQueryPerf -Dtests.monster=true test\n  public void testQueryPerf() throws Exception {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    ArrayList<SolrInputDocument> docs = new ArrayList<>();\n    int id = 0;\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"apple\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 12, \"price\", .017));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 13, \"price\", 16.04));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"samsung\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 14, \"price\", 12.34));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 24, \"price\", 51.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"aaa\", \"manu\", \"nokia\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 28, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"a\", \"inStock\", false, \"popularity\", 32));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"htc\", \"cat\", \"a\", \"inStock\", true, \"popularity\", 31, \"price\", 131.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"apple\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 36));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"lg\", \"cat\", \"b\", \"inStock\", true, \"popularity\", 37, \"price\", 1.39));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", false, \"popularity\", 38, \"price\", 47.98));\n    docs.add(makeTestDoc(\"id\", id++, \"features\", \"bbb\", \"manu\", \"ztc\", \"cat\", \"b\", \"inStock\", true, \"popularity\", -38));\n    docs.add(makeTestDoc(\"id\", id++, \"cat\", \"b\")); // something not matching all fields\n    client.add(docs);\n    client.commit();\n    //this sets the cache\n    QueryResponse rsp = getSolrClient().query(new SolrQuery(\"*:*\").setRows(20));\n\n    RTimer timer = new RTimer();\n    int count = 10000;\n    log.info(\"Started perf test....\");\n    for(int i=0;i< count; i++){\n      rsp = getSolrClient().query(new SolrQuery(\"*:*\").setRows(20));\n    }\n\n    log.info(\"time taken to execute {} queries is {} ms\",count, timer.getTime());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["6a1954589d18b0cbcdcf52491997b4b10858f2c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a1954589d18b0cbcdcf52491997b4b10858f2c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a1954589d18b0cbcdcf52491997b4b10858f2c4"],"6a1954589d18b0cbcdcf52491997b4b10858f2c4":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}