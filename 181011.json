{"path":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3859e567816d5987602f2a7ae2469fcdf17f745e","date":1329895924,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    IndexSchema schema = parser.getReq().getSchema();\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0, schema);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i, schema);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is\n   * 1, one range for every dimension, AND'd together by a Boolean\n   *\n   * @param parser  The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    String[] pointStrs = parseCommaSeparatedList(options.pointStr, dimension);\n    double[] point = new double[dimension];\n    try {\n      for (int i = 0; i < pointStrs.length; i++) {\n        point[i] = Double.parseDouble(pointStrs[i]);\n      }\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    IndexSchema schema = parser.getReq().getSchema();\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0, schema);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      return subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double[] ur = vectorBoxCorner(point, null, options.distance, true);\n      double[] ll = vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i, schema);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n      }\n      return tmp;\n    }\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = ParseUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidShapeException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    IndexSchema schema = parser.getReq().getSchema();\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0, schema);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i, schema);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"167133992e7b384ce97f83ddb1dd2ddd09daf7aa","date":1420315776,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is\n   * 1, one range for every dimension, AND'd together by a Boolean\n   *\n   * @param parser  The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    String[] pointStrs = parseCommaSeparatedList(options.pointStr, dimension);\n    double[] point = new double[dimension];\n    try {\n      for (int i = 0; i < pointStrs.length; i++) {\n        point[i] = Double.parseDouble(pointStrs[i]);\n      }\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    IndexSchema schema = parser.getReq().getSchema();\n\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0, schema);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      return subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double[] ur = vectorBoxCorner(point, null, options.distance, true);\n      double[] ll = vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i, schema);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n      }\n      return tmp;\n    }\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is\n   * 1, one range for every dimension, AND'd together by a Boolean\n   *\n   * @param parser  The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    String[] pointStrs = parseCommaSeparatedList(options.pointStr, dimension);\n    double[] point = new double[dimension];\n    try {\n      for (int i = 0; i < pointStrs.length; i++) {\n        point[i] = Double.parseDouble(pointStrs[i]);\n      }\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    IndexSchema schema = parser.getReq().getSchema();\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0, schema);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      return subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double[] ur = vectorBoxCorner(point, null, options.distance, true);\n      double[] ll = vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i, schema);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n      }\n      return tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is\n   * 1, one range for every dimension, AND'd together by a Boolean\n   *\n   * @param parser  The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    String[] pointStrs = parseCommaSeparatedList(options.pointStr, dimension);\n    double[] point = new double[dimension];\n    try {\n      for (int i = 0; i < pointStrs.length; i++) {\n        point[i] = Double.parseDouble(pointStrs[i]);\n      }\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    IndexSchema schema = parser.getReq().getSchema();\n\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0, schema);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      return subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery.Builder tmp = new BooleanQuery.Builder();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double[] ur = vectorBoxCorner(point, null, options.distance, true);\n      double[] ll = vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i, schema);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n      }\n      return tmp.build();\n    }\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is\n   * 1, one range for every dimension, AND'd together by a Boolean\n   *\n   * @param parser  The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  @Override\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    String[] pointStrs = parseCommaSeparatedList(options.pointStr, dimension);\n    double[] point = new double[dimension];\n    try {\n      for (int i = 0; i < pointStrs.length; i++) {\n        point[i] = Double.parseDouble(pointStrs[i]);\n      }\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    IndexSchema schema = parser.getReq().getSchema();\n\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0, schema);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      return subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double[] ur = vectorBoxCorner(point, null, options.distance, true);\n      double[] ll = vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i, schema);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n      }\n      return tmp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["e47768b261c28e7e6032060e8331475c81057953","7530de27b87b961b51f01bd1299b7004d46e8823"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"08970e5b8411182a29412c177eff67ec1110095b":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"7530de27b87b961b51f01bd1299b7004d46e8823":["e47768b261c28e7e6032060e8331475c81057953"],"e47768b261c28e7e6032060e8331475c81057953":["c26f00b574427b55127e869b935845554afde1fa","3859e567816d5987602f2a7ae2469fcdf17f745e"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c26f00b574427b55127e869b935845554afde1fa":["e47768b261c28e7e6032060e8331475c81057953","3859e567816d5987602f2a7ae2469fcdf17f745e"],"08970e5b8411182a29412c177eff67ec1110095b":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"e47768b261c28e7e6032060e8331475c81057953":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","08970e5b8411182a29412c177eff67ec1110095b"],"3859e567816d5987602f2a7ae2469fcdf17f745e":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}