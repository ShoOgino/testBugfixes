{"path":"src/java/org/apache/lucene/index/DirectoryReader#numDocs().mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#numDocs().mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#numDocs().mjava","sourceNew":"  public synchronized int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    if (numDocs == -1) {        // check cache\n      int n = 0;                // cache miss--recompute\n      for (int i = 0; i < subReaders.length; i++)\n        n += subReaders[i].numDocs();      // sum from readers\n      numDocs = n;\n    }\n    return numDocs;\n  }\n\n","sourceOld":"  public synchronized int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    if (numDocs == -1) {        // check cache\n      int n = 0;                // cache miss--recompute\n      for (int i = 0; i < subReaders.length; i++)\n        n += subReaders[i].numDocs();      // sum from readers\n      numDocs = n;\n    }\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#numDocs().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#numDocs().mjava","sourceNew":"  @Override\n  public synchronized int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    if (numDocs == -1) {        // check cache\n      int n = 0;                // cache miss--recompute\n      for (int i = 0; i < subReaders.length; i++)\n        n += subReaders[i].numDocs();      // sum from readers\n      numDocs = n;\n    }\n    return numDocs;\n  }\n\n","sourceOld":"  public synchronized int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    if (numDocs == -1) {        // check cache\n      int n = 0;                // cache miss--recompute\n      for (int i = 0; i < subReaders.length; i++)\n        n += subReaders[i].numDocs();      // sum from readers\n      numDocs = n;\n    }\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ee41a444cd904f922cebbaa1d52c166447e46d7","date":1260989504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#numDocs().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#numDocs().mjava","sourceNew":"  @Override\n  public int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n\n    // NOTE: multiple threads may wind up init'ing\n    // numDocs... but that's harmless\n    if (numDocs == -1) {        // check cache\n      int n = 0;                // cache miss--recompute\n      for (int i = 0; i < subReaders.length; i++)\n        n += subReaders[i].numDocs();      // sum from readers\n      numDocs = n;\n    }\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public synchronized int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    if (numDocs == -1) {        // check cache\n      int n = 0;                // cache miss--recompute\n      for (int i = 0; i < subReaders.length; i++)\n        n += subReaders[i].numDocs();      // sum from readers\n      numDocs = n;\n    }\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#numDocs().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#numDocs().mjava","sourceNew":"  @Override\n  public int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n\n    // NOTE: multiple threads may wind up init'ing\n    // numDocs... but that's harmless\n    if (numDocs == -1) {        // check cache\n      int n = 0;                // cache miss--recompute\n      for (int i = 0; i < subReaders.length; i++)\n        n += subReaders[i].numDocs();      // sum from readers\n      numDocs = n;\n    }\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n\n    // NOTE: multiple threads may wind up init'ing\n    // numDocs... but that's harmless\n    if (numDocs == -1) {        // check cache\n      int n = 0;                // cache miss--recompute\n      for (int i = 0; i < subReaders.length; i++)\n        n += subReaders[i].numDocs();      // sum from readers\n      numDocs = n;\n    }\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ee41a444cd904f922cebbaa1d52c166447e46d7":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1ee41a444cd904f922cebbaa1d52c166447e46d7"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"8a9e385641d717e641408d8fbbc62be8fc766357":["1ee41a444cd904f922cebbaa1d52c166447e46d7"],"1ee41a444cd904f922cebbaa1d52c166447e46d7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}