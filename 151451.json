{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,TermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, PrefixCodedTermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, TermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (DocTermState) termState, skipDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, PrefixCodedTermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, PrefixCodedTermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,PrefixCodedTermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, PrefixCodedTermState termState, Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.omitTermFreqAndPositions) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, skipDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}