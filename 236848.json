{"path":"src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (sf1.getType() != sf2.getType()) return false;\n      if (sf1.getReverse() != sf2.getReverse()) return false;\n      if (!isEqual(sf1.getField(),sf2.getField())) return false;\n      if (!isEqual(sf1.getLocale(), sf2.getLocale())) return false;\n      if (!isEqual(sf1.getFactory(), sf2.getFactory())) return false;\n      // NOTE: the factory must be identical!!! use singletons!\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e5928bf4822eca4fca645e56e54d0f7398f3b0","date":1266601245,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","pathOld":"src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","sourceNew":"  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (sf1.getType() != sf2.getType()) return false;\n      if (sf1.getReverse() != sf2.getReverse()) return false;\n      if (!isEqual(sf1.getField(),sf2.getField())) return false;\n      if (!isEqual(sf1.getLocale(), sf2.getLocale())) return false;\n      if (!isEqual(sf1.getFactory(), sf2.getFactory())) return false;\n      // NOTE: the factory must be identical!!! use singletons!\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","pathOld":"src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","sourceNew":"  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66e5928bf4822eca4fca645e56e54d0f7398f3b0":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["66e5928bf4822eca4fca645e56e54d0f7398f3b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"66e5928bf4822eca4fca645e56e54d0f7398f3b0":["ad94625fb8d088209f46650c8097196fec67f00c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["66e5928bf4822eca4fca645e56e54d0f7398f3b0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}