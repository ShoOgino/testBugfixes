{"path":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellCheckComponent.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dce942471c4bf932122bcf2dd51deaa85c096120","date":1343567599,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  @Ignore(\"This test fails in most cases with Java 8+, looks like it depends on order of some HashSet/HashMap whatever\")\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9fc1affb2e2c2d4a424dc5ac14eee602c0157aa8","date":1343570656,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assumeFalse(\"This test fails in most cases with Java 8+, looks like it depends on order of some HashSet/HashMap whatever\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"This test fails in most cases with Java 8+, looks like it depends on order of some HashSet/HashMap whatever\")\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":null,"bugIntro":["193ea6c90aa0b2ce1fe469e36e6b950432bfca28"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"193ea6c90aa0b2ce1fe469e36e6b950432bfca28","date":1343662811,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assumeFalse(\"This test fails in most cases with Java 8+, looks like it depends on order of some HashSet/HashMap whatever\", Constants.JRE_IS_MINIMUM_JAVA8);\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":["9fc1affb2e2c2d4a424dc5ac14eee602c0157aa8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fae674af95d70b74b32add96ef03f3d021cac48a","date":1527054159,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testPerDictionary().mjava","sourceNew":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \"perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \"perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerDictionary() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", SpellingParams.SPELLCHECK_BUILD, \"true\", \"q\",\"documemt\"\n        , SpellingParams.SPELLCHECK_DICT, \"perDict\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.foo\", \"bar\", SpellingParams.SPELLCHECK_PREFIX + \".perDict.bar\", \"foo\")\n       ,\"/spellcheck/suggestions/bar=={'numFound':1, 'startOffset':0, 'endOffset':1, 'suggestion':['foo']}\"\n       ,\"/spellcheck/suggestions/foo=={'numFound':1, 'startOffset':2, 'endOffset':3, 'suggestion':['bar']}\"        \n    );\n  }\n\n","bugFix":["6a7a175b7f0ec01b79c2c142563b69cbae9c1490"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"dce942471c4bf932122bcf2dd51deaa85c096120":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fae674af95d70b74b32add96ef03f3d021cac48a":["193ea6c90aa0b2ce1fe469e36e6b950432bfca28"],"193ea6c90aa0b2ce1fe469e36e6b950432bfca28":["9fc1affb2e2c2d4a424dc5ac14eee602c0157aa8"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fc1affb2e2c2d4a424dc5ac14eee602c0157aa8":["dce942471c4bf932122bcf2dd51deaa85c096120"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fae674af95d70b74b32add96ef03f3d021cac48a"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"dce942471c4bf932122bcf2dd51deaa85c096120":["9fc1affb2e2c2d4a424dc5ac14eee602c0157aa8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dce942471c4bf932122bcf2dd51deaa85c096120"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"fae674af95d70b74b32add96ef03f3d021cac48a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"193ea6c90aa0b2ce1fe469e36e6b950432bfca28":["fae674af95d70b74b32add96ef03f3d021cac48a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9fc1affb2e2c2d4a424dc5ac14eee602c0157aa8":["193ea6c90aa0b2ce1fe469e36e6b950432bfca28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}