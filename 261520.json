{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#ecfToENU(double,double,double,double,double,double,double[]).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#ecfToENU(double,double,double,double,double,double,double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#ecfToENU(double,double,double,double,double,double,double[]).mjava","sourceNew":"  /**\n   * Convert from Earth-Centered-Fixed to Easting, Northing, Up Right Hand System\n   * @param x ECF X coordinate (in meters)\n   * @param y ECF Y coordinate (in meters)\n   * @param z ECF Z coordinate (in meters)\n   * @param centerLon ENU origin longitude (in degrees)\n   * @param centerLat ENU origin latitude (in degrees)\n   * @param centerAlt ENU altitude (in meters)\n   * @param enu reusable enu result\n   * @return Easting, Northing, Up coordinate\n   */\n  public static double[] ecfToENU(double x, double y, double z, final double centerLon,\n                                  final double centerLat, final double centerAlt, double[] enu) {\n    if (enu == null) {\n      enu = new double[3];\n    }\n\n    // create rotation matrix and rotate to enu orientation\n    final double[][] phi = createPhiTransform(centerLon, centerLat, null);\n\n    // convert origin to ENU\n    final double[] originECF = llaToECF(centerLon, centerLat, centerAlt, null);\n    final double[] originENU = new double[3];\n    originENU[0] = ((phi[0][0] * originECF[0]) + (phi[0][1] * originECF[1]) + (phi[0][2] * originECF[2]));\n    originENU[1] = ((phi[1][0] * originECF[0]) + (phi[1][1] * originECF[1]) + (phi[1][2] * originECF[2]));\n    originENU[2] = ((phi[2][0] * originECF[0]) + (phi[2][1] * originECF[1]) + (phi[2][2] * originECF[2]));\n\n    // rotate then translate\n    enu[0] = ((phi[0][0] * x) + (phi[0][1] * y) + (phi[0][2] * z)) - originENU[0];\n    enu[1] = ((phi[1][0] * x) + (phi[1][1] * y) + (phi[1][2] * z)) - originENU[1];\n    enu[2] = ((phi[2][0] * x) + (phi[2][1] * y) + (phi[2][2] * z)) - originENU[2];\n\n    return enu;\n  }\n\n","sourceOld":"  /**\n   * Convert from Earth-Centered-Fixed to Easting, Northing, Up Right Hand System\n   * @param x ECF X coordinate (in meters)\n   * @param y ECF Y coordinate (in meters)\n   * @param z ECF Z coordinate (in meters)\n   * @param centerLon ENU origin longitude (in degrees)\n   * @param centerLat ENU origin latitude (in degrees)\n   * @param centerAlt ENU altitude (in meters)\n   * @param enu reusable enu result\n   * @return Easting, Northing, Up coordinate\n   */\n  public static double[] ecfToENU(double x, double y, double z, final double centerLon,\n                                  final double centerLat, final double centerAlt, double[] enu) {\n    if (enu == null) {\n      enu = new double[3];\n    }\n\n    // create rotation matrix and rotate to enu orientation\n    final double[][] phi = createPhiTransform(centerLon, centerLat, null);\n\n    // convert origin to ENU\n    final double[] originECF = llaToECF(centerLon, centerLat, centerAlt, null);\n    final double[] originENU = new double[3];\n    originENU[0] = ((phi[0][0] * originECF[0]) + (phi[0][1] * originECF[1]) + (phi[0][2] * originECF[2]));\n    originENU[1] = ((phi[1][0] * originECF[0]) + (phi[1][1] * originECF[1]) + (phi[1][2] * originECF[2]));\n    originENU[2] = ((phi[2][0] * originECF[0]) + (phi[2][1] * originECF[1]) + (phi[2][2] * originECF[2]));\n\n    // rotate then translate\n    enu[0] = ((phi[0][0] * x) + (phi[0][1] * y) + (phi[0][2] * z)) - originENU[0];\n    enu[1] = ((phi[1][0] * x) + (phi[1][1] * y) + (phi[1][2] * z)) - originENU[1];\n    enu[2] = ((phi[2][0] * x) + (phi[2][1] * y) + (phi[2][2] * z)) - originENU[2];\n\n    return enu;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#ecfToENU(double,double,double,double,double,double,double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#ecfToENU(double,double,double,double,double,double,double[]).mjava","sourceNew":"  /**\n   * Convert from Earth-Centered-Fixed to Easting, Northing, Up Right Hand System\n   * @param x ECF X coordinate (in meters)\n   * @param y ECF Y coordinate (in meters)\n   * @param z ECF Z coordinate (in meters)\n   * @param centerLon ENU origin longitude (in degrees)\n   * @param centerLat ENU origin latitude (in degrees)\n   * @param centerAlt ENU altitude (in meters)\n   * @param enu reusable enu result\n   * @return Easting, Northing, Up coordinate\n   */\n  public static double[] ecfToENU(double x, double y, double z, final double centerLon,\n                                  final double centerLat, final double centerAlt, double[] enu) {\n    if (enu == null) {\n      enu = new double[3];\n    }\n\n    // create rotation matrix and rotate to enu orientation\n    final double[][] phi = createPhiTransform(centerLon, centerLat, null);\n\n    // convert origin to ENU\n    final double[] originECF = llaToECF(centerLon, centerLat, centerAlt, null);\n    final double[] originENU = new double[3];\n    originENU[0] = ((phi[0][0] * originECF[0]) + (phi[0][1] * originECF[1]) + (phi[0][2] * originECF[2]));\n    originENU[1] = ((phi[1][0] * originECF[0]) + (phi[1][1] * originECF[1]) + (phi[1][2] * originECF[2]));\n    originENU[2] = ((phi[2][0] * originECF[0]) + (phi[2][1] * originECF[1]) + (phi[2][2] * originECF[2]));\n\n    // rotate then translate\n    enu[0] = ((phi[0][0] * x) + (phi[0][1] * y) + (phi[0][2] * z)) - originENU[0];\n    enu[1] = ((phi[1][0] * x) + (phi[1][1] * y) + (phi[1][2] * z)) - originENU[1];\n    enu[2] = ((phi[2][0] * x) + (phi[2][1] * y) + (phi[2][2] * z)) - originENU[2];\n\n    return enu;\n  }\n\n","sourceOld":"  /**\n   * Convert from Earth-Centered-Fixed to Easting, Northing, Up Right Hand System\n   * @param x ECF X coordinate (in meters)\n   * @param y ECF Y coordinate (in meters)\n   * @param z ECF Z coordinate (in meters)\n   * @param centerLon ENU origin longitude (in degrees)\n   * @param centerLat ENU origin latitude (in degrees)\n   * @param centerAlt ENU altitude (in meters)\n   * @param enu reusable enu result\n   * @return Easting, Northing, Up coordinate\n   */\n  public static double[] ecfToENU(double x, double y, double z, final double centerLon,\n                                  final double centerLat, final double centerAlt, double[] enu) {\n    if (enu == null) {\n      enu = new double[3];\n    }\n\n    // create rotation matrix and rotate to enu orientation\n    final double[][] phi = createPhiTransform(centerLon, centerLat, null);\n\n    // convert origin to ENU\n    final double[] originECF = llaToECF(centerLon, centerLat, centerAlt, null);\n    final double[] originENU = new double[3];\n    originENU[0] = ((phi[0][0] * originECF[0]) + (phi[0][1] * originECF[1]) + (phi[0][2] * originECF[2]));\n    originENU[1] = ((phi[1][0] * originECF[0]) + (phi[1][1] * originECF[1]) + (phi[1][2] * originECF[2]));\n    originENU[2] = ((phi[2][0] * originECF[0]) + (phi[2][1] * originECF[1]) + (phi[2][2] * originECF[2]));\n\n    // rotate then translate\n    enu[0] = ((phi[0][0] * x) + (phi[0][1] * y) + (phi[0][2] * z)) - originENU[0];\n    enu[1] = ((phi[1][0] * x) + (phi[1][1] * y) + (phi[1][2] * z)) - originENU[1];\n    enu[2] = ((phi[2][0] * x) + (phi[2][1] * y) + (phi[2][2] * z)) - originENU[2];\n\n    return enu;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#ecfToENU(double,double,double,double,double,double,double[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert from Earth-Centered-Fixed to Easting, Northing, Up Right Hand System\n   * @param x ECF X coordinate (in meters)\n   * @param y ECF Y coordinate (in meters)\n   * @param z ECF Z coordinate (in meters)\n   * @param centerLon ENU origin longitude (in degrees)\n   * @param centerLat ENU origin latitude (in degrees)\n   * @param centerAlt ENU altitude (in meters)\n   * @param enu reusable enu result\n   * @return Easting, Northing, Up coordinate\n   */\n  public static double[] ecfToENU(double x, double y, double z, final double centerLon,\n                                  final double centerLat, final double centerAlt, double[] enu) {\n    if (enu == null) {\n      enu = new double[3];\n    }\n\n    // create rotation matrix and rotate to enu orientation\n    final double[][] phi = createPhiTransform(centerLon, centerLat, null);\n\n    // convert origin to ENU\n    final double[] originECF = llaToECF(centerLon, centerLat, centerAlt, null);\n    final double[] originENU = new double[3];\n    originENU[0] = ((phi[0][0] * originECF[0]) + (phi[0][1] * originECF[1]) + (phi[0][2] * originECF[2]));\n    originENU[1] = ((phi[1][0] * originECF[0]) + (phi[1][1] * originECF[1]) + (phi[1][2] * originECF[2]));\n    originENU[2] = ((phi[2][0] * originECF[0]) + (phi[2][1] * originECF[1]) + (phi[2][2] * originECF[2]));\n\n    // rotate then translate\n    enu[0] = ((phi[0][0] * x) + (phi[0][1] * y) + (phi[0][2] * z)) - originENU[0];\n    enu[1] = ((phi[1][0] * x) + (phi[1][1] * y) + (phi[1][2] * z)) - originENU[1];\n    enu[2] = ((phi[2][0] * x) + (phi[2][1] * y) + (phi[2][2] * z)) - originENU[2];\n\n    return enu;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["937923083e4d137932336fc80f3d78758ff698a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec996bf2daff09d61a876319e8fae4aebbea58e3"]},"commit2Childs":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["ec996bf2daff09d61a876319e8fae4aebbea58e3","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}