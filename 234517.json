{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testGetSetRemoveData().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testGetSetRemoveData().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetSetRemoveData() throws Exception {\n    stateManager.makePath(\"/getData\");\n    stateManager.createData(\"/getData/persistentData\", firstData, CreateMode.PERSISTENT);\n    OnceWatcher nodeWatcher = new OnceWatcher();\n    VersionedData vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    assertNotNull(vd);\n    assertEquals(0, vd.getVersion());\n    assertTrue(Arrays.equals(firstData, vd.getData()));\n\n    // update data, test versioning\n    try {\n      stateManager.setData(\"/getData/persistentData\", secondData, 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.setData(\"/getData/persistentData\", secondData, 0);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    // watch should not fire now because it needs to be reset\n    stateManager.setData(\"/getData/persistentData\", secondData, -1);\n\n    nodeWatcher = new OnceWatcher();\n    stateManager.createData(\"/getData/ephemeralData\", firstData, CreateMode.EPHEMERAL);\n    vd = stateManager.getData(\"/getData/ephemeralData\", nodeWatcher);\n    reInit();\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    assertTrue(stateManager.hasData(\"/getData/persistentData\"));\n    assertFalse(stateManager.hasData(\"/getData/ephemeralData\"));\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    // try wrong version\n    try {\n      stateManager.removeData(\"/getData/persistentData\", vd.getVersion() - 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.removeData(\"/getData/persistentData\", vd.getVersion());\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["53a2114cb9d4940534bc7f013bcc937d2df41f57"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53a2114cb9d4940534bc7f013bcc937d2df41f57","date":1518541125,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testGetSetRemoveData().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testGetSetRemoveData().mjava","sourceNew":"  @Test\n  public void testGetSetRemoveData() throws Exception {\n    stateManager.makePath(\"/getData\");\n    stateManager.createData(\"/getData/persistentData\", firstData, CreateMode.PERSISTENT);\n    OnceWatcher nodeWatcher = new OnceWatcher();\n    VersionedData vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    assertNotNull(vd);\n    assertEquals(0, vd.getVersion());\n    assertTrue(Arrays.equals(firstData, vd.getData()));\n\n    // update data, test versioning\n    try {\n      stateManager.setData(\"/getData/persistentData\", secondData, 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.setData(\"/getData/persistentData\", secondData, 0);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    // watch should not fire now because it needs to be reset\n    stateManager.setData(\"/getData/persistentData\", secondData, -1);\n\n    // create ephemeral node using another ZK connection\n    DistribStateManager ephemeralMgr = createDistribStateManager();\n    ephemeralMgr.createData(\"/getData/ephemeralData\", firstData, CreateMode.EPHEMERAL);\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/ephemeralData\", nodeWatcher);\n    destroyDistribStateManager(ephemeralMgr);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    assertTrue(stateManager.hasData(\"/getData/persistentData\"));\n    assertFalse(stateManager.hasData(\"/getData/ephemeralData\"));\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    // try wrong version\n    try {\n      stateManager.removeData(\"/getData/persistentData\", vd.getVersion() - 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.removeData(\"/getData/persistentData\", vd.getVersion());\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetSetRemoveData() throws Exception {\n    stateManager.makePath(\"/getData\");\n    stateManager.createData(\"/getData/persistentData\", firstData, CreateMode.PERSISTENT);\n    OnceWatcher nodeWatcher = new OnceWatcher();\n    VersionedData vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    assertNotNull(vd);\n    assertEquals(0, vd.getVersion());\n    assertTrue(Arrays.equals(firstData, vd.getData()));\n\n    // update data, test versioning\n    try {\n      stateManager.setData(\"/getData/persistentData\", secondData, 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.setData(\"/getData/persistentData\", secondData, 0);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    // watch should not fire now because it needs to be reset\n    stateManager.setData(\"/getData/persistentData\", secondData, -1);\n\n    nodeWatcher = new OnceWatcher();\n    stateManager.createData(\"/getData/ephemeralData\", firstData, CreateMode.EPHEMERAL);\n    vd = stateManager.getData(\"/getData/ephemeralData\", nodeWatcher);\n    reInit();\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    assertTrue(stateManager.hasData(\"/getData/persistentData\"));\n    assertFalse(stateManager.hasData(\"/getData/ephemeralData\"));\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    // try wrong version\n    try {\n      stateManager.removeData(\"/getData/persistentData\", vd.getVersion() - 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.removeData(\"/getData/persistentData\", vd.getVersion());\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1432848f7bd6a04b7c8439fce9c8b72fe836626","date":1518559234,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testGetSetRemoveData().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testGetSetRemoveData().mjava","sourceNew":"  @Test\n  public void testGetSetRemoveData() throws Exception {\n    stateManager.makePath(\"/getData\");\n    stateManager.createData(\"/getData/persistentData\", firstData, CreateMode.PERSISTENT);\n    OnceWatcher nodeWatcher = new OnceWatcher();\n    VersionedData vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    assertNotNull(vd);\n    assertEquals(0, vd.getVersion());\n    assertTrue(Arrays.equals(firstData, vd.getData()));\n\n    // update data, test versioning\n    try {\n      stateManager.setData(\"/getData/persistentData\", secondData, 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.setData(\"/getData/persistentData\", secondData, 0);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    // watch should not fire now because it needs to be reset\n    stateManager.setData(\"/getData/persistentData\", secondData, -1);\n\n    // create ephemeral node using another ZK connection\n    DistribStateManager ephemeralMgr = createDistribStateManager();\n    ephemeralMgr.createData(\"/getData/ephemeralData\", firstData, CreateMode.EPHEMERAL);\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/ephemeralData\", nodeWatcher);\n    destroyDistribStateManager(ephemeralMgr);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    assertTrue(stateManager.hasData(\"/getData/persistentData\"));\n    assertFalse(stateManager.hasData(\"/getData/ephemeralData\"));\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    // try wrong version\n    try {\n      stateManager.removeData(\"/getData/persistentData\", vd.getVersion() - 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.removeData(\"/getData/persistentData\", vd.getVersion());\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetSetRemoveData() throws Exception {\n    stateManager.makePath(\"/getData\");\n    stateManager.createData(\"/getData/persistentData\", firstData, CreateMode.PERSISTENT);\n    OnceWatcher nodeWatcher = new OnceWatcher();\n    VersionedData vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    assertNotNull(vd);\n    assertEquals(0, vd.getVersion());\n    assertTrue(Arrays.equals(firstData, vd.getData()));\n\n    // update data, test versioning\n    try {\n      stateManager.setData(\"/getData/persistentData\", secondData, 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.setData(\"/getData/persistentData\", secondData, 0);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    // watch should not fire now because it needs to be reset\n    stateManager.setData(\"/getData/persistentData\", secondData, -1);\n\n    nodeWatcher = new OnceWatcher();\n    stateManager.createData(\"/getData/ephemeralData\", firstData, CreateMode.EPHEMERAL);\n    vd = stateManager.getData(\"/getData/ephemeralData\", nodeWatcher);\n    reInit();\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    assertTrue(stateManager.hasData(\"/getData/persistentData\"));\n    assertFalse(stateManager.hasData(\"/getData/ephemeralData\"));\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    // try wrong version\n    try {\n      stateManager.removeData(\"/getData/persistentData\", vd.getVersion() - 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.removeData(\"/getData/persistentData\", vd.getVersion());\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimDistribStateManager#testGetSetRemoveData().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestDistribStateManager#testGetSetRemoveData().mjava","sourceNew":"  @Test\n  public void testGetSetRemoveData() throws Exception {\n    stateManager.makePath(\"/getData\");\n    stateManager.createData(\"/getData/persistentData\", firstData, CreateMode.PERSISTENT);\n    OnceWatcher nodeWatcher = new OnceWatcher();\n    VersionedData vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    assertNotNull(vd);\n    assertEquals(0, vd.getVersion());\n    assertTrue(Arrays.equals(firstData, vd.getData()));\n\n    // update data, test versioning\n    try {\n      stateManager.setData(\"/getData/persistentData\", secondData, 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.setData(\"/getData/persistentData\", secondData, 0);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    // watch should not fire now because it needs to be reset\n    stateManager.setData(\"/getData/persistentData\", secondData, -1);\n\n    // create ephemeral node using another ZK connection\n    DistribStateManager ephemeralMgr = createDistribStateManager();\n    ephemeralMgr.createData(\"/getData/ephemeralData\", firstData, CreateMode.EPHEMERAL);\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/ephemeralData\", nodeWatcher);\n    destroyDistribStateManager(ephemeralMgr);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    assertTrue(stateManager.hasData(\"/getData/persistentData\"));\n    assertFalse(stateManager.hasData(\"/getData/ephemeralData\"));\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    // try wrong version\n    try {\n      stateManager.removeData(\"/getData/persistentData\", vd.getVersion() - 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.removeData(\"/getData/persistentData\", vd.getVersion());\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testGetSetRemoveData() throws Exception {\n    stateManager.makePath(\"/getData\");\n    stateManager.createData(\"/getData/persistentData\", firstData, CreateMode.PERSISTENT);\n    OnceWatcher nodeWatcher = new OnceWatcher();\n    VersionedData vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    assertNotNull(vd);\n    assertEquals(0, vd.getVersion());\n    assertTrue(Arrays.equals(firstData, vd.getData()));\n\n    // update data, test versioning\n    try {\n      stateManager.setData(\"/getData/persistentData\", secondData, 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.setData(\"/getData/persistentData\", secondData, 0);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    // watch should not fire now because it needs to be reset\n    stateManager.setData(\"/getData/persistentData\", secondData, -1);\n\n    // create ephemeral node using another ZK connection\n    DistribStateManager ephemeralMgr = createDistribStateManager();\n    ephemeralMgr.createData(\"/getData/ephemeralData\", firstData, CreateMode.EPHEMERAL);\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/ephemeralData\", nodeWatcher);\n    destroyDistribStateManager(ephemeralMgr);\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n    assertTrue(stateManager.hasData(\"/getData/persistentData\"));\n    assertFalse(stateManager.hasData(\"/getData/ephemeralData\"));\n\n    nodeWatcher = new OnceWatcher();\n    vd = stateManager.getData(\"/getData/persistentData\", nodeWatcher);\n    // try wrong version\n    try {\n      stateManager.removeData(\"/getData/persistentData\", vd.getVersion() - 1);\n      fail(\"should have failed\");\n    } catch (BadVersionException e) {\n      // expected\n    }\n    // watch should not have fired\n    assertEquals(1, nodeWatcher.triggered.getCount());\n\n    stateManager.removeData(\"/getData/persistentData\", vd.getVersion());\n    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {\n      fail(\"Node watch should have fired!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["e1432848f7bd6a04b7c8439fce9c8b72fe836626"],"e1432848f7bd6a04b7c8439fce9c8b72fe836626":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","53a2114cb9d4940534bc7f013bcc937d2df41f57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"53a2114cb9d4940534bc7f013bcc937d2df41f57":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e1432848f7bd6a04b7c8439fce9c8b72fe836626":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["e1432848f7bd6a04b7c8439fce9c8b72fe836626","53a2114cb9d4940534bc7f013bcc937d2df41f57"],"53a2114cb9d4940534bc7f013bcc937d2df41f57":["e1432848f7bd6a04b7c8439fce9c8b72fe836626"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}