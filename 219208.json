{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testBuggyTokenType().mjava","commits":[{"id":"673accc9b41e365926e68fc3a1d8c06240542492","date":1245426756,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testBuggyTokenType().mjava","pathOld":"/dev/null","sourceNew":"\t/*\n\t * Thai numeric tokens are typed as <ALPHANUM> instead of <NUM>.\n\t * This is really a problem with the interaction w/ StandardTokenizer, which is used by ThaiAnalyzer.\n\t * \n\t * The issue is this: in StandardTokenizer the entire [:Thai:] block is specified in ALPHANUM (including punctuation, digits, etc)\n\t * Fix is easy: refine this spec to exclude thai punctuation and digits.\n\t * \n\t * A better fix, that would also fix quite a few other languages would be to remove the thai hack.\n\t * Instead, allow the definition of alphanum to include relevant categories like nonspacing marks!\n\t */\n\tpublic void testBuggyTokenType() throws Exception {\n\t\tassertAnalyzesTo(new ThaiAnalyzer(), \"เดอะนิวยอร์กไทมส์ ๑๒๓\", \n\t\t\t\tnew String[] { \"เด\", \"อะนิว\", \"ยอ\", \"ร์ก\", \"ไทมส์\", \"๑๒๓\" },\n\t\t\t\tnew String[] { \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\" });\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testBuggyTokenType().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testBuggyTokenType().mjava","sourceNew":"\t/*\n\t * Thai numeric tokens are typed as <ALPHANUM> instead of <NUM>.\n\t * This is really a problem with the interaction w/ StandardTokenizer, which is used by ThaiAnalyzer.\n\t * \n\t * The issue is this: in StandardTokenizer the entire [:Thai:] block is specified in ALPHANUM (including punctuation, digits, etc)\n\t * Fix is easy: refine this spec to exclude thai punctuation and digits.\n\t * \n\t * A better fix, that would also fix quite a few other languages would be to remove the thai hack.\n\t * Instead, allow the definition of alphanum to include relevant categories like nonspacing marks!\n\t */\n\tpublic void testBuggyTokenType() throws Exception {\n\t\tassertAnalyzesTo(new ThaiAnalyzer(), \"เดอะนิวยอร์กไทมส์ ๑๒๓\", \n\t\t\t\tnew String[] { \"เด\", \"อะนิว\", \"ยอ\", \"ร์ก\", \"ไทมส์\", \"๑๒๓\" },\n\t\t\t\tnew String[] { \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\" });\n\t}\n\n","sourceOld":"\t/*\n\t * Thai numeric tokens are typed as <ALPHANUM> instead of <NUM>.\n\t * This is really a problem with the interaction w/ StandardTokenizer, which is used by ThaiAnalyzer.\n\t * \n\t * The issue is this: in StandardTokenizer the entire [:Thai:] block is specified in ALPHANUM (including punctuation, digits, etc)\n\t * Fix is easy: refine this spec to exclude thai punctuation and digits.\n\t * \n\t * A better fix, that would also fix quite a few other languages would be to remove the thai hack.\n\t * Instead, allow the definition of alphanum to include relevant categories like nonspacing marks!\n\t */\n\tpublic void testBuggyTokenType() throws Exception {\n\t\tassertAnalyzesTo(new ThaiAnalyzer(), \"เดอะนิวยอร์กไทมส์ ๑๒๓\", \n\t\t\t\tnew String[] { \"เด\", \"อะนิว\", \"ยอ\", \"ร์ก\", \"ไทมส์\", \"๑๒๓\" },\n\t\t\t\tnew String[] { \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\", \"<ALPHANUM>\" });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["673accc9b41e365926e68fc3a1d8c06240542492"],"673accc9b41e365926e68fc3a1d8c06240542492":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"673accc9b41e365926e68fc3a1d8c06240542492":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["673accc9b41e365926e68fc3a1d8c06240542492"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}