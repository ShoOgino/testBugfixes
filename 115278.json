{"path":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","commits":[{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == FieldType.LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == FieldType.LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == FieldType.LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == FieldType.LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == FieldType.LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == FieldType.LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == FieldType.LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == FieldType.LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == FieldType.LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == FieldType.LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final TermsEnum tenum) {\n      super(tenum);\n      switch (dataType) {\n        case LONG:\n        case DOUBLE: {\n          // lower\n          long minBound;\n          if (dataType == LegacyNumericType.LONG) {\n            minBound = (min == null) ? Long.MIN_VALUE : min.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            minBound = (min == null) ? LONG_NEGATIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound;\n          if (dataType == LegacyNumericType.LONG) {\n            maxBound = (max == null) ? Long.MAX_VALUE : max.longValue();\n          } else {\n            assert dataType == LegacyNumericType.DOUBLE;\n            maxBound = (max == null) ? LONG_POSITIVE_INFINITY\n              : NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case INT:\n        case FLOAT: {\n          // lower\n          int minBound;\n          if (dataType == LegacyNumericType.INT) {\n            minBound = (min == null) ? Integer.MIN_VALUE : min.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            minBound = (min == null) ? INT_NEGATIVE_INFINITY\n              : NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound;\n          if (dataType == LegacyNumericType.INT) {\n            maxBound = (max == null) ? Integer.MAX_VALUE : max.intValue();\n          } else {\n            assert dataType == LegacyNumericType.FLOAT;\n            maxBound = (max == null) ? INT_POSITIVE_INFINITY\n              : NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          LegacyNumericUtils.splitIntRange(new LegacyNumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"Invalid LegacyNumericType\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a178ac3dec643551e66363c457a9074f55545f86"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a178ac3dec643551e66363c457a9074f55545f86"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}