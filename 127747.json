{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#scanToSubBlock(long).mjava","commits":[{"id":"6256acedd658c13275a01e4ba106a621956a22f6","date":1400192928,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#scanToSubBlock(long).mjava","pathOld":"/dev/null","sourceNew":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n      //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#scanToSubBlock(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame#scanToSubBlock(long).mjava","sourceNew":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n      //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","sourceOld":"  // Scans to sub-block that has this target fp; only\n  // called by next(); NOTE: does not set\n  // startBytePos/suffix as a side effect\n  public void scanToSubBlock(long subFP) {\n    assert !isLeafBlock;\n    //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n    //assert nextEnt == 0;\n    if (lastSubFP == subFP) {\n      //if (DEBUG) System.out.println(\"    already positioned\");\n      return;\n    }\n    assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n    final long targetSubCode = fp - subFP;\n    //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n    while(true) {\n      assert nextEnt < entCount;\n      nextEnt++;\n      final int code = suffixesReader.readVInt();\n      suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n      //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n      if ((code & 1) != 0) {\n        final long subCode = suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n        if (targetSubCode == subCode) {\n          //if (DEBUG) System.out.println(\"        match!\");\n          lastSubFP = subFP;\n          return;\n        }\n      } else {\n        state.termBlockOrd++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["6256acedd658c13275a01e4ba106a621956a22f6"],"6256acedd658c13275a01e4ba106a621956a22f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"6256acedd658c13275a01e4ba106a621956a22f6":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6256acedd658c13275a01e4ba106a621956a22f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}