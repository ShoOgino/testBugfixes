{"path":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory, true);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory, true);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory, true);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory, true);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory, true);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiThreadTermVectors#test().mjava","sourceNew":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    \n    IndexReader reader = null;\n    \n    try {\n      reader = IndexReader.open(directory);\n      for(int i = 1; i <= numThreads; i++)\n        testTermPositionVectors(reader, i);\n      \n      \n    }\n    catch (IOException ioe) {\n      fail(ioe.getMessage());\n    }\n    finally {\n      if (reader != null) {\n        try {\n          /** close the opened reader */\n          reader.close();\n        } catch (IOException ioe) {\n          ioe.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["9454a6510e2db155fb01faa5c049b06ece95fab9","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["9454a6510e2db155fb01faa5c049b06ece95fab9","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}