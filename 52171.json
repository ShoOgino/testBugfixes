{"path":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    List<String> collations = suggestions.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"\t@Test\n\tpublic void testCollateWithGrouping() throws Exception\n\t{\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\t\t\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\t\t\n\t\tparams.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n\t\tparams.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n\t\tparams.add(GroupParams.GROUP, \"true\");\n\t\tparams.add(GroupParams.GROUP_FIELD, \"id\");\n\t\t\n\t\t//Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n\t\t//not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 1);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    List<String> collations = suggestions.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testCollateWithGrouping().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"  @Test\n  public void testCollateWithGrouping() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellingParams.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellingParams.SPELLCHECK_COUNT, \"10\");\n    params.add(SpellingParams.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n    params.add(SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(GroupParams.GROUP, \"true\");\n    params.add(GroupParams.GROUP_FIELD, \"id\");\n\n    //Because a FilterQuery is applied which removes doc id#1 from possible hits, we would\n    //not want the collations to return us \"lowerfilt:(+faith +hope +loaves)\" as this only matches doc id#1.\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationHolder = (NamedList) spellCheck.get(\"collations\");\n    List<String> collations = collationHolder.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"30c8e5574b55d57947e989443dfde611646530ee":["ecd75942508378ccc92c3a26f71db6cba9f25784","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["ecd75942508378ccc92c3a26f71db6cba9f25784","5ff704ef91e9ae30ca59babb23ece85720701b60"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["28288370235ed02234a64753cdbf0c6ec096304a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["ecd75942508378ccc92c3a26f71db6cba9f25784"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ecd75942508378ccc92c3a26f71db6cba9f25784":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","30c8e5574b55d57947e989443dfde611646530ee","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}