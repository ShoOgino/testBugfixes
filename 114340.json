{"path":"lucene/core/src/java/org/apache/lucene/search/MatchesUtils#forField(String,IOSupplier[MatchesIterator]).mjava","commits":[{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchesUtils#forField(String,IOSupplier[MatchesIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Matches#forField(String,IOSupplier[MatchesIterator]).mjava","sourceNew":"  /**\n   * Create a Matches for a single field\n   */\n  public static Matches forField(String field, IOSupplier<MatchesIterator> mis) throws IOException {\n\n    // The indirection here, using a Supplier object rather than a MatchesIterator\n    // directly, is to allow for multiple calls to Matches.getMatches() to return\n    // new iterators.  We still need to call MatchesIteratorSupplier.get() eagerly\n    // to work out if we have a hit or not.\n\n    MatchesIterator mi = mis.get();\n    if (mi == null) {\n      return null;\n    }\n    return new Matches() {\n      boolean cached = true;\n      @Override\n      public MatchesIterator getMatches(String f) throws IOException {\n        if (Objects.equals(field, f) == false) {\n          return null;\n        }\n        if (cached == false) {\n          return mis.get();\n        }\n        cached = false;\n        return mi;\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singleton(field).iterator();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a Matches for a single field\n   */\n  static Matches forField(String field, IOSupplier<MatchesIterator> mis) throws IOException {\n\n    // The indirection here, using a Supplier object rather than a MatchesIterator\n    // directly, is to allow for multiple calls to Matches.getMatches() to return\n    // new iterators.  We still need to call MatchesIteratorSupplier.get() eagerly\n    // to work out if we have a hit or not.\n\n    MatchesIterator mi = mis.get();\n    if (mi == null) {\n      return null;\n    }\n    return new Matches() {\n      boolean cached = true;\n      @Override\n      public MatchesIterator getMatches(String f) throws IOException {\n        if (Objects.equals(field, f) == false) {\n          return null;\n        }\n        if (cached == false) {\n          return mis.get();\n        }\n        cached = false;\n        return mi;\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singleton(field).iterator();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69d70ba91a4999a5387559a9ad50e3cfe9cfd970","date":1565173681,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MatchesUtils#forField(String,IOSupplier[MatchesIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MatchesUtils#forField(String,IOSupplier[MatchesIterator]).mjava","sourceNew":"  /**\n   * Create a Matches for a single field\n   */\n  public static Matches forField(String field, IOSupplier<MatchesIterator> mis) throws IOException {\n\n    // The indirection here, using a Supplier object rather than a MatchesIterator\n    // directly, is to allow for multiple calls to Matches.getMatches() to return\n    // new iterators.  We still need to call MatchesIteratorSupplier.get() eagerly\n    // to work out if we have a hit or not.\n\n    MatchesIterator mi = mis.get();\n    if (mi == null) {\n      return null;\n    }\n    return new Matches() {\n      boolean cached = true;\n      @Override\n      public MatchesIterator getMatches(String f) throws IOException {\n        if (Objects.equals(field, f) == false) {\n          return null;\n        }\n        if (cached == false) {\n          return mis.get();\n        }\n        cached = false;\n        return mi;\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singleton(field).iterator();\n      }\n\n      @Override\n      public Collection<Matches> getSubMatches() {\n        return Collections.emptyList();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a Matches for a single field\n   */\n  public static Matches forField(String field, IOSupplier<MatchesIterator> mis) throws IOException {\n\n    // The indirection here, using a Supplier object rather than a MatchesIterator\n    // directly, is to allow for multiple calls to Matches.getMatches() to return\n    // new iterators.  We still need to call MatchesIteratorSupplier.get() eagerly\n    // to work out if we have a hit or not.\n\n    MatchesIterator mi = mis.get();\n    if (mi == null) {\n      return null;\n    }\n    return new Matches() {\n      boolean cached = true;\n      @Override\n      public MatchesIterator getMatches(String f) throws IOException {\n        if (Objects.equals(field, f) == false) {\n          return null;\n        }\n        if (cached == false) {\n          return mis.get();\n        }\n        cached = false;\n        return mi;\n      }\n\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.singleton(field).iterator();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69d70ba91a4999a5387559a9ad50e3cfe9cfd970":["2375622520a4e480775e3104a2f9a423536755b4"],"2375622520a4e480775e3104a2f9a423536755b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69d70ba91a4999a5387559a9ad50e3cfe9cfd970"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2375622520a4e480775e3104a2f9a423536755b4"],"69d70ba91a4999a5387559a9ad50e3cfe9cfd970":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2375622520a4e480775e3104a2f9a423536755b4":["69d70ba91a4999a5387559a9ad50e3cfe9cfd970"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}