{"path":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#addClause(BooleanQuery.Builder,Term,int,float,TermContext).mjava","commits":[{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#addClause(BooleanQuery.Builder,Term,int,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#addClause(BooleanQuery,Term,int,float,TermContext).mjava","sourceNew":"    @Override\n    protected void addClause(BooleanQuery.Builder topLevel, Term term, int docCount, float boost, TermContext states) {\n      final TermQuery tq = new TermQuery(term, states);\n      tq.setBoost(boost);\n      topLevel.add(tq, BooleanClause.Occur.SHOULD);\n    }\n\n","sourceOld":"    @Override\n    protected void addClause(BooleanQuery topLevel, Term term, int docCount, float boost, TermContext states) {\n      final TermQuery tq = new TermQuery(term, states);\n      tq.setBoost(boost);\n      topLevel.add(tq, BooleanClause.Occur.SHOULD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#addClause(BooleanQuery.Builder,Term,int,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#addClause(BooleanQuery.Builder,Term,int,float,TermContext).mjava","sourceNew":"    @Override\n    protected void addClause(BooleanQuery.Builder topLevel, Term term, int docCount, float boost, TermContext states) {\n      final TermQuery tq = new TermQuery(term, states);\n      topLevel.add(new BoostQuery(tq, boost), BooleanClause.Occur.SHOULD);\n    }\n\n","sourceOld":"    @Override\n    protected void addClause(BooleanQuery.Builder topLevel, Term term, int docCount, float boost, TermContext states) {\n      final TermQuery tq = new TermQuery(term, states);\n      tq.setBoost(boost);\n      topLevel.add(tq, BooleanClause.Occur.SHOULD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#addClause(BooleanQuery.Builder,Term,int,float,TermStates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#addClause(BooleanQuery.Builder,Term,int,float,TermContext).mjava","sourceNew":"    @Override\n    protected void addClause(BooleanQuery.Builder topLevel, Term term, int docCount, float boost, TermStates states) {\n      final TermQuery tq = new TermQuery(term, states);\n      topLevel.add(new BoostQuery(tq, boost), BooleanClause.Occur.SHOULD);\n    }\n\n","sourceOld":"    @Override\n    protected void addClause(BooleanQuery.Builder topLevel, Term term, int docCount, float boost, TermContext states) {\n      final TermQuery tq = new TermQuery(term, states);\n      topLevel.add(new BoostQuery(tq, boost), BooleanClause.Occur.SHOULD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#addClause(BooleanQuery.Builder,Term,int,float,TermContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void addClause(BooleanQuery.Builder topLevel, Term term, int docCount, float boost, TermContext states) {\n      final TermQuery tq = new TermQuery(term, states);\n      topLevel.add(new BoostQuery(tq, boost), BooleanClause.Occur.SHOULD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["2dfdf766e55e943d942055d7de53c7ad6bc45283","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}