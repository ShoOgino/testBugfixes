{"path":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testCacheLoadFromPackage().mjava","commits":[{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testCacheLoadFromPackage().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testCacheFromGlobalLoader().mjava","sourceNew":"  public void testCacheLoadFromPackage() throws Exception {\n    String COLLECTION_NAME = \"globalCacheColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/cache.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/cache_v2.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n\n    String overlay = \"{\" +\n        \"    \\\"props\\\":{\\\"query\\\":{\\\"documentCache\\\":{\\n\" +\n        \"          \\\"class\\\":\\\"org.apache.solr.core.MyDocCache\\\",\\n\" +\n        \"          \\\"size\\\":\\\"512\\\",\\n\" +\n        \"          \\\"initialSize\\\":\\\"512\\\" , \\\"package\\\":\\\"cache_pkg\\\"}}}}\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"),\n            Collections.singletonMap(ConfigOverlay.RESOURCE_NAME, overlay.getBytes(UTF_8)))\n        .configure();\n    try {\n      String payload = \"{add-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : '1a3739b629ce85895c9b2a8c12dd7d98161ff47634b0693f1e1c5b444fb38343f95c6ee955cd99103bd24cfde6c205234b63823818660ac08392cdc626caf585'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha512\"));\n\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n\n      NamedList<Object> rsp = cluster.getSolrClient().request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params));\n      assertEquals(\"org.apache.solr.core.MyDocCache\", rsp._getStr(\"overlay/props/query/documentCache/class\", null));\n\n      String sha512 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha512\", sha512\n          ));\n\n\n      UpdateRequest req = new UpdateRequest();\n\n      req.add(\"id\", \"1\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n      SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"collection\", COLLECTION_NAME);\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/id\", \"1\"));\n\n\n      payload = \"{update-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha512 : 'aa3f42fb640636dd8126beca36ac389486d0fcb1c3a2e2c387d043d57637535ce8db3b17983853322f78bb8f447ed75fe7b405675debe652ed826ee95e8ce328'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha512 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha512\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha512\", sha512\n          ));\n      req = new UpdateRequest();\n      req.add(\"id\", \"2\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n\n      solrQuery = new SolrQuery(\"q\", \"id:2\", \"collection\", COLLECTION_NAME);\n      SolrResponse result = assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/my_synthetic_fld_s\", \"version_2\"));\n\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n\n\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13650\")\n  public void testCacheFromGlobalLoader() throws Exception {\n    String COLLECTION_NAME = \"globalCacheColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/cache.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/cache_v2.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n\n    String overlay = \"{\" +\n        \"    \\\"props\\\":{\\\"query\\\":{\\\"documentCache\\\":{\\n\" +\n        \"          \\\"class\\\":\\\"org.apache.solr.core.MyDocCache\\\",\\n\" +\n        \"          \\\"size\\\":\\\"512\\\",\\n\" +\n        \"          \\\"initialSize\\\":\\\"512\\\" , \\\"package\\\":\\\"cache_pkg\\\"}}}}\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"),\n            Collections.singletonMap(ConfigOverlay.RESOURCE_NAME, overlay.getBytes(UTF_8)))\n        .configure();\n    try {\n      String payload = \"{add-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : '1a3739b629ce85895c9b2a8c12dd7d98161ff47634b0693f1e1c5b444fb38343f95c6ee955cd99103bd24cfde6c205234b63823818660ac08392cdc626caf585'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha512\"));\n\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n\n      NamedList<Object> rsp = cluster.getSolrClient().request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params));\n      assertEquals(\"org.apache.solr.core.MyDocCache\", rsp._getStr(\"overlay/props/query/documentCache/class\", null));\n      UpdateRequest req = new UpdateRequest();\n\n      req.add(\"id\", \"1\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n      SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"collection\", COLLECTION_NAME);\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/id\", \"1\"));\n\n\n      payload = \"{update-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha512 : 'aa3f42fb640636dd8126beca36ac389486d0fcb1c3a2e2c387d043d57637535ce8db3b17983853322f78bb8f447ed75fe7b405675debe652ed826ee95e8ce328'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha512\"));\n\n      req = new UpdateRequest();\n      req.add(\"id\", \"2\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n\n      solrQuery = new SolrQuery(\"q\", \"id:2\", \"collection\", COLLECTION_NAME);\n      SolrResponse result = assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/my_synthetic_fld_s\", \"version_2\"));\n\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testCacheLoadFromPackage().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testCacheLoadFromPackage().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13650\")\n  public void testCacheLoadFromPackage() throws Exception {\n    String COLLECTION_NAME = \"globalCacheColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/cache.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/cache_v2.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n\n    String overlay = \"{\" +\n        \"    \\\"props\\\":{\\\"query\\\":{\\\"documentCache\\\":{\\n\" +\n        \"          \\\"class\\\":\\\"org.apache.solr.core.MyDocCache\\\",\\n\" +\n        \"          \\\"size\\\":\\\"512\\\",\\n\" +\n        \"          \\\"initialSize\\\":\\\"512\\\" , \\\"package\\\":\\\"cache_pkg\\\"}}}}\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"),\n            Collections.singletonMap(ConfigOverlay.RESOURCE_NAME, overlay.getBytes(UTF_8)))\n        .configure();\n    try {\n      String payload = \"{add-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : '380c2a61759f01b4d5d2570496c3d2737e3cc6968347faa94d93e906e03e077f'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha256\"));\n\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n\n      NamedList<Object> rsp = cluster.getSolrClient().request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params));\n      assertEquals(\"org.apache.solr.core.MyDocCache\", rsp._getStr(\"overlay/props/query/documentCache/class\", null));\n\n      String sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha256\", sha256\n          ));\n\n\n      UpdateRequest req = new UpdateRequest();\n\n      req.add(\"id\", \"1\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n      SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"collection\", COLLECTION_NAME);\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/id\", \"1\"));\n\n\n      payload = \"{update-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha256 : '22551e42e6fd9646a641ebc1380472ec66fba62f35febad46c8165376b41161d'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha256\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha256\", sha256\n          ));\n      req = new UpdateRequest();\n      req.add(\"id\", \"2\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n\n      solrQuery = new SolrQuery(\"q\", \"id:2\", \"collection\", COLLECTION_NAME);\n      SolrResponse result = assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/my_synthetic_fld_s\", \"version_2\"));\n\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","sourceOld":"  public void testCacheLoadFromPackage() throws Exception {\n    String COLLECTION_NAME = \"globalCacheColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/cache.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/cache_v2.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n\n    String overlay = \"{\" +\n        \"    \\\"props\\\":{\\\"query\\\":{\\\"documentCache\\\":{\\n\" +\n        \"          \\\"class\\\":\\\"org.apache.solr.core.MyDocCache\\\",\\n\" +\n        \"          \\\"size\\\":\\\"512\\\",\\n\" +\n        \"          \\\"initialSize\\\":\\\"512\\\" , \\\"package\\\":\\\"cache_pkg\\\"}}}}\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"),\n            Collections.singletonMap(ConfigOverlay.RESOURCE_NAME, overlay.getBytes(UTF_8)))\n        .configure();\n    try {\n      String payload = \"{add-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : '1a3739b629ce85895c9b2a8c12dd7d98161ff47634b0693f1e1c5b444fb38343f95c6ee955cd99103bd24cfde6c205234b63823818660ac08392cdc626caf585'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha512\"));\n\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n\n      NamedList<Object> rsp = cluster.getSolrClient().request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params));\n      assertEquals(\"org.apache.solr.core.MyDocCache\", rsp._getStr(\"overlay/props/query/documentCache/class\", null));\n\n      String sha512 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha512\", sha512\n          ));\n\n\n      UpdateRequest req = new UpdateRequest();\n\n      req.add(\"id\", \"1\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n      SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"collection\", COLLECTION_NAME);\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/id\", \"1\"));\n\n\n      payload = \"{update-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha512 : 'aa3f42fb640636dd8126beca36ac389486d0fcb1c3a2e2c387d043d57637535ce8db3b17983853322f78bb8f447ed75fe7b405675debe652ed826ee95e8ce328'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha512 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha512\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha512\", sha512\n          ));\n      req = new UpdateRequest();\n      req.add(\"id\", \"2\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n\n      solrQuery = new SolrQuery(\"q\", \"id:2\", \"collection\", COLLECTION_NAME);\n      SolrResponse result = assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/my_synthetic_fld_s\", \"version_2\"));\n\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c0db8d87d52f45f758caaf89a71e2dd8a9e045","date":1566881933,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testCacheLoadFromPackage().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testCacheLoadFromPackage().mjava","sourceNew":"//  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13650\")\n  public void testCacheLoadFromPackage() throws Exception {\n    String COLLECTION_NAME = \"globalCacheColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/cache.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/cache_v2.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n\n    String overlay = \"{\" +\n        \"    \\\"props\\\":{\\\"query\\\":{\\\"documentCache\\\":{\\n\" +\n        \"          \\\"class\\\":\\\"org.apache.solr.core.MyDocCache\\\",\\n\" +\n        \"          \\\"size\\\":\\\"512\\\",\\n\" +\n        \"          \\\"initialSize\\\":\\\"512\\\" , \\\"package\\\":\\\"cache_pkg\\\"}}}}\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"),\n            Collections.singletonMap(ConfigOverlay.RESOURCE_NAME, overlay.getBytes(UTF_8)))\n        .configure();\n    try {\n      String payload = \"{add-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : '32e8b5b2a95ea306538b52017f0954aa1b0f8a8b2d0acbc498fd0e66a223f7bd'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha256\"));\n\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n\n      NamedList<Object> rsp = cluster.getSolrClient().request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params));\n      assertEquals(\"org.apache.solr.core.MyDocCache\", rsp._getStr(\"overlay/props/query/documentCache/class\", null));\n\n      String sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha256\", sha256\n          ));\n\n\n      UpdateRequest req = new UpdateRequest();\n\n      req.add(\"id\", \"1\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n      SolrQuery solrQuery = new SolrQuery(\"q\", \"id:1\", \"collection\", COLLECTION_NAME);\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"/response[0]/my_synthetic_fld_s\", \"version_1\"));\n\n\n      payload = \"{update-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha256 : '0f670f6dcc2b00f9a448a7ebd457d4ff985ab702c85cdb3608dcae9889e8d702'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha256\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha256\", sha256\n          ));\n      req = new UpdateRequest();\n      req.add(\"id\", \"2\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n\n      solrQuery = new SolrQuery(\"q\", \"id:2\", \"collection\", COLLECTION_NAME);\n      SolrResponse result = assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/my_synthetic_fld_s\", \"version_2\"));\n\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13650\")\n  public void testCacheLoadFromPackage() throws Exception {\n    String COLLECTION_NAME = \"globalCacheColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/cache.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/cache_v2.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n\n    String overlay = \"{\" +\n        \"    \\\"props\\\":{\\\"query\\\":{\\\"documentCache\\\":{\\n\" +\n        \"          \\\"class\\\":\\\"org.apache.solr.core.MyDocCache\\\",\\n\" +\n        \"          \\\"size\\\":\\\"512\\\",\\n\" +\n        \"          \\\"initialSize\\\":\\\"512\\\" , \\\"package\\\":\\\"cache_pkg\\\"}}}}\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"),\n            Collections.singletonMap(ConfigOverlay.RESOURCE_NAME, overlay.getBytes(UTF_8)))\n        .configure();\n    try {\n      String payload = \"{add-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : '380c2a61759f01b4d5d2570496c3d2737e3cc6968347faa94d93e906e03e077f'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha256\"));\n\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n\n      NamedList<Object> rsp = cluster.getSolrClient().request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params));\n      assertEquals(\"org.apache.solr.core.MyDocCache\", rsp._getStr(\"overlay/props/query/documentCache/class\", null));\n\n      String sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha256\", sha256\n          ));\n\n\n      UpdateRequest req = new UpdateRequest();\n\n      req.add(\"id\", \"1\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n      SolrQuery solrQuery = new SolrQuery(\"q\", \"*:*\", \"collection\", COLLECTION_NAME);\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/id\", \"1\"));\n\n\n      payload = \"{update-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha256 : '22551e42e6fd9646a641ebc1380472ec66fba62f35febad46c8165376b41161d'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha256\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha256\", sha256\n          ));\n      req = new UpdateRequest();\n      req.add(\"id\", \"2\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n\n      solrQuery = new SolrQuery(\"q\", \"id:2\", \"collection\", COLLECTION_NAME);\n      SolrResponse result = assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/my_synthetic_fld_s\", \"version_2\"));\n\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testCacheLoadFromPackage().mjava","sourceNew":null,"sourceOld":"//  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13650\")\n  public void testCacheLoadFromPackage() throws Exception {\n    String COLLECTION_NAME = \"globalCacheColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/cache.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/cache_v2.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n\n    String overlay = \"{\" +\n        \"    \\\"props\\\":{\\\"query\\\":{\\\"documentCache\\\":{\\n\" +\n        \"          \\\"class\\\":\\\"org.apache.solr.core.MyDocCache\\\",\\n\" +\n        \"          \\\"size\\\":\\\"512\\\",\\n\" +\n        \"          \\\"initialSize\\\":\\\"512\\\" , \\\"package\\\":\\\"cache_pkg\\\"}}}}\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"),\n            Collections.singletonMap(ConfigOverlay.RESOURCE_NAME, overlay.getBytes(UTF_8)))\n        .configure();\n    try {\n      String payload = \"{add-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : '32e8b5b2a95ea306538b52017f0954aa1b0f8a8b2d0acbc498fd0e66a223f7bd'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha256\"));\n\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n\n      NamedList<Object> rsp = cluster.getSolrClient().request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params));\n      assertEquals(\"org.apache.solr.core.MyDocCache\", rsp._getStr(\"overlay/props/query/documentCache/class\", null));\n\n      String sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha256\", sha256\n          ));\n\n\n      UpdateRequest req = new UpdateRequest();\n\n      req.add(\"id\", \"1\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n      SolrQuery solrQuery = new SolrQuery(\"q\", \"id:1\", \"collection\", COLLECTION_NAME);\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"/response[0]/my_synthetic_fld_s\", \"version_1\"));\n\n\n      payload = \"{update-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha256 : '0f670f6dcc2b00f9a448a7ebd457d4ff985ab702c85cdb3608dcae9889e8d702'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha256\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha256\", sha256\n          ));\n      req = new UpdateRequest();\n      req.add(\"id\", \"2\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n\n      solrQuery = new SolrQuery(\"q\", \"id:2\", \"collection\", COLLECTION_NAME);\n      SolrResponse result = assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/my_synthetic_fld_s\", \"version_2\"));\n\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testCacheLoadFromPackage().mjava","sourceNew":null,"sourceOld":"//  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13650\")\n  public void testCacheLoadFromPackage() throws Exception {\n    String COLLECTION_NAME = \"globalCacheColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/cache.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/cache_v2.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n\n    String overlay = \"{\" +\n        \"    \\\"props\\\":{\\\"query\\\":{\\\"documentCache\\\":{\\n\" +\n        \"          \\\"class\\\":\\\"org.apache.solr.core.MyDocCache\\\",\\n\" +\n        \"          \\\"size\\\":\\\"512\\\",\\n\" +\n        \"          \\\"initialSize\\\":\\\"512\\\" , \\\"package\\\":\\\"cache_pkg\\\"}}}}\";\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"),\n            Collections.singletonMap(ConfigOverlay.RESOURCE_NAME, overlay.getBytes(UTF_8)))\n        .configure();\n    try {\n      String payload = \"{add-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : '32e8b5b2a95ea306538b52017f0954aa1b0f8a8b2d0acbc498fd0e66a223f7bd'}}\";\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha256\"));\n\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n\n      NamedList<Object> rsp = cluster.getSolrClient().request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params));\n      assertEquals(\"org.apache.solr.core.MyDocCache\", rsp._getStr(\"overlay/props/query/documentCache/class\", null));\n\n      String sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha256\", sha256\n          ));\n\n\n      UpdateRequest req = new UpdateRequest();\n\n      req.add(\"id\", \"1\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n      SolrQuery solrQuery = new SolrQuery(\"q\", \"id:1\", \"collection\", COLLECTION_NAME);\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"/response[0]/my_synthetic_fld_s\", \"version_1\"));\n\n\n      payload = \"{update-package:{name : 'cache_pkg', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha256 : '0f670f6dcc2b00f9a448a7ebd457d4ff985ab702c85cdb3608dcae9889e8d702'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/cache_pkg/sha256\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/query/documentCache\", params),\n          Utils.makeMap(\n              \"/config/query/documentCache/_packageinfo_/url\", url,\n              \"/config/query/documentCache/_packageinfo_/sha256\", sha256\n          ));\n      req = new UpdateRequest();\n      req.add(\"id\", \"2\", \"desc_s\", \"document 1\")\n          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)\n          .setWaitSearcher(true);\n      cluster.getSolrClient().request(req, COLLECTION_NAME);\n\n\n      solrQuery = new SolrQuery(\"q\", \"id:2\", \"collection\", COLLECTION_NAME);\n      SolrResponse result = assertResponseValues(10,\n          cluster.getSolrClient(),\n          new QueryRequest(solrQuery),\n          Utils.makeMap(\"response[0]/my_synthetic_fld_s\", \"version_2\"));\n\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51c0db8d87d52f45f758caaf89a71e2dd8a9e045":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["51c0db8d87d52f45f758caaf89a71e2dd8a9e045"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["51c0db8d87d52f45f758caaf89a71e2dd8a9e045","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"51c0db8d87d52f45f758caaf89a71e2dd8a9e045":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["51c0db8d87d52f45f758caaf89a71e2dd8a9e045"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}