{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertOrdinalsExist(String,IndexReader).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertOrdinalsExist(String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestMultipleIndexFields#assertOrdinalsExist(String,IndexReader).mjava","sourceNew":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","sourceOld":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertOrdinalsExist(String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertOrdinalsExist(String,IndexReader).mjava","sourceNew":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","sourceOld":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertOrdinalsExist(String,IndexReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertOrdinalsExist(String,IndexReader).mjava","sourceNew":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","sourceOld":"  private void assertOrdinalsExist(String field, IndexReader ir) throws IOException {\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      if (r.getBinaryDocValues(field) != null) {\n        return; // not all segments must have this DocValues\n      }\n    }\n    fail(\"no ordinals found for \" + field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d36d0db865f7b84026b447bec653469a6e66df"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}