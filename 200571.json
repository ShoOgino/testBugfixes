{"path":"src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","commits":[{"id":"718ab708b1705aae7831111fcddfc834665eee61","date":1241122833,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","pathOld":"/dev/null","sourceNew":"    private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount==null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros!=null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","pathOld":"src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","sourceNew":"    private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount==null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros!=null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n    }\n\n","sourceOld":"    private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount==null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros!=null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"718ab708b1705aae7831111fcddfc834665eee61":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["718ab708b1705aae7831111fcddfc834665eee61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"718ab708b1705aae7831111fcddfc834665eee61":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["718ab708b1705aae7831111fcddfc834665eee61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}