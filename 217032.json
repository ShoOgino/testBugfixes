{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testQueryStringEscaping().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testQueryStringEscaping().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testQueryStringEscaping().mjava","sourceNew":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testQueryStringEscaping().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testQueryStringEscaping().mjava","sourceNew":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testQueryStringEscaping().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testQueryStringEscaping().mjava","sourceNew":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","sourceOld":"  public void testQueryStringEscaping() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    assertEscapedQueryEquals(\"a-b:c\", a, \"a\\\\-b\\\\:c\");\n    assertEscapedQueryEquals(\"a+b:c\", a, \"a\\\\+b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a\\\\b:c\", a, \"a\\\\\\\\b\\\\:c\");\n\n    assertEscapedQueryEquals(\"a:b-c\", a, \"a\\\\:b\\\\-c\");\n    assertEscapedQueryEquals(\"a:b+c\", a, \"a\\\\:b\\\\+c\");\n    assertEscapedQueryEquals(\"a:b:c\", a, \"a\\\\:b\\\\:c\");\n    assertEscapedQueryEquals(\"a:b\\\\c\", a, \"a\\\\:b\\\\\\\\c\");\n\n    assertEscapedQueryEquals(\"a:b-c*\", a, \"a\\\\:b\\\\-c\\\\*\");\n    assertEscapedQueryEquals(\"a:b+c*\", a, \"a\\\\:b\\\\+c\\\\*\");\n    assertEscapedQueryEquals(\"a:b:c*\", a, \"a\\\\:b\\\\:c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b\\\\\\\\c*\", a, \"a\\\\:b\\\\\\\\\\\\\\\\c\\\\*\");\n\n    assertEscapedQueryEquals(\"a:b-?c\", a, \"a\\\\:b\\\\-\\\\?c\");\n    assertEscapedQueryEquals(\"a:b+?c\", a, \"a\\\\:b\\\\+\\\\?c\");\n    assertEscapedQueryEquals(\"a:b:?c\", a, \"a\\\\:b\\\\:\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b?c\", a, \"a\\\\:b\\\\?c\");\n\n    assertEscapedQueryEquals(\"a:b-c~\", a, \"a\\\\:b\\\\-c\\\\~\");\n    assertEscapedQueryEquals(\"a:b+c~\", a, \"a\\\\:b\\\\+c\\\\~\");\n    assertEscapedQueryEquals(\"a:b:c~\", a, \"a\\\\:b\\\\:c\\\\~\");\n    assertEscapedQueryEquals(\"a:b\\\\c~\", a, \"a\\\\:b\\\\\\\\c\\\\~\");\n\n    assertEscapedQueryEquals(\"[ a - TO a+ ]\", null, \"\\\\[ a \\\\- TO a\\\\+ \\\\]\");\n    assertEscapedQueryEquals(\"[ a : TO a~ ]\", null, \"\\\\[ a \\\\: TO a\\\\~ \\\\]\");\n    assertEscapedQueryEquals(\"[ a\\\\ TO a* ]\", null, \"\\\\[ a\\\\\\\\ TO a\\\\* \\\\]\");\n\n    // LUCENE-881\n    assertEscapedQueryEquals(\"|| abc ||\", a, \"\\\\|\\\\| abc \\\\|\\\\|\");\n    assertEscapedQueryEquals(\"&& abc &&\", a, \"\\\\&\\\\& abc \\\\&\\\\&\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}