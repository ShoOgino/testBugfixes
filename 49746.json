{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","commits":[{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(AtomicReaderContext[],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      collector.setNextReader(ctx);\n      Scorer scorer = weight.scorer(ctx, !collector.acceptsDocsOutOfOrder(), true, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(AtomicReaderContext[] leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (int i = 0; i < leaves.length; i++) { // search each subreader\n      collector.setNextReader(leaves[i]);\n      Scorer scorer = weight.scorer(leaves[i], !collector.acceptsDocsOutOfOrder(), true, leaves[i].reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      collector.setNextReader(ctx);\n      Scorer scorer = weight.scorer(ctx, !collector.acceptsDocsOutOfOrder(), true, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      collector.setNextReader(ctx);\n      Scorer scorer = weight.scorer(ctx, !collector.acceptsDocsOutOfOrder(), true, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4305a0063043df22166bf031d1d46b512f6beba4","date":1363885450,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      collector.setNextReader(ctx);\n      Scorer scorer = weight.scorer(ctx, !collector.acceptsDocsOutOfOrder(), true, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      collector.setNextReader(ctx);\n      Scorer scorer = weight.scorer(ctx, !collector.acceptsDocsOutOfOrder(), true, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        scorer.score(collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d1c249f01722fe2de6d60de2f0aade417fbb638","date":1365517193,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      try {\n        collector.setNextReader(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      Scorer scorer = weight.scorer(ctx, !collector.acceptsDocsOutOfOrder(), true, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      collector.setNextReader(ctx);\n      Scorer scorer = weight.scorer(ctx, !collector.acceptsDocsOutOfOrder(), true, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      try {\n        collector.setNextReader(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      TopScorer scorer = weight.topScorer(ctx, !collector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      try {\n        collector.setNextReader(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      Scorer scorer = weight.scorer(ctx, !collector.acceptsDocsOutOfOrder(), true, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      try {\n        collector.setNextReader(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, !collector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      try {\n        collector.setNextReader(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      TopScorer scorer = weight.topScorer(ctx, !collector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      try {\n        collector.setNextReader(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, !collector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      try {\n        collector.setNextReader(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      Scorer scorer = weight.scorer(ctx, !collector.acceptsDocsOutOfOrder(), true, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, !leafCollector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      try {\n        collector.setNextReader(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, !collector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, !leafCollector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link Collector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      try {\n        collector.setNextReader(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, !collector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(collector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[AtomicReaderContext],Weight,Collector).mjava","sourceNew":null,"sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<AtomicReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (AtomicReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, !leafCollector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["acf00221f44c5f08ccea014f2492b53af15ecd66","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["4305a0063043df22166bf031d1d46b512f6beba4"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["4d1c249f01722fe2de6d60de2f0aade417fbb638","a5794e5c995c57444b154b01a9f3c837cd530a77"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4305a0063043df22166bf031d1d46b512f6beba4":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4305a0063043df22166bf031d1d46b512f6beba4"],"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4305a0063043df22166bf031d1d46b512f6beba4":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}