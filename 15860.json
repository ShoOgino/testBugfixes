{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","commits":[{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n    if (bulkScorer != null) { // BooleanScorer is applicable\n      // TODO: what is the right heuristic here?\n      final long costThreshold;\n      if (query.minNrShouldMatch <= 1) {\n        // when all clauses are optional, use BooleanScorer aggressively\n        // TODO: is there actually a threshold under which we should rather\n        // use the regular scorer?\n        costThreshold = -1;\n      } else {\n        // when a minimum number of clauses should match, BooleanScorer is\n        // going to score all windows that have at least minNrShouldMatch\n        // matches in the window. But there is no way to know if there is\n        // an intersection (all clauses might match a different doc ID and\n        // there will be no matches in the end) so we should only use\n        // BooleanScorer if matches are very dense\n        costThreshold = context.reader().maxDoc() / 3;\n      }\n\n      if (bulkScorer.cost() > costThreshold) {\n        return bulkScorer;\n      }\n    }\n    return super.bulkScorer(context, acceptDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n    if (bulkScorer != null) { // BooleanScorer is applicable\n      // TODO: what is the right heuristic here?\n      final long costThreshold;\n      if (query.getMinimumNumberShouldMatch() <= 1) {\n        // when all clauses are optional, use BooleanScorer aggressively\n        // TODO: is there actually a threshold under which we should rather\n        // use the regular scorer?\n        costThreshold = -1;\n      } else {\n        // when a minimum number of clauses should match, BooleanScorer is\n        // going to score all windows that have at least minNrShouldMatch\n        // matches in the window. But there is no way to know if there is\n        // an intersection (all clauses might match a different doc ID and\n        // there will be no matches in the end) so we should only use\n        // BooleanScorer if matches are very dense\n        costThreshold = context.reader().maxDoc() / 3;\n      }\n\n      if (bulkScorer.cost() > costThreshold) {\n        return bulkScorer;\n      }\n    }\n    return super.bulkScorer(context, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n    if (bulkScorer != null) { // BooleanScorer is applicable\n      // TODO: what is the right heuristic here?\n      final long costThreshold;\n      if (query.minNrShouldMatch <= 1) {\n        // when all clauses are optional, use BooleanScorer aggressively\n        // TODO: is there actually a threshold under which we should rather\n        // use the regular scorer?\n        costThreshold = -1;\n      } else {\n        // when a minimum number of clauses should match, BooleanScorer is\n        // going to score all windows that have at least minNrShouldMatch\n        // matches in the window. But there is no way to know if there is\n        // an intersection (all clauses might match a different doc ID and\n        // there will be no matches in the end) so we should only use\n        // BooleanScorer if matches are very dense\n        costThreshold = context.reader().maxDoc() / 3;\n      }\n\n      if (bulkScorer.cost() > costThreshold) {\n        return bulkScorer;\n      }\n    }\n    return super.bulkScorer(context, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n    final BooleanScorer bulkScorer = booleanScorer(context);\n    if (bulkScorer != null) { // BooleanScorer is applicable\n      // TODO: what is the right heuristic here?\n      final long costThreshold;\n      if (query.getMinimumNumberShouldMatch() <= 1) {\n        // when all clauses are optional, use BooleanScorer aggressively\n        // TODO: is there actually a threshold under which we should rather\n        // use the regular scorer?\n        costThreshold = -1;\n      } else {\n        // when a minimum number of clauses should match, BooleanScorer is\n        // going to score all windows that have at least minNrShouldMatch\n        // matches in the window. But there is no way to know if there is\n        // an intersection (all clauses might match a different doc ID and\n        // there will be no matches in the end) so we should only use\n        // BooleanScorer if matches are very dense\n        costThreshold = context.reader().maxDoc() / 3;\n      }\n\n      if (bulkScorer.cost() > costThreshold) {\n        return bulkScorer;\n      }\n    }\n    return super.bulkScorer(context);\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n    if (bulkScorer != null) { // BooleanScorer is applicable\n      // TODO: what is the right heuristic here?\n      final long costThreshold;\n      if (query.getMinimumNumberShouldMatch() <= 1) {\n        // when all clauses are optional, use BooleanScorer aggressively\n        // TODO: is there actually a threshold under which we should rather\n        // use the regular scorer?\n        costThreshold = -1;\n      } else {\n        // when a minimum number of clauses should match, BooleanScorer is\n        // going to score all windows that have at least minNrShouldMatch\n        // matches in the window. But there is no way to know if there is\n        // an intersection (all clauses might match a different doc ID and\n        // there will be no matches in the end) so we should only use\n        // BooleanScorer if matches are very dense\n        costThreshold = context.reader().maxDoc() / 3;\n      }\n\n      if (bulkScorer.cost() > costThreshold) {\n        return bulkScorer;\n      }\n    }\n    return super.bulkScorer(context, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}