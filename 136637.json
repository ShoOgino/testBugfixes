{"path":"solr/core/src/java/org/apache/solr/request/macro/MacroExpander#expand().mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/macro/MacroExpander#expand().mjava","pathOld":"/dev/null","sourceNew":"  public boolean expand() {\n    this.expanded = new HashMap<>(orig.size());\n\n    boolean changed = false;\n    for (Map.Entry<String,String[]> entry : orig.entrySet()) {\n      String k = entry.getKey();\n      String newK = expand(k);\n      String[] values = entry.getValue();\n      List<String> newValues = null;\n      for (String v : values) {\n        String newV = expand(v);\n        if (newV != v) {\n          if (newValues == null) {\n            newValues = new ArrayList<>(values.length);\n            for (String vv : values) {\n              if (vv == v)  break;\n              newValues.add(vv);\n            }\n          }\n          newValues.add(newV);\n        }\n      }\n\n      if (newValues != null) {\n        values = newValues.toArray(new String[newValues.size()]);\n        changed = true;\n      }\n\n      if (k != newK) {\n        changed = true;\n      }\n\n      expanded.put( newK, values );\n    }\n\n    return changed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/macro/MacroExpander#expand().mjava","pathOld":"/dev/null","sourceNew":"  public boolean expand() {\n    this.expanded = new HashMap<>(orig.size());\n\n    boolean changed = false;\n    for (Map.Entry<String,String[]> entry : orig.entrySet()) {\n      String k = entry.getKey();\n      String newK = expand(k);\n      String[] values = entry.getValue();\n      List<String> newValues = null;\n      for (String v : values) {\n        String newV = expand(v);\n        if (newV != v) {\n          if (newValues == null) {\n            newValues = new ArrayList<>(values.length);\n            for (String vv : values) {\n              if (vv == v)  break;\n              newValues.add(vv);\n            }\n          }\n          newValues.add(newV);\n        }\n      }\n\n      if (newValues != null) {\n        values = newValues.toArray(new String[newValues.size()]);\n        changed = true;\n      }\n\n      if (k != newK) {\n        changed = true;\n      }\n\n      expanded.put( newK, values );\n    }\n\n    return changed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b6715fe628110700533c53f50d6116e4421974","date":1478646583,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/macro/MacroExpander#expand().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/macro/MacroExpander#expand().mjava","sourceNew":"  public boolean expand() {\n    this.expanded = new HashMap<>(orig.size());\n\n    boolean changed = false;\n    for (Map.Entry<String,String[]> entry : orig.entrySet()) {\n      String k = entry.getKey();\n      String newK = expand(k);\n      String[] values = entry.getValue();\n      List<String> newValues = null;\n      for (String v : values) {\n        String newV = expand(v);\n        if (newV != v) {\n          if (newValues == null) {\n            newValues = new ArrayList<>(values.length);\n            for (String vv : values) {\n              if (vv == v)  break;\n              newValues.add(vv);\n            }\n          }\n        }\n        if (newValues != null) {\n          newValues.add(newV);\n        }\n      }\n\n      if (newValues != null) {\n        values = newValues.toArray(new String[newValues.size()]);\n        changed = true;\n      }\n\n      if (k != newK) {\n        changed = true;\n      }\n\n      expanded.put( newK, values );\n    }\n\n    return changed;\n  }\n\n","sourceOld":"  public boolean expand() {\n    this.expanded = new HashMap<>(orig.size());\n\n    boolean changed = false;\n    for (Map.Entry<String,String[]> entry : orig.entrySet()) {\n      String k = entry.getKey();\n      String newK = expand(k);\n      String[] values = entry.getValue();\n      List<String> newValues = null;\n      for (String v : values) {\n        String newV = expand(v);\n        if (newV != v) {\n          if (newValues == null) {\n            newValues = new ArrayList<>(values.length);\n            for (String vv : values) {\n              if (vv == v)  break;\n              newValues.add(vv);\n            }\n          }\n          newValues.add(newV);\n        }\n      }\n\n      if (newValues != null) {\n        values = newValues.toArray(new String[newValues.size()]);\n        changed = true;\n      }\n\n      if (k != newK) {\n        changed = true;\n      }\n\n      expanded.put( newK, values );\n    }\n\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/macro/MacroExpander#expand().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/macro/MacroExpander#expand().mjava","sourceNew":"  public boolean expand() {\n    this.expanded = new HashMap<>(orig.size());\n\n    boolean changed = false;\n    for (Map.Entry<String,String[]> entry : orig.entrySet()) {\n      String k = entry.getKey();\n      String newK = expand(k);\n      String[] values = entry.getValue();\n      List<String> newValues = null;\n      for (String v : values) {\n        String newV = expand(v);\n        if (newV != v) {\n          if (newValues == null) {\n            newValues = new ArrayList<>(values.length);\n            for (String vv : values) {\n              if (vv == v)  break;\n              newValues.add(vv);\n            }\n          }\n        }\n        if (newValues != null) {\n          newValues.add(newV);\n        }\n      }\n\n      if (newValues != null) {\n        values = newValues.toArray(new String[newValues.size()]);\n        changed = true;\n      }\n\n      if (k != newK) {\n        changed = true;\n      }\n\n      expanded.put( newK, values );\n    }\n\n    return changed;\n  }\n\n","sourceOld":"  public boolean expand() {\n    this.expanded = new HashMap<>(orig.size());\n\n    boolean changed = false;\n    for (Map.Entry<String,String[]> entry : orig.entrySet()) {\n      String k = entry.getKey();\n      String newK = expand(k);\n      String[] values = entry.getValue();\n      List<String> newValues = null;\n      for (String v : values) {\n        String newV = expand(v);\n        if (newV != v) {\n          if (newValues == null) {\n            newValues = new ArrayList<>(values.length);\n            for (String vv : values) {\n              if (vv == v)  break;\n              newValues.add(vv);\n            }\n          }\n          newValues.add(newV);\n        }\n      }\n\n      if (newValues != null) {\n        values = newValues.toArray(new String[newValues.size()]);\n        changed = true;\n      }\n\n      if (k != newK) {\n        changed = true;\n      }\n\n      expanded.put( newK, values );\n    }\n\n    return changed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/macro/MacroExpander#expand().mjava","pathOld":"solr/core/src/java/org/apache/solr/request/macro/MacroExpander#expand().mjava","sourceNew":"  public boolean expand() {\n    this.expanded = new HashMap<>(orig.size());\n\n    boolean changed = false;\n    for (Map.Entry<String,String[]> entry : orig.entrySet()) {\n      String k = entry.getKey();\n      String[] values = entry.getValue();\n      if (!isExpandingExpr() && \"expr\".equals(k) ) {  // SOLR-12891\n        expanded.put(k,values);\n        continue;\n      }\n      String newK = expand(k);\n      List<String> newValues = null;\n      for (String v : values) {\n        String newV = expand(v);\n        if (newV != v) {\n          if (newValues == null) {\n            newValues = new ArrayList<>(values.length);\n            for (String vv : values) {\n              if (vv == v)  break;\n              newValues.add(vv);\n            }\n          }\n        }\n        if (newValues != null) {\n          newValues.add(newV);\n        }\n      }\n\n      if (newValues != null) {\n        values = newValues.toArray(new String[newValues.size()]);\n        changed = true;\n      }\n\n      if (k != newK) {\n        changed = true;\n      }\n\n      expanded.put( newK, values );\n    }\n\n    return changed;\n  }\n\n","sourceOld":"  public boolean expand() {\n    this.expanded = new HashMap<>(orig.size());\n\n    boolean changed = false;\n    for (Map.Entry<String,String[]> entry : orig.entrySet()) {\n      String k = entry.getKey();\n      String newK = expand(k);\n      String[] values = entry.getValue();\n      List<String> newValues = null;\n      for (String v : values) {\n        String newV = expand(v);\n        if (newV != v) {\n          if (newValues == null) {\n            newValues = new ArrayList<>(values.length);\n            for (String vv : values) {\n              if (vv == v)  break;\n              newValues.add(vv);\n            }\n          }\n        }\n        if (newValues != null) {\n          newValues.add(newV);\n        }\n      }\n\n      if (newValues != null) {\n        values = newValues.toArray(new String[newValues.size()]);\n        changed = true;\n      }\n\n      if (k != newK) {\n        changed = true;\n      }\n\n      expanded.put( newK, values );\n    }\n\n    return changed;\n  }\n\n","bugFix":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0370d6fb5289875090a50a9d0887ee584fed440":["68b6715fe628110700533c53f50d6116e4421974"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","68b6715fe628110700533c53f50d6116e4421974"],"68b6715fe628110700533c53f50d6116e4421974":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0370d6fb5289875090a50a9d0887ee584fed440"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0370d6fb5289875090a50a9d0887ee584fed440":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","199dfa410f1fdbfd3294106b04096cce5ed34b21","68b6715fe628110700533c53f50d6116e4421974"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"68b6715fe628110700533c53f50d6116e4421974":["a0370d6fb5289875090a50a9d0887ee584fed440","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}