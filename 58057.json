{"path":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","date":1448513807,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = Math.max(maxScore, score);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = Math.toIntExact(groups.totalHits);\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":["9c7cdfe5a1ea9db97faa404b251fa644faa73597"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = Math.toIntExact(groups.totalHits);\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      int max = Math.toIntExact(groups.totalHits);\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = groups.totalHits;\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      assert groups.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n      int max = Math.toIntExact(groups.totalHits.value);\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits.value, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      int max = Math.toIntExact(groups.totalHits);\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(GroupDocs groups) {\n      assert groups.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n      int max = Math.toIntExact(groups.totalHits.value);\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits.value, score, TotalHits.Relation.EQUAL_TO);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      assert groups.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n      int max = Math.toIntExact(groups.totalHits.value);\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits.value, score);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.Command#getDocList(GroupDocs).mjava","sourceNew":"    protected DocList getDocList(@SuppressWarnings({\"rawtypes\"})GroupDocs groups) {\n      assert groups.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n      int max = Math.toIntExact(groups.totalHits.value);\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits.value, score, TotalHits.Relation.EQUAL_TO);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","sourceOld":"    protected DocList getDocList(GroupDocs groups) {\n      assert groups.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n      int max = Math.toIntExact(groups.totalHits.value);\n      int off = groupOffset;\n      int len = docsPerGroup;\n      if (format == Format.simple) {\n        off = offset;\n        len = numGroups;\n      }\n      int docsToCollect = getMax(off, len, max);\n\n      // TODO: implement a DocList impl that doesn't need to start at offset=0\n      int docsCollected = Math.min(docsToCollect, groups.scoreDocs.length);\n\n      int ids[] = new int[docsCollected];\n      float[] scores = needScores ? new float[docsCollected] : null;\n      for (int i = 0; i < ids.length; i++) {\n        ids[i] = groups.scoreDocs[i].doc;\n        if (scores != null)\n          scores[i] = groups.scoreDocs[i].score;\n      }\n\n      float score = groups.maxScore;\n      maxScore = maxAvoidNaN(score, maxScore);\n      DocSlice docs = new DocSlice(off, Math.max(0, ids.length - off), ids, scores, groups.totalHits.value, score, TotalHits.Relation.EQUAL_TO);\n\n      if (getDocList) {\n        DocIterator iter = docs.iterator();\n        while (iter.hasNext())\n          idSet.add(iter.nextDoc());\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}