{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#restoreState(AutoScaling.Trigger).mjava","commits":[{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#restoreState(AutoScaling.Trigger).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#restoreState(AutoScaling.Trigger[NodeAddedEvent]).mjava","sourceNew":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof NodeAddedTrigger) {\n      NodeAddedTrigger that = (NodeAddedTrigger) old;\n      assert this.name.equals(that.name);\n      this.lastLiveNodes = new HashSet<>(that.lastLiveNodes);\n      this.nodeNameVsTimeAdded = new HashMap<>(that.nodeNameVsTimeAdded);\n    } else  {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState(AutoScaling.Trigger<NodeAddedEvent> old) {\n    assert old.isClosed();\n    if (old instanceof NodeAddedTrigger) {\n      NodeAddedTrigger that = (NodeAddedTrigger) old;\n      assert this.name.equals(that.name);\n      this.lastLiveNodes = new HashSet<>(that.lastLiveNodes);\n      this.nodeNameVsTimeAdded = new HashMap<>(that.nodeNameVsTimeAdded);\n    } else  {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#restoreState(AutoScaling.Trigger).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#restoreState(AutoScaling.Trigger[NodeAddedEvent]).mjava","sourceNew":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof NodeAddedTrigger) {\n      NodeAddedTrigger that = (NodeAddedTrigger) old;\n      assert this.name.equals(that.name);\n      this.lastLiveNodes = new HashSet<>(that.lastLiveNodes);\n      this.nodeNameVsTimeAdded = new HashMap<>(that.nodeNameVsTimeAdded);\n    } else  {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState(AutoScaling.Trigger<NodeAddedEvent> old) {\n    assert old.isClosed();\n    if (old instanceof NodeAddedTrigger) {\n      NodeAddedTrigger that = (NodeAddedTrigger) old;\n      assert this.name.equals(that.name);\n      this.lastLiveNodes = new HashSet<>(that.lastLiveNodes);\n      this.nodeNameVsTimeAdded = new HashMap<>(that.nodeNameVsTimeAdded);\n    } else  {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#restoreState(AutoScaling.Trigger).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof NodeAddedTrigger) {\n      NodeAddedTrigger that = (NodeAddedTrigger) old;\n      assert this.name.equals(that.name);\n      this.lastLiveNodes = new HashSet<>(that.lastLiveNodes);\n      this.nodeNameVsTimeAdded = new HashMap<>(that.nodeNameVsTimeAdded);\n    } else  {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#restoreState(AutoScaling.Trigger).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof NodeAddedTrigger) {\n      NodeAddedTrigger that = (NodeAddedTrigger) old;\n      assert this.name.equals(that.name);\n      this.lastLiveNodes = new HashSet<>(that.lastLiveNodes);\n      this.nodeNameVsTimeAdded = new HashMap<>(that.nodeNameVsTimeAdded);\n    } else  {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#restoreState(AutoScaling.Trigger).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#restoreState(AutoScaling.Trigger).mjava","sourceNew":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof NodeAddedTrigger) {\n      NodeAddedTrigger that = (NodeAddedTrigger) old;\n      assert this.name.equals(that.name);\n      this.lastLiveNodes.clear();\n      this.lastLiveNodes.addAll(that.lastLiveNodes);\n      this.nodeNameVsTimeAdded.clear();\n      this.nodeNameVsTimeAdded.putAll(that.nodeNameVsTimeAdded);\n    } else  {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof NodeAddedTrigger) {\n      NodeAddedTrigger that = (NodeAddedTrigger) old;\n      assert this.name.equals(that.name);\n      this.lastLiveNodes = new HashSet<>(that.lastLiveNodes);\n      this.nodeNameVsTimeAdded = new HashMap<>(that.nodeNameVsTimeAdded);\n    } else  {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#restoreState(AutoScaling.Trigger).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void restoreState(AutoScaling.Trigger old) {\n    assert old.isClosed();\n    if (old instanceof NodeAddedTrigger) {\n      NodeAddedTrigger that = (NodeAddedTrigger) old;\n      assert this.name.equals(that.name);\n      this.lastLiveNodes.clear();\n      this.lastLiveNodes.addAll(that.lastLiveNodes);\n      this.nodeNameVsTimeAdded.clear();\n      this.nodeNameVsTimeAdded.putAll(that.nodeNameVsTimeAdded);\n    } else  {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE,\n          \"Unable to restore state from an unknown type of trigger\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"3f504512a03d978990cbff30db0522b354e846db":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","464244264804e3f981bf1fb4b732516d8d62dbc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2","560c18d71dad43d675158783c3840f8c80d6d39c"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["3f504512a03d978990cbff30db0522b354e846db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}