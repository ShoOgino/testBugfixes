{"path":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#getAllNodes(InputStream).mjava","commits":[{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#getAllNodes(InputStream).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#getAllNodes(File).mjava","sourceNew":"  private String[] getAllNodes(InputStream is) throws ParserConfigurationException, IOException, SAXException {\n    List<String> expressions = new ArrayList<String>(); // XPATH and value for all elements in the indicated XML\n    DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory\n        .newInstance();\n    DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n    Document document = docBuilder.parse(is);\n\n    Node root = document.getDocumentElement();\n    gatherNodes(root, expressions, \"\");\n    return expressions.toArray(new String[expressions.size()]);\n  }\n\n","sourceOld":"  private String[] getAllNodes(File xmlFile) throws ParserConfigurationException, IOException, SAXException {\n    List<String> expressions = new ArrayList<String>(); // XPATH and value for all elements in the indicated XML\n    DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory\n        .newInstance();\n    DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n    Document document = docBuilder.parse(xmlFile);\n\n    Node root = document.getDocumentElement();\n    gatherNodes(root, expressions, \"\");\n    return expressions.toArray(new String[expressions.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#getAllNodes(InputStream).mjava","pathOld":"/dev/null","sourceNew":"  private String[] getAllNodes(InputStream is) throws ParserConfigurationException, IOException, SAXException {\n    List<String> expressions = new ArrayList<String>(); // XPATH and value for all elements in the indicated XML\n    DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory\n        .newInstance();\n    DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n    Document document = docBuilder.parse(is);\n\n    Node root = document.getDocumentElement();\n    gatherNodes(root, expressions, \"\");\n    return expressions.toArray(new String[expressions.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#getAllNodes(InputStream).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#getAllNodes(InputStream).mjava","sourceNew":"  private String[] getAllNodes(InputStream is) throws ParserConfigurationException, IOException, SAXException {\n    List<String> expressions = new ArrayList<>(); // XPATH and value for all elements in the indicated XML\n    DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory\n        .newInstance();\n    DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n    Document document = docBuilder.parse(is);\n\n    Node root = document.getDocumentElement();\n    gatherNodes(root, expressions, \"\");\n    return expressions.toArray(new String[expressions.size()]);\n  }\n\n","sourceOld":"  private String[] getAllNodes(InputStream is) throws ParserConfigurationException, IOException, SAXException {\n    List<String> expressions = new ArrayList<String>(); // XPATH and value for all elements in the indicated XML\n    DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory\n        .newInstance();\n    DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n    Document document = docBuilder.parse(is);\n\n    Node root = document.getDocumentElement();\n    gatherNodes(root, expressions, \"\");\n    return expressions.toArray(new String[expressions.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#getAllNodes(InputStream).mjava","sourceNew":null,"sourceOld":"  private String[] getAllNodes(InputStream is) throws ParserConfigurationException, IOException, SAXException {\n    List<String> expressions = new ArrayList<>(); // XPATH and value for all elements in the indicated XML\n    DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory\n        .newInstance();\n    DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n    Document document = docBuilder.parse(is);\n\n    Node root = document.getDocumentElement();\n    gatherNodes(root, expressions, \"\");\n    return expressions.toArray(new String[expressions.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}