{"path":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniMRYarnCluster#serviceInit(Configuration).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniMRYarnCluster#serviceInit(Configuration).mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniMRYarnCluster#serviceInit(Configuration).mjava","sourceNew":"  @Override\n  public void serviceInit(Configuration conf) throws Exception {\n    conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.YARN_FRAMEWORK_NAME);\n    if (conf.get(MRJobConfig.MR_AM_STAGING_DIR) == null) {\n      conf.set(MRJobConfig.MR_AM_STAGING_DIR, new File(getTestWorkDir(),\n          \"apps_staging_dir/\").getAbsolutePath());\n    }\n\n    // By default, VMEM monitoring disabled, PMEM monitoring enabled.\n    if (!conf.getBoolean(\n        MRConfig.MAPREDUCE_MINICLUSTER_CONTROL_RESOURCE_MONITORING,\n        MRConfig.DEFAULT_MAPREDUCE_MINICLUSTER_CONTROL_RESOURCE_MONITORING)) {\n      conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\n      conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\n    }\n\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,  \"000\");\n\n    try {\n      Path stagingPath = FileContext.getFileContext(conf).makeQualified(\n          new Path(conf.get(MRJobConfig.MR_AM_STAGING_DIR)));\n      /*\n       * Re-configure the staging path on Windows if the file system is localFs.\n       * We need to use a absolute path that contains the drive letter. The unit\n       * test could run on a different drive than the AM. We can run into the\n       * issue that job files are localized to the drive where the test runs on,\n       * while the AM starts on a different drive and fails to find the job\n       * metafiles. Using absolute path can avoid this ambiguity.\n       */\n      if (Path.WINDOWS) {\n        if (LocalFileSystem.class.isInstance(stagingPath.getFileSystem(conf))) {\n          conf.set(MRJobConfig.MR_AM_STAGING_DIR,\n              new File(conf.get(MRJobConfig.MR_AM_STAGING_DIR))\n                  .getAbsolutePath());\n        }\n      }\n      FileContext fc=FileContext.getFileContext(stagingPath.toUri(), conf);\n      if (fc.util().exists(stagingPath)) {\n        LOG.info(stagingPath + \" exists! deleting...\");\n        fc.delete(stagingPath, true);\n      }\n      LOG.info(\"mkdir: \" + stagingPath);\n      //mkdir the staging directory so that right permissions are set while running as proxy user\n      fc.mkdir(stagingPath, null, true);\n      //mkdir done directory as well \n      String doneDir = JobHistoryUtils.getConfiguredHistoryServerDoneDirPrefix(conf);\n      Path doneDirPath = fc.makeQualified(new Path(doneDir));\n      fc.mkdir(doneDirPath, null, true);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Could not create staging directory. \", e);\n    }\n    conf.set(MRConfig.MASTER_ADDRESS, \"test\"); // The default is local because of\n                                             // which shuffle doesn't happen\n    //configure the shuffle service in NM\n    conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,\n        new String[] { ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID });\n    conf.setClass(String.format(Locale.ENGLISH, YarnConfiguration.NM_AUX_SERVICE_FMT,\n        ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID), ShuffleHandler.class,\n        Service.class);\n\n    // Non-standard shuffle port\n    conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY, 0);\n\n    conf.setClass(YarnConfiguration.NM_CONTAINER_EXECUTOR,\n        DefaultContainerExecutor.class, ContainerExecutor.class);\n\n    // TestMRJobs is for testing non-uberized operation only; see TestUberAM\n    // for corresponding uberized tests.\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n\n    super.serviceInit(conf);\n  }\n\n","sourceOld":"  @Override\n  public void serviceInit(Configuration conf) throws Exception {\n    conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.YARN_FRAMEWORK_NAME);\n    if (conf.get(MRJobConfig.MR_AM_STAGING_DIR) == null) {\n      conf.set(MRJobConfig.MR_AM_STAGING_DIR, new File(getTestWorkDir(),\n          \"apps_staging_dir/\").getAbsolutePath());\n    }\n\n    // By default, VMEM monitoring disabled, PMEM monitoring enabled.\n    if (!conf.getBoolean(\n        MRConfig.MAPREDUCE_MINICLUSTER_CONTROL_RESOURCE_MONITORING,\n        MRConfig.DEFAULT_MAPREDUCE_MINICLUSTER_CONTROL_RESOURCE_MONITORING)) {\n      conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\n      conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\n    }\n\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,  \"000\");\n\n    try {\n      Path stagingPath = FileContext.getFileContext(conf).makeQualified(\n          new Path(conf.get(MRJobConfig.MR_AM_STAGING_DIR)));\n      /*\n       * Re-configure the staging path on Windows if the file system is localFs.\n       * We need to use a absolute path that contains the drive letter. The unit\n       * test could run on a different drive than the AM. We can run into the\n       * issue that job files are localized to the drive where the test runs on,\n       * while the AM starts on a different drive and fails to find the job\n       * metafiles. Using absolute path can avoid this ambiguity.\n       */\n      if (Path.WINDOWS) {\n        if (LocalFileSystem.class.isInstance(stagingPath.getFileSystem(conf))) {\n          conf.set(MRJobConfig.MR_AM_STAGING_DIR,\n              new File(conf.get(MRJobConfig.MR_AM_STAGING_DIR))\n                  .getAbsolutePath());\n        }\n      }\n      FileContext fc=FileContext.getFileContext(stagingPath.toUri(), conf);\n      if (fc.util().exists(stagingPath)) {\n        LOG.info(stagingPath + \" exists! deleting...\");\n        fc.delete(stagingPath, true);\n      }\n      LOG.info(\"mkdir: \" + stagingPath);\n      //mkdir the staging directory so that right permissions are set while running as proxy user\n      fc.mkdir(stagingPath, null, true);\n      //mkdir done directory as well \n      String doneDir = JobHistoryUtils.getConfiguredHistoryServerDoneDirPrefix(conf);\n      Path doneDirPath = fc.makeQualified(new Path(doneDir));\n      fc.mkdir(doneDirPath, null, true);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Could not create staging directory. \", e);\n    }\n    conf.set(MRConfig.MASTER_ADDRESS, \"test\"); // The default is local because of\n                                             // which shuffle doesn't happen\n    //configure the shuffle service in NM\n    conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,\n        new String[] { ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID });\n    conf.setClass(String.format(Locale.ENGLISH, YarnConfiguration.NM_AUX_SERVICE_FMT,\n        ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID), ShuffleHandler.class,\n        Service.class);\n\n    // Non-standard shuffle port\n    conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY, 0);\n\n    conf.setClass(YarnConfiguration.NM_CONTAINER_EXECUTOR,\n        DefaultContainerExecutor.class, ContainerExecutor.class);\n\n    // TestMRJobs is for testing non-uberized operation only; see TestUberAM\n    // for corresponding uberized tests.\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n\n    super.serviceInit(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniMRYarnCluster#serviceInit(Configuration).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void serviceInit(Configuration conf) throws Exception {\n    conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.YARN_FRAMEWORK_NAME);\n    if (conf.get(MRJobConfig.MR_AM_STAGING_DIR) == null) {\n      conf.set(MRJobConfig.MR_AM_STAGING_DIR, new File(getTestWorkDir(),\n          \"apps_staging_dir/\").getAbsolutePath());\n    }\n\n    // By default, VMEM monitoring disabled, PMEM monitoring enabled.\n    if (!conf.getBoolean(\n        MRConfig.MAPREDUCE_MINICLUSTER_CONTROL_RESOURCE_MONITORING,\n        MRConfig.DEFAULT_MAPREDUCE_MINICLUSTER_CONTROL_RESOURCE_MONITORING)) {\n      conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\n      conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\n    }\n\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,  \"000\");\n\n    try {\n      Path stagingPath = FileContext.getFileContext(conf).makeQualified(\n          new Path(conf.get(MRJobConfig.MR_AM_STAGING_DIR)));\n      /*\n       * Re-configure the staging path on Windows if the file system is localFs.\n       * We need to use a absolute path that contains the drive letter. The unit\n       * test could run on a different drive than the AM. We can run into the\n       * issue that job files are localized to the drive where the test runs on,\n       * while the AM starts on a different drive and fails to find the job\n       * metafiles. Using absolute path can avoid this ambiguity.\n       */\n      if (Path.WINDOWS) {\n        if (LocalFileSystem.class.isInstance(stagingPath.getFileSystem(conf))) {\n          conf.set(MRJobConfig.MR_AM_STAGING_DIR,\n              new File(conf.get(MRJobConfig.MR_AM_STAGING_DIR))\n                  .getAbsolutePath());\n        }\n      }\n      FileContext fc=FileContext.getFileContext(stagingPath.toUri(), conf);\n      if (fc.util().exists(stagingPath)) {\n        LOG.info(stagingPath + \" exists! deleting...\");\n        fc.delete(stagingPath, true);\n      }\n      LOG.info(\"mkdir: \" + stagingPath);\n      //mkdir the staging directory so that right permissions are set while running as proxy user\n      fc.mkdir(stagingPath, null, true);\n      //mkdir done directory as well \n      String doneDir = JobHistoryUtils.getConfiguredHistoryServerDoneDirPrefix(conf);\n      Path doneDirPath = fc.makeQualified(new Path(doneDir));\n      fc.mkdir(doneDirPath, null, true);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Could not create staging directory. \", e);\n    }\n    conf.set(MRConfig.MASTER_ADDRESS, \"test\"); // The default is local because of\n                                             // which shuffle doesn't happen\n    //configure the shuffle service in NM\n    conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,\n        new String[] { ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID });\n    conf.setClass(String.format(Locale.ENGLISH, YarnConfiguration.NM_AUX_SERVICE_FMT,\n        ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID), ShuffleHandler.class,\n        Service.class);\n\n    // Non-standard shuffle port\n    conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY, 0);\n\n    conf.setClass(YarnConfiguration.NM_CONTAINER_EXECUTOR,\n        DefaultContainerExecutor.class, ContainerExecutor.class);\n\n    // TestMRJobs is for testing non-uberized operation only; see TestUberAM\n    // for corresponding uberized tests.\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n\n    super.serviceInit(conf);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniMRYarnCluster#serviceInit(Configuration).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void serviceInit(Configuration conf) throws Exception {\n    conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.YARN_FRAMEWORK_NAME);\n    if (conf.get(MRJobConfig.MR_AM_STAGING_DIR) == null) {\n      conf.set(MRJobConfig.MR_AM_STAGING_DIR, new File(getTestWorkDir(),\n          \"apps_staging_dir/\").getAbsolutePath());\n    }\n\n    // By default, VMEM monitoring disabled, PMEM monitoring enabled.\n    if (!conf.getBoolean(\n        MRConfig.MAPREDUCE_MINICLUSTER_CONTROL_RESOURCE_MONITORING,\n        MRConfig.DEFAULT_MAPREDUCE_MINICLUSTER_CONTROL_RESOURCE_MONITORING)) {\n      conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\n      conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\n    }\n\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,  \"000\");\n\n    try {\n      Path stagingPath = FileContext.getFileContext(conf).makeQualified(\n          new Path(conf.get(MRJobConfig.MR_AM_STAGING_DIR)));\n      /*\n       * Re-configure the staging path on Windows if the file system is localFs.\n       * We need to use a absolute path that contains the drive letter. The unit\n       * test could run on a different drive than the AM. We can run into the\n       * issue that job files are localized to the drive where the test runs on,\n       * while the AM starts on a different drive and fails to find the job\n       * metafiles. Using absolute path can avoid this ambiguity.\n       */\n      if (Path.WINDOWS) {\n        if (LocalFileSystem.class.isInstance(stagingPath.getFileSystem(conf))) {\n          conf.set(MRJobConfig.MR_AM_STAGING_DIR,\n              new File(conf.get(MRJobConfig.MR_AM_STAGING_DIR))\n                  .getAbsolutePath());\n        }\n      }\n      FileContext fc=FileContext.getFileContext(stagingPath.toUri(), conf);\n      if (fc.util().exists(stagingPath)) {\n        LOG.info(stagingPath + \" exists! deleting...\");\n        fc.delete(stagingPath, true);\n      }\n      LOG.info(\"mkdir: \" + stagingPath);\n      //mkdir the staging directory so that right permissions are set while running as proxy user\n      fc.mkdir(stagingPath, null, true);\n      //mkdir done directory as well \n      String doneDir = JobHistoryUtils.getConfiguredHistoryServerDoneDirPrefix(conf);\n      Path doneDirPath = fc.makeQualified(new Path(doneDir));\n      fc.mkdir(doneDirPath, null, true);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Could not create staging directory. \", e);\n    }\n    conf.set(MRConfig.MASTER_ADDRESS, \"test\"); // The default is local because of\n                                             // which shuffle doesn't happen\n    //configure the shuffle service in NM\n    conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,\n        new String[] { ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID });\n    conf.setClass(String.format(Locale.ENGLISH, YarnConfiguration.NM_AUX_SERVICE_FMT,\n        ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID), ShuffleHandler.class,\n        Service.class);\n\n    // Non-standard shuffle port\n    conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY, 0);\n\n    conf.setClass(YarnConfiguration.NM_CONTAINER_EXECUTOR,\n        DefaultContainerExecutor.class, ContainerExecutor.class);\n\n    // TestMRJobs is for testing non-uberized operation only; see TestUberAM\n    // for corresponding uberized tests.\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n\n    super.serviceInit(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniMRYarnCluster#serviceInit(Configuration).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void serviceInit(Configuration conf) throws Exception {\n    conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.YARN_FRAMEWORK_NAME);\n    if (conf.get(MRJobConfig.MR_AM_STAGING_DIR) == null) {\n      conf.set(MRJobConfig.MR_AM_STAGING_DIR, new File(getTestWorkDir(),\n          \"apps_staging_dir/\").getAbsolutePath());\n    }\n\n    // By default, VMEM monitoring disabled, PMEM monitoring enabled.\n    if (!conf.getBoolean(\n        MRConfig.MAPREDUCE_MINICLUSTER_CONTROL_RESOURCE_MONITORING,\n        MRConfig.DEFAULT_MAPREDUCE_MINICLUSTER_CONTROL_RESOURCE_MONITORING)) {\n      conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);\n      conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);\n    }\n\n    conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,  \"000\");\n\n    try {\n      Path stagingPath = FileContext.getFileContext(conf).makeQualified(\n          new Path(conf.get(MRJobConfig.MR_AM_STAGING_DIR)));\n      /*\n       * Re-configure the staging path on Windows if the file system is localFs.\n       * We need to use a absolute path that contains the drive letter. The unit\n       * test could run on a different drive than the AM. We can run into the\n       * issue that job files are localized to the drive where the test runs on,\n       * while the AM starts on a different drive and fails to find the job\n       * metafiles. Using absolute path can avoid this ambiguity.\n       */\n      if (Path.WINDOWS) {\n        if (LocalFileSystem.class.isInstance(stagingPath.getFileSystem(conf))) {\n          conf.set(MRJobConfig.MR_AM_STAGING_DIR,\n              new File(conf.get(MRJobConfig.MR_AM_STAGING_DIR))\n                  .getAbsolutePath());\n        }\n      }\n      FileContext fc=FileContext.getFileContext(stagingPath.toUri(), conf);\n      if (fc.util().exists(stagingPath)) {\n        LOG.info(stagingPath + \" exists! deleting...\");\n        fc.delete(stagingPath, true);\n      }\n      LOG.info(\"mkdir: \" + stagingPath);\n      //mkdir the staging directory so that right permissions are set while running as proxy user\n      fc.mkdir(stagingPath, null, true);\n      //mkdir done directory as well \n      String doneDir = JobHistoryUtils.getConfiguredHistoryServerDoneDirPrefix(conf);\n      Path doneDirPath = fc.makeQualified(new Path(doneDir));\n      fc.mkdir(doneDirPath, null, true);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Could not create staging directory. \", e);\n    }\n    conf.set(MRConfig.MASTER_ADDRESS, \"test\"); // The default is local because of\n                                             // which shuffle doesn't happen\n    //configure the shuffle service in NM\n    conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,\n        new String[] { ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID });\n    conf.setClass(String.format(Locale.ENGLISH, YarnConfiguration.NM_AUX_SERVICE_FMT,\n        ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID), ShuffleHandler.class,\n        Service.class);\n\n    // Non-standard shuffle port\n    conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY, 0);\n\n    conf.setClass(YarnConfiguration.NM_CONTAINER_EXECUTOR,\n        DefaultContainerExecutor.class, ContainerExecutor.class);\n\n    // TestMRJobs is for testing non-uberized operation only; see TestUberAM\n    // for corresponding uberized tests.\n    conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false);\n\n    super.serviceInit(conf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}