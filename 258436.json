{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHPropertiesWriter,RequestInfo).mjava","commits":[{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHPropertiesWriter,RequestInfo).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHPropertiesWriter,DataImporter.RequestParams).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHPropertiesWriter propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n    functionsNamespace = EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().getFunctions(), this, getVariableResolver());\n    \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n    \twriterClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n    \ttry {\n    \t\tClass<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n    \t\tthis.writer = writerClass.newInstance();\n    \t} catch (Exception e) {\n    \t\tthrow new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n    \t}\n   \t} else {\n    \twriter = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHPropertiesWriter propWriter, DataImporter.RequestParams reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    requestParameters = reqParams;\n    verboseDebug = requestParameters.debug && requestParameters.verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n    functionsNamespace = EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().functions, this, getVariableResolver());\n    \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.requestParams != null) {\n    \twriterClassStr = (String) reqParams.requestParams.get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n    \ttry {\n    \t\tClass<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n    \t\tthis.writer = writerClass.newInstance();\n    \t} catch (Exception e) {\n    \t\tthrow new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n    \t}\n   \t} else {\n    \twriter = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.requestParams, null, this);\n    writer.init(ctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHPropertiesWriter,RequestInfo).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHPropertiesWriter,RequestInfo).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHPropertiesWriter propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n    functionsNamespace = EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().getFunctions(), this, getVariableResolver());\n    \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n      writerClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n        this.writer = writerClass.newInstance();\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n     } else {\n      writer = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHPropertiesWriter propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n    functionsNamespace = EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().getFunctions(), this, getVariableResolver());\n    \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n    \twriterClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n    \ttry {\n    \t\tClass<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n    \t\tthis.writer = writerClass.newInstance();\n    \t} catch (Exception e) {\n    \t\tthrow new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n    \t}\n   \t} else {\n    \twriter = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHProperties,RequestInfo).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHPropertiesWriter,RequestInfo).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHProperties propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n    functionsNamespace = EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().getFunctions(), this, getVariableResolver());\n    \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n      writerClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n        this.writer = writerClass.newInstance();\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n     } else {\n      writer = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHPropertiesWriter propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n    functionsNamespace = EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().getFunctions(), this, getVariableResolver());\n    \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n      writerClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n        this.writer = writerClass.newInstance();\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n     } else {\n      writer = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#DocBuilder(DataImporter,SolrWriter,DIHPropertiesWriter,RequestInfo).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public DocBuilder(DataImporter dataImporter, SolrWriter solrWriter, DIHPropertiesWriter propWriter, RequestInfo reqParams) {\n    INSTANCE.set(this);\n    this.dataImporter = dataImporter;\n    this.reqParams = reqParams;\n    this.propWriter = propWriter;\n    DataImporter.QUERY_COUNT.set(importStatistics.queryCount);\n    verboseDebug = reqParams.isDebug() && reqParams.getDebugInfo().verbose;\n    persistedProperties = propWriter.readIndexerProperties();\n    functionsNamespace = EvaluatorBag.getFunctionsNamespace(this.dataImporter.getConfig().getFunctions(), this, getVariableResolver());\n    \n    String writerClassStr = null;\n    if(reqParams!=null && reqParams.getRawParams() != null) {\n      writerClassStr = (String) reqParams.getRawParams().get(PARAM_WRITER_IMPL);\n    }\n    if(writerClassStr != null && !writerClassStr.equals(DEFAULT_WRITER_NAME) && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\" + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = loadClass(writerClassStr, dataImporter.getCore());\n        this.writer = writerClass.newInstance();\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n     } else {\n      writer = solrWriter;\n    }\n    ContextImpl ctx = new ContextImpl(null, null, null, null, reqParams.getRawParams(), null, this);\n    writer.init(ctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}