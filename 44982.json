{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","sourceNew":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","sourceOld":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","sourceNew":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","sourceOld":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","sourceNew":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","sourceOld":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","sourceNew":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","sourceOld":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","sourceNew":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","sourceOld":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc94927307192de225bc9f9277b907947b679bc0","date":1413235187,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","sourceNew":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n\n    // strdist on a missing valuesource should itself by missing, so the ValueSourceAugmenter \n    // should supress it...\n    assertQ(req(\"q\", \"id:1\",\n                \"fl\", \"good:strdist(x_s, 'toil', edit)\", \n                \"fl\", \"bad1:strdist(missing1_s, missing2_s, edit)\", \n                \"fl\", \"bad2:strdist(missing1_s, 'something', edit)\", \n                \"fl\", \"bad3:strdist(missing1_s, x_s, edit)\")\n            , \"//float[@name='good']='0.75'\"\n            , \"count(//float[starts-with(@name,'bad')])=0\"\n            );\n\n    // in a query context, there is always a number...\n    //\n    // if a ValueSource is missing, it is maximally distant from every other\n    // value source *except* for another missing value source \n    // ie: strdist(null,null)==1 but strdist(null,anything)==0\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, missing2_s, edit)\"), \n            \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, x_s, edit)\"), \n            \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, 'const', edit)\"), \n            \"//float[@name='score']='0.0'\");\n  }\n\n","sourceOld":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","sourceNew":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n\n    // strdist on a missing valuesource should itself by missing, so the ValueSourceAugmenter \n    // should supress it...\n    assertQ(req(\"q\", \"id:1\",\n                \"fl\", \"good:strdist(x_s, 'toil', edit)\", \n                \"fl\", \"bad1:strdist(missing1_s, missing2_s, edit)\", \n                \"fl\", \"bad2:strdist(missing1_s, 'something', edit)\", \n                \"fl\", \"bad3:strdist(missing1_s, x_s, edit)\")\n            , \"//float[@name='good']='0.75'\"\n            , \"count(//float[starts-with(@name,'bad')])=0\"\n            );\n\n    // in a query context, there is always a number...\n    //\n    // if a ValueSource is missing, it is maximally distant from every other\n    // value source *except* for another missing value source \n    // ie: strdist(null,null)==1 but strdist(null,anything)==0\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, missing2_s, edit)\"), \n            \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, x_s, edit)\"), \n            \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, 'const', edit)\"), \n            \"//float[@name='score']='0.0'\");\n  }\n\n","sourceOld":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0141f86b1794b911ab8e3eac773bf583e5cf784","date":1509377191,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testStrDistance().mjava","sourceNew":"  @Test\n  public void testStrDistance() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n\n    // strdist on a missing valuesource should itself by missing, so the ValueSourceAugmenter \n    // should supress it...\n    assertQ(req(\"q\", \"id:1\",\n                \"fl\", \"good:strdist(x_s, 'toil', edit)\", \n                \"fl\", \"bad1:strdist(missing1_s, missing2_s, edit)\", \n                \"fl\", \"bad2:strdist(missing1_s, 'something', edit)\", \n                \"fl\", \"bad3:strdist(missing1_s, x_s, edit)\")\n            , \"//float[@name='good']='0.75'\"\n            , \"count(//float[starts-with(@name,'bad')])=0\"\n            );\n\n    // in a query context, there is always a number...\n    //\n    // if a ValueSource is missing, it is maximally distant from every other\n    // value source *except* for another missing value source \n    // ie: strdist(null,null)==1 but strdist(null,anything)==0\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, missing2_s, edit)\"), \n            \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, x_s, edit)\"), \n            \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, 'const', edit)\"), \n            \"//float[@name='score']='0.0'\");\n  }\n\n","sourceOld":"  @Test\n  public void testStrDistance() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_s\", \"foil\"));\n    assertU(commit());\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', edit)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.75'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', jw)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.8833333'\");\n    assertQ(req(\"fl\", \"*,score\", \"q\", \"{!func}strdist(x_s, 'foit', ngram, 2)\", \"fq\", \"id:1\"), \"//float[@name='score']='0.875'\");\n\n    // strdist on a missing valuesource should itself by missing, so the ValueSourceAugmenter \n    // should supress it...\n    assertQ(req(\"q\", \"id:1\",\n                \"fl\", \"good:strdist(x_s, 'toil', edit)\", \n                \"fl\", \"bad1:strdist(missing1_s, missing2_s, edit)\", \n                \"fl\", \"bad2:strdist(missing1_s, 'something', edit)\", \n                \"fl\", \"bad3:strdist(missing1_s, x_s, edit)\")\n            , \"//float[@name='good']='0.75'\"\n            , \"count(//float[starts-with(@name,'bad')])=0\"\n            );\n\n    // in a query context, there is always a number...\n    //\n    // if a ValueSource is missing, it is maximally distant from every other\n    // value source *except* for another missing value source \n    // ie: strdist(null,null)==1 but strdist(null,anything)==0\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, missing2_s, edit)\"), \n            \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, x_s, edit)\"), \n            \"//float[@name='score']='0.0'\");\n    assertQ(req(\"fl\",\"score\",\"fq\", \"id:1\", \"q\", \"{!func}strdist(missing1_s, 'const', edit)\"), \n            \"//float[@name='score']='0.0'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["dc94927307192de225bc9f9277b907947b679bc0"],"55980207f1977bd1463465de1659b821347e2fa8":["19275ba31e621f6da1b83bf13af75233876fd3d4","dc94927307192de225bc9f9277b907947b679bc0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc94927307192de225bc9f9277b907947b679bc0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0141f86b1794b911ab8e3eac773bf583e5cf784"]},"commit2Childs":{"f0141f86b1794b911ab8e3eac773bf583e5cf784":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["55980207f1977bd1463465de1659b821347e2fa8","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","dc94927307192de225bc9f9277b907947b679bc0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"dc94927307192de225bc9f9277b907947b679bc0":["f0141f86b1794b911ab8e3eac773bf583e5cf784","55980207f1977bd1463465de1659b821347e2fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}