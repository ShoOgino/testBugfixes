{"path":"lucene/misc/src/test/org/apache/lucene/index/TestBlockJoinSorter.BitSetCachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestBlockJoinSorter.BitSetCachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n      final LeafReader reader = context.reader();\n      final Object key = reader.getCoreCacheKey();\n\n      BitDocIdSet docIdSet = cache.get(key);\n      if (docIdSet == null) {\n        final DocIdSet uncached = filter.getDocIdSet(context, null);\n        final DocIdSetIterator it = uncached == null ? null : uncached.iterator();\n        if (it != null) {\n          BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n          builder.or(it);\n          docIdSet = builder.build();\n        }\n        if (docIdSet == null) {\n          docIdSet = new BitDocIdSet(new SparseFixedBitSet(context.reader().maxDoc()));\n        }\n        cache.put(key, docIdSet);\n      }\n\n      return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestBlockJoinSorter.BitSetCachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n      final LeafReader reader = context.reader();\n      final Object key = reader.getCoreCacheKey();\n\n      BitDocIdSet docIdSet = cache.get(key);\n      if (docIdSet == null) {\n        final DocIdSet uncached = filter.getDocIdSet(context, null);\n        final DocIdSetIterator it = uncached == null ? null : uncached.iterator();\n        if (it != null) {\n          BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n          builder.or(it);\n          docIdSet = builder.build();\n        }\n        if (docIdSet == null) {\n          docIdSet = new BitDocIdSet(new SparseFixedBitSet(context.reader().maxDoc()));\n        }\n        cache.put(key, docIdSet);\n      }\n\n      return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e91a2d9ed80172872da0f517870da6756289554","date":1436431140,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestBlockJoinSorter.BitSetCachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestBlockJoinSorter.BitSetCachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n      final LeafReader reader = context.reader();\n      final Object key = reader.getCoreCacheKey();\n\n      BitDocIdSet docIdSet = cache.get(key);\n      if (docIdSet == null) {\n        final DocIdSet uncached = filter.getDocIdSet(context, null);\n        final DocIdSetIterator it = uncached == null ? null : uncached.iterator();\n        if (it != null) {\n          docIdSet = new BitDocIdSet(BitSet.of(it, context.reader().maxDoc()));\n        }\n        if (docIdSet == null) {\n          docIdSet = new BitDocIdSet(new SparseFixedBitSet(context.reader().maxDoc()));\n        }\n        cache.put(key, docIdSet);\n      }\n\n      return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n      final LeafReader reader = context.reader();\n      final Object key = reader.getCoreCacheKey();\n\n      BitDocIdSet docIdSet = cache.get(key);\n      if (docIdSet == null) {\n        final DocIdSet uncached = filter.getDocIdSet(context, null);\n        final DocIdSetIterator it = uncached == null ? null : uncached.iterator();\n        if (it != null) {\n          BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n          builder.or(it);\n          docIdSet = builder.build();\n        }\n        if (docIdSet == null) {\n          docIdSet = new BitDocIdSet(new SparseFixedBitSet(context.reader().maxDoc()));\n        }\n        cache.put(key, docIdSet);\n      }\n\n      return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestBlockJoinSorter.BitSetCachingWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {\n      final LeafReader reader = context.reader();\n      final Object key = reader.getCoreCacheKey();\n\n      BitDocIdSet docIdSet = cache.get(key);\n      if (docIdSet == null) {\n        final DocIdSet uncached = filter.getDocIdSet(context, null);\n        final DocIdSetIterator it = uncached == null ? null : uncached.iterator();\n        if (it != null) {\n          docIdSet = new BitDocIdSet(BitSet.of(it, context.reader().maxDoc()));\n        }\n        if (docIdSet == null) {\n          docIdSet = new BitDocIdSet(new SparseFixedBitSet(context.reader().maxDoc()));\n        }\n        cache.put(key, docIdSet);\n      }\n\n      return docIdSet == EMPTY ? null : BitsFilteredDocIdSet.wrap(docIdSet, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["0e91a2d9ed80172872da0f517870da6756289554"],"0e91a2d9ed80172872da0f517870da6756289554":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0e91a2d9ed80172872da0f517870da6756289554"],"0e91a2d9ed80172872da0f517870da6756289554":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}