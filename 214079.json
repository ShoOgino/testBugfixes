{"path":"solr/core/src/java/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","commits":[{"id":"93e2e4519de1d352e5cce14f14242afa049c291f","date":1525257809,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return new UpdateRequestProcessor(next) {\n      @Override\n      public void processAdd(AddUpdateCommand cmd) throws IOException {\n        long docSize = ObjectSizeEstimator.fastEstimate(cmd.getSolrInputDocument());\n        if (docSize / 1024 > maxDocumentSize) {\n          throw new SolrException(BAD_REQUEST, \"Size of the document \"+cmd.getPrintableId()+\" is too large, around:\"+docSize);\n        }\n        super.processAdd(cmd);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return new UpdateRequestProcessor(next) {\n      @Override\n      public void processAdd(AddUpdateCommand cmd) throws IOException {\n        long docSize = ObjectSizeEstimator.estimate(cmd.getSolrInputDocument());\n        if (docSize / 1024 > maxDocumentSize) {\n          throw new SolrException(BAD_REQUEST, \"Size of the document \"+cmd.getPrintableId()+\" is too large, around:\"+docSize);\n        }\n        super.processAdd(cmd);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return new UpdateRequestProcessor(next) {\n      @Override\n      public void processAdd(AddUpdateCommand cmd) throws IOException {\n        long docSize = ObjectSizeEstimator.fastEstimate(cmd.getSolrInputDocument());\n        if (docSize / 1024 > maxDocumentSize) {\n          throw new SolrException(BAD_REQUEST, \"Size of the document \"+cmd.getPrintableId()+\" is too large, around:\"+docSize);\n        }\n        super.processAdd(cmd);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return new UpdateRequestProcessor(next) {\n      @Override\n      public void processAdd(AddUpdateCommand cmd) throws IOException {\n        long docSize = ObjectSizeEstimator.estimate(cmd.getSolrInputDocument());\n        if (docSize / 1024 > maxDocumentSize) {\n          throw new SolrException(BAD_REQUEST, \"Size of the document \"+cmd.getPrintableId()+\" is too large, around:\"+docSize);\n        }\n        super.processAdd(cmd);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return new UpdateRequestProcessor(next) {\n      @Override\n      public void processAdd(AddUpdateCommand cmd) throws IOException {\n        long docSize = ObjectSizeEstimator.fastEstimate(cmd.getSolrInputDocument());\n        if (docSize / 1024 > maxDocumentSize) {\n          throw new SolrException(BAD_REQUEST, \"Size of the document \"+cmd.getPrintableId()+\" is too large, around:\"+docSize);\n        }\n        super.processAdd(cmd);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/IgnoreLargeDocumentProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return new UpdateRequestProcessor(next) {\n      @Override\n      public void processAdd(AddUpdateCommand cmd) throws IOException {\n        long docSize = ObjectSizeEstimator.estimate(cmd.getSolrInputDocument());\n        if (docSize / 1024 > maxDocumentSize) {\n          throw new SolrException(BAD_REQUEST, \"Size of the document \"+cmd.getPrintableId()+\" is too large, around:\"+docSize);\n        }\n        super.processAdd(cmd);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    return new UpdateRequestProcessor(next) {\n      @Override\n      public void processAdd(AddUpdateCommand cmd) throws IOException {\n        long docSize = ObjectSizeEstimator.fastEstimate(cmd.getSolrInputDocument());\n        if (docSize / 1024 > maxDocumentSize) {\n          throw new SolrException(BAD_REQUEST, \"Size of the document \"+cmd.getPrintableId()+\" is too large, around:\"+docSize);\n        }\n        super.processAdd(cmd);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93e2e4519de1d352e5cce14f14242afa049c291f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["93e2e4519de1d352e5cce14f14242afa049c291f","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["93e2e4519de1d352e5cce14f14242afa049c291f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["93e2e4519de1d352e5cce14f14242afa049c291f","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"93e2e4519de1d352e5cce14f14242afa049c291f":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93e2e4519de1d352e5cce14f14242afa049c291f"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}