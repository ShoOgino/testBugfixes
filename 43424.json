{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"854f97cd3613b9579fba83755c80b697e2f3993f","date":1353527621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.lookupTerm(collectedGroup.groupValue, scratchBytesRef);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i], scratchBytesRef);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.lookupTerm(collectedGroup.groupValue, scratchBytesRef);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i], scratchBytesRef);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.lookupTerm(collectedGroup.groupValue, scratchBytesRef);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i], scratchBytesRef);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b","date":1359664357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.lookupTerm(collectedGroup.groupValue, scratchBytesRef);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i], scratchBytesRef);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.numOrd()];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd = groupIndex.binarySearchLookup(collectedGroup.groupValue, scratchBytesRef);\n        if (groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            collectedGroup.sortOrds[i] = sortsIndex[i].binarySearchLookup(collectedGroup.sortValues[i], scratchBytesRef);\n          }\n        }\n      }\n    }\n\n","bugFix":["a6f4911f0dc139426f96861ac1f2f05a0fe837c6","4e622d1d7e4496e3a8c1709c84e5be91ced69889"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int groupOrd;\n        if (collectedGroup.groupValue == null) {\n          groupOrd = -1;\n        } else {\n          groupOrd = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || groupOrd >= 0) {\n          ordSet.put(groupOrd);\n          segmentGroupHeads[groupOrd+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            int sortOrd;\n            if (collectedGroup.sortOrds[i] == -1) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["9d7e5f3aa5935964617824d1f9b2599ddb334464","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["854f97cd3613b9579fba83755c80b697e2f3993f"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["d4d69c535930b5cce125cff868d40f6373dc27d4","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"ae73da626f97850c922c42736f808d0378e165f0":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"854f97cd3613b9579fba83755c80b697e2f3993f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae73da626f97850c922c42736f808d0378e165f0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["854f97cd3613b9579fba83755c80b697e2f3993f","7530de27b87b961b51f01bd1299b7004d46e8823"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["9d7e5f3aa5935964617824d1f9b2599ddb334464"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"854f97cd3613b9579fba83755c80b697e2f3993f":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}