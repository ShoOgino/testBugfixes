{"path":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","commits":[{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixedLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // The SHOULD clause is always called with the same lead cost as the MUST clause\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 20));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(20); // triggers assertions as a side-effect\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixedLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // The SHOULD clause is always called with the same lead cost as the MUST clause\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 20));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(20); // triggers assertions as a side-effect\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixedLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // The SHOULD clause is always called with the same lead cost as the MUST clause\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 20));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(20); // triggers assertions as a side-effect\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixedLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // The SHOULD clause is always called with the same lead cost as the MUST clause\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 20));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(20); // triggers assertions as a side-effect\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","sourceNew":"  public void testMixedLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // The SHOULD clause is always called with the same lead cost as the MUST clause\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, ScoreMode.COMPLETE, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 42));\n    new Boolean2ScorerSupplier(null, subs, ScoreMode.COMPLETE, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 20));\n    new Boolean2ScorerSupplier(null, subs, ScoreMode.COMPLETE, 0).get(20); // triggers assertions as a side-effect\n  }\n\n","sourceOld":"  public void testMixedLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // The SHOULD clause is always called with the same lead cost as the MUST clause\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 20));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(20); // triggers assertions as a side-effect\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","sourceNew":"  public void testMixedLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // The SHOULD clause is always called with the same lead cost as the MUST clause\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, ScoreMode.COMPLETE, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 42));\n    new Boolean2ScorerSupplier(null, subs, ScoreMode.COMPLETE, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 20));\n    new Boolean2ScorerSupplier(null, subs, ScoreMode.COMPLETE, 0).get(20); // triggers assertions as a side-effect\n  }\n\n","sourceOld":"  public void testMixedLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // The SHOULD clause is always called with the same lead cost as the MUST clause\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 42));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 20));\n    new Boolean2ScorerSupplier(null, subs, true, 0).get(20); // triggers assertions as a side-effect\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testMixedLeadCost().mjava","sourceNew":"  public void testMixedLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // The SHOULD clause is always called with the same lead cost as the MUST clause\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(new FakeWeight(), subs, ScoreMode.COMPLETE, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 42));\n    new Boolean2ScorerSupplier(new FakeWeight(), subs, ScoreMode.COMPLETE, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 20));\n    new Boolean2ScorerSupplier(new FakeWeight(), subs, ScoreMode.COMPLETE, 0).get(20); // triggers assertions as a side-effect\n  }\n\n","sourceOld":"  public void testMixedLeadCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    // The SHOULD clause is always called with the same lead cost as the MUST clause\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, 42));\n    new Boolean2ScorerSupplier(null, subs, ScoreMode.COMPLETE, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 42));\n    new Boolean2ScorerSupplier(null, subs, ScoreMode.COMPLETE, 0).get(100); // triggers assertions as a side-effect\n\n    subs.get(Occur.MUST).clear();\n    subs.get(Occur.SHOULD).clear();\n    subs.get(Occur.MUST).add(new FakeScorerSupplier(42, 20));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(80, 20));\n    new Boolean2ScorerSupplier(null, subs, ScoreMode.COMPLETE, 0).get(20); // triggers assertions as a side-effect\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["417142ff08fda9cf0b72d5133e63097a166c6458"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}