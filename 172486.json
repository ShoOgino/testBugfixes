{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","commits":[{"id":"02453e8d9fe1bde22dc7676145ad809cb1dbfcad","date":1386084179,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList unmarshalSortValues(SortSpec sortSpec, \n                                        NamedList sortFieldValues, \n                                        IndexSchema schema) {\n    NamedList unmarshalledSortValsPerField = new NamedList();\n\n    if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n    \n    List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    SortField[] sortFields = sortSpec.getSort().getSort();\n\n    int marshalledFieldNum = 0;\n    for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n      final SortField sortField = sortFields[sortFieldNum];\n      final SortField.Type type = sortField.getType();\n\n      // :TODO: would be simpler to always serialize every position of SortField[]\n      if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n      final String sortFieldName = sortField.getField();\n      final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n      assert sortFieldName.equals(valueFieldName)\n        : \"sortFieldValues name key does not match expected SortField.getField\";\n\n      List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n      final SchemaField schemaField = schemaFields.get(sortFieldNum);\n      if (null == schemaField) {\n        unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n      } else {\n        FieldType fieldType = schemaField.getType();\n        List unmarshalledSortVals = new ArrayList();\n        for (Object sortVal : sortVals) {\n          unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n        }\n        unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n      }\n      marshalledFieldNum++;\n    }\n    return unmarshalledSortValsPerField;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList unmarshalSortValues(SortSpec sortSpec, \n                                        NamedList sortFieldValues, \n                                        IndexSchema schema) {\n    NamedList unmarshalledSortValsPerField = new NamedList();\n\n    if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n    \n    List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    SortField[] sortFields = sortSpec.getSort().getSort();\n\n    int marshalledFieldNum = 0;\n    for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n      final SortField sortField = sortFields[sortFieldNum];\n      final SortField.Type type = sortField.getType();\n\n      // :TODO: would be simpler to always serialize every position of SortField[]\n      if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n      final String sortFieldName = sortField.getField();\n      final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n      assert sortFieldName.equals(valueFieldName)\n        : \"sortFieldValues name key does not match expected SortField.getField\";\n\n      List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n      final SchemaField schemaField = schemaFields.get(sortFieldNum);\n      if (null == schemaField) {\n        unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n      } else {\n        FieldType fieldType = schemaField.getType();\n        List unmarshalledSortVals = new ArrayList();\n        for (Object sortVal : sortVals) {\n          unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n        }\n        unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n      }\n      marshalledFieldNum++;\n    }\n    return unmarshalledSortValsPerField;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35d59689803f4ad27f96148bb7c7167e373c6770","date":1454297137,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","sourceNew":"  protected NamedList unmarshalSortValues(SortSpec sortSpec, \n                                        NamedList sortFieldValues, \n                                        IndexSchema schema) {\n    NamedList unmarshalledSortValsPerField = new NamedList();\n\n    if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n    \n    List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    SortField[] sortFields = sortSpec.getSort().getSort();\n\n    int marshalledFieldNum = 0;\n    for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n      final SortField sortField = sortFields[sortFieldNum];\n      final SortField.Type type = sortField.getType();\n\n      // :TODO: would be simpler to always serialize every position of SortField[]\n      if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n      final String sortFieldName = sortField.getField();\n      final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n      assert sortFieldName.equals(valueFieldName)\n        : \"sortFieldValues name key does not match expected SortField.getField\";\n\n      List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n      final SchemaField schemaField = schemaFields.get(sortFieldNum);\n      if (null == schemaField) {\n        unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n      } else {\n        FieldType fieldType = schemaField.getType();\n        List unmarshalledSortVals = new ArrayList();\n        for (Object sortVal : sortVals) {\n          unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n        }\n        unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n      }\n      marshalledFieldNum++;\n    }\n    return unmarshalledSortValsPerField;\n  }\n\n","sourceOld":"  private NamedList unmarshalSortValues(SortSpec sortSpec, \n                                        NamedList sortFieldValues, \n                                        IndexSchema schema) {\n    NamedList unmarshalledSortValsPerField = new NamedList();\n\n    if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n    \n    List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    SortField[] sortFields = sortSpec.getSort().getSort();\n\n    int marshalledFieldNum = 0;\n    for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n      final SortField sortField = sortFields[sortFieldNum];\n      final SortField.Type type = sortField.getType();\n\n      // :TODO: would be simpler to always serialize every position of SortField[]\n      if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n      final String sortFieldName = sortField.getField();\n      final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n      assert sortFieldName.equals(valueFieldName)\n        : \"sortFieldValues name key does not match expected SortField.getField\";\n\n      List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n      final SchemaField schemaField = schemaFields.get(sortFieldNum);\n      if (null == schemaField) {\n        unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n      } else {\n        FieldType fieldType = schemaField.getType();\n        List unmarshalledSortVals = new ArrayList();\n        for (Object sortVal : sortVals) {\n          unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n        }\n        unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n      }\n      marshalledFieldNum++;\n    }\n    return unmarshalledSortValsPerField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","sourceNew":"  protected NamedList unmarshalSortValues(SortSpec sortSpec, \n                                        NamedList sortFieldValues, \n                                        IndexSchema schema) {\n    NamedList unmarshalledSortValsPerField = new NamedList();\n\n    if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n    \n    List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    SortField[] sortFields = sortSpec.getSort().getSort();\n\n    int marshalledFieldNum = 0;\n    for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n      final SortField sortField = sortFields[sortFieldNum];\n      final SortField.Type type = sortField.getType();\n\n      // :TODO: would be simpler to always serialize every position of SortField[]\n      if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n      final String sortFieldName = sortField.getField();\n      final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n      assert sortFieldName.equals(valueFieldName)\n        : \"sortFieldValues name key does not match expected SortField.getField\";\n\n      List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n      final SchemaField schemaField = schemaFields.get(sortFieldNum);\n      if (null == schemaField) {\n        unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n      } else {\n        FieldType fieldType = schemaField.getType();\n        List unmarshalledSortVals = new ArrayList();\n        for (Object sortVal : sortVals) {\n          unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n        }\n        unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n      }\n      marshalledFieldNum++;\n    }\n    return unmarshalledSortValsPerField;\n  }\n\n","sourceOld":"  private NamedList unmarshalSortValues(SortSpec sortSpec, \n                                        NamedList sortFieldValues, \n                                        IndexSchema schema) {\n    NamedList unmarshalledSortValsPerField = new NamedList();\n\n    if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n    \n    List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    SortField[] sortFields = sortSpec.getSort().getSort();\n\n    int marshalledFieldNum = 0;\n    for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n      final SortField sortField = sortFields[sortFieldNum];\n      final SortField.Type type = sortField.getType();\n\n      // :TODO: would be simpler to always serialize every position of SortField[]\n      if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n      final String sortFieldName = sortField.getField();\n      final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n      assert sortFieldName.equals(valueFieldName)\n        : \"sortFieldValues name key does not match expected SortField.getField\";\n\n      List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n      final SchemaField schemaField = schemaFields.get(sortFieldNum);\n      if (null == schemaField) {\n        unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n      } else {\n        FieldType fieldType = schemaField.getType();\n        List unmarshalledSortVals = new ArrayList();\n        for (Object sortVal : sortVals) {\n          unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n        }\n        unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n      }\n      marshalledFieldNum++;\n    }\n    return unmarshalledSortValsPerField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#unmarshalSortValues(SortSpec,NamedList,IndexSchema).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected NamedList unmarshalSortValues(SortSpec sortSpec,\n                                        NamedList sortFieldValues, \n                                        IndexSchema schema) {\n    NamedList unmarshalledSortValsPerField = new NamedList();\n\n    if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n    \n    List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    SortField[] sortFields = sortSpec.getSort().getSort();\n\n    int marshalledFieldNum = 0;\n    for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n      final SortField sortField = sortFields[sortFieldNum];\n      final SortField.Type type = sortField.getType();\n\n      // :TODO: would be simpler to always serialize every position of SortField[]\n      if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n      final String sortFieldName = sortField.getField();\n      final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n      assert sortFieldName.equals(valueFieldName)\n        : \"sortFieldValues name key does not match expected SortField.getField\";\n\n      List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n      final SchemaField schemaField = schemaFields.get(sortFieldNum);\n      if (null == schemaField) {\n        unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n      } else {\n        FieldType fieldType = schemaField.getType();\n        List unmarshalledSortVals = new ArrayList();\n        for (Object sortVal : sortVals) {\n          unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n        }\n        unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n      }\n      marshalledFieldNum++;\n    }\n    return unmarshalledSortValsPerField;\n  }\n\n","sourceOld":"  protected NamedList unmarshalSortValues(SortSpec sortSpec, \n                                        NamedList sortFieldValues, \n                                        IndexSchema schema) {\n    NamedList unmarshalledSortValsPerField = new NamedList();\n\n    if (0 == sortFieldValues.size()) return unmarshalledSortValsPerField;\n    \n    List<SchemaField> schemaFields = sortSpec.getSchemaFields();\n    SortField[] sortFields = sortSpec.getSort().getSort();\n\n    int marshalledFieldNum = 0;\n    for (int sortFieldNum = 0; sortFieldNum < sortFields.length; sortFieldNum++) {\n      final SortField sortField = sortFields[sortFieldNum];\n      final SortField.Type type = sortField.getType();\n\n      // :TODO: would be simpler to always serialize every position of SortField[]\n      if (type==SortField.Type.SCORE || type==SortField.Type.DOC) continue;\n\n      final String sortFieldName = sortField.getField();\n      final String valueFieldName = sortFieldValues.getName(marshalledFieldNum);\n      assert sortFieldName.equals(valueFieldName)\n        : \"sortFieldValues name key does not match expected SortField.getField\";\n\n      List sortVals = (List)sortFieldValues.getVal(marshalledFieldNum);\n\n      final SchemaField schemaField = schemaFields.get(sortFieldNum);\n      if (null == schemaField) {\n        unmarshalledSortValsPerField.add(sortField.getField(), sortVals);\n      } else {\n        FieldType fieldType = schemaField.getType();\n        List unmarshalledSortVals = new ArrayList();\n        for (Object sortVal : sortVals) {\n          unmarshalledSortVals.add(fieldType.unmarshalSortValue(sortVal));\n        }\n        unmarshalledSortValsPerField.add(sortField.getField(), unmarshalledSortVals);\n      }\n      marshalledFieldNum++;\n    }\n    return unmarshalledSortValsPerField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad","35d59689803f4ad27f96148bb7c7167e373c6770"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"35d59689803f4ad27f96148bb7c7167e373c6770":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["35d59689803f4ad27f96148bb7c7167e373c6770"]},"commit2Childs":{"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","74f45af4339b0daf7a95c820ab88c1aea74fbce0","35d59689803f4ad27f96148bb7c7167e373c6770"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"35d59689803f4ad27f96148bb7c7167e373c6770":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}