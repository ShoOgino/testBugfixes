{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean).mjava","commits":[{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getMaxScores, boolean canUseIDV, boolean preFlex) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers) + \" canUseIDV=\" + canUseIDV);\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createWeight(topSearcher.rewrite(query), groupSort.needsScores() || docSort.needsScores() || getMaxScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES, 1);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<>();\n    List<FirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<>();\n    FirstPassGroupingCollector<?> firstPassCollector = null;\n    boolean shardsCanUseIDV = canUseIDV;\n\n    String groupField = \"group\";\n\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n\n      // First shard determines whether we use IDV or not;\n      // all other shards match that:\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(groupField, groupSort, groupOffset + topNGroups);\n      } else {\n        firstPassCollector = createFirstPassCollector(groupField, groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  shard=\" + shardIDX + \" groupField=\" + groupField);\n        System.out.println(\"    1st pass collector=\" + firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" totalGroupedHitCount=?\" + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TopGroupsCollector<?> secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            groupField, mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getMaxScores);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs, TopGroups.ScoreMergeMode.None);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers) + \" canUseIDV=\" + canUseIDV);\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createWeight(topSearcher.rewrite(query), getScores || getMaxScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES, 1);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<>();\n    List<FirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<>();\n    FirstPassGroupingCollector<?> firstPassCollector = null;\n    boolean shardsCanUseIDV = canUseIDV;\n\n    String groupField = \"group\";\n\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n\n      // First shard determines whether we use IDV or not;\n      // all other shards match that:\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(groupField, groupSort, groupOffset + topNGroups);\n      } else {\n        firstPassCollector = createFirstPassCollector(groupField, groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  shard=\" + shardIDX + \" groupField=\" + groupField);\n        System.out.println(\"    1st pass collector=\" + firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" totalGroupedHitCount=?\" + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TopGroupsCollector<?> secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            groupField, mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs, TopGroups.ScoreMergeMode.None);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getMaxScores, boolean canUseIDV, boolean preFlex) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers) + \" canUseIDV=\" + canUseIDV);\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createWeight(topSearcher.rewrite(query), groupSort.needsScores() || docSort.needsScores() || getMaxScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES, 1);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<>();\n    List<FirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<>();\n    FirstPassGroupingCollector<?> firstPassCollector = null;\n    boolean shardsCanUseIDV = canUseIDV;\n\n    String groupField = \"group\";\n\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n\n      // First shard determines whether we use IDV or not;\n      // all other shards match that:\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(groupField, groupSort, groupOffset + topNGroups);\n      } else {\n        firstPassCollector = createFirstPassCollector(groupField, groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  shard=\" + shardIDX + \" groupField=\" + groupField);\n        System.out.println(\"    1st pass collector=\" + firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" totalGroupedHitCount=?\" + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings({\"unchecked\"})\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TopGroupsCollector<?> secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            groupField, mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getMaxScores);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs, TopGroups.ScoreMergeMode.None);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getMaxScores, boolean canUseIDV, boolean preFlex) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers) + \" canUseIDV=\" + canUseIDV);\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createWeight(topSearcher.rewrite(query), groupSort.needsScores() || docSort.needsScores() || getMaxScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES, 1);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<>();\n    List<FirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<>();\n    FirstPassGroupingCollector<?> firstPassCollector = null;\n    boolean shardsCanUseIDV = canUseIDV;\n\n    String groupField = \"group\";\n\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n\n      // First shard determines whether we use IDV or not;\n      // all other shards match that:\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(groupField, groupSort, groupOffset + topNGroups);\n      } else {\n        firstPassCollector = createFirstPassCollector(groupField, groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  shard=\" + shardIDX + \" groupField=\" + groupField);\n        System.out.println(\"    1st pass collector=\" + firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" totalGroupedHitCount=?\" + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TopGroupsCollector<?> secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            groupField, mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getMaxScores);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs, TopGroups.ScoreMergeMode.None);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getMaxScores, boolean canUseIDV, boolean preFlex) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers) + \" canUseIDV=\" + canUseIDV);\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createWeight(topSearcher.rewrite(query), groupSort.needsScores() || docSort.needsScores() || getMaxScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES, 1);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<>();\n    List<FirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<>();\n    FirstPassGroupingCollector<?> firstPassCollector = null;\n    boolean shardsCanUseIDV = canUseIDV;\n\n    String groupField = \"group\";\n\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n\n      // First shard determines whether we use IDV or not;\n      // all other shards match that:\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(groupField, groupSort, groupOffset + topNGroups);\n      } else {\n        firstPassCollector = createFirstPassCollector(groupField, groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  shard=\" + shardIDX + \" groupField=\" + groupField);\n        System.out.println(\"    1st pass collector=\" + firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" totalGroupedHitCount=?\" + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TopGroupsCollector<?> secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            groupField, mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getMaxScores);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs, TopGroups.ScoreMergeMode.None);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getMaxScores, boolean canUseIDV, boolean preFlex) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers) + \" canUseIDV=\" + canUseIDV);\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createWeight(topSearcher.rewrite(query), groupSort.needsScores() || docSort.needsScores() || getMaxScores ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES, 1);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<>();\n    List<FirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<>();\n    FirstPassGroupingCollector<?> firstPassCollector = null;\n    boolean shardsCanUseIDV = canUseIDV;\n\n    String groupField = \"group\";\n\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n\n      // First shard determines whether we use IDV or not;\n      // all other shards match that:\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(groupField, groupSort, groupOffset + topNGroups);\n      } else {\n        firstPassCollector = createFirstPassCollector(groupField, groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  shard=\" + shardIDX + \" groupField=\" + groupField);\n        System.out.println(\"    1st pass collector=\" + firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" totalGroupedHitCount=?\" + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings({\"unchecked\"})\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final TopGroupsCollector<?> secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            groupField, mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getMaxScores);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs, TopGroups.ScoreMergeMode.None);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}