{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitIntRange(IntRangeBuilder,int,int,int).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitIntRange(IntRangeBuilder,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Splits an int range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link IntRangeBuilder#addRange(String,String,int)}\n   * method.\n   * <p>This method is used by {@link IntTrieRangeFilter}.\n   */\n  public static void splitIntRange(final IntRangeBuilder builder,\n    final int precisionStep,  final int minBound, final int maxBound\n  ) {\n    if (precisionStep<1 || precisionStep>32)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..32\");\n    splitRange(\n      builder, 32, precisionStep, (long)minBound, (long)maxBound,\n      0 /* start with no shift */\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c254f081571322c1e7c67cf1d4fa4c1b39cd7def","date":1234969682,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitIntRange(IntRangeBuilder,int,int,int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitIntRange(IntRangeBuilder,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Splits an int range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link IntRangeBuilder#addRange(String,String,int)}\n   * method.\n   * <p>This method is used by {@link IntTrieRangeFilter}.\n   */\n  public static void splitIntRange(final IntRangeBuilder builder,\n    final int precisionStep,  final int minBound, final int maxBound\n  ) {\n    if (precisionStep<1 || precisionStep>32)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..32\");\n    splitRange(builder, 32, precisionStep, (long)minBound, (long)maxBound);\n  }\n\n","sourceOld":"  /**\n   * Expert: Splits an int range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link IntRangeBuilder#addRange(String,String,int)}\n   * method.\n   * <p>This method is used by {@link IntTrieRangeFilter}.\n   */\n  public static void splitIntRange(final IntRangeBuilder builder,\n    final int precisionStep,  final int minBound, final int maxBound\n  ) {\n    if (precisionStep<1 || precisionStep>32)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..32\");\n    splitRange(\n      builder, 32, precisionStep, (long)minBound, (long)maxBound,\n      0 /* start with no shift */\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitIntRange(IntRangeBuilder,int,int,int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitIntRange(IntRangeBuilder,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Splits an int range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link IntRangeBuilder#addRange(String,String)}\n   * method.\n   * <p>This method is used by {@link IntTrieRangeFilter}.\n   */\n  public static void splitIntRange(final IntRangeBuilder builder,\n    final int precisionStep,  final int minBound, final int maxBound\n  ) {\n    if (precisionStep<1 || precisionStep>32)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..32\");\n    splitRange(builder, 32, precisionStep, (long)minBound, (long)maxBound);\n  }\n\n","sourceOld":"  /**\n   * Expert: Splits an int range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link IntRangeBuilder#addRange(String,String,int)}\n   * method.\n   * <p>This method is used by {@link IntTrieRangeFilter}.\n   */\n  public static void splitIntRange(final IntRangeBuilder builder,\n    final int precisionStep,  final int minBound, final int maxBound\n  ) {\n    if (precisionStep<1 || precisionStep>32)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..32\");\n    splitRange(builder, 32, precisionStep, (long)minBound, (long)maxBound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5571adef62aa974cb3f662b64e50637b452cb9d0","date":1241171701,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitIntRange(IntRangeBuilder,int,int,int).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitIntRange(IntRangeBuilder,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Splits an int range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link IntRangeBuilder#addRange(String,String)}\n   * method.\n   * <p>This method is used by {@link IntTrieRangeQuery}.\n   */\n  public static void splitIntRange(final IntRangeBuilder builder,\n    final int precisionStep,  final int minBound, final int maxBound\n  ) {\n    if (precisionStep<1 || precisionStep>32)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..32\");\n    splitRange(builder, 32, precisionStep, (long)minBound, (long)maxBound);\n  }\n\n","sourceOld":"  /**\n   * Expert: Splits an int range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link IntRangeBuilder#addRange(String,String)}\n   * method.\n   * <p>This method is used by {@link IntTrieRangeFilter}.\n   */\n  public static void splitIntRange(final IntRangeBuilder builder,\n    final int precisionStep,  final int minBound, final int maxBound\n  ) {\n    if (precisionStep<1 || precisionStep>32)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..32\");\n    splitRange(builder, 32, precisionStep, (long)minBound, (long)maxBound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#splitIntRange(IntRangeBuilder,int,int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Splits an int range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link IntRangeBuilder#addRange(String,String)}\n   * method.\n   * <p>This method is used by {@link IntTrieRangeQuery}.\n   */\n  public static void splitIntRange(final IntRangeBuilder builder,\n    final int precisionStep,  final int minBound, final int maxBound\n  ) {\n    if (precisionStep<1 || precisionStep>32)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..32\");\n    splitRange(builder, 32, precisionStep, (long)minBound, (long)maxBound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["5571adef62aa974cb3f662b64e50637b452cb9d0"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["c254f081571322c1e7c67cf1d4fa4c1b39cd7def"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5571adef62aa974cb3f662b64e50637b452cb9d0":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"c254f081571322c1e7c67cf1d4fa4c1b39cd7def":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["5571adef62aa974cb3f662b64e50637b452cb9d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c254f081571322c1e7c67cf1d4fa4c1b39cd7def"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"5571adef62aa974cb3f662b64e50637b452cb9d0":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"c254f081571322c1e7c67cf1d4fa4c1b39cd7def":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}