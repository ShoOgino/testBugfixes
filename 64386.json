{"path":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ((Number)ln_mins.get(fieldName)).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ((Number)ln_maxs.get(fieldName)).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ((Number)ln_steeps.get(fieldName)).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ((Number)ln_mins.get(fieldName)).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ((Number)ln_maxs.get(fieldName)).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ((Number)ln_steeps.get(fieldName)).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ((Number)ln_mins.get(fieldName)).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ((Number)ln_maxs.get(fieldName)).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ((Number)ln_steeps.get(fieldName)).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  @Override\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  @Override\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  @Override\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}