{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter[DocRouter]#hashToSlice(int,DocCollection).mjava","commits":[{"id":"89f828d954597b98a28942874636f35c719b8a5d","date":1354471211,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter[DocRouter]#hashToSlice(int,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocRouter#hashToSlice(int,DocCollection).mjava","sourceNew":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    for (Slice slice : collection.getSlices()) {\n      DocRouter.Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","sourceOld":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    for (Slice slice : collection.getSlices()) {\n      DocRouter.Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    // return null or throw exception?\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c78bb747213f4a3449337db2399309566a08241a","date":1354823430,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter#hashToSlice(int,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/HashBasedRouter[DocRouter]#hashToSlice(int,DocCollection).mjava","sourceNew":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    for (Slice slice : collection.getSlices()) {\n      Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","sourceOld":"  protected Slice hashToSlice(int hash, DocCollection collection) {\n    for (Slice slice : collection.getSlices()) {\n      DocRouter.Range range = slice.getRange();\n      if (range != null && range.includes(hash)) return slice;\n    }\n    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No slice servicing hash code \" + Integer.toHexString(hash) + \" in \" + collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89f828d954597b98a28942874636f35c719b8a5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c78bb747213f4a3449337db2399309566a08241a":["89f828d954597b98a28942874636f35c719b8a5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c78bb747213f4a3449337db2399309566a08241a"]},"commit2Childs":{"89f828d954597b98a28942874636f35c719b8a5d":["c78bb747213f4a3449337db2399309566a08241a"],"c78bb747213f4a3449337db2399309566a08241a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89f828d954597b98a28942874636f35c719b8a5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}