{"path":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsReader#FieldsReader(FieldsReader).mjava","commits":[{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsReader#FieldsReader(FieldsReader).mjava","pathOld":"/dev/null","sourceNew":"    // clone for merge\n    FieldsReader(FieldsReader other) throws IOException {\n      Map<FieldsProducer,FieldsProducer> oldToNew = new IdentityHashMap<>();\n      // First clone all formats\n      for(Map.Entry<String,FieldsProducer> ent : other.formats.entrySet()) {\n        FieldsProducer values = ent.getValue().getMergeInstance();\n        formats.put(ent.getKey(), values);\n        oldToNew.put(ent.getValue(), values);\n      }\n\n      // Then rebuild fields:\n      for(Map.Entry<String,FieldsProducer> ent : other.fields.entrySet()) {\n        FieldsProducer producer = oldToNew.get(ent.getValue());\n        assert producer != null;\n        fields.put(ent.getKey(), producer);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsReader#FieldsReader(FieldsReader).mjava","pathOld":"/dev/null","sourceNew":"    // clone for merge\n    FieldsReader(FieldsReader other) throws IOException {\n      Map<FieldsProducer,FieldsProducer> oldToNew = new IdentityHashMap<>();\n      // First clone all formats\n      for(Map.Entry<String,FieldsProducer> ent : other.formats.entrySet()) {\n        FieldsProducer values = ent.getValue().getMergeInstance();\n        formats.put(ent.getKey(), values);\n        oldToNew.put(ent.getValue(), values);\n      }\n\n      // Then rebuild fields:\n      for(Map.Entry<String,FieldsProducer> ent : other.fields.entrySet()) {\n        FieldsProducer producer = oldToNew.get(ent.getValue());\n        assert producer != null;\n        fields.put(ent.getKey(), producer);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fb92999b9df7df2ce2b35b83a044cbede61f45","date":1429037650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsReader#FieldsReader(FieldsReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsReader#FieldsReader(FieldsReader).mjava","sourceNew":"    // clone for merge\n    FieldsReader(FieldsReader other) throws IOException {\n      Map<FieldsProducer,FieldsProducer> oldToNew = new IdentityHashMap<>();\n      // First clone all formats\n      for(Map.Entry<String,FieldsProducer> ent : other.formats.entrySet()) {\n        FieldsProducer values = ent.getValue().getMergeInstance();\n        formats.put(ent.getKey(), values);\n        oldToNew.put(ent.getValue(), values);\n      }\n\n      // Then rebuild fields:\n      for(Map.Entry<String,FieldsProducer> ent : other.fields.entrySet()) {\n        FieldsProducer producer = oldToNew.get(ent.getValue());\n        assert producer != null;\n        fields.put(ent.getKey(), producer);\n      }\n\n      segment = other.segment;\n    }\n\n","sourceOld":"    // clone for merge\n    FieldsReader(FieldsReader other) throws IOException {\n      Map<FieldsProducer,FieldsProducer> oldToNew = new IdentityHashMap<>();\n      // First clone all formats\n      for(Map.Entry<String,FieldsProducer> ent : other.formats.entrySet()) {\n        FieldsProducer values = ent.getValue().getMergeInstance();\n        formats.put(ent.getKey(), values);\n        oldToNew.put(ent.getValue(), values);\n      }\n\n      // Then rebuild fields:\n      for(Map.Entry<String,FieldsProducer> ent : other.fields.entrySet()) {\n        FieldsProducer producer = oldToNew.get(ent.getValue());\n        assert producer != null;\n        fields.put(ent.getKey(), producer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsReader#FieldsReader(FieldsReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.FieldsReader#FieldsReader(FieldsReader).mjava","sourceNew":"    // clone for merge\n    FieldsReader(FieldsReader other) {\n      Map<FieldsProducer,FieldsProducer> oldToNew = new IdentityHashMap<>();\n      // First clone all formats\n      for(Map.Entry<String,FieldsProducer> ent : other.formats.entrySet()) {\n        FieldsProducer values = ent.getValue().getMergeInstance();\n        formats.put(ent.getKey(), values);\n        oldToNew.put(ent.getValue(), values);\n      }\n\n      // Then rebuild fields:\n      for(Map.Entry<String,FieldsProducer> ent : other.fields.entrySet()) {\n        FieldsProducer producer = oldToNew.get(ent.getValue());\n        assert producer != null;\n        fields.put(ent.getKey(), producer);\n      }\n\n      segment = other.segment;\n    }\n\n","sourceOld":"    // clone for merge\n    FieldsReader(FieldsReader other) throws IOException {\n      Map<FieldsProducer,FieldsProducer> oldToNew = new IdentityHashMap<>();\n      // First clone all formats\n      for(Map.Entry<String,FieldsProducer> ent : other.formats.entrySet()) {\n        FieldsProducer values = ent.getValue().getMergeInstance();\n        formats.put(ent.getKey(), values);\n        oldToNew.put(ent.getValue(), values);\n      }\n\n      // Then rebuild fields:\n      for(Map.Entry<String,FieldsProducer> ent : other.fields.entrySet()) {\n        FieldsProducer producer = oldToNew.get(ent.getValue());\n        assert producer != null;\n        fields.put(ent.getKey(), producer);\n      }\n\n      segment = other.segment;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"35fb92999b9df7df2ce2b35b83a044cbede61f45":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["35fb92999b9df7df2ce2b35b83a044cbede61f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"35fb92999b9df7df2ce2b35b83a044cbede61f45":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["35fb92999b9df7df2ce2b35b83a044cbede61f45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}