{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(Path).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(Path).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(File).mjava","sourceNew":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(Path f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getFileName().toString().toUpperCase(Locale.ROOT));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParent();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","sourceOld":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(File f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getName().toUpperCase(Locale.ROOT));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParentFile();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b51f775a55e0aa699706d98bf8b6967109eed85","date":1410983943,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(Path).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocParser#pathType(Path).mjava","sourceNew":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(Path f) {\n    int pathLength = 0;\n    while (f != null && f.getFileName() != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getFileName().toString().toUpperCase(Locale.ROOT));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParent();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","sourceOld":"  /**\n   * Compute the path type of a file by inspecting name of file and its parents\n   */\n  public static ParsePathType pathType(Path f) {\n    int pathLength = 0;\n    while (f != null && ++pathLength < MAX_PATH_LENGTH) {\n      ParsePathType ppt = pathName2Type.get(f.getFileName().toString().toUpperCase(Locale.ROOT));\n      if (ppt!=null) {\n        return ppt;\n      }\n      f = f.getParent();\n    }\n    return DEFAULT_PATH_TYPE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b51f775a55e0aa699706d98bf8b6967109eed85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b51f775a55e0aa699706d98bf8b6967109eed85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"9b51f775a55e0aa699706d98bf8b6967109eed85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4abec28b874149a7223e32cc7a01704c27790de":["9b51f775a55e0aa699706d98bf8b6967109eed85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}