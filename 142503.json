{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#TriggerBase(TriggerEventType,String,Map[String,Object],SolrResourceLoader,SolrZkClient).mjava","commits":[{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#TriggerBase(TriggerEventType,String,Map[String,Object],SolrResourceLoader,SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  protected TriggerBase(TriggerEventType eventType, String name, Map<String, Object> properties, SolrResourceLoader loader, SolrZkClient zkClient) {\n    this.eventType = eventType;\n    this.name = name;\n    this.zkClient = zkClient;\n    if (properties != null) {\n      this.properties.putAll(properties);\n    }\n    this.enabled = Boolean.parseBoolean(String.valueOf(this.properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Number) this.properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = loader.newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    try {\n      if (!zkClient.exists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, true)) {\n        zkClient.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, false, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception checking ZK path \" + ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#TriggerBase(TriggerEventType,String,Map[String,Object],SolrResourceLoader,SolrZkClient).mjava","sourceNew":null,"sourceOld":"  protected TriggerBase(TriggerEventType eventType, String name, Map<String, Object> properties, SolrResourceLoader loader, SolrZkClient zkClient) {\n    this.eventType = eventType;\n    this.name = name;\n    this.zkClient = zkClient;\n    if (properties != null) {\n      this.properties.putAll(properties);\n    }\n    this.enabled = Boolean.parseBoolean(String.valueOf(this.properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Number) this.properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = loader.newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    try {\n      if (!zkClient.exists(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, true)) {\n        zkClient.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, false, true);\n      }\n    } catch (KeeperException | InterruptedException e) {\n      LOG.warn(\"Exception checking ZK path \" + ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3955a9511098c96b652734b2f2d4160d07cc2d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3955a9511098c96b652734b2f2d4160d07cc2d63","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}