{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"/dev/null","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"/dev/null","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faf1236ae092482293a7e0659e347d172185ef6f","date":1430314113,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b834e175d4d6b99680745b76417f082cfad6b76f","date":1445799013,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51b068b0154fe2220646b2dcc2133e168a31c743","date":1446661675,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0981d4ba58f3187f57224acc8e4f15a4249f1fce","date":1477333392,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(SORT) );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(SORT) );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(\"sort\") );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84a99d9041ffa5585158e5a283ea1736b6b8b473","date":1532019928,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      facet.overrefine = (int) getLong(m, \"overrefine\", facet.overrefine);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(SORT) );\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(SORT) );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      \n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      facet.overrefine = (int) getLong(m, \"overrefine\", facet.overrefine);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      // TODO: SOLR-13022 ... validate the sortVariabls against the subs.\n      facet.sort = parseSort( m.get(SORT) );\n      facet.prelim_sort = parseSort( m.get(\"prelim_sort\") );\n    }\n\n    if (null == facet.sort) {\n      facet.sort = FacetRequest.FacetSort.COUNT_DESC;\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      parseSort( null );  // TODO: defaults\n\n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      facet.overrefine = (int) getLong(m, \"overrefine\", facet.overrefine);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      parseSort( m.get(SORT) );\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":["055706edcc08dfbacd42d8ed4144209d3dc05b67"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1918d03541b875664e27eae44b6b157da044f0b8","date":1549745850,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      \n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      facet.overrefine = (int) getLong(m, \"overrefine\", facet.overrefine);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = getBooleanOrNull(m, \"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      // TODO: SOLR-13022 ... validate the sortVariabls against the subs.\n      facet.sort = parseSort( m.get(SORT) );\n      facet.prelim_sort = parseSort( m.get(\"prelim_sort\") );\n    } else if (arg != null) {\n      // something lke json.facet.facet.field=2\n      throw err(\"Expected string/map for facet field, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n    }\n\n    if (null == facet.sort) {\n      facet.sort = FacetRequest.FacetSort.COUNT_DESC;\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      \n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      facet.overrefine = (int) getLong(m, \"overrefine\", facet.overrefine);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = (Boolean)m.get(\"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      // TODO: SOLR-13022 ... validate the sortVariabls against the subs.\n      facet.sort = parseSort( m.get(SORT) );\n      facet.prelim_sort = parseSort( m.get(\"prelim_sort\") );\n    }\n\n    if (null == facet.sort) {\n      facet.sort = FacetRequest.FacetSort.COUNT_DESC;\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":["055706edcc08dfbacd42d8ed4144209d3dc05b67"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"055706edcc08dfbacd42d8ed4144209d3dc05b67","date":1569388195,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      \n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      facet.overrefine = (int) getLong(m, \"overrefine\", facet.overrefine);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = getBooleanOrNull(m, \"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      facet.sort = parseAndValidateSort(facet, m, SORT);\n      facet.prelim_sort = parseAndValidateSort(facet, m, \"prelim_sort\");\n    } else if (arg != null) {\n      // something like json.facet.facet.field=2\n      throw err(\"Expected string/map for facet field, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n    }\n\n    if (null == facet.sort) {\n      facet.sort = FacetRequest.FacetSort.COUNT_DESC;\n    }\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      \n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      facet.overrefine = (int) getLong(m, \"overrefine\", facet.overrefine);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = getBooleanOrNull(m, \"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      // TODO: SOLR-13022 ... validate the sortVariabls against the subs.\n      facet.sort = parseSort( m.get(SORT) );\n      facet.prelim_sort = parseSort( m.get(\"prelim_sort\") );\n    } else if (arg != null) {\n      // something lke json.facet.facet.field=2\n      throw err(\"Expected string/map for facet field, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n    }\n\n    if (null == facet.sort) {\n      facet.sort = FacetRequest.FacetSort.COUNT_DESC;\n    }\n\n    return facet;\n  }\n\n","bugFix":["1918d03541b875664e27eae44b6b157da044f0b8","94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parse(Object).mjava","sourceNew":null,"sourceOld":"  public FacetField parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n    if (arg instanceof String) {\n      // just the field name...\n      facet.field = (String)arg;\n      \n    } else if (arg instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) arg;\n      facet.field = getField(m);\n      facet.offset = getLong(m, \"offset\", facet.offset);\n      facet.limit = getLong(m, \"limit\", facet.limit);\n      facet.overrequest = (int) getLong(m, \"overrequest\", facet.overrequest);\n      facet.overrefine = (int) getLong(m, \"overrefine\", facet.overrefine);\n      if (facet.limit == 0) facet.offset = 0;  // normalize.  an offset with a limit of non-zero isn't useful.\n      facet.mincount = getLong(m, \"mincount\", facet.mincount);\n      facet.missing = getBoolean(m, \"missing\", facet.missing);\n      facet.numBuckets = getBoolean(m, \"numBuckets\", facet.numBuckets);\n      facet.prefix = getString(m, \"prefix\", facet.prefix);\n      facet.allBuckets = getBoolean(m, \"allBuckets\", facet.allBuckets);\n      facet.method = FacetField.FacetMethod.fromString(getString(m, \"method\", null));\n      facet.cacheDf = (int)getLong(m, \"cacheDf\", facet.cacheDf);\n\n      // TODO: pull up to higher level?\n      facet.refine = FacetField.RefineMethod.fromObj(m.get(\"refine\"));\n\n      facet.perSeg = getBooleanOrNull(m, \"perSeg\");\n\n      // facet.sort may depend on a facet stat...\n      // should we be parsing / validating this here, or in the execution environment?\n      Object o = m.get(\"facet\");\n      parseSubs(o);\n\n      facet.sort = parseAndValidateSort(facet, m, SORT);\n      facet.prelim_sort = parseAndValidateSort(facet, m, \"prelim_sort\");\n    } else if (arg != null) {\n      // something like json.facet.facet.field=2\n      throw err(\"Expected string/map for facet field, received \" + arg.getClass().getSimpleName() + \"=\" + arg);\n    }\n\n    if (null == facet.sort) {\n      facet.sort = FacetRequest.FacetSort.COUNT_DESC;\n    }\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b834e175d4d6b99680745b76417f082cfad6b76f":["faf1236ae092482293a7e0659e347d172185ef6f"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"1931d98b40b01d5075753b197c2461a5c2652689":["51b068b0154fe2220646b2dcc2133e168a31c743"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["84a99d9041ffa5585158e5a283ea1736b6b8b473"],"faf1236ae092482293a7e0659e347d172185ef6f":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"01624b85de12fb02335810bdf325124e59040772":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["51b068b0154fe2220646b2dcc2133e168a31c743","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","0981d4ba58f3187f57224acc8e4f15a4249f1fce"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"055706edcc08dfbacd42d8ed4144209d3dc05b67":["1918d03541b875664e27eae44b6b157da044f0b8"],"1918d03541b875664e27eae44b6b157da044f0b8":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"51b068b0154fe2220646b2dcc2133e168a31c743":["b834e175d4d6b99680745b76417f082cfad6b76f"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["055706edcc08dfbacd42d8ed4144209d3dc05b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"84a99d9041ffa5585158e5a283ea1736b6b8b473":["01624b85de12fb02335810bdf325124e59040772"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["51b068b0154fe2220646b2dcc2133e168a31c743","1931d98b40b01d5075753b197c2461a5c2652689"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"0981d4ba58f3187f57224acc8e4f15a4249f1fce":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"b834e175d4d6b99680745b76417f082cfad6b76f":["51b068b0154fe2220646b2dcc2133e168a31c743"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"faf1236ae092482293a7e0659e347d172185ef6f":["b834e175d4d6b99680745b76417f082cfad6b76f"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["1918d03541b875664e27eae44b6b157da044f0b8"],"01624b85de12fb02335810bdf325124e59040772":["84a99d9041ffa5585158e5a283ea1736b6b8b473"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"51b068b0154fe2220646b2dcc2133e168a31c743":["1931d98b40b01d5075753b197c2461a5c2652689","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"055706edcc08dfbacd42d8ed4144209d3dc05b67":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"1918d03541b875664e27eae44b6b157da044f0b8":["055706edcc08dfbacd42d8ed4144209d3dc05b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"84a99d9041ffa5585158e5a283ea1736b6b8b473":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["faf1236ae092482293a7e0659e347d172185ef6f","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","60b61628d1912768f51eccaa8ead5a5a32ab34c6","0981d4ba58f3187f57224acc8e4f15a4249f1fce"],"0981d4ba58f3187f57224acc8e4f15a4249f1fce":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}