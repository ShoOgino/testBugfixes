{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","sourceNew":"  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = _TestUtil.nextInt(random(), minNumWords, maxNumWords);\n    switch (_TestUtil.nextInt(random(), 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomUnicodeString(random(), maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomRealisticUnicodeString\n              (random(), minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomSimpleString(random()));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new HTMLStripCharFilter\n        (CharReader.get(new StringReader(text.toString())));\n    while (reader.read() != -1);\n  }\n\n","sourceOld":"  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = _TestUtil.nextInt(random(), minNumWords, maxNumWords);\n    switch (_TestUtil.nextInt(random(), 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomUnicodeString(random(), maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomRealisticUnicodeString\n              (random(), minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomSimpleString(random()));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new HTMLStripCharFilter\n        (CharReader.get(new StringReader(text.toString())));\n    while (reader.read() != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc706b1e03a539d44d99998108feb684bb44cbb2","date":1342522408,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","sourceNew":"  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = _TestUtil.nextInt(random(), minNumWords, maxNumWords);\n    switch (_TestUtil.nextInt(random(), 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomUnicodeString(random(), maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomRealisticUnicodeString\n              (random(), minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomSimpleString(random()));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new HTMLStripCharFilter\n        (new StringReader(text.toString()));\n    while (reader.read() != -1);\n  }\n\n","sourceOld":"  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = _TestUtil.nextInt(random(), minNumWords, maxNumWords);\n    switch (_TestUtil.nextInt(random(), 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomUnicodeString(random(), maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomRealisticUnicodeString\n              (random(), minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomSimpleString(random()));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new HTMLStripCharFilter\n        (CharReader.get(new StringReader(text.toString())));\n    while (reader.read() != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","sourceNew":"  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = _TestUtil.nextInt(random(), minNumWords, maxNumWords);\n    switch (_TestUtil.nextInt(random(), 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomUnicodeString(random(), maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomRealisticUnicodeString\n              (random(), minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomSimpleString(random()));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new HTMLStripCharFilter\n        (new StringReader(text.toString()));\n    while (reader.read() != -1);\n  }\n\n","sourceOld":"  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = _TestUtil.nextInt(random(), minNumWords, maxNumWords);\n    switch (_TestUtil.nextInt(random(), 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomUnicodeString(random(), maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomRealisticUnicodeString\n              (random(), minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomSimpleString(random()));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new HTMLStripCharFilter\n        (CharReader.get(new StringReader(text.toString())));\n    while (reader.read() != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","sourceNew":"  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = _TestUtil.nextInt(random(), minNumWords, maxNumWords);\n    switch (_TestUtil.nextInt(random(), 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomUnicodeString(random(), maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomRealisticUnicodeString\n              (random(), minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomSimpleString(random()));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new HTMLStripCharFilter\n        (new StringReader(text.toString()));\n    while (reader.read() != -1);\n  }\n\n","sourceOld":"  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = _TestUtil.nextInt(random(), minNumWords, maxNumWords);\n    switch (_TestUtil.nextInt(random(), 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomUnicodeString(random(), maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomRealisticUnicodeString\n              (random(), minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomSimpleString(random()));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new HTMLStripCharFilter\n        (CharReader.get(new StringReader(text.toString())));\n    while (reader.read() != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testRandomText().mjava","sourceNew":"  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = TestUtil.nextInt(random(), minNumWords, maxNumWords);\n    switch (TestUtil.nextInt(random(), 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(TestUtil.randomUnicodeString(random(), maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(TestUtil.randomRealisticUnicodeString\n              (random(), minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(TestUtil.randomSimpleString(random()));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new HTMLStripCharFilter\n        (new StringReader(text.toString()));\n    while (reader.read() != -1);\n  }\n\n","sourceOld":"  public void testRandomText() throws Exception {\n    StringBuilder text = new StringBuilder();\n    int minNumWords = 10;\n    int maxNumWords = 10000;\n    int minWordLength = 3;\n    int maxWordLength = 20;\n    int numWords = _TestUtil.nextInt(random(), minNumWords, maxNumWords);\n    switch (_TestUtil.nextInt(random(), 0, 4)) {\n      case 0: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomUnicodeString(random(), maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      case 1: {\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomRealisticUnicodeString\n              (random(), minWordLength, maxWordLength));\n          text.append(' ');\n        }\n        break;\n      }\n      default: { // ASCII 50% of the time\n        for (int wordNum = 0 ; wordNum < numWords ; ++wordNum) {\n          text.append(_TestUtil.randomSimpleString(random()));\n          text.append(' ');\n        }\n      }\n    }\n    Reader reader = new HTMLStripCharFilter\n        (new StringReader(text.toString()));\n    while (reader.read() != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fc706b1e03a539d44d99998108feb684bb44cbb2"],"fc706b1e03a539d44d99998108feb684bb44cbb2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6613659748fe4411a7dcf85266e55db1f95f7315":["fc706b1e03a539d44d99998108feb684bb44cbb2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fc706b1e03a539d44d99998108feb684bb44cbb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba371508186796cc6151d8223a5b4e16d02e26e","fc706b1e03a539d44d99998108feb684bb44cbb2","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fc706b1e03a539d44d99998108feb684bb44cbb2":["aba371508186796cc6151d8223a5b4e16d02e26e","6613659748fe4411a7dcf85266e55db1f95f7315","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}