{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","commits":[{"id":"7266c313bb3b4fbcde3dcc82556182e1fae90080","date":1400183760,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum#pushFrame(int).mjava","sourceNew":"  private Frame pushFrame(int state) throws IOException {\n    final Frame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fr.parent.fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fr.parent.fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","sourceOld":"  private Frame pushFrame(int state) throws IOException {\n    final Frame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fr.parent.fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fr.parent.fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5c96ee46366b5feece8b0b328368c6237fc087a","date":1400184255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","sourceNew":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fr.parent.fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fr.parent.fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","sourceOld":"  private Frame pushFrame(int state) throws IOException {\n    final Frame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fr.parent.fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fr.parent.fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fbf9db80d6f71f3ae515e4837b1fd62aef65b80","date":1400189141,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","sourceNew":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","sourceOld":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fr.parent.fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fr.parent.fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","pathOld":"/dev/null","sourceNew":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","sourceNew":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    //if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","sourceOld":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","sourceNew":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    //if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","sourceOld":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    // if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59db5e5f780185e0155d296a323e440a6ecfd3b6","date":1435089559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","sourceNew":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    assert currentFrame != null;\n\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","sourceOld":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    //if (DEBUG) System.out.println(\"    pushFrame state=\" + state + \" prefix=\" + f.prefix);\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","sourceNew":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    assert currentFrame != null;\n\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output());\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput()));\n    return f;\n  }\n\n","sourceOld":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    assert currentFrame != null;\n\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#pushFrame(int).mjava","sourceNew":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    assert currentFrame != null;\n\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output());\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput()));\n    return f;\n  }\n\n","sourceOld":"  private IntersectTermsEnumFrame pushFrame(int state) throws IOException {\n    assert currentFrame != null;\n\n    final IntersectTermsEnumFrame f = getFrame(currentFrame == null ? 0 : 1+currentFrame.ord);\n        \n    f.fp = f.fpOrig = currentFrame.lastSubFP;\n    f.prefix = currentFrame.prefix + currentFrame.suffix;\n    f.setState(state);\n\n    // Walk the arc through the index -- we only\n    // \"bother\" with this so we can get the floor data\n    // from the index and skip floor blocks when\n    // possible:\n    FST.Arc<BytesRef> arc = currentFrame.arc;\n    int idx = currentFrame.prefix;\n    assert currentFrame.suffix > 0;\n    BytesRef output = currentFrame.outputPrefix;\n    while (idx < f.prefix) {\n      final int target = term.bytes[idx] & 0xff;\n      // TODO: we could be more efficient for the next()\n      // case by using current arc as starting point,\n      // passed to findTargetArc\n      arc = fr.index.findTargetArc(target, arc, getArc(1+idx), fstReader);\n      assert arc != null;\n      output = fstOutputs.add(output, arc.output);\n      idx++;\n    }\n\n    f.arc = arc;\n    f.outputPrefix = output;\n    assert arc.isFinal();\n    f.load(fstOutputs.add(output, arc.nextFinalOutput));\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["59db5e5f780185e0155d296a323e440a6ecfd3b6"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fbf9db80d6f71f3ae515e4837b1fd62aef65b80"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["3e8715d826e588419327562287d5d6a8040d63d6"],"5fbf9db80d6f71f3ae515e4837b1fd62aef65b80":["f5c96ee46366b5feece8b0b328368c6237fc087a"],"7266c313bb3b4fbcde3dcc82556182e1fae90080":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["4d637064d608752565d4f9f41b2497dfdfdde50e","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["7266c313bb3b4fbcde3dcc82556182e1fae90080"],"f8061ddd97f3352007d927dae445884a6f3d857b":["59db5e5f780185e0155d296a323e440a6ecfd3b6","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"5fbf9db80d6f71f3ae515e4837b1fd62aef65b80":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"7266c313bb3b4fbcde3dcc82556182e1fae90080":["f5c96ee46366b5feece8b0b328368c6237fc087a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","7266c313bb3b4fbcde3dcc82556182e1fae90080"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["59db5e5f780185e0155d296a323e440a6ecfd3b6","d2638f781be724518ff6c2263d14a48cf6e68017"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["5fbf9db80d6f71f3ae515e4837b1fd62aef65b80"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}