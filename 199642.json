{"path":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#addMapping(int,int).mjava","commits":[{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#addMapping(int,int).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/kuromoji/util/BinaryDictionaryWriter#addMapping(int,int).mjava","sourceNew":"  public void addMapping(int sourceId, int wordId) {\n    assert wordId > lastWordId : \"words out of order: \" + wordId + \" vs lastID: \" + lastWordId;\n    \n    if (sourceId > lastSourceId) {\n      assert sourceId > lastSourceId : \"source ids out of order: lastSourceId=\" + lastSourceId + \" vs sourceId=\" + sourceId;\n      targetMapOffsets = ArrayUtil.grow(targetMapOffsets, sourceId + 1);\n      for (int i = lastSourceId + 1; i <= sourceId; i++) {\n        targetMapOffsets[i] = targetMapEndOffset;\n      }\n    } else {\n      assert sourceId == lastSourceId;\n    }\n\n    targetMap = ArrayUtil.grow(targetMap, targetMapEndOffset + 1);\n    targetMap[targetMapEndOffset] = wordId;\n    targetMapEndOffset++;\n\n    lastSourceId = sourceId;\n    lastWordId = wordId;\n  }\n\n","sourceOld":"  public void addMapping(int sourceId, int wordId) {\n    assert wordId > lastWordId : \"words out of order: \" + wordId + \" vs lastID: \" + lastWordId;\n    \n    if (sourceId > lastSourceId) {\n      assert sourceId > lastSourceId : \"source ids out of order: lastSourceId=\" + lastSourceId + \" vs sourceId=\" + sourceId;\n      targetMapOffsets = ArrayUtil.grow(targetMapOffsets, sourceId + 1);\n      for (int i = lastSourceId + 1; i <= sourceId; i++) {\n        targetMapOffsets[i] = targetMapEndOffset;\n      }\n    } else {\n      assert sourceId == lastSourceId;\n    }\n\n    targetMap = ArrayUtil.grow(targetMap, targetMapEndOffset + 1);\n    targetMap[targetMapEndOffset] = wordId;\n    targetMapEndOffset++;\n\n    lastSourceId = sourceId;\n    lastWordId = wordId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#addMapping(int,int).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#addMapping(int,int).mjava","sourceNew":"  public void addMapping(int sourceId, int wordId) {\n    assert wordId > lastWordId : \"words out of order: \" + wordId + \" vs lastID: \" + lastWordId;\n    \n    if (sourceId > lastSourceId) {\n      assert sourceId > lastSourceId : \"source ids out of order: lastSourceId=\" + lastSourceId + \" vs sourceId=\" + sourceId;\n      targetMapOffsets = ArrayUtil.grow(targetMapOffsets, sourceId + 1);\n      for (int i = lastSourceId + 1; i <= sourceId; i++) {\n        targetMapOffsets[i] = targetMapEndOffset;\n      }\n    } else {\n      assert sourceId == lastSourceId;\n    }\n\n    targetMap = ArrayUtil.grow(targetMap, targetMapEndOffset + 1);\n    targetMap[targetMapEndOffset] = wordId;\n    targetMapEndOffset++;\n\n    lastSourceId = sourceId;\n    lastWordId = wordId;\n  }\n\n","sourceOld":"  public void addMapping(int sourceId, int wordId) {\n    assert wordId > lastWordId : \"words out of order: \" + wordId + \" vs lastID: \" + lastWordId;\n    \n    if (sourceId > lastSourceId) {\n      assert sourceId > lastSourceId : \"source ids out of order: lastSourceId=\" + lastSourceId + \" vs sourceId=\" + sourceId;\n      targetMapOffsets = ArrayUtil.grow(targetMapOffsets, sourceId + 1);\n      for (int i = lastSourceId + 1; i <= sourceId; i++) {\n        targetMapOffsets[i] = targetMapEndOffset;\n      }\n    } else {\n      assert sourceId == lastSourceId;\n    }\n\n    targetMap = ArrayUtil.grow(targetMap, targetMapEndOffset + 1);\n    targetMap[targetMapEndOffset] = wordId;\n    targetMapEndOffset++;\n\n    lastSourceId = sourceId;\n    lastWordId = wordId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}