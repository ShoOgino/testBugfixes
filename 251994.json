{"path":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#release(Directory).mjava","commits":[{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#release(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see\n   * org.apache.solr.core.DirectoryFactory#release(org.apache.lucene.store.Directory\n   * )\n   */\n  @Override\n  public void release(Directory directory) throws IOException {\n    if (directory == null) {\n      throw new NullPointerException();\n    }\n    close(directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["058801f8673d53a5abac8088204860ec29a40f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#release(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#release(Directory).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   * \n   * @see\n   * org.apache.solr.core.DirectoryFactory#release(org.apache.lucene.store.Directory\n   * )\n   */\n  @Override\n  public void release(Directory directory) throws IOException {\n    if (directory == null) {\n      throw new NullPointerException();\n    }\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path + \" \" + (cacheValue.refCnt - 1) + \" \" + cacheValue.doneWithDir);\n\n      cacheValue.refCnt--;\n      \n      assert cacheValue.refCnt >= 0 : cacheValue.refCnt;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir && !closed) {\n        boolean cl = closeCacheValue(cacheValue);\n        if (cl) {\n          removeFromCache(cacheValue);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see\n   * org.apache.solr.core.DirectoryFactory#release(org.apache.lucene.store.Directory\n   * )\n   */\n  @Override\n  public void release(Directory directory) throws IOException {\n    if (directory == null) {\n      throw new NullPointerException();\n    }\n    close(directory);\n  }\n\n","bugFix":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#release(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#release(Directory).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see\n   * org.apache.solr.core.DirectoryFactory#release(org.apache.lucene.store.Directory\n   * )\n   */\n  @Override\n  public void release(Directory directory) throws IOException {\n    if (directory == null) {\n      throw new NullPointerException();\n    }\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path + \" \" + (cacheValue.refCnt - 1) + \" \" + cacheValue.doneWithDir);\n\n      cacheValue.refCnt--;\n\n      assert cacheValue.refCnt >= 0 : cacheValue.refCnt;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir && !closed) {\n        boolean cl = closeCacheValue(cacheValue);\n        if (cl) {\n          removeFromCache(cacheValue);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   * \n   * @see\n   * org.apache.solr.core.DirectoryFactory#release(org.apache.lucene.store.Directory\n   * )\n   */\n  @Override\n  public void release(Directory directory) throws IOException {\n    if (directory == null) {\n      throw new NullPointerException();\n    }\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n      \n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path + \" \" + (cacheValue.refCnt - 1) + \" \" + cacheValue.doneWithDir);\n\n      cacheValue.refCnt--;\n      \n      assert cacheValue.refCnt >= 0 : cacheValue.refCnt;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir && !closed) {\n        boolean cl = closeCacheValue(cacheValue);\n        if (cl) {\n          removeFromCache(cacheValue);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#release(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#release(Directory).mjava","sourceNew":"  /*\n   * (non-Javadoc)\n   *\n   * @see\n   * org.apache.solr.core.DirectoryFactory#release(org.apache.lucene.store.Directory\n   * )\n   */\n  @Override\n  public void release(Directory directory) throws IOException {\n    if (directory == null) {\n      throw new NullPointerException();\n    }\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      if (log.isDebugEnabled()) {\n        log.debug(\"Releasing directory: {} {} {}\", cacheValue.path, (cacheValue.refCnt - 1), cacheValue.doneWithDir);\n      }\n\n      cacheValue.refCnt--;\n\n      assert cacheValue.refCnt >= 0 : cacheValue.refCnt;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir && !closed) {\n        boolean cl = closeCacheValue(cacheValue);\n        if (cl) {\n          removeFromCache(cacheValue);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * (non-Javadoc)\n   *\n   * @see\n   * org.apache.solr.core.DirectoryFactory#release(org.apache.lucene.store.Directory\n   * )\n   */\n  @Override\n  public void release(Directory directory) throws IOException {\n    if (directory == null) {\n      throw new NullPointerException();\n    }\n    synchronized (this) {\n      // don't check if already closed here - we need to able to release\n      // while #close() waits.\n\n      CacheValue cacheValue = byDirectoryCache.get(directory);\n      if (cacheValue == null) {\n        throw new IllegalArgumentException(\"Unknown directory: \" + directory\n            + \" \" + byDirectoryCache);\n      }\n      log.debug(\"Releasing directory: \" + cacheValue.path + \" \" + (cacheValue.refCnt - 1) + \" \" + cacheValue.doneWithDir);\n\n      cacheValue.refCnt--;\n\n      assert cacheValue.refCnt >= 0 : cacheValue.refCnt;\n\n      if (cacheValue.refCnt == 0 && cacheValue.doneWithDir && !closed) {\n        boolean cl = closeCacheValue(cacheValue);\n        if (cl) {\n          removeFromCache(cacheValue);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"058801f8673d53a5abac8088204860ec29a40f0d":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["058801f8673d53a5abac8088204860ec29a40f0d"],"140be51d03394488536f4aacedace29f9b318347":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e22ffe8cc51a892ae103df018822d7873e901c2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"058801f8673d53a5abac8088204860ec29a40f0d":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["140be51d03394488536f4aacedace29f9b318347"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["058801f8673d53a5abac8088204860ec29a40f0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}