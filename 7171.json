{"path":"modules/analysis/stempel/src/java/org/egothor/stemmer/Trie#Trie(boolean,int,List[CharSequence],List[Row]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/java/org/egothor/stemmer/Trie#Trie(boolean,int,List[CharSequence],List[Row]).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Trie#Trie(boolean,int,List[CharSequence],List[Row]).mjava","sourceNew":"  /**\n   * Constructor for the Trie object.\n   * \n   * @param forward <tt>true</tt> if read left to right, <tt>false</tt> if read\n   *          right to left\n   * @param root index of the row that is the root node\n   * @param cmds the patch commands to store\n   * @param rows a Vector of Vectors. Each inner Vector is a node of this Trie\n   */\n  public Trie(boolean forward, int root, List<CharSequence> cmds, List<Row> rows) {\n    this.rows = rows;\n    this.cmds = cmds;\n    this.root = root;\n    this.forward = forward;\n  }\n\n","sourceOld":"  /**\n   * Constructor for the Trie object.\n   * \n   * @param forward <tt>true</tt> if read left to right, <tt>false</tt> if read\n   *          right to left\n   * @param root index of the row that is the root node\n   * @param cmds the patch commands to store\n   * @param rows a Vector of Vectors. Each inner Vector is a node of this Trie\n   */\n  public Trie(boolean forward, int root, List<CharSequence> cmds, List<Row> rows) {\n    this.rows = rows;\n    this.cmds = cmds;\n    this.root = root;\n    this.forward = forward;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Trie#Trie(boolean,int,List[CharSequence],List[Row]).mjava","pathOld":"modules/analysis/stempel/src/java/org/egothor/stemmer/Trie#Trie(boolean,int,List[CharSequence],List[Row]).mjava","sourceNew":"  /**\n   * Constructor for the Trie object.\n   * \n   * @param forward <tt>true</tt> if read left to right, <tt>false</tt> if read\n   *          right to left\n   * @param root index of the row that is the root node\n   * @param cmds the patch commands to store\n   * @param rows a Vector of Vectors. Each inner Vector is a node of this Trie\n   */\n  public Trie(boolean forward, int root, List<CharSequence> cmds, List<Row> rows) {\n    this.rows = rows;\n    this.cmds = cmds;\n    this.root = root;\n    this.forward = forward;\n  }\n\n","sourceOld":"  /**\n   * Constructor for the Trie object.\n   * \n   * @param forward <tt>true</tt> if read left to right, <tt>false</tt> if read\n   *          right to left\n   * @param root index of the row that is the root node\n   * @param cmds the patch commands to store\n   * @param rows a Vector of Vectors. Each inner Vector is a node of this Trie\n   */\n  public Trie(boolean forward, int root, List<CharSequence> cmds, List<Row> rows) {\n    this.rows = rows;\n    this.cmds = cmds;\n    this.root = root;\n    this.forward = forward;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}