{"path":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","commits":[{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"src/java/org/apache/lucene/document/Field#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\r\n  public final String toString() {\r\n    StringBuffer result = new StringBuffer();\r\n    if (isStored) {\r\n      result.append(\"stored\");\r\n      if (isCompressed)\r\n        result.append(\"/compressed\");\r\n      else\r\n        result.append(\"/uncompressed\");\r\n    }\r\n    if (isIndexed) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"indexed\");\r\n    }\r\n    if (isTokenized) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"tokenized\");\r\n    }\r\n    if (storeTermVector) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"termVector\");\r\n    }\r\n    if (storeOffsetWithTermVector) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"termVectorOffsets\");\r\n    }\r\n    if (storePositionWithTermVector) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"termVectorPosition\");\r\n    }\r\n    if (isBinary) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"binary\");\r\n    }\r\n    if (omitNorms) {\r\n      result.append(\",omitNorms\");\r\n    }\r\n    if (lazy){\r\n      result.append(\",lazy\");\r\n    }\r\n    result.append('<');\r\n    result.append(name);\r\n    result.append(':');\r\n\r\n    if (fieldsData != null && lazy == false) {\r\n      result.append(fieldsData);\r\n    }\r\n\r\n    result.append('>');\r\n    return result.toString();\r\n  }\r\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuffer result = new StringBuffer();\n    if (isStored) {\n      result.append(\"stored\");\n      if (isCompressed)\n        result.append(\"/compressed\");\n      else\n        result.append(\"/uncompressed\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) { \n      if (result.length() > 0) \n        result.append(\",\"); \n      result.append(\"termVectorOffsets\"); \n    } \n    if (storePositionWithTermVector) { \n      if (result.length() > 0) \n        result.append(\",\"); \n      result.append(\"termVectorPosition\"); \n    } \n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n    \n    if (fieldsData != null) {\n      result.append(fieldsData);\n    }\n    \n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuffer result = new StringBuffer();\n    if (isStored) {\n      result.append(\"stored\");\n      if (isCompressed)\n        result.append(\"/compressed\");\n      else\n        result.append(\"/uncompressed\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\r\n  public final String toString() {\r\n    StringBuffer result = new StringBuffer();\r\n    if (isStored) {\r\n      result.append(\"stored\");\r\n      if (isCompressed)\r\n        result.append(\"/compressed\");\r\n      else\r\n        result.append(\"/uncompressed\");\r\n    }\r\n    if (isIndexed) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"indexed\");\r\n    }\r\n    if (isTokenized) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"tokenized\");\r\n    }\r\n    if (storeTermVector) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"termVector\");\r\n    }\r\n    if (storeOffsetWithTermVector) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"termVectorOffsets\");\r\n    }\r\n    if (storePositionWithTermVector) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"termVectorPosition\");\r\n    }\r\n    if (isBinary) {\r\n      if (result.length() > 0)\r\n        result.append(\",\");\r\n      result.append(\"binary\");\r\n    }\r\n    if (omitNorms) {\r\n      result.append(\",omitNorms\");\r\n    }\r\n    if (lazy){\r\n      result.append(\",lazy\");\r\n    }\r\n    result.append('<');\r\n    result.append(name);\r\n    result.append(':');\r\n\r\n    if (fieldsData != null && lazy == false) {\r\n      result.append(fieldsData);\r\n    }\r\n\r\n    result.append('>');\r\n    return result.toString();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuffer result = new StringBuffer();\n    if (isStored) {\n      result.append(\"stored\");\n      if (isCompressed)\n        result.append(\"/compressed\");\n      else\n        result.append(\"/uncompressed\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTf) {\n      result.append(\",omitTf\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuffer result = new StringBuffer();\n    if (isStored) {\n      result.append(\"stored\");\n      if (isCompressed)\n        result.append(\"/compressed\");\n      else\n        result.append(\"/uncompressed\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuffer result = new StringBuffer();\n    if (isStored) {\n      result.append(\"stored\");\n      if (isCompressed)\n        result.append(\"/compressed\");\n      else\n        result.append(\"/uncompressed\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuffer result = new StringBuffer();\n    if (isStored) {\n      result.append(\"stored\");\n      if (isCompressed)\n        result.append(\"/compressed\");\n      else\n        result.append(\"/uncompressed\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTf) {\n      result.append(\",omitTf\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n      if (isCompressed)\n        result.append(\"/compressed\");\n      else\n        result.append(\"/uncompressed\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuffer result = new StringBuffer();\n    if (isStored) {\n      result.append(\"stored\");\n      if (isCompressed)\n        result.append(\"/compressed\");\n      else\n        result.append(\"/uncompressed\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0c804f7aa477229414a7e12882af490c241f64d","date":1254963299,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n      if (isCompressed)\n        result.append(\"/compressed\");\n      else\n        result.append(\"/uncompressed\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","pathOld":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/AbstractField#toString().mjava","sourceNew":null,"sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (isStored) {\n      result.append(\"stored\");\n    }\n    if (isIndexed) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n    }\n    if (isTokenized) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"tokenized\");\n    }\n    if (storeTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVector\");\n    }\n    if (storeOffsetWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorOffsets\");\n    }\n    if (storePositionWithTermVector) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"termVectorPosition\");\n    }\n    if (isBinary) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"binary\");\n    }\n    if (omitNorms) {\n      result.append(\",omitNorms\");\n    }\n    if (omitTermFreqAndPositions) {\n      result.append(\",omitTermFreqAndPositions\");\n    }\n    if (lazy){\n      result.append(\",lazy\");\n    }\n    result.append('<');\n    result.append(name);\n    result.append(':');\n\n    if (fieldsData != null && lazy == false) {\n      result.append(fieldsData);\n    }\n\n    result.append('>');\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["e0c804f7aa477229414a7e12882af490c241f64d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["2123bddbd65dea198cac380540636ce43a880403"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0c804f7aa477229414a7e12882af490c241f64d":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"2123bddbd65dea198cac380540636ce43a880403":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["e0c804f7aa477229414a7e12882af490c241f64d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["2123bddbd65dea198cac380540636ce43a880403"],"e0c804f7aa477229414a7e12882af490c241f64d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}