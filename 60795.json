{"path":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,Iterable[T]).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,Iterable[T]).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,Iterable[T]).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Iterable)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final Iterable<T> doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, (Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Iterable)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final Iterable<T> doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, (Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,Iterable[T]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter#[T-extends-IndexableField]_updateDocument(Term,Iterable[T]).mjava","sourceNew":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Iterable)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final Iterable<T> doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, (Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","sourceOld":"  /**\n   * Updates a document.\n   * @see IndexWriter#updateDocument(Term, Iterable)\n   */\n  public <T extends IndexableField> void updateDocument(Term t, final Iterable<T> doc) throws IOException {\n    if (doDocValues) {\n      randomPerDocFieldValues(r, (Document) doc);\n    }\n    if (r.nextInt(5) == 3) {\n      w.updateDocuments(t, new Iterable<Iterable<T>>() {\n\n        @Override\n        public Iterator<Iterable<T>> iterator() {\n          return new Iterator<Iterable<T>>() {\n            boolean done;\n            \n            @Override\n            public boolean hasNext() {\n              return !done;\n            }\n\n            @Override\n            public void remove() {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Iterable<T> next() {\n              if (done) {\n                throw new IllegalStateException();\n              }\n              done = true;\n              return doc;\n            }\n          };\n        }\n        });\n    } else {\n      w.updateDocument(t, doc);\n    }\n    maybeCommit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}