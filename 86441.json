{"path":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","commits":[{"id":"d7052f725a053aa55424f966831826f61b798bf1","date":1158258681,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"/dev/null","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4","date":1190750527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy());\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy());\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy());\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy());\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy());\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy());\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, true, new WhitespaceAnalyzer(), false);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(101));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(101));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.close();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(101));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(101));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.close();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(101));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(101));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.close();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(101));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(101));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.close();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(101));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(101));\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.close();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7052f725a053aa55424f966831826f61b798bf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["d7052f725a053aa55424f966831826f61b798bf1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"87c966e9308847938a7c905c2e46a56d8df788b8":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"d7052f725a053aa55424f966831826f61b798bf1":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7052f725a053aa55424f966831826f61b798bf1"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["87c966e9308847938a7c905c2e46a56d8df788b8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}