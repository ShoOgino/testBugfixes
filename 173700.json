{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c0b7c041280280c54063d34a48a0ee85332b1e3","date":1287540778,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~0.5 t:one~0.5) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer());\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c1fe1aedb70da4139fd9f2f7e92e572017fd083","date":1309827452,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","8c0b7c041280280c54063d34a48a0ee85332b1e3"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["8c0b7c041280280c54063d34a48a0ee85332b1e3"],"a3776dccca01c11e7046323cfad46a3b4a471233":["8c0b7c041280280c54063d34a48a0ee85332b1e3","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c0b7c041280280c54063d34a48a0ee85332b1e3":["d572389229127c297dd1fa5ce4758e1cec41e799"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d572389229127c297dd1fa5ce4758e1cec41e799","8c0b7c041280280c54063d34a48a0ee85332b1e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8c0b7c041280280c54063d34a48a0ee85332b1e3","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","2c1fe1aedb70da4139fd9f2f7e92e572017fd083","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8c0b7c041280280c54063d34a48a0ee85332b1e3":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}