{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<Affix>>(Version.LUCENE_CURRENT, 8, false);\n    suffixes = new CharArrayMap<List<Affix>>(Version.LUCENE_CURRENT, 8, false);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8f1276e0e817fd234b92c9ef95cb43e0466c3d","date":1393355889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<Affix>>(Version.LUCENE_CURRENT, 8, false);\n    suffixes = new CharArrayMap<List<Affix>>(Version.LUCENE_CURRENT, 8, false);\n    Map<String,Integer> seenPatterns = new HashMap<>();\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<Affix>>(Version.LUCENE_CURRENT, 8, false);\n    suffixes = new CharArrayMap<List<Affix>>(Version.LUCENE_CURRENT, 8, false);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c","date":1393521555,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<Character>>(Version.LUCENE_CURRENT, 8, false);\n    suffixes = new CharArrayMap<List<Character>>(Version.LUCENE_CURRENT, 8, false);\n    Map<String,Integer> seenPatterns = new HashMap<>();\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<Affix>>(Version.LUCENE_CURRENT, 8, false);\n    suffixes = new CharArrayMap<List<Affix>>(Version.LUCENE_CURRENT, 8, false);\n    Map<String,Integer> seenPatterns = new HashMap<>();\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26c5ee01d8657497f54f46447208768acc949d51","date":1393523610,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException, ParseException {\n    TreeMap<String, List<Character>> prefixes = new TreeMap<>();\n    TreeMap<String, List<Character>> suffixes = new TreeMap<>();\n    Map<String,Integer> seenPatterns = new HashMap<>();\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    \n    this.prefixes = affixFST(prefixes);\n    this.suffixes = affixFST(suffixes);\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<Character>>(Version.LUCENE_CURRENT, 8, false);\n    suffixes = new CharArrayMap<List<Character>>(Version.LUCENE_CURRENT, 8, false);\n    Map<String,Integer> seenPatterns = new HashMap<>();\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["79cce2ac13867412e1a9dfd8c8df36833fba0d6a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#readAffixFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException, ParseException {\n    TreeMap<String, List<Character>> prefixes = new TreeMap<>();\n    TreeMap<String, List<Character>> suffixes = new TreeMap<>();\n    Map<String,Integer> seenPatterns = new HashMap<>();\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    \n    this.prefixes = affixFST(prefixes);\n    this.suffixes = affixFST(suffixes);\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException, ParseException {\n    TreeMap<String, List<Character>> prefixes = new TreeMap<>();\n    TreeMap<String, List<Character>> suffixes = new TreeMap<>();\n    Map<String,Integer> seenPatterns = new HashMap<>();\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, seenPatterns);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    \n    this.prefixes = affixFST(prefixes);\n    this.suffixes = affixFST(suffixes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"26c5ee01d8657497f54f46447208768acc949d51":["e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["26c5ee01d8657497f54f46447208768acc949d51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c":["9e8f1276e0e817fd234b92c9ef95cb43e0466c3d"],"9e8f1276e0e817fd234b92c9ef95cb43e0466c3d":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"26c5ee01d8657497f54f46447208768acc949d51":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c":["26c5ee01d8657497f54f46447208768acc949d51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e8f1276e0e817fd234b92c9ef95cb43e0466c3d":["e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["9e8f1276e0e817fd234b92c9ef95cb43e0466c3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}