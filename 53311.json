{"path":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#printSeekState(PrintStream).mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#printSeekState(PrintStream).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#printSeekState(PrintStream).mjava","sourceNew":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        IDVersionSegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.bytes, 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.bytes[f.prefix-1]&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.bytes[f.prefix-1]&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          Pair<BytesRef,Long> output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.output1.bytes, output.output1.offset, output.output1.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        IDVersionSegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.bytes, 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.bytes[f.prefix-1]&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.bytes[f.prefix-1]&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          Pair<BytesRef,Long> output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.output1.bytes, output.output1.offset, output.output1.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#printSeekState(PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        IDVersionSegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.bytes, 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.bytes[f.prefix-1]&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.bytes[f.prefix-1]&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          Pair<BytesRef,Long> output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.output1.bytes, output.output1.offset, output.output1.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#printSeekState(PrintStream).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#printSeekState(PrintStream).mjava","sourceNew":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        IDVersionSegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.bytes(), 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.byteAt(f.prefix-1)&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.byteAt(f.prefix-1)&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          Pair<BytesRef,Long> output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.output1.bytes, output.output1.offset, output.output1.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        IDVersionSegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.bytes, 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.bytes[f.prefix-1]&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.bytes[f.prefix-1]&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          Pair<BytesRef,Long> output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.output1.bytes, output.output1.offset, output.output1.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","bugFix":["6256acedd658c13275a01e4ba106a621956a22f6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#printSeekState(PrintStream).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#printSeekState(PrintStream).mjava","sourceNew":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        IDVersionSegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.bytes(), 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label() != (term.byteAt(f.prefix-1)&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label() + \" vs term byte=\" + (char) (term.byteAt(f.prefix-1)&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          Pair<BytesRef,Long> output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.output1.bytes, output.output1.offset, output.output1.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        IDVersionSegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.bytes(), 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.byteAt(f.prefix-1)&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.byteAt(f.prefix-1)&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          Pair<BytesRef,Long> output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.output1.bytes, output.output1.offset, output.output1.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#printSeekState(PrintStream).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum#printSeekState(PrintStream).mjava","sourceNew":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        IDVersionSegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.bytes(), 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label() != (term.byteAt(f.prefix-1)&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label() + \" vs term byte=\" + (char) (term.byteAt(f.prefix-1)&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          Pair<BytesRef,Long> output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.output1.bytes, output.output1.offset, output.output1.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unused\")\n  private void printSeekState(PrintStream out) throws IOException {\n    if (currentFrame == staticFrame) {\n      out.println(\"  no prior seek\");\n    } else {\n      out.println(\"  prior seek state:\");\n      int ord = 0;\n      boolean isSeekFrame = true;\n      while(true) {\n        IDVersionSegmentTermsEnumFrame f = getFrame(ord);\n        assert f != null;\n        final BytesRef prefix = new BytesRef(term.bytes(), 0, f.prefix);\n        if (f.nextEnt == -1) {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek)\" : \"(next)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        } else {\n          out.println(\"    frame \" + (isSeekFrame ? \"(seek, loaded)\" : \"(next, loaded)\") + \" ord=\" + ord + \" fp=\" + f.fp + (f.isFloor ? (\" (fpOrig=\" + f.fpOrig + \")\") : \"\") + \" prefixLen=\" + f.prefix + \" prefix=\" + brToString(prefix) + \" nextEnt=\" + f.nextEnt + (f.nextEnt == -1 ? \"\" : (\" (of \" + f.entCount + \")\")) + \" hasTerms=\" + f.hasTerms + \" isFloor=\" + f.isFloor + \" code=\" + ((f.fp<<VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) + (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) + (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0)) + \" lastSubFP=\" + f.lastSubFP + \" isLastInFloor=\" + f.isLastInFloor + \" mdUpto=\" + f.metaDataUpto + \" tbOrd=\" + f.getTermBlockOrd());\n        }\n        if (fr.index != null) {\n          assert !isSeekFrame || f.arc != null: \"isSeekFrame=\" + isSeekFrame + \" f.arc=\" + f.arc;\n          if (f.prefix > 0 && isSeekFrame && f.arc.label != (term.byteAt(f.prefix-1)&0xFF)) {\n            out.println(\"      broken seek state: arc.label=\" + (char) f.arc.label + \" vs term byte=\" + (char) (term.byteAt(f.prefix-1)&0xFF));\n            throw new RuntimeException(\"seek state is broken\");\n          }\n          Pair<BytesRef,Long> output = Util.get(fr.index, prefix);\n          if (output == null) {\n            out.println(\"      broken seek state: prefix is not final in index\");\n            throw new RuntimeException(\"seek state is broken\");\n          } else if (isSeekFrame && !f.isFloor) {\n            final ByteArrayDataInput reader = new ByteArrayDataInput(output.output1.bytes, output.output1.offset, output.output1.length);\n            final long codeOrig = reader.readVLong();\n            final long code = (f.fp << VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS) | (f.hasTerms ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS:0) | (f.isFloor ? VersionBlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR:0);\n            if (codeOrig != code) {\n              out.println(\"      broken seek state: output code=\" + codeOrig + \" doesn't match frame code=\" + code);\n              throw new RuntimeException(\"seek state is broken\");\n            }\n          }\n        }\n        if (f == currentFrame) {\n          break;\n        }\n        if (f.prefix == validIndexPrefix) {\n          isSeekFrame = false;\n        }\n        ord++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"f8061ddd97f3352007d927dae445884a6f3d857b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}