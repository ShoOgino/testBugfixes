{"path":"src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","commits":[{"id":"71776a043ec5499f36208dcdf114f371cbbb27f5","date":1132623984,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invoked, by DocumentWriter, before indexing a Field instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * Field instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across Field instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across Field instance boundaries.\n   *\n   * @param fieldName Field name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName)\n  {\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d5ab829b698f45766ec7530acfe0e3a40eb547","date":1132684505,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","pathOld":"src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","sourceNew":"  /**\n   * Invoked before indexing a Field instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * Field instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across Field instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across Field instance boundaries.\n   *\n   * @param fieldName Field name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName)\n  {\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Invoked, by DocumentWriter, before indexing a Field instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * Field instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across Field instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across Field instance boundaries.\n   *\n   * @param fieldName Field name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName)\n  {\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","pathOld":"src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","sourceNew":"  /**\n   * Invoked before indexing a Fieldable instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * Fieldable instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across Fieldable instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across Fieldable instance boundaries.\n   *\n   * @param fieldName Fieldable name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName)\n  {\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Invoked before indexing a Field instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * Field instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across Field instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across Field instance boundaries.\n   *\n   * @param fieldName Field name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName)\n  {\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","pathOld":"src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","sourceNew":"  /**\n   * Invoked before indexing a Fieldable instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * Fieldable instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across Fieldable instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across Fieldable instance boundaries.\n   *\n   * @param fieldName Fieldable name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName) {\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Invoked before indexing a Fieldable instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * Fieldable instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across Fieldable instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across Fieldable instance boundaries.\n   *\n   * @param fieldName Fieldable name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName)\n  {\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Invoked before indexing a Fieldable instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * Fieldable instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across Fieldable instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across Fieldable instance boundaries.\n   *\n   * @param fieldName Fieldable name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName) {\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71776a043ec5499f36208dcdf114f371cbbb27f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a4d5ab829b698f45766ec7530acfe0e3a40eb547":["71776a043ec5499f36208dcdf114f371cbbb27f5"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["a4d5ab829b698f45766ec7530acfe0e3a40eb547"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"71776a043ec5499f36208dcdf114f371cbbb27f5":["a4d5ab829b698f45766ec7530acfe0e3a40eb547"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71776a043ec5499f36208dcdf114f371cbbb27f5"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a4d5ab829b698f45766ec7530acfe0e3a40eb547":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}