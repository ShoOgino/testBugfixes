{"path":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","commits":[{"id":"635548f88824977119a14d0594bf158e75cb2b48","date":1328965599,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterIndexReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    boolean fail = false;\n    for (Method m : FilterAtomicReader.class.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      String name = m.getName();\n      if (declaringClass != FilterAtomicReader.class && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by FilterIndexReader: \" + name);\n        fail = true;\n      }\n    }\n    assertFalse(\"FilterIndexReader overrides (or not) some problematic methods; see log above\", fail);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    boolean fail = false;\n    for (Method m : FilterIndexReader.class.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      String name = m.getName();\n      if (declaringClass != FilterIndexReader.class && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by FilterIndexReader: \" + name);\n        fail = true;\n      }\n    }\n    assertFalse(\"FilterIndexReader overrides (or not) some problematic methods; see log above\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c35c9bf5db9416d4ae2f56567931bfcef588b46","date":1330259234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFieldsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    boolean fail = false;\n    for (Method m : FilterAtomicReader.class.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      String name = m.getName();\n      if (declaringClass != FilterAtomicReader.class && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by FilterIndexReader: \" + name);\n        fail = true;\n      }\n    }\n    assertFalse(\"FilterIndexReader overrides (or not) some problematic methods; see log above\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFieldsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    boolean fail = false;\n    for (Method m : FilterAtomicReader.class.getMethods()) {\n      int mods = m.getModifiers();\n      if (Modifier.isStatic(mods) || Modifier.isFinal(mods) || m.isSynthetic()) {\n        continue;\n      }\n      Class<?> declaringClass = m.getDeclaringClass();\n      String name = m.getName();\n      if (declaringClass != FilterAtomicReader.class && declaringClass != Object.class) {\n        System.err.println(\"method is not overridden by FilterIndexReader: \" + name);\n        fail = true;\n      }\n    }\n    assertFalse(\"FilterIndexReader overrides (or not) some problematic methods; see log above\", fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFieldsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFieldsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFieldsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3251bdaf728baf81f779183e464984bc769ed9c7","date":1400494940,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    // nocommit this gets angry because I override testExact but this is important!!\n    //checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20","date":1400712483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    // nocommit this gets angry because I override testExact but this is important!!\n    //checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterLeafReader.class);\n    checkOverrideMethods(FilterLeafReader.FilterFields.class);\n    checkOverrideMethods(FilterLeafReader.FilterTerms.class);\n    checkOverrideMethods(FilterLeafReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterLeafReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterLeafReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterAtomicReader.class);\n    checkOverrideMethods(FilterAtomicReader.FilterFields.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTerms.class);\n    checkOverrideMethods(FilterAtomicReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterAtomicReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testOverrideMethods().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testOverrideMethods().mjava","sourceNew":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterLeafReader.class);\n    checkOverrideMethods(FilterLeafReader.FilterFields.class);\n    checkOverrideMethods(FilterLeafReader.FilterTerms.class);\n    checkOverrideMethods(FilterLeafReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterLeafReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterLeafReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","sourceOld":"  public void testOverrideMethods() throws Exception {\n    checkOverrideMethods(FilterLeafReader.class);\n    checkOverrideMethods(FilterLeafReader.FilterFields.class);\n    checkOverrideMethods(FilterLeafReader.FilterTerms.class);\n    checkOverrideMethods(FilterLeafReader.FilterTermsEnum.class);\n    checkOverrideMethods(FilterLeafReader.FilterDocsEnum.class);\n    checkOverrideMethods(FilterLeafReader.FilterDocsAndPositionsEnum.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":["3251bdaf728baf81f779183e464984bc769ed9c7"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["5c35c9bf5db9416d4ae2f56567931bfcef588b46","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"5c35c9bf5db9416d4ae2f56567931bfcef588b46":["635548f88824977119a14d0594bf158e75cb2b48"],"635548f88824977119a14d0594bf158e75cb2b48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["635548f88824977119a14d0594bf158e75cb2b48","5c35c9bf5db9416d4ae2f56567931bfcef588b46"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["5c35c9bf5db9416d4ae2f56567931bfcef588b46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["5c35c9bf5db9416d4ae2f56567931bfcef588b46","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"3251bdaf728baf81f779183e464984bc769ed9c7":["fb07ab105350b80ed9d63ca64b117084ed7391bc"]},"commit2Childs":{"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"5c35c9bf5db9416d4ae2f56567931bfcef588b46":["c7869f64c874ebf7f317d22c00baf2b6857797a6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"635548f88824977119a14d0594bf158e75cb2b48":["5c35c9bf5db9416d4ae2f56567931bfcef588b46","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","c9fb5f46e264daf5ba3860defe623a89d202dd87","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","3251bdaf728baf81f779183e464984bc769ed9c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["635548f88824977119a14d0594bf158e75cb2b48"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"3251bdaf728baf81f779183e464984bc769ed9c7":["4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20","c7869f64c874ebf7f317d22c00baf2b6857797a6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}