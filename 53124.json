{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","commits":[{"id":"62cc423073d23f01208c6cf85844dedd80011121","date":1454731549,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":1,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoUtils.mortonUnhashLon(start);\n    final double minLat = GeoUtils.mortonUnhashLat(start);\n    final double maxLon = GeoUtils.mortonUnhashLon(end);\n    final double maxLat = GeoUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a093d23e938d132b81b5f2de3d6b168afe3608e","date":1455076308,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointNumericTermsEnum#relateAndRecurse(long,long,short).mjava","sourceNew":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * recurse to higher level precision cells to find ranges along the space-filling curve that fall within the\n   * query box\n   *\n   * @param start starting value on the space-filling curve for a cell at a given res\n   * @param end ending value on the space-filling curve for a cell at a given res\n   * @param res spatial res represented as a bit shift (MSB is lower res)\n   */\n  private void relateAndRecurse(final long start, final long end, final short res) {\n    final double minLon = GeoEncodingUtils.mortonUnhashLon(start);\n    final double minLat = GeoEncodingUtils.mortonUnhashLat(start);\n    final double maxLon = GeoEncodingUtils.mortonUnhashLon(end);\n    final double maxLat = GeoEncodingUtils.mortonUnhashLat(end);\n\n    final short level = (short)((GeoEncodingUtils.BITS<<1)-res>>>1);\n\n    // if cell is within and a factor of the precision step, or it crosses the edge of the shape add the range\n    final boolean within = res % GeoPointField.PRECISION_STEP == 0 && relationImpl.cellWithin(minLon, minLat, maxLon, maxLat);\n    if (within || (level == DETAIL_LEVEL && relationImpl.cellIntersectsShape(minLon, minLat, maxLon, maxLat))) {\n      final short nextRes = (short)(res-1);\n      if (nextRes % GeoPointField.PRECISION_STEP == 0) {\n        rangeBounds.add(new Range(start, nextRes, !within));\n        rangeBounds.add(new Range(start|(1L<<nextRes), nextRes, !within));\n      } else {\n        rangeBounds.add(new Range(start, res, !within));\n      }\n    } else if (level < DETAIL_LEVEL && relationImpl.cellIntersectsMBR(minLon, minLat, maxLon, maxLat)) {\n      computeRange(start, (short) (res - 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a207d19eac354d649c3f0e2cce070017c78125e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","62cc423073d23f01208c6cf85844dedd80011121"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","62cc423073d23f01208c6cf85844dedd80011121"],"62cc423073d23f01208c6cf85844dedd80011121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["5a207d19eac354d649c3f0e2cce070017c78125e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a093d23e938d132b81b5f2de3d6b168afe3608e"]},"commit2Childs":{"5a207d19eac354d649c3f0e2cce070017c78125e":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","62cc423073d23f01208c6cf85844dedd80011121"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"62cc423073d23f01208c6cf85844dedd80011121":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}