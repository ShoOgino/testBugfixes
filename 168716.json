{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","commits":[{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029","date":1464287977,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    numShards = random().nextInt(2) + 1;  //1 - 3\n    numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n    configureCluster(numShards)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", numShards, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","bugFix":["b940572a59da1b42b6c20ab5278155b12816807a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    numShards = random().nextInt(2) + 1;  //1 - 3\n    numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n    configureCluster(numShards)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", numShards, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    numShards = random().nextInt(2) + 1;  //1 - 3\n    numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n    configureCluster(numShards)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", numShards, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if(useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1).process(cluster.getSolrClient());\n  AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(), false, true, DEFAULT_TIMEOUT);\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n}\n\n","sourceOld":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    numShards = random().nextInt(2) + 1;  //1 - 3\n    numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n    configureCluster(numShards)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", numShards, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if(useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1).process(cluster.getSolrClient());\n  AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(), false, true, DEFAULT_TIMEOUT);\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n}\n\n","sourceOld":"  @BeforeClass\n  public static void configureCluster() throws Exception {\n    numShards = random().nextInt(2) + 1;  //1 - 3\n    numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n    configureCluster(numShards)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", numShards, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(), false, true, TIMEOUT);\n\n    zkHost = cluster.getZkServer().getZkAddress();\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af87133b5bdb246b06c4321f36cd76d947357ab6","date":1482195253,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if (useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1).process(cluster.getSolrClient());\n  AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n      false, true, DEFAULT_TIMEOUT);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n}\n\n","sourceOld":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if(useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1).process(cluster.getSolrClient());\n  AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(), false, true, DEFAULT_TIMEOUT);\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n}\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if (useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1).process(cluster.getSolrClient());\n  AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n      false, true, DEFAULT_TIMEOUT);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n}\n\n","sourceOld":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if(useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1).process(cluster.getSolrClient());\n  AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(), false, true, DEFAULT_TIMEOUT);\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if (useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1).process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n}\n\n","sourceOld":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if (useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1).process(cluster.getSolrClient());\n  AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n      false, true, DEFAULT_TIMEOUT);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n}\n\n","bugFix":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839","date":1575929518,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if (useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1)\n      .process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n\n  // Set up multi-replica collection\n  if (useAlias) {\n    collection = MULTI_REPLICA_COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = MULTI_REPLICA_COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1, 1, 1)\n      .setMaxShardsPerNode(numShards * 3)\n      .process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards * 3);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(MULTI_REPLICA_COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n}\n\n","sourceOld":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if (useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1).process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if (useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1)\n      .process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n\n  // Set up multi-replica collection\n  if (useAlias) {\n    collection = MULTI_REPLICA_COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = MULTI_REPLICA_COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1, 1, 1)\n      .setMaxShardsPerNode(numShards * 3)\n      .process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards * 3);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(MULTI_REPLICA_COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n}\n\n","sourceOld":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if (useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1).process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#configureCluster().mjava","sourceNew":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if (useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1)\n      .process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n\n  // Set up multi-replica collection\n  if (useAlias) {\n    collection = MULTI_REPLICA_COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = MULTI_REPLICA_COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1, 1, 1)\n      .process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards * 3);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(MULTI_REPLICA_COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n}\n\n","sourceOld":"@BeforeClass\npublic static void configureCluster() throws Exception {\n  numShards = random().nextInt(2) + 1;  //1 - 3\n  numWorkers = numShards > 2 ? random().nextInt(numShards - 1) + 1 : numShards;\n  configureCluster(numShards)\n      .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n      .configure();\n\n  String collection;\n  useAlias = random().nextBoolean();\n  if (useAlias) {\n    collection = COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1)\n      .process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n\n  zkHost = cluster.getZkServer().getZkAddress();\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n\n  // Set up multi-replica collection\n  if (useAlias) {\n    collection = MULTI_REPLICA_COLLECTIONORALIAS + \"_collection\";\n  } else {\n    collection = MULTI_REPLICA_COLLECTIONORALIAS;\n  }\n  CollectionAdminRequest.createCollection(collection, \"conf\", numShards, 1, 1, 1)\n      .setMaxShardsPerNode(numShards * 3)\n      .process(cluster.getSolrClient());\n  cluster.waitForActiveCollection(collection, numShards, numShards * 3);\n  if (useAlias) {\n    CollectionAdminRequest.createAlias(MULTI_REPLICA_COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n  }\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["af87133b5bdb246b06c4321f36cd76d947357ab6"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b940572a59da1b42b6c20ab5278155b12816807a"],"83870855d82aba6819217abeff5a40779dbb28b4":["73450c0955930295d34703e7ddbfc6973b7a121a","c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"b940572a59da1b42b6c20ab5278155b12816807a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["8c969f15cd04d31e520319c619a445ae21f02d72"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b940572a59da1b42b6c20ab5278155b12816807a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","af87133b5bdb246b06c4321f36cd76d947357ab6"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029":["73450c0955930295d34703e7ddbfc6973b7a121a"],"8c969f15cd04d31e520319c619a445ae21f02d72":["c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["993b0c7dda6341b437fe5685d35c6cc35eaac420","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"73450c0955930295d34703e7ddbfc6973b7a121a":["83870855d82aba6819217abeff5a40779dbb28b4","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"af87133b5bdb246b06c4321f36cd76d947357ab6":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["af87133b5bdb246b06c4321f36cd76d947357ab6","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["993b0c7dda6341b437fe5685d35c6cc35eaac420","e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","83870855d82aba6819217abeff5a40779dbb28b4","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}