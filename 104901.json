{"path":"src/test/org/apache/solr/BasicFunctionalityTest#testIgnoredFields().mjava","commits":[{"id":"a387fc4d48708013611d08ecb03b4d49efe249d6","date":1178647412,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testIgnoredFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testIgnoredFields() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");\n    assertU(\"adding doc with ignored field\",\n            adoc(\"id\", \"42\", \"foo_ignored\", \"blah blah\"));\n    assertU(\"commit\",\n            commit());\n    \n    // :TODO: the behavior of querying on an unindexed field should be better specified in the future.\n    assertQ(\"query with ignored field\",\n            req(\"bar_ignored:yo id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83ebb91302ec9108d99d52387138c77ed0b59183","date":1220281619,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#testIgnoredFields().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testIgnoredFields().mjava","sourceNew":"  // tests the performance of dynamic field creation and\n  // field property testing.\n  /***\n  public void testFieldPerf() {\n    IndexSchema schema = h.getCore().getSchema();\n    SchemaField[] fields = schema.getDynamicFieldPrototypes();\n    boolean createNew = false;\n\n    long start = System.currentTimeMillis();\n    int ret = 0;\n    for (int i=0; i<10000000; i++) {\n      for (SchemaField f : fields) {\n        if (createNew) f = new SchemaField(f, \"fakename\");\n        if (f.indexed()) ret += 1;\n        if (f.isCompressed()) ret += 2;\n        if (f.isRequired()) ret += 3;\n        if (f.multiValued()) ret += 4;\n        if (f.omitNorms()) ret += 5;\n        if (f.sortMissingFirst()) ret += 6;\n        if (f.sortMissingLast())ret += 7;\n        if (f.stored()) ret += 8;\n        if (f.storeTermOffsets()) ret += 9;\n        if (f.storeTermPositions()) ret += 10;\n        if (f.storeTermVector()) ret += 11;\n      }\n    }\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\" + ret + \" time=\"+ (end-start));\n  }\n  ***/\n  \n  public void testIgnoredFields() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");\n    assertU(\"adding doc with ignored field\",\n            adoc(\"id\", \"42\", \"foo_ignored\", \"blah blah\"));\n    assertU(\"commit\",\n            commit());\n    \n    // :TODO: the behavior of querying on an unindexed field should be better specified in the future.\n    assertQ(\"query with ignored field\",\n            req(\"bar_ignored:yo id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n  }\n\n","sourceOld":"  public void testIgnoredFields() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");\n    assertU(\"adding doc with ignored field\",\n            adoc(\"id\", \"42\", \"foo_ignored\", \"blah blah\"));\n    assertU(\"commit\",\n            commit());\n    \n    // :TODO: the behavior of querying on an unindexed field should be better specified in the future.\n    assertQ(\"query with ignored field\",\n            req(\"bar_ignored:yo id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testIgnoredFields().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testIgnoredFields().mjava","sourceNew":"  // tests the performance of dynamic field creation and\n  // field property testing.\n  /***\n  public void testFieldPerf() {\n    IndexSchema schema = h.getCore().getSchema();\n    SchemaField[] fields = schema.getDynamicFieldPrototypes();\n    boolean createNew = false;\n\n    long start = System.currentTimeMillis();\n    int ret = 0;\n    for (int i=0; i<10000000; i++) {\n      for (SchemaField f : fields) {\n        if (createNew) f = new SchemaField(f, \"fakename\");\n        if (f.indexed()) ret += 1;\n        if (f.isCompressed()) ret += 2;\n        if (f.isRequired()) ret += 3;\n        if (f.multiValued()) ret += 4;\n        if (f.omitNorms()) ret += 5;\n        if (f.sortMissingFirst()) ret += 6;\n        if (f.sortMissingLast())ret += 7;\n        if (f.stored()) ret += 8;\n        if (f.storeTermOffsets()) ret += 9;\n        if (f.storeTermPositions()) ret += 10;\n        if (f.storeTermVector()) ret += 11;\n      }\n    }\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\" + ret + \" time=\"+ (end-start));\n  }\n  ***/\n  \n  public void testIgnoredFields() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");\n    assertU(\"adding doc with ignored field\",\n            adoc(\"id\", \"42\", \"foo_ignored\", \"blah blah\"));\n    assertU(\"commit\",\n            commit());\n    \n    // :TODO: the behavior of querying on an unindexed field should be better specified in the future.\n    assertQ(\"query with ignored field\",\n            req(\"bar_ignored:yo id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n  }\n\n","sourceOld":"  // tests the performance of dynamic field creation and\n  // field property testing.\n  /***\n  public void testFieldPerf() {\n    IndexSchema schema = h.getCore().getSchema();\n    SchemaField[] fields = schema.getDynamicFieldPrototypes();\n    boolean createNew = false;\n\n    long start = System.currentTimeMillis();\n    int ret = 0;\n    for (int i=0; i<10000000; i++) {\n      for (SchemaField f : fields) {\n        if (createNew) f = new SchemaField(f, \"fakename\");\n        if (f.indexed()) ret += 1;\n        if (f.isCompressed()) ret += 2;\n        if (f.isRequired()) ret += 3;\n        if (f.multiValued()) ret += 4;\n        if (f.omitNorms()) ret += 5;\n        if (f.sortMissingFirst()) ret += 6;\n        if (f.sortMissingLast())ret += 7;\n        if (f.stored()) ret += 8;\n        if (f.storeTermOffsets()) ret += 9;\n        if (f.storeTermPositions()) ret += 10;\n        if (f.storeTermVector()) ret += 11;\n      }\n    }\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\" + ret + \" time=\"+ (end-start));\n  }\n  ***/\n  \n  public void testIgnoredFields() throws Exception {\n    lrf.args.put(\"version\",\"2.0\");\n    assertU(\"adding doc with ignored field\",\n            adoc(\"id\", \"42\", \"foo_ignored\", \"blah blah\"));\n    assertU(\"commit\",\n            commit());\n    \n    // :TODO: the behavior of querying on an unindexed field should be better specified in the future.\n    assertQ(\"query with ignored field\",\n            req(\"bar_ignored:yo id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a387fc4d48708013611d08ecb03b4d49efe249d6":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"83ebb91302ec9108d99d52387138c77ed0b59183":["a387fc4d48708013611d08ecb03b4d49efe249d6"],"ad94625fb8d088209f46650c8097196fec67f00c":["83ebb91302ec9108d99d52387138c77ed0b59183"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a387fc4d48708013611d08ecb03b4d49efe249d6"],"a387fc4d48708013611d08ecb03b4d49efe249d6":["83ebb91302ec9108d99d52387138c77ed0b59183"],"83ebb91302ec9108d99d52387138c77ed0b59183":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}