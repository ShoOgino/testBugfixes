{"path":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      totalHits++;\n      max = Math.max(max, scorer.freq());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      totalHits++;\n      max = Math.max(max, scorer.freq());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      totalHits++;\n      max = Math.max(max, scorer.freq());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      totalHits++;\n      max = Math.max(max, scorer.freq());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      totalHits++;\n      max = Math.max(max, scorer.freq());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      totalHits++;\n      max = Math.max(max, scorer.freq());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      totalHits++;\n      if (scorer instanceof SloppyPhraseScorer)\n        max = Math.max(max, ((SloppyPhraseScorer)scorer).freq());\n      else\n        max = Math.max(max, ((ExactPhraseScorer)scorer).freq());\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      totalHits++;\n      max = Math.max(max, scorer.freq());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery.MaxFreqCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      totalHits++;\n      PhraseScorer ps = (PhraseScorer) scorer;\n      float freq = ps.matcher.sloppyWeight();\n      while (ps.matcher.nextMatch()) {\n        freq += ps.matcher.sloppyWeight();\n      }\n      max = Math.max(max, freq);\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      totalHits++;\n      if (scorer instanceof SloppyPhraseScorer)\n        max = Math.max(max, ((SloppyPhraseScorer)scorer).freq());\n      else\n        max = Math.max(max, ((ExactPhraseScorer)scorer).freq());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["3b11b9d5eaf9707760ca5151530830a825197023"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}